// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"system/biz/dal/db/ent/dictionary"
	"system/biz/dal/db/ent/dictionarydetail"
	"system/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictionaryUpdate is the builder for updating Dictionary entities.
type DictionaryUpdate struct {
	config
	hooks    []Hook
	mutation *DictionaryMutation
}

// Where appends a list predicates to the DictionaryUpdate builder.
func (_u *DictionaryUpdate) Where(ps ...predicate.Dictionary) *DictionaryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DictionaryUpdate) SetUpdatedAt(v time.Time) *DictionaryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *DictionaryUpdate) ClearUpdatedAt() *DictionaryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *DictionaryUpdate) SetDelete(v int64) *DictionaryUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *DictionaryUpdate) SetNillableDelete(v *int64) *DictionaryUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *DictionaryUpdate) AddDelete(v int64) *DictionaryUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *DictionaryUpdate) ClearDelete() *DictionaryUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *DictionaryUpdate) SetCreatedID(v int64) *DictionaryUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *DictionaryUpdate) SetNillableCreatedID(v *int64) *DictionaryUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *DictionaryUpdate) AddCreatedID(v int64) *DictionaryUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *DictionaryUpdate) ClearCreatedID() *DictionaryUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *DictionaryUpdate) SetStatus(v int64) *DictionaryUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DictionaryUpdate) SetNillableStatus(v *int64) *DictionaryUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *DictionaryUpdate) AddStatus(v int64) *DictionaryUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *DictionaryUpdate) ClearStatus() *DictionaryUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetTitle sets the "title" field.
func (_u *DictionaryUpdate) SetTitle(v string) *DictionaryUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *DictionaryUpdate) SetNillableTitle(v *string) *DictionaryUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *DictionaryUpdate) SetName(v string) *DictionaryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *DictionaryUpdate) SetNillableName(v *string) *DictionaryUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *DictionaryUpdate) SetDescription(v string) *DictionaryUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *DictionaryUpdate) SetNillableDescription(v *string) *DictionaryUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// AddDictionaryDetailIDs adds the "dictionary_details" edge to the DictionaryDetail entity by IDs.
func (_u *DictionaryUpdate) AddDictionaryDetailIDs(ids ...int64) *DictionaryUpdate {
	_u.mutation.AddDictionaryDetailIDs(ids...)
	return _u
}

// AddDictionaryDetails adds the "dictionary_details" edges to the DictionaryDetail entity.
func (_u *DictionaryUpdate) AddDictionaryDetails(v ...*DictionaryDetail) *DictionaryUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDictionaryDetailIDs(ids...)
}

// Mutation returns the DictionaryMutation object of the builder.
func (_u *DictionaryUpdate) Mutation() *DictionaryMutation {
	return _u.mutation
}

// ClearDictionaryDetails clears all "dictionary_details" edges to the DictionaryDetail entity.
func (_u *DictionaryUpdate) ClearDictionaryDetails() *DictionaryUpdate {
	_u.mutation.ClearDictionaryDetails()
	return _u
}

// RemoveDictionaryDetailIDs removes the "dictionary_details" edge to DictionaryDetail entities by IDs.
func (_u *DictionaryUpdate) RemoveDictionaryDetailIDs(ids ...int64) *DictionaryUpdate {
	_u.mutation.RemoveDictionaryDetailIDs(ids...)
	return _u
}

// RemoveDictionaryDetails removes "dictionary_details" edges to DictionaryDetail entities.
func (_u *DictionaryUpdate) RemoveDictionaryDetails(v ...*DictionaryDetail) *DictionaryUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDictionaryDetailIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DictionaryUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DictionaryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DictionaryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DictionaryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DictionaryUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := dictionary.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *DictionaryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(dictionary.Table, dictionary.Columns, sqlgraph.NewFieldSpec(dictionary.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(dictionary.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dictionary.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(dictionary.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(dictionary.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(dictionary.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(dictionary.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(dictionary.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(dictionary.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(dictionary.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(dictionary.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(dictionary.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(dictionary.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(dictionary.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(dictionary.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(dictionary.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DictionaryDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dictionary.DictionaryDetailsTable,
			Columns: []string{dictionary.DictionaryDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDictionaryDetailsIDs(); len(nodes) > 0 && !_u.mutation.DictionaryDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dictionary.DictionaryDetailsTable,
			Columns: []string{dictionary.DictionaryDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DictionaryDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dictionary.DictionaryDetailsTable,
			Columns: []string{dictionary.DictionaryDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictionary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DictionaryUpdateOne is the builder for updating a single Dictionary entity.
type DictionaryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DictionaryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DictionaryUpdateOne) SetUpdatedAt(v time.Time) *DictionaryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *DictionaryUpdateOne) ClearUpdatedAt() *DictionaryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *DictionaryUpdateOne) SetDelete(v int64) *DictionaryUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *DictionaryUpdateOne) SetNillableDelete(v *int64) *DictionaryUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *DictionaryUpdateOne) AddDelete(v int64) *DictionaryUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *DictionaryUpdateOne) ClearDelete() *DictionaryUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *DictionaryUpdateOne) SetCreatedID(v int64) *DictionaryUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *DictionaryUpdateOne) SetNillableCreatedID(v *int64) *DictionaryUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *DictionaryUpdateOne) AddCreatedID(v int64) *DictionaryUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *DictionaryUpdateOne) ClearCreatedID() *DictionaryUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *DictionaryUpdateOne) SetStatus(v int64) *DictionaryUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DictionaryUpdateOne) SetNillableStatus(v *int64) *DictionaryUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *DictionaryUpdateOne) AddStatus(v int64) *DictionaryUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *DictionaryUpdateOne) ClearStatus() *DictionaryUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetTitle sets the "title" field.
func (_u *DictionaryUpdateOne) SetTitle(v string) *DictionaryUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *DictionaryUpdateOne) SetNillableTitle(v *string) *DictionaryUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *DictionaryUpdateOne) SetName(v string) *DictionaryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *DictionaryUpdateOne) SetNillableName(v *string) *DictionaryUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *DictionaryUpdateOne) SetDescription(v string) *DictionaryUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *DictionaryUpdateOne) SetNillableDescription(v *string) *DictionaryUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// AddDictionaryDetailIDs adds the "dictionary_details" edge to the DictionaryDetail entity by IDs.
func (_u *DictionaryUpdateOne) AddDictionaryDetailIDs(ids ...int64) *DictionaryUpdateOne {
	_u.mutation.AddDictionaryDetailIDs(ids...)
	return _u
}

// AddDictionaryDetails adds the "dictionary_details" edges to the DictionaryDetail entity.
func (_u *DictionaryUpdateOne) AddDictionaryDetails(v ...*DictionaryDetail) *DictionaryUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDictionaryDetailIDs(ids...)
}

// Mutation returns the DictionaryMutation object of the builder.
func (_u *DictionaryUpdateOne) Mutation() *DictionaryMutation {
	return _u.mutation
}

// ClearDictionaryDetails clears all "dictionary_details" edges to the DictionaryDetail entity.
func (_u *DictionaryUpdateOne) ClearDictionaryDetails() *DictionaryUpdateOne {
	_u.mutation.ClearDictionaryDetails()
	return _u
}

// RemoveDictionaryDetailIDs removes the "dictionary_details" edge to DictionaryDetail entities by IDs.
func (_u *DictionaryUpdateOne) RemoveDictionaryDetailIDs(ids ...int64) *DictionaryUpdateOne {
	_u.mutation.RemoveDictionaryDetailIDs(ids...)
	return _u
}

// RemoveDictionaryDetails removes "dictionary_details" edges to DictionaryDetail entities.
func (_u *DictionaryUpdateOne) RemoveDictionaryDetails(v ...*DictionaryDetail) *DictionaryUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDictionaryDetailIDs(ids...)
}

// Where appends a list predicates to the DictionaryUpdate builder.
func (_u *DictionaryUpdateOne) Where(ps ...predicate.Dictionary) *DictionaryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DictionaryUpdateOne) Select(field string, fields ...string) *DictionaryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Dictionary entity.
func (_u *DictionaryUpdateOne) Save(ctx context.Context) (*Dictionary, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DictionaryUpdateOne) SaveX(ctx context.Context) *Dictionary {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DictionaryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DictionaryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DictionaryUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := dictionary.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *DictionaryUpdateOne) sqlSave(ctx context.Context) (_node *Dictionary, err error) {
	_spec := sqlgraph.NewUpdateSpec(dictionary.Table, dictionary.Columns, sqlgraph.NewFieldSpec(dictionary.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dictionary.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dictionary.FieldID)
		for _, f := range fields {
			if !dictionary.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dictionary.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(dictionary.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dictionary.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(dictionary.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(dictionary.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(dictionary.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(dictionary.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(dictionary.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(dictionary.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(dictionary.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(dictionary.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(dictionary.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(dictionary.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(dictionary.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(dictionary.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(dictionary.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DictionaryDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dictionary.DictionaryDetailsTable,
			Columns: []string{dictionary.DictionaryDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDictionaryDetailsIDs(); len(nodes) > 0 && !_u.mutation.DictionaryDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dictionary.DictionaryDetailsTable,
			Columns: []string{dictionary.DictionaryDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DictionaryDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dictionary.DictionaryDetailsTable,
			Columns: []string{dictionary.DictionaryDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Dictionary{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictionary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
