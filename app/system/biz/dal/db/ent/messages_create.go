// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"system/biz/dal/db/ent/messages"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessagesCreate is the builder for creating a Messages entity.
type MessagesCreate struct {
	config
	mutation *MessagesMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *MessagesCreate) SetCreatedAt(v time.Time) *MessagesCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *MessagesCreate) SetNillableCreatedAt(v *time.Time) *MessagesCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *MessagesCreate) SetUpdatedAt(v time.Time) *MessagesCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *MessagesCreate) SetNillableUpdatedAt(v *time.Time) *MessagesCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDelete sets the "delete" field.
func (_c *MessagesCreate) SetDelete(v int64) *MessagesCreate {
	_c.mutation.SetDelete(v)
	return _c
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_c *MessagesCreate) SetNillableDelete(v *int64) *MessagesCreate {
	if v != nil {
		_c.SetDelete(*v)
	}
	return _c
}

// SetCreatedID sets the "created_id" field.
func (_c *MessagesCreate) SetCreatedID(v int64) *MessagesCreate {
	_c.mutation.SetCreatedID(v)
	return _c
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_c *MessagesCreate) SetNillableCreatedID(v *int64) *MessagesCreate {
	if v != nil {
		_c.SetCreatedID(*v)
	}
	return _c
}

// SetType sets the "type" field.
func (_c *MessagesCreate) SetType(v string) *MessagesCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetToUserID sets the "to_user_id" field.
func (_c *MessagesCreate) SetToUserID(v string) *MessagesCreate {
	_c.mutation.SetToUserID(v)
	return _c
}

// SetFromUserID sets the "from_user_id" field.
func (_c *MessagesCreate) SetFromUserID(v string) *MessagesCreate {
	_c.mutation.SetFromUserID(v)
	return _c
}

// SetContent sets the "content" field.
func (_c *MessagesCreate) SetContent(v string) *MessagesCreate {
	_c.mutation.SetContent(v)
	return _c
}

// SetID sets the "id" field.
func (_c *MessagesCreate) SetID(v int64) *MessagesCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the MessagesMutation object of the builder.
func (_c *MessagesCreate) Mutation() *MessagesMutation {
	return _c.mutation
}

// Save creates the Messages in the database.
func (_c *MessagesCreate) Save(ctx context.Context) (*Messages, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *MessagesCreate) SaveX(ctx context.Context) *Messages {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MessagesCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MessagesCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *MessagesCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := messages.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := messages.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Delete(); !ok {
		v := messages.DefaultDelete
		_c.mutation.SetDelete(v)
	}
	if _, ok := _c.mutation.CreatedID(); !ok {
		v := messages.DefaultCreatedID
		_c.mutation.SetCreatedID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *MessagesCreate) check() error {
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Messages.type"`)}
	}
	if _, ok := _c.mutation.ToUserID(); !ok {
		return &ValidationError{Name: "to_user_id", err: errors.New(`ent: missing required field "Messages.to_user_id"`)}
	}
	if _, ok := _c.mutation.FromUserID(); !ok {
		return &ValidationError{Name: "from_user_id", err: errors.New(`ent: missing required field "Messages.from_user_id"`)}
	}
	if _, ok := _c.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Messages.content"`)}
	}
	return nil
}

func (_c *MessagesCreate) sqlSave(ctx context.Context) (*Messages, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *MessagesCreate) createSpec() (*Messages, *sqlgraph.CreateSpec) {
	var (
		_node = &Messages{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(messages.Table, sqlgraph.NewFieldSpec(messages.FieldID, field.TypeInt64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(messages.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(messages.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Delete(); ok {
		_spec.SetField(messages.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := _c.mutation.CreatedID(); ok {
		_spec.SetField(messages.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(messages.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.ToUserID(); ok {
		_spec.SetField(messages.FieldToUserID, field.TypeString, value)
		_node.ToUserID = value
	}
	if value, ok := _c.mutation.FromUserID(); ok {
		_spec.SetField(messages.FieldFromUserID, field.TypeString, value)
		_node.FromUserID = value
	}
	if value, ok := _c.mutation.Content(); ok {
		_spec.SetField(messages.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	return _node, _spec
}

// MessagesCreateBulk is the builder for creating many Messages entities in bulk.
type MessagesCreateBulk struct {
	config
	err      error
	builders []*MessagesCreate
}

// Save creates the Messages entities in the database.
func (_c *MessagesCreateBulk) Save(ctx context.Context) ([]*Messages, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Messages, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessagesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *MessagesCreateBulk) SaveX(ctx context.Context) []*Messages {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MessagesCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MessagesCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
