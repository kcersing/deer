// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"system/biz/dal/db/ent/menu"
	"system/biz/dal/db/ent/role"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuCreate is the builder for creating a Menu entity.
type MenuCreate struct {
	config
	mutation *MenuMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *MenuCreate) SetCreatedAt(v time.Time) *MenuCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *MenuCreate) SetNillableCreatedAt(v *time.Time) *MenuCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *MenuCreate) SetUpdatedAt(v time.Time) *MenuCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *MenuCreate) SetNillableUpdatedAt(v *time.Time) *MenuCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDelete sets the "delete" field.
func (_c *MenuCreate) SetDelete(v int64) *MenuCreate {
	_c.mutation.SetDelete(v)
	return _c
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_c *MenuCreate) SetNillableDelete(v *int64) *MenuCreate {
	if v != nil {
		_c.SetDelete(*v)
	}
	return _c
}

// SetCreatedID sets the "created_id" field.
func (_c *MenuCreate) SetCreatedID(v int64) *MenuCreate {
	_c.mutation.SetCreatedID(v)
	return _c
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_c *MenuCreate) SetNillableCreatedID(v *int64) *MenuCreate {
	if v != nil {
		_c.SetCreatedID(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *MenuCreate) SetStatus(v int64) *MenuCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *MenuCreate) SetNillableStatus(v *int64) *MenuCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetParentID sets the "parent_id" field.
func (_c *MenuCreate) SetParentID(v int64) *MenuCreate {
	_c.mutation.SetParentID(v)
	return _c
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_c *MenuCreate) SetNillableParentID(v *int64) *MenuCreate {
	if v != nil {
		_c.SetParentID(*v)
	}
	return _c
}

// SetPath sets the "path" field.
func (_c *MenuCreate) SetPath(v string) *MenuCreate {
	_c.mutation.SetPath(v)
	return _c
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_c *MenuCreate) SetNillablePath(v *string) *MenuCreate {
	if v != nil {
		_c.SetPath(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *MenuCreate) SetName(v string) *MenuCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *MenuCreate) SetNillableName(v *string) *MenuCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetOrderNo sets the "order_no" field.
func (_c *MenuCreate) SetOrderNo(v int64) *MenuCreate {
	_c.mutation.SetOrderNo(v)
	return _c
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (_c *MenuCreate) SetNillableOrderNo(v *int64) *MenuCreate {
	if v != nil {
		_c.SetOrderNo(*v)
	}
	return _c
}

// SetDisabled sets the "disabled" field.
func (_c *MenuCreate) SetDisabled(v int64) *MenuCreate {
	_c.mutation.SetDisabled(v)
	return _c
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (_c *MenuCreate) SetNillableDisabled(v *int64) *MenuCreate {
	if v != nil {
		_c.SetDisabled(*v)
	}
	return _c
}

// SetIgnore sets the "ignore" field.
func (_c *MenuCreate) SetIgnore(v bool) *MenuCreate {
	_c.mutation.SetIgnore(v)
	return _c
}

// SetNillableIgnore sets the "ignore" field if the given value is not nil.
func (_c *MenuCreate) SetNillableIgnore(v *bool) *MenuCreate {
	if v != nil {
		_c.SetIgnore(*v)
	}
	return _c
}

// SetType sets the "type" field.
func (_c *MenuCreate) SetType(v string) *MenuCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_c *MenuCreate) SetNillableType(v *string) *MenuCreate {
	if v != nil {
		_c.SetType(*v)
	}
	return _c
}

// SetLevel sets the "level" field.
func (_c *MenuCreate) SetLevel(v int64) *MenuCreate {
	_c.mutation.SetLevel(v)
	return _c
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_c *MenuCreate) SetNillableLevel(v *int64) *MenuCreate {
	if v != nil {
		_c.SetLevel(*v)
	}
	return _c
}

// SetMenuType sets the "menu_type" field.
func (_c *MenuCreate) SetMenuType(v int64) *MenuCreate {
	_c.mutation.SetMenuType(v)
	return _c
}

// SetNillableMenuType sets the "menu_type" field if the given value is not nil.
func (_c *MenuCreate) SetNillableMenuType(v *int64) *MenuCreate {
	if v != nil {
		_c.SetMenuType(*v)
	}
	return _c
}

// SetRedirect sets the "redirect" field.
func (_c *MenuCreate) SetRedirect(v string) *MenuCreate {
	_c.mutation.SetRedirect(v)
	return _c
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (_c *MenuCreate) SetNillableRedirect(v *string) *MenuCreate {
	if v != nil {
		_c.SetRedirect(*v)
	}
	return _c
}

// SetComponent sets the "component" field.
func (_c *MenuCreate) SetComponent(v string) *MenuCreate {
	_c.mutation.SetComponent(v)
	return _c
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (_c *MenuCreate) SetNillableComponent(v *string) *MenuCreate {
	if v != nil {
		_c.SetComponent(*v)
	}
	return _c
}

// SetTitle sets the "title" field.
func (_c *MenuCreate) SetTitle(v string) *MenuCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_c *MenuCreate) SetNillableTitle(v *string) *MenuCreate {
	if v != nil {
		_c.SetTitle(*v)
	}
	return _c
}

// SetIcon sets the "icon" field.
func (_c *MenuCreate) SetIcon(v string) *MenuCreate {
	_c.mutation.SetIcon(v)
	return _c
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_c *MenuCreate) SetNillableIcon(v *string) *MenuCreate {
	if v != nil {
		_c.SetIcon(*v)
	}
	return _c
}

// SetHidden sets the "hidden" field.
func (_c *MenuCreate) SetHidden(v int64) *MenuCreate {
	_c.mutation.SetHidden(v)
	return _c
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (_c *MenuCreate) SetNillableHidden(v *int64) *MenuCreate {
	if v != nil {
		_c.SetHidden(*v)
	}
	return _c
}

// SetSort sets the "sort" field.
func (_c *MenuCreate) SetSort(v int64) *MenuCreate {
	_c.mutation.SetSort(v)
	return _c
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_c *MenuCreate) SetNillableSort(v *int64) *MenuCreate {
	if v != nil {
		_c.SetSort(*v)
	}
	return _c
}

// SetURL sets the "url" field.
func (_c *MenuCreate) SetURL(v string) *MenuCreate {
	_c.mutation.SetURL(v)
	return _c
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_c *MenuCreate) SetNillableURL(v *string) *MenuCreate {
	if v != nil {
		_c.SetURL(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *MenuCreate) SetID(v int64) *MenuCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (_c *MenuCreate) AddRoleIDs(ids ...int64) *MenuCreate {
	_c.mutation.AddRoleIDs(ids...)
	return _c
}

// AddRoles adds the "roles" edges to the Role entity.
func (_c *MenuCreate) AddRoles(v ...*Role) *MenuCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRoleIDs(ids...)
}

// SetParent sets the "parent" edge to the Menu entity.
func (_c *MenuCreate) SetParent(v *Menu) *MenuCreate {
	return _c.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (_c *MenuCreate) AddChildIDs(ids ...int64) *MenuCreate {
	_c.mutation.AddChildIDs(ids...)
	return _c
}

// AddChildren adds the "children" edges to the Menu entity.
func (_c *MenuCreate) AddChildren(v ...*Menu) *MenuCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddChildIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (_c *MenuCreate) Mutation() *MenuMutation {
	return _c.mutation
}

// Save creates the Menu in the database.
func (_c *MenuCreate) Save(ctx context.Context) (*Menu, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *MenuCreate) SaveX(ctx context.Context) *Menu {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MenuCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MenuCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *MenuCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := menu.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := menu.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Delete(); !ok {
		v := menu.DefaultDelete
		_c.mutation.SetDelete(v)
	}
	if _, ok := _c.mutation.CreatedID(); !ok {
		v := menu.DefaultCreatedID
		_c.mutation.SetCreatedID(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := menu.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.Path(); !ok {
		v := menu.DefaultPath
		_c.mutation.SetPath(v)
	}
	if _, ok := _c.mutation.OrderNo(); !ok {
		v := menu.DefaultOrderNo
		_c.mutation.SetOrderNo(v)
	}
	if _, ok := _c.mutation.Disabled(); !ok {
		v := menu.DefaultDisabled
		_c.mutation.SetDisabled(v)
	}
	if _, ok := _c.mutation.Ignore(); !ok {
		v := menu.DefaultIgnore
		_c.mutation.SetIgnore(v)
	}
	if _, ok := _c.mutation.Redirect(); !ok {
		v := menu.DefaultRedirect
		_c.mutation.SetRedirect(v)
	}
	if _, ok := _c.mutation.Component(); !ok {
		v := menu.DefaultComponent
		_c.mutation.SetComponent(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *MenuCreate) check() error {
	return nil
}

func (_c *MenuCreate) sqlSave(ctx context.Context) (*Menu, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *MenuCreate) createSpec() (*Menu, *sqlgraph.CreateSpec) {
	var (
		_node = &Menu{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(menu.Table, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(menu.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Delete(); ok {
		_spec.SetField(menu.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := _c.mutation.CreatedID(); ok {
		_spec.SetField(menu.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.OrderNo(); ok {
		_spec.SetField(menu.FieldOrderNo, field.TypeInt64, value)
		_node.OrderNo = value
	}
	if value, ok := _c.mutation.Disabled(); ok {
		_spec.SetField(menu.FieldDisabled, field.TypeInt64, value)
		_node.Disabled = value
	}
	if value, ok := _c.mutation.Ignore(); ok {
		_spec.SetField(menu.FieldIgnore, field.TypeBool, value)
		_node.Ignore = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(menu.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Level(); ok {
		_spec.SetField(menu.FieldLevel, field.TypeInt64, value)
		_node.Level = value
	}
	if value, ok := _c.mutation.MenuType(); ok {
		_spec.SetField(menu.FieldMenuType, field.TypeInt64, value)
		_node.MenuType = value
	}
	if value, ok := _c.mutation.Redirect(); ok {
		_spec.SetField(menu.FieldRedirect, field.TypeString, value)
		_node.Redirect = value
	}
	if value, ok := _c.mutation.Component(); ok {
		_spec.SetField(menu.FieldComponent, field.TypeString, value)
		_node.Component = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(menu.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := _c.mutation.Hidden(); ok {
		_spec.SetField(menu.FieldHidden, field.TypeInt64, value)
		_node.Hidden = value
	}
	if value, ok := _c.mutation.Sort(); ok {
		_spec.SetField(menu.FieldSort, field.TypeInt64, value)
		_node.Sort = value
	}
	if value, ok := _c.mutation.URL(); ok {
		_spec.SetField(menu.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if nodes := _c.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MenuCreateBulk is the builder for creating many Menu entities in bulk.
type MenuCreateBulk struct {
	config
	err      error
	builders []*MenuCreate
}

// Save creates the Menu entities in the database.
func (_c *MenuCreateBulk) Save(ctx context.Context) ([]*Menu, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Menu, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *MenuCreateBulk) SaveX(ctx context.Context) []*Menu {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MenuCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MenuCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
