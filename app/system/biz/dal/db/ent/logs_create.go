// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"system/biz/dal/db/ent/logs"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LogsCreate is the builder for creating a Logs entity.
type LogsCreate struct {
	config
	mutation *LogsMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *LogsCreate) SetCreatedAt(v time.Time) *LogsCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *LogsCreate) SetNillableCreatedAt(v *time.Time) *LogsCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *LogsCreate) SetUpdatedAt(v time.Time) *LogsCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *LogsCreate) SetNillableUpdatedAt(v *time.Time) *LogsCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDelete sets the "delete" field.
func (_c *LogsCreate) SetDelete(v int64) *LogsCreate {
	_c.mutation.SetDelete(v)
	return _c
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_c *LogsCreate) SetNillableDelete(v *int64) *LogsCreate {
	if v != nil {
		_c.SetDelete(*v)
	}
	return _c
}

// SetCreatedID sets the "created_id" field.
func (_c *LogsCreate) SetCreatedID(v int64) *LogsCreate {
	_c.mutation.SetCreatedID(v)
	return _c
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_c *LogsCreate) SetNillableCreatedID(v *int64) *LogsCreate {
	if v != nil {
		_c.SetCreatedID(*v)
	}
	return _c
}

// SetType sets the "type" field.
func (_c *LogsCreate) SetType(v string) *LogsCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_c *LogsCreate) SetNillableType(v *string) *LogsCreate {
	if v != nil {
		_c.SetType(*v)
	}
	return _c
}

// SetMethod sets the "method" field.
func (_c *LogsCreate) SetMethod(v string) *LogsCreate {
	_c.mutation.SetMethod(v)
	return _c
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (_c *LogsCreate) SetNillableMethod(v *string) *LogsCreate {
	if v != nil {
		_c.SetMethod(*v)
	}
	return _c
}

// SetAPI sets the "api" field.
func (_c *LogsCreate) SetAPI(v string) *LogsCreate {
	_c.mutation.SetAPI(v)
	return _c
}

// SetNillableAPI sets the "api" field if the given value is not nil.
func (_c *LogsCreate) SetNillableAPI(v *string) *LogsCreate {
	if v != nil {
		_c.SetAPI(*v)
	}
	return _c
}

// SetSuccess sets the "success" field.
func (_c *LogsCreate) SetSuccess(v bool) *LogsCreate {
	_c.mutation.SetSuccess(v)
	return _c
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (_c *LogsCreate) SetNillableSuccess(v *bool) *LogsCreate {
	if v != nil {
		_c.SetSuccess(*v)
	}
	return _c
}

// SetReqContent sets the "req_content" field.
func (_c *LogsCreate) SetReqContent(v string) *LogsCreate {
	_c.mutation.SetReqContent(v)
	return _c
}

// SetNillableReqContent sets the "req_content" field if the given value is not nil.
func (_c *LogsCreate) SetNillableReqContent(v *string) *LogsCreate {
	if v != nil {
		_c.SetReqContent(*v)
	}
	return _c
}

// SetRespContent sets the "resp_content" field.
func (_c *LogsCreate) SetRespContent(v string) *LogsCreate {
	_c.mutation.SetRespContent(v)
	return _c
}

// SetNillableRespContent sets the "resp_content" field if the given value is not nil.
func (_c *LogsCreate) SetNillableRespContent(v *string) *LogsCreate {
	if v != nil {
		_c.SetRespContent(*v)
	}
	return _c
}

// SetIP sets the "ip" field.
func (_c *LogsCreate) SetIP(v string) *LogsCreate {
	_c.mutation.SetIP(v)
	return _c
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (_c *LogsCreate) SetNillableIP(v *string) *LogsCreate {
	if v != nil {
		_c.SetIP(*v)
	}
	return _c
}

// SetUserAgent sets the "user_agent" field.
func (_c *LogsCreate) SetUserAgent(v string) *LogsCreate {
	_c.mutation.SetUserAgent(v)
	return _c
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_c *LogsCreate) SetNillableUserAgent(v *string) *LogsCreate {
	if v != nil {
		_c.SetUserAgent(*v)
	}
	return _c
}

// SetOperatorsr sets the "operatorsr" field.
func (_c *LogsCreate) SetOperatorsr(v string) *LogsCreate {
	_c.mutation.SetOperatorsr(v)
	return _c
}

// SetNillableOperatorsr sets the "operatorsr" field if the given value is not nil.
func (_c *LogsCreate) SetNillableOperatorsr(v *string) *LogsCreate {
	if v != nil {
		_c.SetOperatorsr(*v)
	}
	return _c
}

// SetTime sets the "time" field.
func (_c *LogsCreate) SetTime(v int64) *LogsCreate {
	_c.mutation.SetTime(v)
	return _c
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (_c *LogsCreate) SetNillableTime(v *int64) *LogsCreate {
	if v != nil {
		_c.SetTime(*v)
	}
	return _c
}

// SetIdentity sets the "identity" field.
func (_c *LogsCreate) SetIdentity(v int64) *LogsCreate {
	_c.mutation.SetIdentity(v)
	return _c
}

// SetNillableIdentity sets the "identity" field if the given value is not nil.
func (_c *LogsCreate) SetNillableIdentity(v *int64) *LogsCreate {
	if v != nil {
		_c.SetIdentity(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *LogsCreate) SetID(v int64) *LogsCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the LogsMutation object of the builder.
func (_c *LogsCreate) Mutation() *LogsMutation {
	return _c.mutation
}

// Save creates the Logs in the database.
func (_c *LogsCreate) Save(ctx context.Context) (*Logs, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *LogsCreate) SaveX(ctx context.Context) *Logs {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *LogsCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *LogsCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *LogsCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := logs.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := logs.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Delete(); !ok {
		v := logs.DefaultDelete
		_c.mutation.SetDelete(v)
	}
	if _, ok := _c.mutation.CreatedID(); !ok {
		v := logs.DefaultCreatedID
		_c.mutation.SetCreatedID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *LogsCreate) check() error {
	return nil
}

func (_c *LogsCreate) sqlSave(ctx context.Context) (*Logs, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *LogsCreate) createSpec() (*Logs, *sqlgraph.CreateSpec) {
	var (
		_node = &Logs{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(logs.Table, sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(logs.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(logs.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Delete(); ok {
		_spec.SetField(logs.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := _c.mutation.CreatedID(); ok {
		_spec.SetField(logs.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(logs.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Method(); ok {
		_spec.SetField(logs.FieldMethod, field.TypeString, value)
		_node.Method = value
	}
	if value, ok := _c.mutation.API(); ok {
		_spec.SetField(logs.FieldAPI, field.TypeString, value)
		_node.API = value
	}
	if value, ok := _c.mutation.Success(); ok {
		_spec.SetField(logs.FieldSuccess, field.TypeBool, value)
		_node.Success = value
	}
	if value, ok := _c.mutation.ReqContent(); ok {
		_spec.SetField(logs.FieldReqContent, field.TypeString, value)
		_node.ReqContent = value
	}
	if value, ok := _c.mutation.RespContent(); ok {
		_spec.SetField(logs.FieldRespContent, field.TypeString, value)
		_node.RespContent = value
	}
	if value, ok := _c.mutation.IP(); ok {
		_spec.SetField(logs.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := _c.mutation.UserAgent(); ok {
		_spec.SetField(logs.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := _c.mutation.Operatorsr(); ok {
		_spec.SetField(logs.FieldOperatorsr, field.TypeString, value)
		_node.Operatorsr = value
	}
	if value, ok := _c.mutation.Time(); ok {
		_spec.SetField(logs.FieldTime, field.TypeInt64, value)
		_node.Time = value
	}
	if value, ok := _c.mutation.Identity(); ok {
		_spec.SetField(logs.FieldIdentity, field.TypeInt64, value)
		_node.Identity = value
	}
	return _node, _spec
}

// LogsCreateBulk is the builder for creating many Logs entities in bulk.
type LogsCreateBulk struct {
	config
	err      error
	builders []*LogsCreate
}

// Save creates the Logs entities in the database.
func (_c *LogsCreateBulk) Save(ctx context.Context) ([]*Logs, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Logs, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LogsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *LogsCreateBulk) SaveX(ctx context.Context) []*Logs {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *LogsCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *LogsCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
