// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"system/biz/dal/db/ent/logs"
	"system/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LogsUpdate is the builder for updating Logs entities.
type LogsUpdate struct {
	config
	hooks    []Hook
	mutation *LogsMutation
}

// Where appends a list predicates to the LogsUpdate builder.
func (_u *LogsUpdate) Where(ps ...predicate.Logs) *LogsUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *LogsUpdate) SetUpdatedAt(v time.Time) *LogsUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *LogsUpdate) ClearUpdatedAt() *LogsUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *LogsUpdate) SetDelete(v int64) *LogsUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *LogsUpdate) SetNillableDelete(v *int64) *LogsUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *LogsUpdate) AddDelete(v int64) *LogsUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *LogsUpdate) ClearDelete() *LogsUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *LogsUpdate) SetCreatedID(v int64) *LogsUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *LogsUpdate) SetNillableCreatedID(v *int64) *LogsUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *LogsUpdate) AddCreatedID(v int64) *LogsUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *LogsUpdate) ClearCreatedID() *LogsUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetType sets the "type" field.
func (_u *LogsUpdate) SetType(v string) *LogsUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *LogsUpdate) SetNillableType(v *string) *LogsUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *LogsUpdate) ClearType() *LogsUpdate {
	_u.mutation.ClearType()
	return _u
}

// SetMethod sets the "method" field.
func (_u *LogsUpdate) SetMethod(v string) *LogsUpdate {
	_u.mutation.SetMethod(v)
	return _u
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (_u *LogsUpdate) SetNillableMethod(v *string) *LogsUpdate {
	if v != nil {
		_u.SetMethod(*v)
	}
	return _u
}

// ClearMethod clears the value of the "method" field.
func (_u *LogsUpdate) ClearMethod() *LogsUpdate {
	_u.mutation.ClearMethod()
	return _u
}

// SetAPI sets the "api" field.
func (_u *LogsUpdate) SetAPI(v string) *LogsUpdate {
	_u.mutation.SetAPI(v)
	return _u
}

// SetNillableAPI sets the "api" field if the given value is not nil.
func (_u *LogsUpdate) SetNillableAPI(v *string) *LogsUpdate {
	if v != nil {
		_u.SetAPI(*v)
	}
	return _u
}

// ClearAPI clears the value of the "api" field.
func (_u *LogsUpdate) ClearAPI() *LogsUpdate {
	_u.mutation.ClearAPI()
	return _u
}

// SetSuccess sets the "success" field.
func (_u *LogsUpdate) SetSuccess(v bool) *LogsUpdate {
	_u.mutation.SetSuccess(v)
	return _u
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (_u *LogsUpdate) SetNillableSuccess(v *bool) *LogsUpdate {
	if v != nil {
		_u.SetSuccess(*v)
	}
	return _u
}

// ClearSuccess clears the value of the "success" field.
func (_u *LogsUpdate) ClearSuccess() *LogsUpdate {
	_u.mutation.ClearSuccess()
	return _u
}

// SetReqContent sets the "req_content" field.
func (_u *LogsUpdate) SetReqContent(v string) *LogsUpdate {
	_u.mutation.SetReqContent(v)
	return _u
}

// SetNillableReqContent sets the "req_content" field if the given value is not nil.
func (_u *LogsUpdate) SetNillableReqContent(v *string) *LogsUpdate {
	if v != nil {
		_u.SetReqContent(*v)
	}
	return _u
}

// ClearReqContent clears the value of the "req_content" field.
func (_u *LogsUpdate) ClearReqContent() *LogsUpdate {
	_u.mutation.ClearReqContent()
	return _u
}

// SetRespContent sets the "resp_content" field.
func (_u *LogsUpdate) SetRespContent(v string) *LogsUpdate {
	_u.mutation.SetRespContent(v)
	return _u
}

// SetNillableRespContent sets the "resp_content" field if the given value is not nil.
func (_u *LogsUpdate) SetNillableRespContent(v *string) *LogsUpdate {
	if v != nil {
		_u.SetRespContent(*v)
	}
	return _u
}

// ClearRespContent clears the value of the "resp_content" field.
func (_u *LogsUpdate) ClearRespContent() *LogsUpdate {
	_u.mutation.ClearRespContent()
	return _u
}

// SetIP sets the "ip" field.
func (_u *LogsUpdate) SetIP(v string) *LogsUpdate {
	_u.mutation.SetIP(v)
	return _u
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (_u *LogsUpdate) SetNillableIP(v *string) *LogsUpdate {
	if v != nil {
		_u.SetIP(*v)
	}
	return _u
}

// ClearIP clears the value of the "ip" field.
func (_u *LogsUpdate) ClearIP() *LogsUpdate {
	_u.mutation.ClearIP()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *LogsUpdate) SetUserAgent(v string) *LogsUpdate {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *LogsUpdate) SetNillableUserAgent(v *string) *LogsUpdate {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *LogsUpdate) ClearUserAgent() *LogsUpdate {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetOperatorsr sets the "operatorsr" field.
func (_u *LogsUpdate) SetOperatorsr(v string) *LogsUpdate {
	_u.mutation.SetOperatorsr(v)
	return _u
}

// SetNillableOperatorsr sets the "operatorsr" field if the given value is not nil.
func (_u *LogsUpdate) SetNillableOperatorsr(v *string) *LogsUpdate {
	if v != nil {
		_u.SetOperatorsr(*v)
	}
	return _u
}

// ClearOperatorsr clears the value of the "operatorsr" field.
func (_u *LogsUpdate) ClearOperatorsr() *LogsUpdate {
	_u.mutation.ClearOperatorsr()
	return _u
}

// SetTime sets the "time" field.
func (_u *LogsUpdate) SetTime(v int64) *LogsUpdate {
	_u.mutation.ResetTime()
	_u.mutation.SetTime(v)
	return _u
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (_u *LogsUpdate) SetNillableTime(v *int64) *LogsUpdate {
	if v != nil {
		_u.SetTime(*v)
	}
	return _u
}

// AddTime adds value to the "time" field.
func (_u *LogsUpdate) AddTime(v int64) *LogsUpdate {
	_u.mutation.AddTime(v)
	return _u
}

// ClearTime clears the value of the "time" field.
func (_u *LogsUpdate) ClearTime() *LogsUpdate {
	_u.mutation.ClearTime()
	return _u
}

// SetIdentity sets the "identity" field.
func (_u *LogsUpdate) SetIdentity(v int64) *LogsUpdate {
	_u.mutation.ResetIdentity()
	_u.mutation.SetIdentity(v)
	return _u
}

// SetNillableIdentity sets the "identity" field if the given value is not nil.
func (_u *LogsUpdate) SetNillableIdentity(v *int64) *LogsUpdate {
	if v != nil {
		_u.SetIdentity(*v)
	}
	return _u
}

// AddIdentity adds value to the "identity" field.
func (_u *LogsUpdate) AddIdentity(v int64) *LogsUpdate {
	_u.mutation.AddIdentity(v)
	return _u
}

// ClearIdentity clears the value of the "identity" field.
func (_u *LogsUpdate) ClearIdentity() *LogsUpdate {
	_u.mutation.ClearIdentity()
	return _u
}

// Mutation returns the LogsMutation object of the builder.
func (_u *LogsUpdate) Mutation() *LogsMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *LogsUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LogsUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *LogsUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LogsUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *LogsUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := logs.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *LogsUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(logs.Table, logs.Columns, sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(logs.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(logs.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(logs.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(logs.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(logs.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(logs.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(logs.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(logs.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(logs.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(logs.FieldType, field.TypeString, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(logs.FieldType, field.TypeString)
	}
	if value, ok := _u.mutation.Method(); ok {
		_spec.SetField(logs.FieldMethod, field.TypeString, value)
	}
	if _u.mutation.MethodCleared() {
		_spec.ClearField(logs.FieldMethod, field.TypeString)
	}
	if value, ok := _u.mutation.API(); ok {
		_spec.SetField(logs.FieldAPI, field.TypeString, value)
	}
	if _u.mutation.APICleared() {
		_spec.ClearField(logs.FieldAPI, field.TypeString)
	}
	if value, ok := _u.mutation.Success(); ok {
		_spec.SetField(logs.FieldSuccess, field.TypeBool, value)
	}
	if _u.mutation.SuccessCleared() {
		_spec.ClearField(logs.FieldSuccess, field.TypeBool)
	}
	if value, ok := _u.mutation.ReqContent(); ok {
		_spec.SetField(logs.FieldReqContent, field.TypeString, value)
	}
	if _u.mutation.ReqContentCleared() {
		_spec.ClearField(logs.FieldReqContent, field.TypeString)
	}
	if value, ok := _u.mutation.RespContent(); ok {
		_spec.SetField(logs.FieldRespContent, field.TypeString, value)
	}
	if _u.mutation.RespContentCleared() {
		_spec.ClearField(logs.FieldRespContent, field.TypeString)
	}
	if value, ok := _u.mutation.IP(); ok {
		_spec.SetField(logs.FieldIP, field.TypeString, value)
	}
	if _u.mutation.IPCleared() {
		_spec.ClearField(logs.FieldIP, field.TypeString)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(logs.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(logs.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.Operatorsr(); ok {
		_spec.SetField(logs.FieldOperatorsr, field.TypeString, value)
	}
	if _u.mutation.OperatorsrCleared() {
		_spec.ClearField(logs.FieldOperatorsr, field.TypeString)
	}
	if value, ok := _u.mutation.Time(); ok {
		_spec.SetField(logs.FieldTime, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedTime(); ok {
		_spec.AddField(logs.FieldTime, field.TypeInt64, value)
	}
	if _u.mutation.TimeCleared() {
		_spec.ClearField(logs.FieldTime, field.TypeInt64)
	}
	if value, ok := _u.mutation.Identity(); ok {
		_spec.SetField(logs.FieldIdentity, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedIdentity(); ok {
		_spec.AddField(logs.FieldIdentity, field.TypeInt64, value)
	}
	if _u.mutation.IdentityCleared() {
		_spec.ClearField(logs.FieldIdentity, field.TypeInt64)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// LogsUpdateOne is the builder for updating a single Logs entity.
type LogsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LogsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *LogsUpdateOne) SetUpdatedAt(v time.Time) *LogsUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *LogsUpdateOne) ClearUpdatedAt() *LogsUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *LogsUpdateOne) SetDelete(v int64) *LogsUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *LogsUpdateOne) SetNillableDelete(v *int64) *LogsUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *LogsUpdateOne) AddDelete(v int64) *LogsUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *LogsUpdateOne) ClearDelete() *LogsUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *LogsUpdateOne) SetCreatedID(v int64) *LogsUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *LogsUpdateOne) SetNillableCreatedID(v *int64) *LogsUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *LogsUpdateOne) AddCreatedID(v int64) *LogsUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *LogsUpdateOne) ClearCreatedID() *LogsUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetType sets the "type" field.
func (_u *LogsUpdateOne) SetType(v string) *LogsUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *LogsUpdateOne) SetNillableType(v *string) *LogsUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *LogsUpdateOne) ClearType() *LogsUpdateOne {
	_u.mutation.ClearType()
	return _u
}

// SetMethod sets the "method" field.
func (_u *LogsUpdateOne) SetMethod(v string) *LogsUpdateOne {
	_u.mutation.SetMethod(v)
	return _u
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (_u *LogsUpdateOne) SetNillableMethod(v *string) *LogsUpdateOne {
	if v != nil {
		_u.SetMethod(*v)
	}
	return _u
}

// ClearMethod clears the value of the "method" field.
func (_u *LogsUpdateOne) ClearMethod() *LogsUpdateOne {
	_u.mutation.ClearMethod()
	return _u
}

// SetAPI sets the "api" field.
func (_u *LogsUpdateOne) SetAPI(v string) *LogsUpdateOne {
	_u.mutation.SetAPI(v)
	return _u
}

// SetNillableAPI sets the "api" field if the given value is not nil.
func (_u *LogsUpdateOne) SetNillableAPI(v *string) *LogsUpdateOne {
	if v != nil {
		_u.SetAPI(*v)
	}
	return _u
}

// ClearAPI clears the value of the "api" field.
func (_u *LogsUpdateOne) ClearAPI() *LogsUpdateOne {
	_u.mutation.ClearAPI()
	return _u
}

// SetSuccess sets the "success" field.
func (_u *LogsUpdateOne) SetSuccess(v bool) *LogsUpdateOne {
	_u.mutation.SetSuccess(v)
	return _u
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (_u *LogsUpdateOne) SetNillableSuccess(v *bool) *LogsUpdateOne {
	if v != nil {
		_u.SetSuccess(*v)
	}
	return _u
}

// ClearSuccess clears the value of the "success" field.
func (_u *LogsUpdateOne) ClearSuccess() *LogsUpdateOne {
	_u.mutation.ClearSuccess()
	return _u
}

// SetReqContent sets the "req_content" field.
func (_u *LogsUpdateOne) SetReqContent(v string) *LogsUpdateOne {
	_u.mutation.SetReqContent(v)
	return _u
}

// SetNillableReqContent sets the "req_content" field if the given value is not nil.
func (_u *LogsUpdateOne) SetNillableReqContent(v *string) *LogsUpdateOne {
	if v != nil {
		_u.SetReqContent(*v)
	}
	return _u
}

// ClearReqContent clears the value of the "req_content" field.
func (_u *LogsUpdateOne) ClearReqContent() *LogsUpdateOne {
	_u.mutation.ClearReqContent()
	return _u
}

// SetRespContent sets the "resp_content" field.
func (_u *LogsUpdateOne) SetRespContent(v string) *LogsUpdateOne {
	_u.mutation.SetRespContent(v)
	return _u
}

// SetNillableRespContent sets the "resp_content" field if the given value is not nil.
func (_u *LogsUpdateOne) SetNillableRespContent(v *string) *LogsUpdateOne {
	if v != nil {
		_u.SetRespContent(*v)
	}
	return _u
}

// ClearRespContent clears the value of the "resp_content" field.
func (_u *LogsUpdateOne) ClearRespContent() *LogsUpdateOne {
	_u.mutation.ClearRespContent()
	return _u
}

// SetIP sets the "ip" field.
func (_u *LogsUpdateOne) SetIP(v string) *LogsUpdateOne {
	_u.mutation.SetIP(v)
	return _u
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (_u *LogsUpdateOne) SetNillableIP(v *string) *LogsUpdateOne {
	if v != nil {
		_u.SetIP(*v)
	}
	return _u
}

// ClearIP clears the value of the "ip" field.
func (_u *LogsUpdateOne) ClearIP() *LogsUpdateOne {
	_u.mutation.ClearIP()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *LogsUpdateOne) SetUserAgent(v string) *LogsUpdateOne {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *LogsUpdateOne) SetNillableUserAgent(v *string) *LogsUpdateOne {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *LogsUpdateOne) ClearUserAgent() *LogsUpdateOne {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetOperatorsr sets the "operatorsr" field.
func (_u *LogsUpdateOne) SetOperatorsr(v string) *LogsUpdateOne {
	_u.mutation.SetOperatorsr(v)
	return _u
}

// SetNillableOperatorsr sets the "operatorsr" field if the given value is not nil.
func (_u *LogsUpdateOne) SetNillableOperatorsr(v *string) *LogsUpdateOne {
	if v != nil {
		_u.SetOperatorsr(*v)
	}
	return _u
}

// ClearOperatorsr clears the value of the "operatorsr" field.
func (_u *LogsUpdateOne) ClearOperatorsr() *LogsUpdateOne {
	_u.mutation.ClearOperatorsr()
	return _u
}

// SetTime sets the "time" field.
func (_u *LogsUpdateOne) SetTime(v int64) *LogsUpdateOne {
	_u.mutation.ResetTime()
	_u.mutation.SetTime(v)
	return _u
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (_u *LogsUpdateOne) SetNillableTime(v *int64) *LogsUpdateOne {
	if v != nil {
		_u.SetTime(*v)
	}
	return _u
}

// AddTime adds value to the "time" field.
func (_u *LogsUpdateOne) AddTime(v int64) *LogsUpdateOne {
	_u.mutation.AddTime(v)
	return _u
}

// ClearTime clears the value of the "time" field.
func (_u *LogsUpdateOne) ClearTime() *LogsUpdateOne {
	_u.mutation.ClearTime()
	return _u
}

// SetIdentity sets the "identity" field.
func (_u *LogsUpdateOne) SetIdentity(v int64) *LogsUpdateOne {
	_u.mutation.ResetIdentity()
	_u.mutation.SetIdentity(v)
	return _u
}

// SetNillableIdentity sets the "identity" field if the given value is not nil.
func (_u *LogsUpdateOne) SetNillableIdentity(v *int64) *LogsUpdateOne {
	if v != nil {
		_u.SetIdentity(*v)
	}
	return _u
}

// AddIdentity adds value to the "identity" field.
func (_u *LogsUpdateOne) AddIdentity(v int64) *LogsUpdateOne {
	_u.mutation.AddIdentity(v)
	return _u
}

// ClearIdentity clears the value of the "identity" field.
func (_u *LogsUpdateOne) ClearIdentity() *LogsUpdateOne {
	_u.mutation.ClearIdentity()
	return _u
}

// Mutation returns the LogsMutation object of the builder.
func (_u *LogsUpdateOne) Mutation() *LogsMutation {
	return _u.mutation
}

// Where appends a list predicates to the LogsUpdate builder.
func (_u *LogsUpdateOne) Where(ps ...predicate.Logs) *LogsUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *LogsUpdateOne) Select(field string, fields ...string) *LogsUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Logs entity.
func (_u *LogsUpdateOne) Save(ctx context.Context) (*Logs, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LogsUpdateOne) SaveX(ctx context.Context) *Logs {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *LogsUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LogsUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *LogsUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := logs.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *LogsUpdateOne) sqlSave(ctx context.Context) (_node *Logs, err error) {
	_spec := sqlgraph.NewUpdateSpec(logs.Table, logs.Columns, sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Logs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, logs.FieldID)
		for _, f := range fields {
			if !logs.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != logs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(logs.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(logs.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(logs.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(logs.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(logs.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(logs.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(logs.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(logs.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(logs.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(logs.FieldType, field.TypeString, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(logs.FieldType, field.TypeString)
	}
	if value, ok := _u.mutation.Method(); ok {
		_spec.SetField(logs.FieldMethod, field.TypeString, value)
	}
	if _u.mutation.MethodCleared() {
		_spec.ClearField(logs.FieldMethod, field.TypeString)
	}
	if value, ok := _u.mutation.API(); ok {
		_spec.SetField(logs.FieldAPI, field.TypeString, value)
	}
	if _u.mutation.APICleared() {
		_spec.ClearField(logs.FieldAPI, field.TypeString)
	}
	if value, ok := _u.mutation.Success(); ok {
		_spec.SetField(logs.FieldSuccess, field.TypeBool, value)
	}
	if _u.mutation.SuccessCleared() {
		_spec.ClearField(logs.FieldSuccess, field.TypeBool)
	}
	if value, ok := _u.mutation.ReqContent(); ok {
		_spec.SetField(logs.FieldReqContent, field.TypeString, value)
	}
	if _u.mutation.ReqContentCleared() {
		_spec.ClearField(logs.FieldReqContent, field.TypeString)
	}
	if value, ok := _u.mutation.RespContent(); ok {
		_spec.SetField(logs.FieldRespContent, field.TypeString, value)
	}
	if _u.mutation.RespContentCleared() {
		_spec.ClearField(logs.FieldRespContent, field.TypeString)
	}
	if value, ok := _u.mutation.IP(); ok {
		_spec.SetField(logs.FieldIP, field.TypeString, value)
	}
	if _u.mutation.IPCleared() {
		_spec.ClearField(logs.FieldIP, field.TypeString)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(logs.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(logs.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.Operatorsr(); ok {
		_spec.SetField(logs.FieldOperatorsr, field.TypeString, value)
	}
	if _u.mutation.OperatorsrCleared() {
		_spec.ClearField(logs.FieldOperatorsr, field.TypeString)
	}
	if value, ok := _u.mutation.Time(); ok {
		_spec.SetField(logs.FieldTime, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedTime(); ok {
		_spec.AddField(logs.FieldTime, field.TypeInt64, value)
	}
	if _u.mutation.TimeCleared() {
		_spec.ClearField(logs.FieldTime, field.TypeInt64)
	}
	if value, ok := _u.mutation.Identity(); ok {
		_spec.SetField(logs.FieldIdentity, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedIdentity(); ok {
		_spec.AddField(logs.FieldIdentity, field.TypeInt64, value)
	}
	if _u.mutation.IdentityCleared() {
		_spec.ClearField(logs.FieldIdentity, field.TypeInt64)
	}
	_node = &Logs{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
