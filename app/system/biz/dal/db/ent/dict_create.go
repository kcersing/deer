// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"system/biz/dal/db/ent/dict"
	"system/biz/dal/db/ent/dictht"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictCreate is the builder for creating a Dict entity.
type DictCreate struct {
	config
	mutation *DictMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *DictCreate) SetCreatedAt(v time.Time) *DictCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *DictCreate) SetNillableCreatedAt(v *time.Time) *DictCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *DictCreate) SetUpdatedAt(v time.Time) *DictCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *DictCreate) SetNillableUpdatedAt(v *time.Time) *DictCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDelete sets the "delete" field.
func (_c *DictCreate) SetDelete(v int64) *DictCreate {
	_c.mutation.SetDelete(v)
	return _c
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_c *DictCreate) SetNillableDelete(v *int64) *DictCreate {
	if v != nil {
		_c.SetDelete(*v)
	}
	return _c
}

// SetCreatedID sets the "created_id" field.
func (_c *DictCreate) SetCreatedID(v int64) *DictCreate {
	_c.mutation.SetCreatedID(v)
	return _c
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_c *DictCreate) SetNillableCreatedID(v *int64) *DictCreate {
	if v != nil {
		_c.SetCreatedID(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *DictCreate) SetStatus(v int64) *DictCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *DictCreate) SetNillableStatus(v *int64) *DictCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetTitle sets the "title" field.
func (_c *DictCreate) SetTitle(v string) *DictCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_c *DictCreate) SetNillableTitle(v *string) *DictCreate {
	if v != nil {
		_c.SetTitle(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *DictCreate) SetName(v string) *DictCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *DictCreate) SetNillableName(v *string) *DictCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *DictCreate) SetDescription(v string) *DictCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *DictCreate) SetNillableDescription(v *string) *DictCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *DictCreate) SetID(v int64) *DictCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddDicthtIDs adds the "dictht" edge to the Dictht entity by IDs.
func (_c *DictCreate) AddDicthtIDs(ids ...int64) *DictCreate {
	_c.mutation.AddDicthtIDs(ids...)
	return _c
}

// AddDictht adds the "dictht" edges to the Dictht entity.
func (_c *DictCreate) AddDictht(v ...*Dictht) *DictCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddDicthtIDs(ids...)
}

// Mutation returns the DictMutation object of the builder.
func (_c *DictCreate) Mutation() *DictMutation {
	return _c.mutation
}

// Save creates the Dict in the database.
func (_c *DictCreate) Save(ctx context.Context) (*Dict, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *DictCreate) SaveX(ctx context.Context) *Dict {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DictCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DictCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *DictCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := dict.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := dict.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Delete(); !ok {
		v := dict.DefaultDelete
		_c.mutation.SetDelete(v)
	}
	if _, ok := _c.mutation.CreatedID(); !ok {
		v := dict.DefaultCreatedID
		_c.mutation.SetCreatedID(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := dict.DefaultStatus
		_c.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *DictCreate) check() error {
	return nil
}

func (_c *DictCreate) sqlSave(ctx context.Context) (*Dict, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *DictCreate) createSpec() (*Dict, *sqlgraph.CreateSpec) {
	var (
		_node = &Dict{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(dict.Table, sqlgraph.NewFieldSpec(dict.FieldID, field.TypeInt64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(dict.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(dict.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Delete(); ok {
		_spec.SetField(dict.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := _c.mutation.CreatedID(); ok {
		_spec.SetField(dict.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(dict.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(dict.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(dict.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(dict.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := _c.mutation.DicthtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dict.DicthtTable,
			Columns: []string{dict.DicthtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictht.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DictCreateBulk is the builder for creating many Dict entities in bulk.
type DictCreateBulk struct {
	config
	err      error
	builders []*DictCreate
}

// Save creates the Dict entities in the database.
func (_c *DictCreateBulk) Save(ctx context.Context) ([]*Dict, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Dict, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DictMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *DictCreateBulk) SaveX(ctx context.Context) []*Dict {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DictCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DictCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
