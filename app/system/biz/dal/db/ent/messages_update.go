// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"system/biz/dal/db/ent/messages"
	"system/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessagesUpdate is the builder for updating Messages entities.
type MessagesUpdate struct {
	config
	hooks    []Hook
	mutation *MessagesMutation
}

// Where appends a list predicates to the MessagesUpdate builder.
func (_u *MessagesUpdate) Where(ps ...predicate.Messages) *MessagesUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MessagesUpdate) SetUpdatedAt(v time.Time) *MessagesUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MessagesUpdate) ClearUpdatedAt() *MessagesUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *MessagesUpdate) SetDelete(v int64) *MessagesUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *MessagesUpdate) SetNillableDelete(v *int64) *MessagesUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *MessagesUpdate) AddDelete(v int64) *MessagesUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *MessagesUpdate) ClearDelete() *MessagesUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *MessagesUpdate) SetCreatedID(v int64) *MessagesUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *MessagesUpdate) SetNillableCreatedID(v *int64) *MessagesUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *MessagesUpdate) AddCreatedID(v int64) *MessagesUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *MessagesUpdate) ClearCreatedID() *MessagesUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetType sets the "type" field.
func (_u *MessagesUpdate) SetType(v string) *MessagesUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *MessagesUpdate) SetNillableType(v *string) *MessagesUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetToUserID sets the "to_user_id" field.
func (_u *MessagesUpdate) SetToUserID(v string) *MessagesUpdate {
	_u.mutation.SetToUserID(v)
	return _u
}

// SetNillableToUserID sets the "to_user_id" field if the given value is not nil.
func (_u *MessagesUpdate) SetNillableToUserID(v *string) *MessagesUpdate {
	if v != nil {
		_u.SetToUserID(*v)
	}
	return _u
}

// SetFromUserID sets the "from_user_id" field.
func (_u *MessagesUpdate) SetFromUserID(v string) *MessagesUpdate {
	_u.mutation.SetFromUserID(v)
	return _u
}

// SetNillableFromUserID sets the "from_user_id" field if the given value is not nil.
func (_u *MessagesUpdate) SetNillableFromUserID(v *string) *MessagesUpdate {
	if v != nil {
		_u.SetFromUserID(*v)
	}
	return _u
}

// SetContent sets the "content" field.
func (_u *MessagesUpdate) SetContent(v string) *MessagesUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *MessagesUpdate) SetNillableContent(v *string) *MessagesUpdate {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// Mutation returns the MessagesMutation object of the builder.
func (_u *MessagesUpdate) Mutation() *MessagesMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MessagesUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MessagesUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MessagesUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MessagesUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MessagesUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := messages.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MessagesUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(messages.Table, messages.Columns, sqlgraph.NewFieldSpec(messages.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(messages.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(messages.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(messages.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(messages.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(messages.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(messages.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(messages.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(messages.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(messages.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(messages.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ToUserID(); ok {
		_spec.SetField(messages.FieldToUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.FromUserID(); ok {
		_spec.SetField(messages.FieldFromUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(messages.FieldContent, field.TypeString, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messages.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MessagesUpdateOne is the builder for updating a single Messages entity.
type MessagesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessagesMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MessagesUpdateOne) SetUpdatedAt(v time.Time) *MessagesUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MessagesUpdateOne) ClearUpdatedAt() *MessagesUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *MessagesUpdateOne) SetDelete(v int64) *MessagesUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *MessagesUpdateOne) SetNillableDelete(v *int64) *MessagesUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *MessagesUpdateOne) AddDelete(v int64) *MessagesUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *MessagesUpdateOne) ClearDelete() *MessagesUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *MessagesUpdateOne) SetCreatedID(v int64) *MessagesUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *MessagesUpdateOne) SetNillableCreatedID(v *int64) *MessagesUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *MessagesUpdateOne) AddCreatedID(v int64) *MessagesUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *MessagesUpdateOne) ClearCreatedID() *MessagesUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetType sets the "type" field.
func (_u *MessagesUpdateOne) SetType(v string) *MessagesUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *MessagesUpdateOne) SetNillableType(v *string) *MessagesUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetToUserID sets the "to_user_id" field.
func (_u *MessagesUpdateOne) SetToUserID(v string) *MessagesUpdateOne {
	_u.mutation.SetToUserID(v)
	return _u
}

// SetNillableToUserID sets the "to_user_id" field if the given value is not nil.
func (_u *MessagesUpdateOne) SetNillableToUserID(v *string) *MessagesUpdateOne {
	if v != nil {
		_u.SetToUserID(*v)
	}
	return _u
}

// SetFromUserID sets the "from_user_id" field.
func (_u *MessagesUpdateOne) SetFromUserID(v string) *MessagesUpdateOne {
	_u.mutation.SetFromUserID(v)
	return _u
}

// SetNillableFromUserID sets the "from_user_id" field if the given value is not nil.
func (_u *MessagesUpdateOne) SetNillableFromUserID(v *string) *MessagesUpdateOne {
	if v != nil {
		_u.SetFromUserID(*v)
	}
	return _u
}

// SetContent sets the "content" field.
func (_u *MessagesUpdateOne) SetContent(v string) *MessagesUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *MessagesUpdateOne) SetNillableContent(v *string) *MessagesUpdateOne {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// Mutation returns the MessagesMutation object of the builder.
func (_u *MessagesUpdateOne) Mutation() *MessagesMutation {
	return _u.mutation
}

// Where appends a list predicates to the MessagesUpdate builder.
func (_u *MessagesUpdateOne) Where(ps ...predicate.Messages) *MessagesUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MessagesUpdateOne) Select(field string, fields ...string) *MessagesUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Messages entity.
func (_u *MessagesUpdateOne) Save(ctx context.Context) (*Messages, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MessagesUpdateOne) SaveX(ctx context.Context) *Messages {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MessagesUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MessagesUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MessagesUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := messages.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MessagesUpdateOne) sqlSave(ctx context.Context) (_node *Messages, err error) {
	_spec := sqlgraph.NewUpdateSpec(messages.Table, messages.Columns, sqlgraph.NewFieldSpec(messages.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Messages.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, messages.FieldID)
		for _, f := range fields {
			if !messages.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != messages.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(messages.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(messages.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(messages.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(messages.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(messages.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(messages.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(messages.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(messages.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(messages.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(messages.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ToUserID(); ok {
		_spec.SetField(messages.FieldToUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.FromUserID(); ok {
		_spec.SetField(messages.FieldFromUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(messages.FieldContent, field.TypeString, value)
	}
	_node = &Messages{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messages.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
