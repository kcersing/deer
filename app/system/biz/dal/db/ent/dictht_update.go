// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"system/biz/dal/db/ent/dict"
	"system/biz/dal/db/ent/dictht"
	"system/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DicthtUpdate is the builder for updating Dictht entities.
type DicthtUpdate struct {
	config
	hooks    []Hook
	mutation *DicthtMutation
}

// Where appends a list predicates to the DicthtUpdate builder.
func (_u *DicthtUpdate) Where(ps ...predicate.Dictht) *DicthtUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DicthtUpdate) SetUpdatedAt(v time.Time) *DicthtUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *DicthtUpdate) ClearUpdatedAt() *DicthtUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *DicthtUpdate) SetDelete(v int64) *DicthtUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *DicthtUpdate) SetNillableDelete(v *int64) *DicthtUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *DicthtUpdate) AddDelete(v int64) *DicthtUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *DicthtUpdate) ClearDelete() *DicthtUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *DicthtUpdate) SetCreatedID(v int64) *DicthtUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *DicthtUpdate) SetNillableCreatedID(v *int64) *DicthtUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *DicthtUpdate) AddCreatedID(v int64) *DicthtUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *DicthtUpdate) ClearCreatedID() *DicthtUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *DicthtUpdate) SetStatus(v int64) *DicthtUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DicthtUpdate) SetNillableStatus(v *int64) *DicthtUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *DicthtUpdate) AddStatus(v int64) *DicthtUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *DicthtUpdate) ClearStatus() *DicthtUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetTitle sets the "title" field.
func (_u *DicthtUpdate) SetTitle(v string) *DicthtUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *DicthtUpdate) SetNillableTitle(v *string) *DicthtUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *DicthtUpdate) ClearTitle() *DicthtUpdate {
	_u.mutation.ClearTitle()
	return _u
}

// SetKey sets the "key" field.
func (_u *DicthtUpdate) SetKey(v string) *DicthtUpdate {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *DicthtUpdate) SetNillableKey(v *string) *DicthtUpdate {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// ClearKey clears the value of the "key" field.
func (_u *DicthtUpdate) ClearKey() *DicthtUpdate {
	_u.mutation.ClearKey()
	return _u
}

// SetValue sets the "value" field.
func (_u *DicthtUpdate) SetValue(v string) *DicthtUpdate {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *DicthtUpdate) SetNillableValue(v *string) *DicthtUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *DicthtUpdate) ClearValue() *DicthtUpdate {
	_u.mutation.ClearValue()
	return _u
}

// SetDictID sets the "dict_id" field.
func (_u *DicthtUpdate) SetDictID(v int64) *DicthtUpdate {
	_u.mutation.SetDictID(v)
	return _u
}

// SetNillableDictID sets the "dict_id" field if the given value is not nil.
func (_u *DicthtUpdate) SetNillableDictID(v *int64) *DicthtUpdate {
	if v != nil {
		_u.SetDictID(*v)
	}
	return _u
}

// ClearDictID clears the value of the "dict_id" field.
func (_u *DicthtUpdate) ClearDictID() *DicthtUpdate {
	_u.mutation.ClearDictID()
	return _u
}

// SetDict sets the "dict" edge to the Dict entity.
func (_u *DicthtUpdate) SetDict(v *Dict) *DicthtUpdate {
	return _u.SetDictID(v.ID)
}

// Mutation returns the DicthtMutation object of the builder.
func (_u *DicthtUpdate) Mutation() *DicthtMutation {
	return _u.mutation
}

// ClearDict clears the "dict" edge to the Dict entity.
func (_u *DicthtUpdate) ClearDict() *DicthtUpdate {
	_u.mutation.ClearDict()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DicthtUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DicthtUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DicthtUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DicthtUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DicthtUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := dictht.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *DicthtUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(dictht.Table, dictht.Columns, sqlgraph.NewFieldSpec(dictht.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(dictht.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dictht.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(dictht.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(dictht.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(dictht.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(dictht.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(dictht.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(dictht.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(dictht.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(dictht.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(dictht.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(dictht.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(dictht.FieldTitle, field.TypeString, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(dictht.FieldTitle, field.TypeString)
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(dictht.FieldKey, field.TypeString, value)
	}
	if _u.mutation.KeyCleared() {
		_spec.ClearField(dictht.FieldKey, field.TypeString)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(dictht.FieldValue, field.TypeString, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(dictht.FieldValue, field.TypeString)
	}
	if _u.mutation.DictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dictht.DictTable,
			Columns: []string{dictht.DictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dict.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dictht.DictTable,
			Columns: []string{dictht.DictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dict.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictht.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DicthtUpdateOne is the builder for updating a single Dictht entity.
type DicthtUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DicthtMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DicthtUpdateOne) SetUpdatedAt(v time.Time) *DicthtUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *DicthtUpdateOne) ClearUpdatedAt() *DicthtUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *DicthtUpdateOne) SetDelete(v int64) *DicthtUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *DicthtUpdateOne) SetNillableDelete(v *int64) *DicthtUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *DicthtUpdateOne) AddDelete(v int64) *DicthtUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *DicthtUpdateOne) ClearDelete() *DicthtUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *DicthtUpdateOne) SetCreatedID(v int64) *DicthtUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *DicthtUpdateOne) SetNillableCreatedID(v *int64) *DicthtUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *DicthtUpdateOne) AddCreatedID(v int64) *DicthtUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *DicthtUpdateOne) ClearCreatedID() *DicthtUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *DicthtUpdateOne) SetStatus(v int64) *DicthtUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DicthtUpdateOne) SetNillableStatus(v *int64) *DicthtUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *DicthtUpdateOne) AddStatus(v int64) *DicthtUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *DicthtUpdateOne) ClearStatus() *DicthtUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetTitle sets the "title" field.
func (_u *DicthtUpdateOne) SetTitle(v string) *DicthtUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *DicthtUpdateOne) SetNillableTitle(v *string) *DicthtUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *DicthtUpdateOne) ClearTitle() *DicthtUpdateOne {
	_u.mutation.ClearTitle()
	return _u
}

// SetKey sets the "key" field.
func (_u *DicthtUpdateOne) SetKey(v string) *DicthtUpdateOne {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *DicthtUpdateOne) SetNillableKey(v *string) *DicthtUpdateOne {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// ClearKey clears the value of the "key" field.
func (_u *DicthtUpdateOne) ClearKey() *DicthtUpdateOne {
	_u.mutation.ClearKey()
	return _u
}

// SetValue sets the "value" field.
func (_u *DicthtUpdateOne) SetValue(v string) *DicthtUpdateOne {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *DicthtUpdateOne) SetNillableValue(v *string) *DicthtUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *DicthtUpdateOne) ClearValue() *DicthtUpdateOne {
	_u.mutation.ClearValue()
	return _u
}

// SetDictID sets the "dict_id" field.
func (_u *DicthtUpdateOne) SetDictID(v int64) *DicthtUpdateOne {
	_u.mutation.SetDictID(v)
	return _u
}

// SetNillableDictID sets the "dict_id" field if the given value is not nil.
func (_u *DicthtUpdateOne) SetNillableDictID(v *int64) *DicthtUpdateOne {
	if v != nil {
		_u.SetDictID(*v)
	}
	return _u
}

// ClearDictID clears the value of the "dict_id" field.
func (_u *DicthtUpdateOne) ClearDictID() *DicthtUpdateOne {
	_u.mutation.ClearDictID()
	return _u
}

// SetDict sets the "dict" edge to the Dict entity.
func (_u *DicthtUpdateOne) SetDict(v *Dict) *DicthtUpdateOne {
	return _u.SetDictID(v.ID)
}

// Mutation returns the DicthtMutation object of the builder.
func (_u *DicthtUpdateOne) Mutation() *DicthtMutation {
	return _u.mutation
}

// ClearDict clears the "dict" edge to the Dict entity.
func (_u *DicthtUpdateOne) ClearDict() *DicthtUpdateOne {
	_u.mutation.ClearDict()
	return _u
}

// Where appends a list predicates to the DicthtUpdate builder.
func (_u *DicthtUpdateOne) Where(ps ...predicate.Dictht) *DicthtUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DicthtUpdateOne) Select(field string, fields ...string) *DicthtUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Dictht entity.
func (_u *DicthtUpdateOne) Save(ctx context.Context) (*Dictht, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DicthtUpdateOne) SaveX(ctx context.Context) *Dictht {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DicthtUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DicthtUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DicthtUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := dictht.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *DicthtUpdateOne) sqlSave(ctx context.Context) (_node *Dictht, err error) {
	_spec := sqlgraph.NewUpdateSpec(dictht.Table, dictht.Columns, sqlgraph.NewFieldSpec(dictht.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dictht.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dictht.FieldID)
		for _, f := range fields {
			if !dictht.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dictht.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(dictht.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dictht.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(dictht.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(dictht.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(dictht.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(dictht.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(dictht.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(dictht.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(dictht.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(dictht.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(dictht.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(dictht.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(dictht.FieldTitle, field.TypeString, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(dictht.FieldTitle, field.TypeString)
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(dictht.FieldKey, field.TypeString, value)
	}
	if _u.mutation.KeyCleared() {
		_spec.ClearField(dictht.FieldKey, field.TypeString)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(dictht.FieldValue, field.TypeString, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(dictht.FieldValue, field.TypeString)
	}
	if _u.mutation.DictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dictht.DictTable,
			Columns: []string{dictht.DictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dict.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dictht.DictTable,
			Columns: []string{dictht.DictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dict.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Dictht{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictht.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
