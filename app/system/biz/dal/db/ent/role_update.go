// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"system/biz/dal/db/ent/api"
	"system/biz/dal/db/ent/menu"
	"system/biz/dal/db/ent/predicate"
	"system/biz/dal/db/ent/role"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// RoleUpdate is the builder for updating Role entities.
type RoleUpdate struct {
	config
	hooks    []Hook
	mutation *RoleMutation
}

// Where appends a list predicates to the RoleUpdate builder.
func (_u *RoleUpdate) Where(ps ...predicate.Role) *RoleUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RoleUpdate) SetUpdatedAt(v time.Time) *RoleUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *RoleUpdate) ClearUpdatedAt() *RoleUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *RoleUpdate) SetDelete(v int64) *RoleUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableDelete(v *int64) *RoleUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *RoleUpdate) AddDelete(v int64) *RoleUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *RoleUpdate) ClearDelete() *RoleUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *RoleUpdate) SetCreatedID(v int64) *RoleUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableCreatedID(v *int64) *RoleUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *RoleUpdate) AddCreatedID(v int64) *RoleUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *RoleUpdate) ClearCreatedID() *RoleUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *RoleUpdate) SetStatus(v int64) *RoleUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableStatus(v *int64) *RoleUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *RoleUpdate) AddStatus(v int64) *RoleUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *RoleUpdate) ClearStatus() *RoleUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetName sets the "name" field.
func (_u *RoleUpdate) SetName(v string) *RoleUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableName(v *string) *RoleUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *RoleUpdate) ClearName() *RoleUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetValue sets the "value" field.
func (_u *RoleUpdate) SetValue(v string) *RoleUpdate {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableValue(v *string) *RoleUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *RoleUpdate) ClearValue() *RoleUpdate {
	_u.mutation.ClearValue()
	return _u
}

// SetDefaultRouter sets the "default_router" field.
func (_u *RoleUpdate) SetDefaultRouter(v string) *RoleUpdate {
	_u.mutation.SetDefaultRouter(v)
	return _u
}

// SetNillableDefaultRouter sets the "default_router" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableDefaultRouter(v *string) *RoleUpdate {
	if v != nil {
		_u.SetDefaultRouter(*v)
	}
	return _u
}

// ClearDefaultRouter clears the value of the "default_router" field.
func (_u *RoleUpdate) ClearDefaultRouter() *RoleUpdate {
	_u.mutation.ClearDefaultRouter()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *RoleUpdate) SetRemark(v string) *RoleUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableRemark(v *string) *RoleUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *RoleUpdate) ClearRemark() *RoleUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// SetOrderNo sets the "order_no" field.
func (_u *RoleUpdate) SetOrderNo(v int64) *RoleUpdate {
	_u.mutation.ResetOrderNo()
	_u.mutation.SetOrderNo(v)
	return _u
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableOrderNo(v *int64) *RoleUpdate {
	if v != nil {
		_u.SetOrderNo(*v)
	}
	return _u
}

// AddOrderNo adds value to the "order_no" field.
func (_u *RoleUpdate) AddOrderNo(v int64) *RoleUpdate {
	_u.mutation.AddOrderNo(v)
	return _u
}

// ClearOrderNo clears the value of the "order_no" field.
func (_u *RoleUpdate) ClearOrderNo() *RoleUpdate {
	_u.mutation.ClearOrderNo()
	return _u
}

// SetApis sets the "apis" field.
func (_u *RoleUpdate) SetApis(v []int) *RoleUpdate {
	_u.mutation.SetApis(v)
	return _u
}

// AppendApis appends value to the "apis" field.
func (_u *RoleUpdate) AppendApis(v []int) *RoleUpdate {
	_u.mutation.AppendApis(v)
	return _u
}

// ClearApis clears the value of the "apis" field.
func (_u *RoleUpdate) ClearApis() *RoleUpdate {
	_u.mutation.ClearApis()
	return _u
}

// AddMenuIDs adds the "menus" edge to the Menu entity by IDs.
func (_u *RoleUpdate) AddMenuIDs(ids ...int64) *RoleUpdate {
	_u.mutation.AddMenuIDs(ids...)
	return _u
}

// AddMenus adds the "menus" edges to the Menu entity.
func (_u *RoleUpdate) AddMenus(v ...*Menu) *RoleUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMenuIDs(ids...)
}

// AddAPIIDs adds the "api" edge to the API entity by IDs.
func (_u *RoleUpdate) AddAPIIDs(ids ...int64) *RoleUpdate {
	_u.mutation.AddAPIIDs(ids...)
	return _u
}

// AddAPI adds the "api" edges to the API entity.
func (_u *RoleUpdate) AddAPI(v ...*API) *RoleUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAPIIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (_u *RoleUpdate) Mutation() *RoleMutation {
	return _u.mutation
}

// ClearMenus clears all "menus" edges to the Menu entity.
func (_u *RoleUpdate) ClearMenus() *RoleUpdate {
	_u.mutation.ClearMenus()
	return _u
}

// RemoveMenuIDs removes the "menus" edge to Menu entities by IDs.
func (_u *RoleUpdate) RemoveMenuIDs(ids ...int64) *RoleUpdate {
	_u.mutation.RemoveMenuIDs(ids...)
	return _u
}

// RemoveMenus removes "menus" edges to Menu entities.
func (_u *RoleUpdate) RemoveMenus(v ...*Menu) *RoleUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMenuIDs(ids...)
}

// ClearAPI clears all "api" edges to the API entity.
func (_u *RoleUpdate) ClearAPI() *RoleUpdate {
	_u.mutation.ClearAPI()
	return _u
}

// RemoveAPIIDs removes the "api" edge to API entities by IDs.
func (_u *RoleUpdate) RemoveAPIIDs(ids ...int64) *RoleUpdate {
	_u.mutation.RemoveAPIIDs(ids...)
	return _u
}

// RemoveAPI removes "api" edges to API entities.
func (_u *RoleUpdate) RemoveAPI(v ...*API) *RoleUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAPIIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RoleUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RoleUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RoleUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RoleUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RoleUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := role.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *RoleUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(role.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(role.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(role.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(role.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(role.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(role.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(role.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(role.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(role.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(role.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(role.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(role.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(role.FieldValue, field.TypeString, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(role.FieldValue, field.TypeString)
	}
	if value, ok := _u.mutation.DefaultRouter(); ok {
		_spec.SetField(role.FieldDefaultRouter, field.TypeString, value)
	}
	if _u.mutation.DefaultRouterCleared() {
		_spec.ClearField(role.FieldDefaultRouter, field.TypeString)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(role.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(role.FieldRemark, field.TypeString)
	}
	if value, ok := _u.mutation.OrderNo(); ok {
		_spec.SetField(role.FieldOrderNo, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedOrderNo(); ok {
		_spec.AddField(role.FieldOrderNo, field.TypeInt64, value)
	}
	if _u.mutation.OrderNoCleared() {
		_spec.ClearField(role.FieldOrderNo, field.TypeInt64)
	}
	if value, ok := _u.mutation.Apis(); ok {
		_spec.SetField(role.FieldApis, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedApis(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, role.FieldApis, value)
		})
	}
	if _u.mutation.ApisCleared() {
		_spec.ClearField(role.FieldApis, field.TypeJSON)
	}
	if _u.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.MenusTable,
			Columns: role.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMenusIDs(); len(nodes) > 0 && !_u.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.MenusTable,
			Columns: role.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.MenusTable,
			Columns: role.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.APICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.APITable,
			Columns: role.APIPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(api.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAPIIDs(); len(nodes) > 0 && !_u.mutation.APICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.APITable,
			Columns: role.APIPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(api.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.APIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.APITable,
			Columns: role.APIPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(api.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RoleUpdateOne is the builder for updating a single Role entity.
type RoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoleMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RoleUpdateOne) SetUpdatedAt(v time.Time) *RoleUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *RoleUpdateOne) ClearUpdatedAt() *RoleUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *RoleUpdateOne) SetDelete(v int64) *RoleUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableDelete(v *int64) *RoleUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *RoleUpdateOne) AddDelete(v int64) *RoleUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *RoleUpdateOne) ClearDelete() *RoleUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *RoleUpdateOne) SetCreatedID(v int64) *RoleUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableCreatedID(v *int64) *RoleUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *RoleUpdateOne) AddCreatedID(v int64) *RoleUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *RoleUpdateOne) ClearCreatedID() *RoleUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *RoleUpdateOne) SetStatus(v int64) *RoleUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableStatus(v *int64) *RoleUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *RoleUpdateOne) AddStatus(v int64) *RoleUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *RoleUpdateOne) ClearStatus() *RoleUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetName sets the "name" field.
func (_u *RoleUpdateOne) SetName(v string) *RoleUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableName(v *string) *RoleUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *RoleUpdateOne) ClearName() *RoleUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetValue sets the "value" field.
func (_u *RoleUpdateOne) SetValue(v string) *RoleUpdateOne {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableValue(v *string) *RoleUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *RoleUpdateOne) ClearValue() *RoleUpdateOne {
	_u.mutation.ClearValue()
	return _u
}

// SetDefaultRouter sets the "default_router" field.
func (_u *RoleUpdateOne) SetDefaultRouter(v string) *RoleUpdateOne {
	_u.mutation.SetDefaultRouter(v)
	return _u
}

// SetNillableDefaultRouter sets the "default_router" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableDefaultRouter(v *string) *RoleUpdateOne {
	if v != nil {
		_u.SetDefaultRouter(*v)
	}
	return _u
}

// ClearDefaultRouter clears the value of the "default_router" field.
func (_u *RoleUpdateOne) ClearDefaultRouter() *RoleUpdateOne {
	_u.mutation.ClearDefaultRouter()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *RoleUpdateOne) SetRemark(v string) *RoleUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableRemark(v *string) *RoleUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *RoleUpdateOne) ClearRemark() *RoleUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// SetOrderNo sets the "order_no" field.
func (_u *RoleUpdateOne) SetOrderNo(v int64) *RoleUpdateOne {
	_u.mutation.ResetOrderNo()
	_u.mutation.SetOrderNo(v)
	return _u
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableOrderNo(v *int64) *RoleUpdateOne {
	if v != nil {
		_u.SetOrderNo(*v)
	}
	return _u
}

// AddOrderNo adds value to the "order_no" field.
func (_u *RoleUpdateOne) AddOrderNo(v int64) *RoleUpdateOne {
	_u.mutation.AddOrderNo(v)
	return _u
}

// ClearOrderNo clears the value of the "order_no" field.
func (_u *RoleUpdateOne) ClearOrderNo() *RoleUpdateOne {
	_u.mutation.ClearOrderNo()
	return _u
}

// SetApis sets the "apis" field.
func (_u *RoleUpdateOne) SetApis(v []int) *RoleUpdateOne {
	_u.mutation.SetApis(v)
	return _u
}

// AppendApis appends value to the "apis" field.
func (_u *RoleUpdateOne) AppendApis(v []int) *RoleUpdateOne {
	_u.mutation.AppendApis(v)
	return _u
}

// ClearApis clears the value of the "apis" field.
func (_u *RoleUpdateOne) ClearApis() *RoleUpdateOne {
	_u.mutation.ClearApis()
	return _u
}

// AddMenuIDs adds the "menus" edge to the Menu entity by IDs.
func (_u *RoleUpdateOne) AddMenuIDs(ids ...int64) *RoleUpdateOne {
	_u.mutation.AddMenuIDs(ids...)
	return _u
}

// AddMenus adds the "menus" edges to the Menu entity.
func (_u *RoleUpdateOne) AddMenus(v ...*Menu) *RoleUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMenuIDs(ids...)
}

// AddAPIIDs adds the "api" edge to the API entity by IDs.
func (_u *RoleUpdateOne) AddAPIIDs(ids ...int64) *RoleUpdateOne {
	_u.mutation.AddAPIIDs(ids...)
	return _u
}

// AddAPI adds the "api" edges to the API entity.
func (_u *RoleUpdateOne) AddAPI(v ...*API) *RoleUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAPIIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (_u *RoleUpdateOne) Mutation() *RoleMutation {
	return _u.mutation
}

// ClearMenus clears all "menus" edges to the Menu entity.
func (_u *RoleUpdateOne) ClearMenus() *RoleUpdateOne {
	_u.mutation.ClearMenus()
	return _u
}

// RemoveMenuIDs removes the "menus" edge to Menu entities by IDs.
func (_u *RoleUpdateOne) RemoveMenuIDs(ids ...int64) *RoleUpdateOne {
	_u.mutation.RemoveMenuIDs(ids...)
	return _u
}

// RemoveMenus removes "menus" edges to Menu entities.
func (_u *RoleUpdateOne) RemoveMenus(v ...*Menu) *RoleUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMenuIDs(ids...)
}

// ClearAPI clears all "api" edges to the API entity.
func (_u *RoleUpdateOne) ClearAPI() *RoleUpdateOne {
	_u.mutation.ClearAPI()
	return _u
}

// RemoveAPIIDs removes the "api" edge to API entities by IDs.
func (_u *RoleUpdateOne) RemoveAPIIDs(ids ...int64) *RoleUpdateOne {
	_u.mutation.RemoveAPIIDs(ids...)
	return _u
}

// RemoveAPI removes "api" edges to API entities.
func (_u *RoleUpdateOne) RemoveAPI(v ...*API) *RoleUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAPIIDs(ids...)
}

// Where appends a list predicates to the RoleUpdate builder.
func (_u *RoleUpdateOne) Where(ps ...predicate.Role) *RoleUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RoleUpdateOne) Select(field string, fields ...string) *RoleUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Role entity.
func (_u *RoleUpdateOne) Save(ctx context.Context) (*Role, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RoleUpdateOne) SaveX(ctx context.Context) *Role {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RoleUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RoleUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RoleUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := role.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *RoleUpdateOne) sqlSave(ctx context.Context) (_node *Role, err error) {
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Role.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, role.FieldID)
		for _, f := range fields {
			if !role.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(role.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(role.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(role.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(role.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(role.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(role.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(role.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(role.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(role.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(role.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(role.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(role.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(role.FieldValue, field.TypeString, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(role.FieldValue, field.TypeString)
	}
	if value, ok := _u.mutation.DefaultRouter(); ok {
		_spec.SetField(role.FieldDefaultRouter, field.TypeString, value)
	}
	if _u.mutation.DefaultRouterCleared() {
		_spec.ClearField(role.FieldDefaultRouter, field.TypeString)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(role.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(role.FieldRemark, field.TypeString)
	}
	if value, ok := _u.mutation.OrderNo(); ok {
		_spec.SetField(role.FieldOrderNo, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedOrderNo(); ok {
		_spec.AddField(role.FieldOrderNo, field.TypeInt64, value)
	}
	if _u.mutation.OrderNoCleared() {
		_spec.ClearField(role.FieldOrderNo, field.TypeInt64)
	}
	if value, ok := _u.mutation.Apis(); ok {
		_spec.SetField(role.FieldApis, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedApis(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, role.FieldApis, value)
		})
	}
	if _u.mutation.ApisCleared() {
		_spec.ClearField(role.FieldApis, field.TypeJSON)
	}
	if _u.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.MenusTable,
			Columns: role.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMenusIDs(); len(nodes) > 0 && !_u.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.MenusTable,
			Columns: role.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.MenusTable,
			Columns: role.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.APICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.APITable,
			Columns: role.APIPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(api.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAPIIDs(); len(nodes) > 0 && !_u.mutation.APICleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.APITable,
			Columns: role.APIPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(api.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.APIIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.APITable,
			Columns: role.APIPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(api.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Role{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
