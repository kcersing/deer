// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"system/biz/dal/db/ent/menu"
	"system/biz/dal/db/ent/predicate"
	"system/biz/dal/db/ent/role"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuUpdate is the builder for updating Menu entities.
type MenuUpdate struct {
	config
	hooks    []Hook
	mutation *MenuMutation
}

// Where appends a list predicates to the MenuUpdate builder.
func (_u *MenuUpdate) Where(ps ...predicate.Menu) *MenuUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MenuUpdate) SetUpdatedAt(v time.Time) *MenuUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MenuUpdate) ClearUpdatedAt() *MenuUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *MenuUpdate) SetDelete(v int64) *MenuUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableDelete(v *int64) *MenuUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *MenuUpdate) AddDelete(v int64) *MenuUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *MenuUpdate) ClearDelete() *MenuUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *MenuUpdate) SetCreatedID(v int64) *MenuUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableCreatedID(v *int64) *MenuUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *MenuUpdate) AddCreatedID(v int64) *MenuUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *MenuUpdate) ClearCreatedID() *MenuUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *MenuUpdate) SetStatus(v int64) *MenuUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableStatus(v *int64) *MenuUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *MenuUpdate) AddStatus(v int64) *MenuUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *MenuUpdate) ClearStatus() *MenuUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetPath sets the "path" field.
func (_u *MenuUpdate) SetPath(v string) *MenuUpdate {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *MenuUpdate) SetNillablePath(v *string) *MenuUpdate {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *MenuUpdate) ClearPath() *MenuUpdate {
	_u.mutation.ClearPath()
	return _u
}

// SetName sets the "name" field.
func (_u *MenuUpdate) SetName(v string) *MenuUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableName(v *string) *MenuUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *MenuUpdate) ClearName() *MenuUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetComponent sets the "component" field.
func (_u *MenuUpdate) SetComponent(v string) *MenuUpdate {
	_u.mutation.SetComponent(v)
	return _u
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableComponent(v *string) *MenuUpdate {
	if v != nil {
		_u.SetComponent(*v)
	}
	return _u
}

// ClearComponent clears the value of the "component" field.
func (_u *MenuUpdate) ClearComponent() *MenuUpdate {
	_u.mutation.ClearComponent()
	return _u
}

// SetRedirect sets the "redirect" field.
func (_u *MenuUpdate) SetRedirect(v string) *MenuUpdate {
	_u.mutation.SetRedirect(v)
	return _u
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableRedirect(v *string) *MenuUpdate {
	if v != nil {
		_u.SetRedirect(*v)
	}
	return _u
}

// ClearRedirect clears the value of the "redirect" field.
func (_u *MenuUpdate) ClearRedirect() *MenuUpdate {
	_u.mutation.ClearRedirect()
	return _u
}

// SetIcon sets the "icon" field.
func (_u *MenuUpdate) SetIcon(v string) *MenuUpdate {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableIcon(v *string) *MenuUpdate {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// ClearIcon clears the value of the "icon" field.
func (_u *MenuUpdate) ClearIcon() *MenuUpdate {
	_u.mutation.ClearIcon()
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *MenuUpdate) SetParentID(v int64) *MenuUpdate {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableParentID(v *int64) *MenuUpdate {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *MenuUpdate) ClearParentID() *MenuUpdate {
	_u.mutation.ClearParentID()
	return _u
}

// SetOrderNo sets the "order_no" field.
func (_u *MenuUpdate) SetOrderNo(v int64) *MenuUpdate {
	_u.mutation.ResetOrderNo()
	_u.mutation.SetOrderNo(v)
	return _u
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableOrderNo(v *int64) *MenuUpdate {
	if v != nil {
		_u.SetOrderNo(*v)
	}
	return _u
}

// AddOrderNo adds value to the "order_no" field.
func (_u *MenuUpdate) AddOrderNo(v int64) *MenuUpdate {
	_u.mutation.AddOrderNo(v)
	return _u
}

// ClearOrderNo clears the value of the "order_no" field.
func (_u *MenuUpdate) ClearOrderNo() *MenuUpdate {
	_u.mutation.ClearOrderNo()
	return _u
}

// SetIgnore sets the "ignore" field.
func (_u *MenuUpdate) SetIgnore(v int64) *MenuUpdate {
	_u.mutation.ResetIgnore()
	_u.mutation.SetIgnore(v)
	return _u
}

// SetNillableIgnore sets the "ignore" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableIgnore(v *int64) *MenuUpdate {
	if v != nil {
		_u.SetIgnore(*v)
	}
	return _u
}

// AddIgnore adds value to the "ignore" field.
func (_u *MenuUpdate) AddIgnore(v int64) *MenuUpdate {
	_u.mutation.AddIgnore(v)
	return _u
}

// ClearIgnore clears the value of the "ignore" field.
func (_u *MenuUpdate) ClearIgnore() *MenuUpdate {
	_u.mutation.ClearIgnore()
	return _u
}

// SetMenuType sets the "menu_type" field.
func (_u *MenuUpdate) SetMenuType(v int64) *MenuUpdate {
	_u.mutation.ResetMenuType()
	_u.mutation.SetMenuType(v)
	return _u
}

// SetNillableMenuType sets the "menu_type" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableMenuType(v *int64) *MenuUpdate {
	if v != nil {
		_u.SetMenuType(*v)
	}
	return _u
}

// AddMenuType adds value to the "menu_type" field.
func (_u *MenuUpdate) AddMenuType(v int64) *MenuUpdate {
	_u.mutation.AddMenuType(v)
	return _u
}

// ClearMenuType clears the value of the "menu_type" field.
func (_u *MenuUpdate) ClearMenuType() *MenuUpdate {
	_u.mutation.ClearMenuType()
	return _u
}

// SetLevel sets the "level" field.
func (_u *MenuUpdate) SetLevel(v int64) *MenuUpdate {
	_u.mutation.ResetLevel()
	_u.mutation.SetLevel(v)
	return _u
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableLevel(v *int64) *MenuUpdate {
	if v != nil {
		_u.SetLevel(*v)
	}
	return _u
}

// AddLevel adds value to the "level" field.
func (_u *MenuUpdate) AddLevel(v int64) *MenuUpdate {
	_u.mutation.AddLevel(v)
	return _u
}

// ClearLevel clears the value of the "level" field.
func (_u *MenuUpdate) ClearLevel() *MenuUpdate {
	_u.mutation.ClearLevel()
	return _u
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (_u *MenuUpdate) AddRoleIDs(ids ...int64) *MenuUpdate {
	_u.mutation.AddRoleIDs(ids...)
	return _u
}

// AddRoles adds the "roles" edges to the Role entity.
func (_u *MenuUpdate) AddRoles(v ...*Role) *MenuUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRoleIDs(ids...)
}

// SetParent sets the "parent" edge to the Menu entity.
func (_u *MenuUpdate) SetParent(v *Menu) *MenuUpdate {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (_u *MenuUpdate) AddChildIDs(ids ...int64) *MenuUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Menu entity.
func (_u *MenuUpdate) AddChildren(v ...*Menu) *MenuUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (_u *MenuUpdate) Mutation() *MenuMutation {
	return _u.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (_u *MenuUpdate) ClearRoles() *MenuUpdate {
	_u.mutation.ClearRoles()
	return _u
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (_u *MenuUpdate) RemoveRoleIDs(ids ...int64) *MenuUpdate {
	_u.mutation.RemoveRoleIDs(ids...)
	return _u
}

// RemoveRoles removes "roles" edges to Role entities.
func (_u *MenuUpdate) RemoveRoles(v ...*Role) *MenuUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRoleIDs(ids...)
}

// ClearParent clears the "parent" edge to the Menu entity.
func (_u *MenuUpdate) ClearParent() *MenuUpdate {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Menu entity.
func (_u *MenuUpdate) ClearChildren() *MenuUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Menu entities by IDs.
func (_u *MenuUpdate) RemoveChildIDs(ids ...int64) *MenuUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Menu entities.
func (_u *MenuUpdate) RemoveChildren(v ...*Menu) *MenuUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MenuUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MenuUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MenuUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MenuUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MenuUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := menu.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MenuUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(menu.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(menu.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(menu.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(menu.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(menu.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(menu.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(menu.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(menu.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(menu.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(menu.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(menu.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(menu.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Component(); ok {
		_spec.SetField(menu.FieldComponent, field.TypeString, value)
	}
	if _u.mutation.ComponentCleared() {
		_spec.ClearField(menu.FieldComponent, field.TypeString)
	}
	if value, ok := _u.mutation.Redirect(); ok {
		_spec.SetField(menu.FieldRedirect, field.TypeString, value)
	}
	if _u.mutation.RedirectCleared() {
		_spec.ClearField(menu.FieldRedirect, field.TypeString)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
	}
	if _u.mutation.IconCleared() {
		_spec.ClearField(menu.FieldIcon, field.TypeString)
	}
	if value, ok := _u.mutation.OrderNo(); ok {
		_spec.SetField(menu.FieldOrderNo, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedOrderNo(); ok {
		_spec.AddField(menu.FieldOrderNo, field.TypeInt64, value)
	}
	if _u.mutation.OrderNoCleared() {
		_spec.ClearField(menu.FieldOrderNo, field.TypeInt64)
	}
	if value, ok := _u.mutation.Ignore(); ok {
		_spec.SetField(menu.FieldIgnore, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedIgnore(); ok {
		_spec.AddField(menu.FieldIgnore, field.TypeInt64, value)
	}
	if _u.mutation.IgnoreCleared() {
		_spec.ClearField(menu.FieldIgnore, field.TypeInt64)
	}
	if value, ok := _u.mutation.MenuType(); ok {
		_spec.SetField(menu.FieldMenuType, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedMenuType(); ok {
		_spec.AddField(menu.FieldMenuType, field.TypeInt64, value)
	}
	if _u.mutation.MenuTypeCleared() {
		_spec.ClearField(menu.FieldMenuType, field.TypeInt64)
	}
	if value, ok := _u.mutation.Level(); ok {
		_spec.SetField(menu.FieldLevel, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedLevel(); ok {
		_spec.AddField(menu.FieldLevel, field.TypeInt64, value)
	}
	if _u.mutation.LevelCleared() {
		_spec.ClearField(menu.FieldLevel, field.TypeInt64)
	}
	if _u.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRolesIDs(); len(nodes) > 0 && !_u.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MenuUpdateOne is the builder for updating a single Menu entity.
type MenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MenuMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MenuUpdateOne) SetUpdatedAt(v time.Time) *MenuUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MenuUpdateOne) ClearUpdatedAt() *MenuUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *MenuUpdateOne) SetDelete(v int64) *MenuUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableDelete(v *int64) *MenuUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *MenuUpdateOne) AddDelete(v int64) *MenuUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *MenuUpdateOne) ClearDelete() *MenuUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *MenuUpdateOne) SetCreatedID(v int64) *MenuUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableCreatedID(v *int64) *MenuUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *MenuUpdateOne) AddCreatedID(v int64) *MenuUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *MenuUpdateOne) ClearCreatedID() *MenuUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *MenuUpdateOne) SetStatus(v int64) *MenuUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableStatus(v *int64) *MenuUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *MenuUpdateOne) AddStatus(v int64) *MenuUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *MenuUpdateOne) ClearStatus() *MenuUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetPath sets the "path" field.
func (_u *MenuUpdateOne) SetPath(v string) *MenuUpdateOne {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillablePath(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *MenuUpdateOne) ClearPath() *MenuUpdateOne {
	_u.mutation.ClearPath()
	return _u
}

// SetName sets the "name" field.
func (_u *MenuUpdateOne) SetName(v string) *MenuUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableName(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *MenuUpdateOne) ClearName() *MenuUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetComponent sets the "component" field.
func (_u *MenuUpdateOne) SetComponent(v string) *MenuUpdateOne {
	_u.mutation.SetComponent(v)
	return _u
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableComponent(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetComponent(*v)
	}
	return _u
}

// ClearComponent clears the value of the "component" field.
func (_u *MenuUpdateOne) ClearComponent() *MenuUpdateOne {
	_u.mutation.ClearComponent()
	return _u
}

// SetRedirect sets the "redirect" field.
func (_u *MenuUpdateOne) SetRedirect(v string) *MenuUpdateOne {
	_u.mutation.SetRedirect(v)
	return _u
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableRedirect(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetRedirect(*v)
	}
	return _u
}

// ClearRedirect clears the value of the "redirect" field.
func (_u *MenuUpdateOne) ClearRedirect() *MenuUpdateOne {
	_u.mutation.ClearRedirect()
	return _u
}

// SetIcon sets the "icon" field.
func (_u *MenuUpdateOne) SetIcon(v string) *MenuUpdateOne {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableIcon(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// ClearIcon clears the value of the "icon" field.
func (_u *MenuUpdateOne) ClearIcon() *MenuUpdateOne {
	_u.mutation.ClearIcon()
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *MenuUpdateOne) SetParentID(v int64) *MenuUpdateOne {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableParentID(v *int64) *MenuUpdateOne {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *MenuUpdateOne) ClearParentID() *MenuUpdateOne {
	_u.mutation.ClearParentID()
	return _u
}

// SetOrderNo sets the "order_no" field.
func (_u *MenuUpdateOne) SetOrderNo(v int64) *MenuUpdateOne {
	_u.mutation.ResetOrderNo()
	_u.mutation.SetOrderNo(v)
	return _u
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableOrderNo(v *int64) *MenuUpdateOne {
	if v != nil {
		_u.SetOrderNo(*v)
	}
	return _u
}

// AddOrderNo adds value to the "order_no" field.
func (_u *MenuUpdateOne) AddOrderNo(v int64) *MenuUpdateOne {
	_u.mutation.AddOrderNo(v)
	return _u
}

// ClearOrderNo clears the value of the "order_no" field.
func (_u *MenuUpdateOne) ClearOrderNo() *MenuUpdateOne {
	_u.mutation.ClearOrderNo()
	return _u
}

// SetIgnore sets the "ignore" field.
func (_u *MenuUpdateOne) SetIgnore(v int64) *MenuUpdateOne {
	_u.mutation.ResetIgnore()
	_u.mutation.SetIgnore(v)
	return _u
}

// SetNillableIgnore sets the "ignore" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableIgnore(v *int64) *MenuUpdateOne {
	if v != nil {
		_u.SetIgnore(*v)
	}
	return _u
}

// AddIgnore adds value to the "ignore" field.
func (_u *MenuUpdateOne) AddIgnore(v int64) *MenuUpdateOne {
	_u.mutation.AddIgnore(v)
	return _u
}

// ClearIgnore clears the value of the "ignore" field.
func (_u *MenuUpdateOne) ClearIgnore() *MenuUpdateOne {
	_u.mutation.ClearIgnore()
	return _u
}

// SetMenuType sets the "menu_type" field.
func (_u *MenuUpdateOne) SetMenuType(v int64) *MenuUpdateOne {
	_u.mutation.ResetMenuType()
	_u.mutation.SetMenuType(v)
	return _u
}

// SetNillableMenuType sets the "menu_type" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableMenuType(v *int64) *MenuUpdateOne {
	if v != nil {
		_u.SetMenuType(*v)
	}
	return _u
}

// AddMenuType adds value to the "menu_type" field.
func (_u *MenuUpdateOne) AddMenuType(v int64) *MenuUpdateOne {
	_u.mutation.AddMenuType(v)
	return _u
}

// ClearMenuType clears the value of the "menu_type" field.
func (_u *MenuUpdateOne) ClearMenuType() *MenuUpdateOne {
	_u.mutation.ClearMenuType()
	return _u
}

// SetLevel sets the "level" field.
func (_u *MenuUpdateOne) SetLevel(v int64) *MenuUpdateOne {
	_u.mutation.ResetLevel()
	_u.mutation.SetLevel(v)
	return _u
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableLevel(v *int64) *MenuUpdateOne {
	if v != nil {
		_u.SetLevel(*v)
	}
	return _u
}

// AddLevel adds value to the "level" field.
func (_u *MenuUpdateOne) AddLevel(v int64) *MenuUpdateOne {
	_u.mutation.AddLevel(v)
	return _u
}

// ClearLevel clears the value of the "level" field.
func (_u *MenuUpdateOne) ClearLevel() *MenuUpdateOne {
	_u.mutation.ClearLevel()
	return _u
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (_u *MenuUpdateOne) AddRoleIDs(ids ...int64) *MenuUpdateOne {
	_u.mutation.AddRoleIDs(ids...)
	return _u
}

// AddRoles adds the "roles" edges to the Role entity.
func (_u *MenuUpdateOne) AddRoles(v ...*Role) *MenuUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRoleIDs(ids...)
}

// SetParent sets the "parent" edge to the Menu entity.
func (_u *MenuUpdateOne) SetParent(v *Menu) *MenuUpdateOne {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (_u *MenuUpdateOne) AddChildIDs(ids ...int64) *MenuUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Menu entity.
func (_u *MenuUpdateOne) AddChildren(v ...*Menu) *MenuUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (_u *MenuUpdateOne) Mutation() *MenuMutation {
	return _u.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (_u *MenuUpdateOne) ClearRoles() *MenuUpdateOne {
	_u.mutation.ClearRoles()
	return _u
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (_u *MenuUpdateOne) RemoveRoleIDs(ids ...int64) *MenuUpdateOne {
	_u.mutation.RemoveRoleIDs(ids...)
	return _u
}

// RemoveRoles removes "roles" edges to Role entities.
func (_u *MenuUpdateOne) RemoveRoles(v ...*Role) *MenuUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRoleIDs(ids...)
}

// ClearParent clears the "parent" edge to the Menu entity.
func (_u *MenuUpdateOne) ClearParent() *MenuUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Menu entity.
func (_u *MenuUpdateOne) ClearChildren() *MenuUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Menu entities by IDs.
func (_u *MenuUpdateOne) RemoveChildIDs(ids ...int64) *MenuUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Menu entities.
func (_u *MenuUpdateOne) RemoveChildren(v ...*Menu) *MenuUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the MenuUpdate builder.
func (_u *MenuUpdateOne) Where(ps ...predicate.Menu) *MenuUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MenuUpdateOne) Select(field string, fields ...string) *MenuUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Menu entity.
func (_u *MenuUpdateOne) Save(ctx context.Context) (*Menu, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MenuUpdateOne) SaveX(ctx context.Context) *Menu {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MenuUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MenuUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MenuUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := menu.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MenuUpdateOne) sqlSave(ctx context.Context) (_node *Menu, err error) {
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Menu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menu.FieldID)
		for _, f := range fields {
			if !menu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != menu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(menu.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(menu.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(menu.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(menu.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(menu.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(menu.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(menu.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(menu.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(menu.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(menu.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(menu.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(menu.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Component(); ok {
		_spec.SetField(menu.FieldComponent, field.TypeString, value)
	}
	if _u.mutation.ComponentCleared() {
		_spec.ClearField(menu.FieldComponent, field.TypeString)
	}
	if value, ok := _u.mutation.Redirect(); ok {
		_spec.SetField(menu.FieldRedirect, field.TypeString, value)
	}
	if _u.mutation.RedirectCleared() {
		_spec.ClearField(menu.FieldRedirect, field.TypeString)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
	}
	if _u.mutation.IconCleared() {
		_spec.ClearField(menu.FieldIcon, field.TypeString)
	}
	if value, ok := _u.mutation.OrderNo(); ok {
		_spec.SetField(menu.FieldOrderNo, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedOrderNo(); ok {
		_spec.AddField(menu.FieldOrderNo, field.TypeInt64, value)
	}
	if _u.mutation.OrderNoCleared() {
		_spec.ClearField(menu.FieldOrderNo, field.TypeInt64)
	}
	if value, ok := _u.mutation.Ignore(); ok {
		_spec.SetField(menu.FieldIgnore, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedIgnore(); ok {
		_spec.AddField(menu.FieldIgnore, field.TypeInt64, value)
	}
	if _u.mutation.IgnoreCleared() {
		_spec.ClearField(menu.FieldIgnore, field.TypeInt64)
	}
	if value, ok := _u.mutation.MenuType(); ok {
		_spec.SetField(menu.FieldMenuType, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedMenuType(); ok {
		_spec.AddField(menu.FieldMenuType, field.TypeInt64, value)
	}
	if _u.mutation.MenuTypeCleared() {
		_spec.ClearField(menu.FieldMenuType, field.TypeInt64)
	}
	if value, ok := _u.mutation.Level(); ok {
		_spec.SetField(menu.FieldLevel, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedLevel(); ok {
		_spec.AddField(menu.FieldLevel, field.TypeInt64, value)
	}
	if _u.mutation.LevelCleared() {
		_spec.ClearField(menu.FieldLevel, field.TypeInt64)
	}
	if _u.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRolesIDs(); len(nodes) > 0 && !_u.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Menu{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
