// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"system/biz/dal/db/ent/sms"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Sms is the model entity for the Sms schema.
type Sms struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除 0:未删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// 通知短信数量
	NoticeCount int64 `json:"notice_count,omitempty"`
	// 已用通知
	UsedNotice   int64 `json:"used_notice,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sms) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sms.FieldID, sms.FieldDelete, sms.FieldCreatedID, sms.FieldNoticeCount, sms.FieldUsedNotice:
			values[i] = new(sql.NullInt64)
		case sms.FieldCreatedAt, sms.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sms fields.
func (_m *Sms) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sms.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int64(value.Int64)
		case sms.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case sms.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case sms.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				_m.Delete = value.Int64
			}
		case sms.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				_m.CreatedID = value.Int64
			}
		case sms.FieldNoticeCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field notice_count", values[i])
			} else if value.Valid {
				_m.NoticeCount = value.Int64
			}
		case sms.FieldUsedNotice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field used_notice", values[i])
			} else if value.Valid {
				_m.UsedNotice = value.Int64
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Sms.
// This includes values selected through modifiers, order, etc.
func (_m *Sms) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Sms.
// Note that you need to call Sms.Unwrap() before calling this method if this Sms
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Sms) Update() *SmsUpdateOne {
	return NewSmsClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Sms entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Sms) Unwrap() *Sms {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Sms is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Sms) String() string {
	var builder strings.Builder
	builder.WriteString("Sms(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", _m.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("notice_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.NoticeCount))
	builder.WriteString(", ")
	builder.WriteString("used_notice=")
	builder.WriteString(fmt.Sprintf("%v", _m.UsedNotice))
	builder.WriteByte(')')
	return builder.String()
}

// SmsSlice is a parsable slice of Sms.
type SmsSlice []*Sms
