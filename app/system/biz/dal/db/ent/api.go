// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"system/biz/dal/db/ent/api"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// API is the model entity for the API schema.
type API struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除 0:未删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// API path | API 路径
	Path string `json:"path,omitempty"`
	// API title | API 名称
	Title string `json:"title,omitempty"`
	// API description | API 描述
	Description string `json:"description,omitempty"`
	// API group | API 分组
	APIGroup string `json:"api_group,omitempty"`
	// HTTP method | HTTP 请求类型
	Method string `json:"method,omitempty"`
	// disable status | 是否停用
	Disabled int64 `json:"disabled,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the APIQuery when eager-loading is set.
	Edges        APIEdges `json:"edges"`
	selectValues sql.SelectValues
}

// APIEdges holds the relations/edges for other nodes in the graph.
type APIEdges struct {
	// Roles holds the value of the roles edge.
	Roles []*Role `json:"roles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e APIEdges) RolesOrErr() ([]*Role, error) {
	if e.loadedTypes[0] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*API) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case api.FieldID, api.FieldDelete, api.FieldCreatedID, api.FieldDisabled:
			values[i] = new(sql.NullInt64)
		case api.FieldPath, api.FieldTitle, api.FieldDescription, api.FieldAPIGroup, api.FieldMethod:
			values[i] = new(sql.NullString)
		case api.FieldCreatedAt, api.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the API fields.
func (_m *API) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case api.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int64(value.Int64)
		case api.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case api.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case api.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				_m.Delete = value.Int64
			}
		case api.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				_m.CreatedID = value.Int64
			}
		case api.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				_m.Path = value.String
			}
		case api.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case api.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case api.FieldAPIGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_group", values[i])
			} else if value.Valid {
				_m.APIGroup = value.String
			}
		case api.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				_m.Method = value.String
			}
		case api.FieldDisabled:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				_m.Disabled = value.Int64
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the API.
// This includes values selected through modifiers, order, etc.
func (_m *API) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryRoles queries the "roles" edge of the API entity.
func (_m *API) QueryRoles() *RoleQuery {
	return NewAPIClient(_m.config).QueryRoles(_m)
}

// Update returns a builder for updating this API.
// Note that you need to call API.Unwrap() before calling this method if this API
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *API) Update() *APIUpdateOne {
	return NewAPIClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the API entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *API) Unwrap() *API {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: API is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *API) String() string {
	var builder strings.Builder
	builder.WriteString("API(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", _m.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(_m.Path)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("api_group=")
	builder.WriteString(_m.APIGroup)
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(_m.Method)
	builder.WriteString(", ")
	builder.WriteString("disabled=")
	builder.WriteString(fmt.Sprintf("%v", _m.Disabled))
	builder.WriteByte(')')
	return builder.String()
}

// APIs is a parsable slice of API.
type APIs []*API
