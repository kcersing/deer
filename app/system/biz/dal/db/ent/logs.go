// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"system/biz/dal/db/ent/logs"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Logs is the model entity for the Logs schema.
type Logs struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除 0:未删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// type of log | 日志类型
	Type string `json:"type,omitempty"`
	// method of log | 日志请求方法
	Method string `json:"method,omitempty"`
	// api of log | 日志请求api
	API string `json:"api,omitempty"`
	// success of log | 日志请求是否成功
	Success bool `json:"success,omitempty"`
	// content of request log | 日志请求内容
	ReqContent string `json:"req_content,omitempty"`
	// content of response log | 日志返回内容
	RespContent string `json:"resp_content,omitempty"`
	// ip of log | 日志IP
	IP string `json:"ip,omitempty"`
	// user_agent of log | 日志用户客户端
	UserAgent string `json:"user_agent,omitempty"`
	// operator of log | 日志操作者
	Operatorsr string `json:"operatorsr,omitempty"`
	// time of log(millisecond) | 日志时间(毫秒)
	Time int64 `json:"time,omitempty"`
	// 1会员2员工 | 身份
	Identity     int64 `json:"identity,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Logs) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case logs.FieldSuccess:
			values[i] = new(sql.NullBool)
		case logs.FieldID, logs.FieldDelete, logs.FieldCreatedID, logs.FieldTime, logs.FieldIdentity:
			values[i] = new(sql.NullInt64)
		case logs.FieldType, logs.FieldMethod, logs.FieldAPI, logs.FieldReqContent, logs.FieldRespContent, logs.FieldIP, logs.FieldUserAgent, logs.FieldOperatorsr:
			values[i] = new(sql.NullString)
		case logs.FieldCreatedAt, logs.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Logs fields.
func (_m *Logs) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case logs.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int64(value.Int64)
		case logs.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case logs.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case logs.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				_m.Delete = value.Int64
			}
		case logs.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				_m.CreatedID = value.Int64
			}
		case logs.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = value.String
			}
		case logs.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				_m.Method = value.String
			}
		case logs.FieldAPI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api", values[i])
			} else if value.Valid {
				_m.API = value.String
			}
		case logs.FieldSuccess:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field success", values[i])
			} else if value.Valid {
				_m.Success = value.Bool
			}
		case logs.FieldReqContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field req_content", values[i])
			} else if value.Valid {
				_m.ReqContent = value.String
			}
		case logs.FieldRespContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resp_content", values[i])
			} else if value.Valid {
				_m.RespContent = value.String
			}
		case logs.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				_m.IP = value.String
			}
		case logs.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				_m.UserAgent = value.String
			}
		case logs.FieldOperatorsr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operatorsr", values[i])
			} else if value.Valid {
				_m.Operatorsr = value.String
			}
		case logs.FieldTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				_m.Time = value.Int64
			}
		case logs.FieldIdentity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field identity", values[i])
			} else if value.Valid {
				_m.Identity = value.Int64
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Logs.
// This includes values selected through modifiers, order, etc.
func (_m *Logs) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Logs.
// Note that you need to call Logs.Unwrap() before calling this method if this Logs
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Logs) Update() *LogsUpdateOne {
	return NewLogsClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Logs entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Logs) Unwrap() *Logs {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Logs is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Logs) String() string {
	var builder strings.Builder
	builder.WriteString("Logs(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", _m.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(_m.Type)
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(_m.Method)
	builder.WriteString(", ")
	builder.WriteString("api=")
	builder.WriteString(_m.API)
	builder.WriteString(", ")
	builder.WriteString("success=")
	builder.WriteString(fmt.Sprintf("%v", _m.Success))
	builder.WriteString(", ")
	builder.WriteString("req_content=")
	builder.WriteString(_m.ReqContent)
	builder.WriteString(", ")
	builder.WriteString("resp_content=")
	builder.WriteString(_m.RespContent)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(_m.IP)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(_m.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("operatorsr=")
	builder.WriteString(_m.Operatorsr)
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(fmt.Sprintf("%v", _m.Time))
	builder.WriteString(", ")
	builder.WriteString("identity=")
	builder.WriteString(fmt.Sprintf("%v", _m.Identity))
	builder.WriteByte(')')
	return builder.String()
}

// LogsSlice is a parsable slice of Logs.
type LogsSlice []*Logs
