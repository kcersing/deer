// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"system/biz/dal/db/ent/predicate"
	"system/biz/dal/db/ent/sms"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SmsUpdate is the builder for updating Sms entities.
type SmsUpdate struct {
	config
	hooks    []Hook
	mutation *SmsMutation
}

// Where appends a list predicates to the SmsUpdate builder.
func (_u *SmsUpdate) Where(ps ...predicate.Sms) *SmsUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SmsUpdate) SetUpdatedAt(v time.Time) *SmsUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *SmsUpdate) ClearUpdatedAt() *SmsUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *SmsUpdate) SetDelete(v int64) *SmsUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *SmsUpdate) SetNillableDelete(v *int64) *SmsUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *SmsUpdate) AddDelete(v int64) *SmsUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *SmsUpdate) ClearDelete() *SmsUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *SmsUpdate) SetCreatedID(v int64) *SmsUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *SmsUpdate) SetNillableCreatedID(v *int64) *SmsUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *SmsUpdate) AddCreatedID(v int64) *SmsUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *SmsUpdate) ClearCreatedID() *SmsUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *SmsUpdate) SetStatus(v int64) *SmsUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *SmsUpdate) SetNillableStatus(v *int64) *SmsUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *SmsUpdate) AddStatus(v int64) *SmsUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *SmsUpdate) ClearStatus() *SmsUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetNoticeCount sets the "notice_count" field.
func (_u *SmsUpdate) SetNoticeCount(v int64) *SmsUpdate {
	_u.mutation.ResetNoticeCount()
	_u.mutation.SetNoticeCount(v)
	return _u
}

// SetNillableNoticeCount sets the "notice_count" field if the given value is not nil.
func (_u *SmsUpdate) SetNillableNoticeCount(v *int64) *SmsUpdate {
	if v != nil {
		_u.SetNoticeCount(*v)
	}
	return _u
}

// AddNoticeCount adds value to the "notice_count" field.
func (_u *SmsUpdate) AddNoticeCount(v int64) *SmsUpdate {
	_u.mutation.AddNoticeCount(v)
	return _u
}

// SetUsedNotice sets the "used_notice" field.
func (_u *SmsUpdate) SetUsedNotice(v int64) *SmsUpdate {
	_u.mutation.ResetUsedNotice()
	_u.mutation.SetUsedNotice(v)
	return _u
}

// SetNillableUsedNotice sets the "used_notice" field if the given value is not nil.
func (_u *SmsUpdate) SetNillableUsedNotice(v *int64) *SmsUpdate {
	if v != nil {
		_u.SetUsedNotice(*v)
	}
	return _u
}

// AddUsedNotice adds value to the "used_notice" field.
func (_u *SmsUpdate) AddUsedNotice(v int64) *SmsUpdate {
	_u.mutation.AddUsedNotice(v)
	return _u
}

// Mutation returns the SmsMutation object of the builder.
func (_u *SmsUpdate) Mutation() *SmsMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SmsUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SmsUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SmsUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SmsUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SmsUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := sms.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *SmsUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sms.Table, sms.Columns, sqlgraph.NewFieldSpec(sms.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(sms.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(sms.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(sms.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(sms.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(sms.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(sms.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(sms.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(sms.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(sms.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(sms.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(sms.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(sms.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.NoticeCount(); ok {
		_spec.SetField(sms.FieldNoticeCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedNoticeCount(); ok {
		_spec.AddField(sms.FieldNoticeCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.UsedNotice(); ok {
		_spec.SetField(sms.FieldUsedNotice, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUsedNotice(); ok {
		_spec.AddField(sms.FieldUsedNotice, field.TypeInt64, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sms.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SmsUpdateOne is the builder for updating a single Sms entity.
type SmsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SmsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SmsUpdateOne) SetUpdatedAt(v time.Time) *SmsUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *SmsUpdateOne) ClearUpdatedAt() *SmsUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *SmsUpdateOne) SetDelete(v int64) *SmsUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *SmsUpdateOne) SetNillableDelete(v *int64) *SmsUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *SmsUpdateOne) AddDelete(v int64) *SmsUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *SmsUpdateOne) ClearDelete() *SmsUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *SmsUpdateOne) SetCreatedID(v int64) *SmsUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *SmsUpdateOne) SetNillableCreatedID(v *int64) *SmsUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *SmsUpdateOne) AddCreatedID(v int64) *SmsUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *SmsUpdateOne) ClearCreatedID() *SmsUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *SmsUpdateOne) SetStatus(v int64) *SmsUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *SmsUpdateOne) SetNillableStatus(v *int64) *SmsUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *SmsUpdateOne) AddStatus(v int64) *SmsUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *SmsUpdateOne) ClearStatus() *SmsUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetNoticeCount sets the "notice_count" field.
func (_u *SmsUpdateOne) SetNoticeCount(v int64) *SmsUpdateOne {
	_u.mutation.ResetNoticeCount()
	_u.mutation.SetNoticeCount(v)
	return _u
}

// SetNillableNoticeCount sets the "notice_count" field if the given value is not nil.
func (_u *SmsUpdateOne) SetNillableNoticeCount(v *int64) *SmsUpdateOne {
	if v != nil {
		_u.SetNoticeCount(*v)
	}
	return _u
}

// AddNoticeCount adds value to the "notice_count" field.
func (_u *SmsUpdateOne) AddNoticeCount(v int64) *SmsUpdateOne {
	_u.mutation.AddNoticeCount(v)
	return _u
}

// SetUsedNotice sets the "used_notice" field.
func (_u *SmsUpdateOne) SetUsedNotice(v int64) *SmsUpdateOne {
	_u.mutation.ResetUsedNotice()
	_u.mutation.SetUsedNotice(v)
	return _u
}

// SetNillableUsedNotice sets the "used_notice" field if the given value is not nil.
func (_u *SmsUpdateOne) SetNillableUsedNotice(v *int64) *SmsUpdateOne {
	if v != nil {
		_u.SetUsedNotice(*v)
	}
	return _u
}

// AddUsedNotice adds value to the "used_notice" field.
func (_u *SmsUpdateOne) AddUsedNotice(v int64) *SmsUpdateOne {
	_u.mutation.AddUsedNotice(v)
	return _u
}

// Mutation returns the SmsMutation object of the builder.
func (_u *SmsUpdateOne) Mutation() *SmsMutation {
	return _u.mutation
}

// Where appends a list predicates to the SmsUpdate builder.
func (_u *SmsUpdateOne) Where(ps ...predicate.Sms) *SmsUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SmsUpdateOne) Select(field string, fields ...string) *SmsUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Sms entity.
func (_u *SmsUpdateOne) Save(ctx context.Context) (*Sms, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SmsUpdateOne) SaveX(ctx context.Context) *Sms {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SmsUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SmsUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SmsUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := sms.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *SmsUpdateOne) sqlSave(ctx context.Context) (_node *Sms, err error) {
	_spec := sqlgraph.NewUpdateSpec(sms.Table, sms.Columns, sqlgraph.NewFieldSpec(sms.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Sms.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sms.FieldID)
		for _, f := range fields {
			if !sms.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sms.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(sms.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(sms.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(sms.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(sms.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(sms.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(sms.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(sms.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(sms.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(sms.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(sms.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(sms.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(sms.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.NoticeCount(); ok {
		_spec.SetField(sms.FieldNoticeCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedNoticeCount(); ok {
		_spec.AddField(sms.FieldNoticeCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.UsedNotice(); ok {
		_spec.SetField(sms.FieldUsedNotice, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUsedNotice(); ok {
		_spec.AddField(sms.FieldUsedNotice, field.TypeInt64, value)
	}
	_node = &Sms{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sms.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
