// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"member/biz/dal/db/ent/member"
	"member/biz/dal/db/ent/membercontract"
	"member/biz/dal/db/ent/membernote"
	"member/biz/dal/db/ent/memberproduct"
	"member/biz/dal/db/ent/memberprofile"
	"member/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberUpdate is the builder for updating Member entities.
type MemberUpdate struct {
	config
	hooks    []Hook
	mutation *MemberMutation
}

// Where appends a list predicates to the MemberUpdate builder.
func (_u *MemberUpdate) Where(ps ...predicate.Member) *MemberUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MemberUpdate) SetUpdatedAt(v time.Time) *MemberUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MemberUpdate) ClearUpdatedAt() *MemberUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *MemberUpdate) SetDelete(v int64) *MemberUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *MemberUpdate) SetNillableDelete(v *int64) *MemberUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *MemberUpdate) AddDelete(v int64) *MemberUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *MemberUpdate) ClearDelete() *MemberUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *MemberUpdate) SetCreatedID(v int64) *MemberUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *MemberUpdate) SetNillableCreatedID(v *int64) *MemberUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *MemberUpdate) AddCreatedID(v int64) *MemberUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *MemberUpdate) ClearCreatedID() *MemberUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *MemberUpdate) SetStatus(v int64) *MemberUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MemberUpdate) SetNillableStatus(v *int64) *MemberUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *MemberUpdate) AddStatus(v int64) *MemberUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *MemberUpdate) ClearStatus() *MemberUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetPassword sets the "password" field.
func (_u *MemberUpdate) SetPassword(v string) *MemberUpdate {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *MemberUpdate) SetNillablePassword(v *string) *MemberUpdate {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// ClearPassword clears the value of the "password" field.
func (_u *MemberUpdate) ClearPassword() *MemberUpdate {
	_u.mutation.ClearPassword()
	return _u
}

// SetUsername sets the "username" field.
func (_u *MemberUpdate) SetUsername(v string) *MemberUpdate {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *MemberUpdate) SetNillableUsername(v *string) *MemberUpdate {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// ClearUsername clears the value of the "username" field.
func (_u *MemberUpdate) ClearUsername() *MemberUpdate {
	_u.mutation.ClearUsername()
	return _u
}

// SetMobile sets the "mobile" field.
func (_u *MemberUpdate) SetMobile(v string) *MemberUpdate {
	_u.mutation.SetMobile(v)
	return _u
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (_u *MemberUpdate) SetNillableMobile(v *string) *MemberUpdate {
	if v != nil {
		_u.SetMobile(*v)
	}
	return _u
}

// ClearMobile clears the value of the "mobile" field.
func (_u *MemberUpdate) ClearMobile() *MemberUpdate {
	_u.mutation.ClearMobile()
	return _u
}

// SetName sets the "name" field.
func (_u *MemberUpdate) SetName(v string) *MemberUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MemberUpdate) SetNillableName(v *string) *MemberUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *MemberUpdate) ClearName() *MemberUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetAvatar sets the "avatar" field.
func (_u *MemberUpdate) SetAvatar(v string) *MemberUpdate {
	_u.mutation.SetAvatar(v)
	return _u
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (_u *MemberUpdate) SetNillableAvatar(v *string) *MemberUpdate {
	if v != nil {
		_u.SetAvatar(*v)
	}
	return _u
}

// ClearAvatar clears the value of the "avatar" field.
func (_u *MemberUpdate) ClearAvatar() *MemberUpdate {
	_u.mutation.ClearAvatar()
	return _u
}

// SetCondition sets the "condition" field.
func (_u *MemberUpdate) SetCondition(v int64) *MemberUpdate {
	_u.mutation.ResetCondition()
	_u.mutation.SetCondition(v)
	return _u
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (_u *MemberUpdate) SetNillableCondition(v *int64) *MemberUpdate {
	if v != nil {
		_u.SetCondition(*v)
	}
	return _u
}

// AddCondition adds value to the "condition" field.
func (_u *MemberUpdate) AddCondition(v int64) *MemberUpdate {
	_u.mutation.AddCondition(v)
	return _u
}

// ClearCondition clears the value of the "condition" field.
func (_u *MemberUpdate) ClearCondition() *MemberUpdate {
	_u.mutation.ClearCondition()
	return _u
}

// AddMemberProfileIDs adds the "member_profile" edge to the MemberProfile entity by IDs.
func (_u *MemberUpdate) AddMemberProfileIDs(ids ...int64) *MemberUpdate {
	_u.mutation.AddMemberProfileIDs(ids...)
	return _u
}

// AddMemberProfile adds the "member_profile" edges to the MemberProfile entity.
func (_u *MemberUpdate) AddMemberProfile(v ...*MemberProfile) *MemberUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMemberProfileIDs(ids...)
}

// AddMemberNoteIDs adds the "member_notes" edge to the MemberNote entity by IDs.
func (_u *MemberUpdate) AddMemberNoteIDs(ids ...int64) *MemberUpdate {
	_u.mutation.AddMemberNoteIDs(ids...)
	return _u
}

// AddMemberNotes adds the "member_notes" edges to the MemberNote entity.
func (_u *MemberUpdate) AddMemberNotes(v ...*MemberNote) *MemberUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMemberNoteIDs(ids...)
}

// AddMemberProductIDs adds the "member_products" edge to the MemberProduct entity by IDs.
func (_u *MemberUpdate) AddMemberProductIDs(ids ...int64) *MemberUpdate {
	_u.mutation.AddMemberProductIDs(ids...)
	return _u
}

// AddMemberProducts adds the "member_products" edges to the MemberProduct entity.
func (_u *MemberUpdate) AddMemberProducts(v ...*MemberProduct) *MemberUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMemberProductIDs(ids...)
}

// AddMemberContentIDs adds the "member_contents" edge to the MemberContract entity by IDs.
func (_u *MemberUpdate) AddMemberContentIDs(ids ...int64) *MemberUpdate {
	_u.mutation.AddMemberContentIDs(ids...)
	return _u
}

// AddMemberContents adds the "member_contents" edges to the MemberContract entity.
func (_u *MemberUpdate) AddMemberContents(v ...*MemberContract) *MemberUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMemberContentIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (_u *MemberUpdate) Mutation() *MemberMutation {
	return _u.mutation
}

// ClearMemberProfile clears all "member_profile" edges to the MemberProfile entity.
func (_u *MemberUpdate) ClearMemberProfile() *MemberUpdate {
	_u.mutation.ClearMemberProfile()
	return _u
}

// RemoveMemberProfileIDs removes the "member_profile" edge to MemberProfile entities by IDs.
func (_u *MemberUpdate) RemoveMemberProfileIDs(ids ...int64) *MemberUpdate {
	_u.mutation.RemoveMemberProfileIDs(ids...)
	return _u
}

// RemoveMemberProfile removes "member_profile" edges to MemberProfile entities.
func (_u *MemberUpdate) RemoveMemberProfile(v ...*MemberProfile) *MemberUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMemberProfileIDs(ids...)
}

// ClearMemberNotes clears all "member_notes" edges to the MemberNote entity.
func (_u *MemberUpdate) ClearMemberNotes() *MemberUpdate {
	_u.mutation.ClearMemberNotes()
	return _u
}

// RemoveMemberNoteIDs removes the "member_notes" edge to MemberNote entities by IDs.
func (_u *MemberUpdate) RemoveMemberNoteIDs(ids ...int64) *MemberUpdate {
	_u.mutation.RemoveMemberNoteIDs(ids...)
	return _u
}

// RemoveMemberNotes removes "member_notes" edges to MemberNote entities.
func (_u *MemberUpdate) RemoveMemberNotes(v ...*MemberNote) *MemberUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMemberNoteIDs(ids...)
}

// ClearMemberProducts clears all "member_products" edges to the MemberProduct entity.
func (_u *MemberUpdate) ClearMemberProducts() *MemberUpdate {
	_u.mutation.ClearMemberProducts()
	return _u
}

// RemoveMemberProductIDs removes the "member_products" edge to MemberProduct entities by IDs.
func (_u *MemberUpdate) RemoveMemberProductIDs(ids ...int64) *MemberUpdate {
	_u.mutation.RemoveMemberProductIDs(ids...)
	return _u
}

// RemoveMemberProducts removes "member_products" edges to MemberProduct entities.
func (_u *MemberUpdate) RemoveMemberProducts(v ...*MemberProduct) *MemberUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMemberProductIDs(ids...)
}

// ClearMemberContents clears all "member_contents" edges to the MemberContract entity.
func (_u *MemberUpdate) ClearMemberContents() *MemberUpdate {
	_u.mutation.ClearMemberContents()
	return _u
}

// RemoveMemberContentIDs removes the "member_contents" edge to MemberContract entities by IDs.
func (_u *MemberUpdate) RemoveMemberContentIDs(ids ...int64) *MemberUpdate {
	_u.mutation.RemoveMemberContentIDs(ids...)
	return _u
}

// RemoveMemberContents removes "member_contents" edges to MemberContract entities.
func (_u *MemberUpdate) RemoveMemberContents(v ...*MemberContract) *MemberUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMemberContentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MemberUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MemberUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MemberUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MemberUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MemberUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := member.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MemberUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(member.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(member.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(member.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(member.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(member.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(member.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(member.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(member.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(member.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(member.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(member.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(member.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(member.FieldPassword, field.TypeString, value)
	}
	if _u.mutation.PasswordCleared() {
		_spec.ClearField(member.FieldPassword, field.TypeString)
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(member.FieldUsername, field.TypeString, value)
	}
	if _u.mutation.UsernameCleared() {
		_spec.ClearField(member.FieldUsername, field.TypeString)
	}
	if value, ok := _u.mutation.Mobile(); ok {
		_spec.SetField(member.FieldMobile, field.TypeString, value)
	}
	if _u.mutation.MobileCleared() {
		_spec.ClearField(member.FieldMobile, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(member.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(member.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Avatar(); ok {
		_spec.SetField(member.FieldAvatar, field.TypeString, value)
	}
	if _u.mutation.AvatarCleared() {
		_spec.ClearField(member.FieldAvatar, field.TypeString)
	}
	if value, ok := _u.mutation.Condition(); ok {
		_spec.SetField(member.FieldCondition, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCondition(); ok {
		_spec.AddField(member.FieldCondition, field.TypeInt64, value)
	}
	if _u.mutation.ConditionCleared() {
		_spec.ClearField(member.FieldCondition, field.TypeInt64)
	}
	if _u.mutation.MemberProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProfileTable,
			Columns: []string{member.MemberProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberprofile.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMemberProfileIDs(); len(nodes) > 0 && !_u.mutation.MemberProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProfileTable,
			Columns: []string{member.MemberProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberprofile.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemberProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProfileTable,
			Columns: []string{member.MemberProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberprofile.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MemberNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberNotesTable,
			Columns: []string{member.MemberNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membernote.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMemberNotesIDs(); len(nodes) > 0 && !_u.mutation.MemberNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberNotesTable,
			Columns: []string{member.MemberNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membernote.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemberNotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberNotesTable,
			Columns: []string{member.MemberNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membernote.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MemberProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProductsTable,
			Columns: []string{member.MemberProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMemberProductsIDs(); len(nodes) > 0 && !_u.mutation.MemberProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProductsTable,
			Columns: []string{member.MemberProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemberProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProductsTable,
			Columns: []string{member.MemberProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MemberContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberContentsTable,
			Columns: []string{member.MemberContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMemberContentsIDs(); len(nodes) > 0 && !_u.mutation.MemberContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberContentsTable,
			Columns: []string{member.MemberContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemberContentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberContentsTable,
			Columns: []string{member.MemberContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MemberUpdateOne is the builder for updating a single Member entity.
type MemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MemberUpdateOne) SetUpdatedAt(v time.Time) *MemberUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MemberUpdateOne) ClearUpdatedAt() *MemberUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *MemberUpdateOne) SetDelete(v int64) *MemberUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *MemberUpdateOne) SetNillableDelete(v *int64) *MemberUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *MemberUpdateOne) AddDelete(v int64) *MemberUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *MemberUpdateOne) ClearDelete() *MemberUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *MemberUpdateOne) SetCreatedID(v int64) *MemberUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *MemberUpdateOne) SetNillableCreatedID(v *int64) *MemberUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *MemberUpdateOne) AddCreatedID(v int64) *MemberUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *MemberUpdateOne) ClearCreatedID() *MemberUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *MemberUpdateOne) SetStatus(v int64) *MemberUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MemberUpdateOne) SetNillableStatus(v *int64) *MemberUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *MemberUpdateOne) AddStatus(v int64) *MemberUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *MemberUpdateOne) ClearStatus() *MemberUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetPassword sets the "password" field.
func (_u *MemberUpdateOne) SetPassword(v string) *MemberUpdateOne {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *MemberUpdateOne) SetNillablePassword(v *string) *MemberUpdateOne {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// ClearPassword clears the value of the "password" field.
func (_u *MemberUpdateOne) ClearPassword() *MemberUpdateOne {
	_u.mutation.ClearPassword()
	return _u
}

// SetUsername sets the "username" field.
func (_u *MemberUpdateOne) SetUsername(v string) *MemberUpdateOne {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *MemberUpdateOne) SetNillableUsername(v *string) *MemberUpdateOne {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// ClearUsername clears the value of the "username" field.
func (_u *MemberUpdateOne) ClearUsername() *MemberUpdateOne {
	_u.mutation.ClearUsername()
	return _u
}

// SetMobile sets the "mobile" field.
func (_u *MemberUpdateOne) SetMobile(v string) *MemberUpdateOne {
	_u.mutation.SetMobile(v)
	return _u
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (_u *MemberUpdateOne) SetNillableMobile(v *string) *MemberUpdateOne {
	if v != nil {
		_u.SetMobile(*v)
	}
	return _u
}

// ClearMobile clears the value of the "mobile" field.
func (_u *MemberUpdateOne) ClearMobile() *MemberUpdateOne {
	_u.mutation.ClearMobile()
	return _u
}

// SetName sets the "name" field.
func (_u *MemberUpdateOne) SetName(v string) *MemberUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MemberUpdateOne) SetNillableName(v *string) *MemberUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *MemberUpdateOne) ClearName() *MemberUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetAvatar sets the "avatar" field.
func (_u *MemberUpdateOne) SetAvatar(v string) *MemberUpdateOne {
	_u.mutation.SetAvatar(v)
	return _u
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (_u *MemberUpdateOne) SetNillableAvatar(v *string) *MemberUpdateOne {
	if v != nil {
		_u.SetAvatar(*v)
	}
	return _u
}

// ClearAvatar clears the value of the "avatar" field.
func (_u *MemberUpdateOne) ClearAvatar() *MemberUpdateOne {
	_u.mutation.ClearAvatar()
	return _u
}

// SetCondition sets the "condition" field.
func (_u *MemberUpdateOne) SetCondition(v int64) *MemberUpdateOne {
	_u.mutation.ResetCondition()
	_u.mutation.SetCondition(v)
	return _u
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (_u *MemberUpdateOne) SetNillableCondition(v *int64) *MemberUpdateOne {
	if v != nil {
		_u.SetCondition(*v)
	}
	return _u
}

// AddCondition adds value to the "condition" field.
func (_u *MemberUpdateOne) AddCondition(v int64) *MemberUpdateOne {
	_u.mutation.AddCondition(v)
	return _u
}

// ClearCondition clears the value of the "condition" field.
func (_u *MemberUpdateOne) ClearCondition() *MemberUpdateOne {
	_u.mutation.ClearCondition()
	return _u
}

// AddMemberProfileIDs adds the "member_profile" edge to the MemberProfile entity by IDs.
func (_u *MemberUpdateOne) AddMemberProfileIDs(ids ...int64) *MemberUpdateOne {
	_u.mutation.AddMemberProfileIDs(ids...)
	return _u
}

// AddMemberProfile adds the "member_profile" edges to the MemberProfile entity.
func (_u *MemberUpdateOne) AddMemberProfile(v ...*MemberProfile) *MemberUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMemberProfileIDs(ids...)
}

// AddMemberNoteIDs adds the "member_notes" edge to the MemberNote entity by IDs.
func (_u *MemberUpdateOne) AddMemberNoteIDs(ids ...int64) *MemberUpdateOne {
	_u.mutation.AddMemberNoteIDs(ids...)
	return _u
}

// AddMemberNotes adds the "member_notes" edges to the MemberNote entity.
func (_u *MemberUpdateOne) AddMemberNotes(v ...*MemberNote) *MemberUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMemberNoteIDs(ids...)
}

// AddMemberProductIDs adds the "member_products" edge to the MemberProduct entity by IDs.
func (_u *MemberUpdateOne) AddMemberProductIDs(ids ...int64) *MemberUpdateOne {
	_u.mutation.AddMemberProductIDs(ids...)
	return _u
}

// AddMemberProducts adds the "member_products" edges to the MemberProduct entity.
func (_u *MemberUpdateOne) AddMemberProducts(v ...*MemberProduct) *MemberUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMemberProductIDs(ids...)
}

// AddMemberContentIDs adds the "member_contents" edge to the MemberContract entity by IDs.
func (_u *MemberUpdateOne) AddMemberContentIDs(ids ...int64) *MemberUpdateOne {
	_u.mutation.AddMemberContentIDs(ids...)
	return _u
}

// AddMemberContents adds the "member_contents" edges to the MemberContract entity.
func (_u *MemberUpdateOne) AddMemberContents(v ...*MemberContract) *MemberUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMemberContentIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (_u *MemberUpdateOne) Mutation() *MemberMutation {
	return _u.mutation
}

// ClearMemberProfile clears all "member_profile" edges to the MemberProfile entity.
func (_u *MemberUpdateOne) ClearMemberProfile() *MemberUpdateOne {
	_u.mutation.ClearMemberProfile()
	return _u
}

// RemoveMemberProfileIDs removes the "member_profile" edge to MemberProfile entities by IDs.
func (_u *MemberUpdateOne) RemoveMemberProfileIDs(ids ...int64) *MemberUpdateOne {
	_u.mutation.RemoveMemberProfileIDs(ids...)
	return _u
}

// RemoveMemberProfile removes "member_profile" edges to MemberProfile entities.
func (_u *MemberUpdateOne) RemoveMemberProfile(v ...*MemberProfile) *MemberUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMemberProfileIDs(ids...)
}

// ClearMemberNotes clears all "member_notes" edges to the MemberNote entity.
func (_u *MemberUpdateOne) ClearMemberNotes() *MemberUpdateOne {
	_u.mutation.ClearMemberNotes()
	return _u
}

// RemoveMemberNoteIDs removes the "member_notes" edge to MemberNote entities by IDs.
func (_u *MemberUpdateOne) RemoveMemberNoteIDs(ids ...int64) *MemberUpdateOne {
	_u.mutation.RemoveMemberNoteIDs(ids...)
	return _u
}

// RemoveMemberNotes removes "member_notes" edges to MemberNote entities.
func (_u *MemberUpdateOne) RemoveMemberNotes(v ...*MemberNote) *MemberUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMemberNoteIDs(ids...)
}

// ClearMemberProducts clears all "member_products" edges to the MemberProduct entity.
func (_u *MemberUpdateOne) ClearMemberProducts() *MemberUpdateOne {
	_u.mutation.ClearMemberProducts()
	return _u
}

// RemoveMemberProductIDs removes the "member_products" edge to MemberProduct entities by IDs.
func (_u *MemberUpdateOne) RemoveMemberProductIDs(ids ...int64) *MemberUpdateOne {
	_u.mutation.RemoveMemberProductIDs(ids...)
	return _u
}

// RemoveMemberProducts removes "member_products" edges to MemberProduct entities.
func (_u *MemberUpdateOne) RemoveMemberProducts(v ...*MemberProduct) *MemberUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMemberProductIDs(ids...)
}

// ClearMemberContents clears all "member_contents" edges to the MemberContract entity.
func (_u *MemberUpdateOne) ClearMemberContents() *MemberUpdateOne {
	_u.mutation.ClearMemberContents()
	return _u
}

// RemoveMemberContentIDs removes the "member_contents" edge to MemberContract entities by IDs.
func (_u *MemberUpdateOne) RemoveMemberContentIDs(ids ...int64) *MemberUpdateOne {
	_u.mutation.RemoveMemberContentIDs(ids...)
	return _u
}

// RemoveMemberContents removes "member_contents" edges to MemberContract entities.
func (_u *MemberUpdateOne) RemoveMemberContents(v ...*MemberContract) *MemberUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMemberContentIDs(ids...)
}

// Where appends a list predicates to the MemberUpdate builder.
func (_u *MemberUpdateOne) Where(ps ...predicate.Member) *MemberUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MemberUpdateOne) Select(field string, fields ...string) *MemberUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Member entity.
func (_u *MemberUpdateOne) Save(ctx context.Context) (*Member, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MemberUpdateOne) SaveX(ctx context.Context) *Member {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MemberUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MemberUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MemberUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := member.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MemberUpdateOne) sqlSave(ctx context.Context) (_node *Member, err error) {
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Member.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, member.FieldID)
		for _, f := range fields {
			if !member.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != member.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(member.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(member.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(member.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(member.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(member.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(member.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(member.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(member.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(member.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(member.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(member.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(member.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(member.FieldPassword, field.TypeString, value)
	}
	if _u.mutation.PasswordCleared() {
		_spec.ClearField(member.FieldPassword, field.TypeString)
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(member.FieldUsername, field.TypeString, value)
	}
	if _u.mutation.UsernameCleared() {
		_spec.ClearField(member.FieldUsername, field.TypeString)
	}
	if value, ok := _u.mutation.Mobile(); ok {
		_spec.SetField(member.FieldMobile, field.TypeString, value)
	}
	if _u.mutation.MobileCleared() {
		_spec.ClearField(member.FieldMobile, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(member.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(member.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Avatar(); ok {
		_spec.SetField(member.FieldAvatar, field.TypeString, value)
	}
	if _u.mutation.AvatarCleared() {
		_spec.ClearField(member.FieldAvatar, field.TypeString)
	}
	if value, ok := _u.mutation.Condition(); ok {
		_spec.SetField(member.FieldCondition, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCondition(); ok {
		_spec.AddField(member.FieldCondition, field.TypeInt64, value)
	}
	if _u.mutation.ConditionCleared() {
		_spec.ClearField(member.FieldCondition, field.TypeInt64)
	}
	if _u.mutation.MemberProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProfileTable,
			Columns: []string{member.MemberProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberprofile.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMemberProfileIDs(); len(nodes) > 0 && !_u.mutation.MemberProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProfileTable,
			Columns: []string{member.MemberProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberprofile.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemberProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProfileTable,
			Columns: []string{member.MemberProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberprofile.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MemberNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberNotesTable,
			Columns: []string{member.MemberNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membernote.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMemberNotesIDs(); len(nodes) > 0 && !_u.mutation.MemberNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberNotesTable,
			Columns: []string{member.MemberNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membernote.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemberNotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberNotesTable,
			Columns: []string{member.MemberNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membernote.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MemberProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProductsTable,
			Columns: []string{member.MemberProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMemberProductsIDs(); len(nodes) > 0 && !_u.mutation.MemberProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProductsTable,
			Columns: []string{member.MemberProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemberProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProductsTable,
			Columns: []string{member.MemberProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MemberContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberContentsTable,
			Columns: []string{member.MemberContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMemberContentsIDs(); len(nodes) > 0 && !_u.mutation.MemberContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberContentsTable,
			Columns: []string{member.MemberContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemberContentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberContentsTable,
			Columns: []string{member.MemberContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Member{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
