// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"member/biz/dal/db/ent/member"
	"member/biz/dal/db/ent/membercontract"
	"member/biz/dal/db/ent/membercontractcontent"
	"member/biz/dal/db/ent/memberproduct"
	"member/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberContractUpdate is the builder for updating MemberContract entities.
type MemberContractUpdate struct {
	config
	hooks    []Hook
	mutation *MemberContractMutation
}

// Where appends a list predicates to the MemberContractUpdate builder.
func (_u *MemberContractUpdate) Where(ps ...predicate.MemberContract) *MemberContractUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MemberContractUpdate) SetUpdatedAt(v time.Time) *MemberContractUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MemberContractUpdate) ClearUpdatedAt() *MemberContractUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *MemberContractUpdate) SetDelete(v int64) *MemberContractUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *MemberContractUpdate) SetNillableDelete(v *int64) *MemberContractUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *MemberContractUpdate) AddDelete(v int64) *MemberContractUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *MemberContractUpdate) ClearDelete() *MemberContractUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *MemberContractUpdate) SetCreatedID(v int64) *MemberContractUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *MemberContractUpdate) SetNillableCreatedID(v *int64) *MemberContractUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *MemberContractUpdate) AddCreatedID(v int64) *MemberContractUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *MemberContractUpdate) ClearCreatedID() *MemberContractUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *MemberContractUpdate) SetStatus(v int64) *MemberContractUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MemberContractUpdate) SetNillableStatus(v *int64) *MemberContractUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *MemberContractUpdate) AddStatus(v int64) *MemberContractUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *MemberContractUpdate) ClearStatus() *MemberContractUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetMemberID sets the "member_id" field.
func (_u *MemberContractUpdate) SetMemberID(v int64) *MemberContractUpdate {
	_u.mutation.SetMemberID(v)
	return _u
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (_u *MemberContractUpdate) SetNillableMemberID(v *int64) *MemberContractUpdate {
	if v != nil {
		_u.SetMemberID(*v)
	}
	return _u
}

// ClearMemberID clears the value of the "member_id" field.
func (_u *MemberContractUpdate) ClearMemberID() *MemberContractUpdate {
	_u.mutation.ClearMemberID()
	return _u
}

// SetContractID sets the "contract_id" field.
func (_u *MemberContractUpdate) SetContractID(v int64) *MemberContractUpdate {
	_u.mutation.ResetContractID()
	_u.mutation.SetContractID(v)
	return _u
}

// SetNillableContractID sets the "contract_id" field if the given value is not nil.
func (_u *MemberContractUpdate) SetNillableContractID(v *int64) *MemberContractUpdate {
	if v != nil {
		_u.SetContractID(*v)
	}
	return _u
}

// AddContractID adds value to the "contract_id" field.
func (_u *MemberContractUpdate) AddContractID(v int64) *MemberContractUpdate {
	_u.mutation.AddContractID(v)
	return _u
}

// ClearContractID clears the value of the "contract_id" field.
func (_u *MemberContractUpdate) ClearContractID() *MemberContractUpdate {
	_u.mutation.ClearContractID()
	return _u
}

// SetOrderID sets the "order_id" field.
func (_u *MemberContractUpdate) SetOrderID(v int64) *MemberContractUpdate {
	_u.mutation.ResetOrderID()
	_u.mutation.SetOrderID(v)
	return _u
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (_u *MemberContractUpdate) SetNillableOrderID(v *int64) *MemberContractUpdate {
	if v != nil {
		_u.SetOrderID(*v)
	}
	return _u
}

// AddOrderID adds value to the "order_id" field.
func (_u *MemberContractUpdate) AddOrderID(v int64) *MemberContractUpdate {
	_u.mutation.AddOrderID(v)
	return _u
}

// ClearOrderID clears the value of the "order_id" field.
func (_u *MemberContractUpdate) ClearOrderID() *MemberContractUpdate {
	_u.mutation.ClearOrderID()
	return _u
}

// SetVenueID sets the "venue_id" field.
func (_u *MemberContractUpdate) SetVenueID(v int64) *MemberContractUpdate {
	_u.mutation.ResetVenueID()
	_u.mutation.SetVenueID(v)
	return _u
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (_u *MemberContractUpdate) SetNillableVenueID(v *int64) *MemberContractUpdate {
	if v != nil {
		_u.SetVenueID(*v)
	}
	return _u
}

// AddVenueID adds value to the "venue_id" field.
func (_u *MemberContractUpdate) AddVenueID(v int64) *MemberContractUpdate {
	_u.mutation.AddVenueID(v)
	return _u
}

// ClearVenueID clears the value of the "venue_id" field.
func (_u *MemberContractUpdate) ClearVenueID() *MemberContractUpdate {
	_u.mutation.ClearVenueID()
	return _u
}

// SetMemberProductID sets the "member_product_id" field.
func (_u *MemberContractUpdate) SetMemberProductID(v int64) *MemberContractUpdate {
	_u.mutation.SetMemberProductID(v)
	return _u
}

// SetNillableMemberProductID sets the "member_product_id" field if the given value is not nil.
func (_u *MemberContractUpdate) SetNillableMemberProductID(v *int64) *MemberContractUpdate {
	if v != nil {
		_u.SetMemberProductID(*v)
	}
	return _u
}

// ClearMemberProductID clears the value of the "member_product_id" field.
func (_u *MemberContractUpdate) ClearMemberProductID() *MemberContractUpdate {
	_u.mutation.ClearMemberProductID()
	return _u
}

// SetName sets the "name" field.
func (_u *MemberContractUpdate) SetName(v string) *MemberContractUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MemberContractUpdate) SetNillableName(v *string) *MemberContractUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *MemberContractUpdate) ClearName() *MemberContractUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetSign sets the "sign" field.
func (_u *MemberContractUpdate) SetSign(v string) *MemberContractUpdate {
	_u.mutation.SetSign(v)
	return _u
}

// SetNillableSign sets the "sign" field if the given value is not nil.
func (_u *MemberContractUpdate) SetNillableSign(v *string) *MemberContractUpdate {
	if v != nil {
		_u.SetSign(*v)
	}
	return _u
}

// ClearSign clears the value of the "sign" field.
func (_u *MemberContractUpdate) ClearSign() *MemberContractUpdate {
	_u.mutation.ClearSign()
	return _u
}

// AddContentIDs adds the "content" edge to the MemberContractContent entity by IDs.
func (_u *MemberContractUpdate) AddContentIDs(ids ...int64) *MemberContractUpdate {
	_u.mutation.AddContentIDs(ids...)
	return _u
}

// AddContent adds the "content" edges to the MemberContractContent entity.
func (_u *MemberContractUpdate) AddContent(v ...*MemberContractContent) *MemberContractUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddContentIDs(ids...)
}

// SetMember sets the "member" edge to the Member entity.
func (_u *MemberContractUpdate) SetMember(v *Member) *MemberContractUpdate {
	return _u.SetMemberID(v.ID)
}

// SetMemberProduct sets the "member_product" edge to the MemberProduct entity.
func (_u *MemberContractUpdate) SetMemberProduct(v *MemberProduct) *MemberContractUpdate {
	return _u.SetMemberProductID(v.ID)
}

// Mutation returns the MemberContractMutation object of the builder.
func (_u *MemberContractUpdate) Mutation() *MemberContractMutation {
	return _u.mutation
}

// ClearContent clears all "content" edges to the MemberContractContent entity.
func (_u *MemberContractUpdate) ClearContent() *MemberContractUpdate {
	_u.mutation.ClearContent()
	return _u
}

// RemoveContentIDs removes the "content" edge to MemberContractContent entities by IDs.
func (_u *MemberContractUpdate) RemoveContentIDs(ids ...int64) *MemberContractUpdate {
	_u.mutation.RemoveContentIDs(ids...)
	return _u
}

// RemoveContent removes "content" edges to MemberContractContent entities.
func (_u *MemberContractUpdate) RemoveContent(v ...*MemberContractContent) *MemberContractUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveContentIDs(ids...)
}

// ClearMember clears the "member" edge to the Member entity.
func (_u *MemberContractUpdate) ClearMember() *MemberContractUpdate {
	_u.mutation.ClearMember()
	return _u
}

// ClearMemberProduct clears the "member_product" edge to the MemberProduct entity.
func (_u *MemberContractUpdate) ClearMemberProduct() *MemberContractUpdate {
	_u.mutation.ClearMemberProduct()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MemberContractUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MemberContractUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MemberContractUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MemberContractUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MemberContractUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := membercontract.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MemberContractUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(membercontract.Table, membercontract.Columns, sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(membercontract.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(membercontract.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(membercontract.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(membercontract.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(membercontract.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(membercontract.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(membercontract.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(membercontract.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(membercontract.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(membercontract.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(membercontract.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(membercontract.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.ContractID(); ok {
		_spec.SetField(membercontract.FieldContractID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedContractID(); ok {
		_spec.AddField(membercontract.FieldContractID, field.TypeInt64, value)
	}
	if _u.mutation.ContractIDCleared() {
		_spec.ClearField(membercontract.FieldContractID, field.TypeInt64)
	}
	if value, ok := _u.mutation.OrderID(); ok {
		_spec.SetField(membercontract.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedOrderID(); ok {
		_spec.AddField(membercontract.FieldOrderID, field.TypeInt64, value)
	}
	if _u.mutation.OrderIDCleared() {
		_spec.ClearField(membercontract.FieldOrderID, field.TypeInt64)
	}
	if value, ok := _u.mutation.VenueID(); ok {
		_spec.SetField(membercontract.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedVenueID(); ok {
		_spec.AddField(membercontract.FieldVenueID, field.TypeInt64, value)
	}
	if _u.mutation.VenueIDCleared() {
		_spec.ClearField(membercontract.FieldVenueID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(membercontract.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(membercontract.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Sign(); ok {
		_spec.SetField(membercontract.FieldSign, field.TypeString, value)
	}
	if _u.mutation.SignCleared() {
		_spec.ClearField(membercontract.FieldSign, field.TypeString)
	}
	if _u.mutation.ContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   membercontract.ContentTable,
			Columns: []string{membercontract.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontractcontent.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedContentIDs(); len(nodes) > 0 && !_u.mutation.ContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   membercontract.ContentTable,
			Columns: []string{membercontract.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontractcontent.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   membercontract.ContentTable,
			Columns: []string{membercontract.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontractcontent.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membercontract.MemberTable,
			Columns: []string{membercontract.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membercontract.MemberTable,
			Columns: []string{membercontract.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MemberProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membercontract.MemberProductTable,
			Columns: []string{membercontract.MemberProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemberProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membercontract.MemberProductTable,
			Columns: []string{membercontract.MemberProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{membercontract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MemberContractUpdateOne is the builder for updating a single MemberContract entity.
type MemberContractUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberContractMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MemberContractUpdateOne) SetUpdatedAt(v time.Time) *MemberContractUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MemberContractUpdateOne) ClearUpdatedAt() *MemberContractUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *MemberContractUpdateOne) SetDelete(v int64) *MemberContractUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *MemberContractUpdateOne) SetNillableDelete(v *int64) *MemberContractUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *MemberContractUpdateOne) AddDelete(v int64) *MemberContractUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *MemberContractUpdateOne) ClearDelete() *MemberContractUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *MemberContractUpdateOne) SetCreatedID(v int64) *MemberContractUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *MemberContractUpdateOne) SetNillableCreatedID(v *int64) *MemberContractUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *MemberContractUpdateOne) AddCreatedID(v int64) *MemberContractUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *MemberContractUpdateOne) ClearCreatedID() *MemberContractUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *MemberContractUpdateOne) SetStatus(v int64) *MemberContractUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MemberContractUpdateOne) SetNillableStatus(v *int64) *MemberContractUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *MemberContractUpdateOne) AddStatus(v int64) *MemberContractUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *MemberContractUpdateOne) ClearStatus() *MemberContractUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetMemberID sets the "member_id" field.
func (_u *MemberContractUpdateOne) SetMemberID(v int64) *MemberContractUpdateOne {
	_u.mutation.SetMemberID(v)
	return _u
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (_u *MemberContractUpdateOne) SetNillableMemberID(v *int64) *MemberContractUpdateOne {
	if v != nil {
		_u.SetMemberID(*v)
	}
	return _u
}

// ClearMemberID clears the value of the "member_id" field.
func (_u *MemberContractUpdateOne) ClearMemberID() *MemberContractUpdateOne {
	_u.mutation.ClearMemberID()
	return _u
}

// SetContractID sets the "contract_id" field.
func (_u *MemberContractUpdateOne) SetContractID(v int64) *MemberContractUpdateOne {
	_u.mutation.ResetContractID()
	_u.mutation.SetContractID(v)
	return _u
}

// SetNillableContractID sets the "contract_id" field if the given value is not nil.
func (_u *MemberContractUpdateOne) SetNillableContractID(v *int64) *MemberContractUpdateOne {
	if v != nil {
		_u.SetContractID(*v)
	}
	return _u
}

// AddContractID adds value to the "contract_id" field.
func (_u *MemberContractUpdateOne) AddContractID(v int64) *MemberContractUpdateOne {
	_u.mutation.AddContractID(v)
	return _u
}

// ClearContractID clears the value of the "contract_id" field.
func (_u *MemberContractUpdateOne) ClearContractID() *MemberContractUpdateOne {
	_u.mutation.ClearContractID()
	return _u
}

// SetOrderID sets the "order_id" field.
func (_u *MemberContractUpdateOne) SetOrderID(v int64) *MemberContractUpdateOne {
	_u.mutation.ResetOrderID()
	_u.mutation.SetOrderID(v)
	return _u
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (_u *MemberContractUpdateOne) SetNillableOrderID(v *int64) *MemberContractUpdateOne {
	if v != nil {
		_u.SetOrderID(*v)
	}
	return _u
}

// AddOrderID adds value to the "order_id" field.
func (_u *MemberContractUpdateOne) AddOrderID(v int64) *MemberContractUpdateOne {
	_u.mutation.AddOrderID(v)
	return _u
}

// ClearOrderID clears the value of the "order_id" field.
func (_u *MemberContractUpdateOne) ClearOrderID() *MemberContractUpdateOne {
	_u.mutation.ClearOrderID()
	return _u
}

// SetVenueID sets the "venue_id" field.
func (_u *MemberContractUpdateOne) SetVenueID(v int64) *MemberContractUpdateOne {
	_u.mutation.ResetVenueID()
	_u.mutation.SetVenueID(v)
	return _u
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (_u *MemberContractUpdateOne) SetNillableVenueID(v *int64) *MemberContractUpdateOne {
	if v != nil {
		_u.SetVenueID(*v)
	}
	return _u
}

// AddVenueID adds value to the "venue_id" field.
func (_u *MemberContractUpdateOne) AddVenueID(v int64) *MemberContractUpdateOne {
	_u.mutation.AddVenueID(v)
	return _u
}

// ClearVenueID clears the value of the "venue_id" field.
func (_u *MemberContractUpdateOne) ClearVenueID() *MemberContractUpdateOne {
	_u.mutation.ClearVenueID()
	return _u
}

// SetMemberProductID sets the "member_product_id" field.
func (_u *MemberContractUpdateOne) SetMemberProductID(v int64) *MemberContractUpdateOne {
	_u.mutation.SetMemberProductID(v)
	return _u
}

// SetNillableMemberProductID sets the "member_product_id" field if the given value is not nil.
func (_u *MemberContractUpdateOne) SetNillableMemberProductID(v *int64) *MemberContractUpdateOne {
	if v != nil {
		_u.SetMemberProductID(*v)
	}
	return _u
}

// ClearMemberProductID clears the value of the "member_product_id" field.
func (_u *MemberContractUpdateOne) ClearMemberProductID() *MemberContractUpdateOne {
	_u.mutation.ClearMemberProductID()
	return _u
}

// SetName sets the "name" field.
func (_u *MemberContractUpdateOne) SetName(v string) *MemberContractUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MemberContractUpdateOne) SetNillableName(v *string) *MemberContractUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *MemberContractUpdateOne) ClearName() *MemberContractUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetSign sets the "sign" field.
func (_u *MemberContractUpdateOne) SetSign(v string) *MemberContractUpdateOne {
	_u.mutation.SetSign(v)
	return _u
}

// SetNillableSign sets the "sign" field if the given value is not nil.
func (_u *MemberContractUpdateOne) SetNillableSign(v *string) *MemberContractUpdateOne {
	if v != nil {
		_u.SetSign(*v)
	}
	return _u
}

// ClearSign clears the value of the "sign" field.
func (_u *MemberContractUpdateOne) ClearSign() *MemberContractUpdateOne {
	_u.mutation.ClearSign()
	return _u
}

// AddContentIDs adds the "content" edge to the MemberContractContent entity by IDs.
func (_u *MemberContractUpdateOne) AddContentIDs(ids ...int64) *MemberContractUpdateOne {
	_u.mutation.AddContentIDs(ids...)
	return _u
}

// AddContent adds the "content" edges to the MemberContractContent entity.
func (_u *MemberContractUpdateOne) AddContent(v ...*MemberContractContent) *MemberContractUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddContentIDs(ids...)
}

// SetMember sets the "member" edge to the Member entity.
func (_u *MemberContractUpdateOne) SetMember(v *Member) *MemberContractUpdateOne {
	return _u.SetMemberID(v.ID)
}

// SetMemberProduct sets the "member_product" edge to the MemberProduct entity.
func (_u *MemberContractUpdateOne) SetMemberProduct(v *MemberProduct) *MemberContractUpdateOne {
	return _u.SetMemberProductID(v.ID)
}

// Mutation returns the MemberContractMutation object of the builder.
func (_u *MemberContractUpdateOne) Mutation() *MemberContractMutation {
	return _u.mutation
}

// ClearContent clears all "content" edges to the MemberContractContent entity.
func (_u *MemberContractUpdateOne) ClearContent() *MemberContractUpdateOne {
	_u.mutation.ClearContent()
	return _u
}

// RemoveContentIDs removes the "content" edge to MemberContractContent entities by IDs.
func (_u *MemberContractUpdateOne) RemoveContentIDs(ids ...int64) *MemberContractUpdateOne {
	_u.mutation.RemoveContentIDs(ids...)
	return _u
}

// RemoveContent removes "content" edges to MemberContractContent entities.
func (_u *MemberContractUpdateOne) RemoveContent(v ...*MemberContractContent) *MemberContractUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveContentIDs(ids...)
}

// ClearMember clears the "member" edge to the Member entity.
func (_u *MemberContractUpdateOne) ClearMember() *MemberContractUpdateOne {
	_u.mutation.ClearMember()
	return _u
}

// ClearMemberProduct clears the "member_product" edge to the MemberProduct entity.
func (_u *MemberContractUpdateOne) ClearMemberProduct() *MemberContractUpdateOne {
	_u.mutation.ClearMemberProduct()
	return _u
}

// Where appends a list predicates to the MemberContractUpdate builder.
func (_u *MemberContractUpdateOne) Where(ps ...predicate.MemberContract) *MemberContractUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MemberContractUpdateOne) Select(field string, fields ...string) *MemberContractUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated MemberContract entity.
func (_u *MemberContractUpdateOne) Save(ctx context.Context) (*MemberContract, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MemberContractUpdateOne) SaveX(ctx context.Context) *MemberContract {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MemberContractUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MemberContractUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MemberContractUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := membercontract.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MemberContractUpdateOne) sqlSave(ctx context.Context) (_node *MemberContract, err error) {
	_spec := sqlgraph.NewUpdateSpec(membercontract.Table, membercontract.Columns, sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MemberContract.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, membercontract.FieldID)
		for _, f := range fields {
			if !membercontract.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != membercontract.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(membercontract.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(membercontract.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(membercontract.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(membercontract.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(membercontract.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(membercontract.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(membercontract.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(membercontract.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(membercontract.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(membercontract.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(membercontract.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(membercontract.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.ContractID(); ok {
		_spec.SetField(membercontract.FieldContractID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedContractID(); ok {
		_spec.AddField(membercontract.FieldContractID, field.TypeInt64, value)
	}
	if _u.mutation.ContractIDCleared() {
		_spec.ClearField(membercontract.FieldContractID, field.TypeInt64)
	}
	if value, ok := _u.mutation.OrderID(); ok {
		_spec.SetField(membercontract.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedOrderID(); ok {
		_spec.AddField(membercontract.FieldOrderID, field.TypeInt64, value)
	}
	if _u.mutation.OrderIDCleared() {
		_spec.ClearField(membercontract.FieldOrderID, field.TypeInt64)
	}
	if value, ok := _u.mutation.VenueID(); ok {
		_spec.SetField(membercontract.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedVenueID(); ok {
		_spec.AddField(membercontract.FieldVenueID, field.TypeInt64, value)
	}
	if _u.mutation.VenueIDCleared() {
		_spec.ClearField(membercontract.FieldVenueID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(membercontract.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(membercontract.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Sign(); ok {
		_spec.SetField(membercontract.FieldSign, field.TypeString, value)
	}
	if _u.mutation.SignCleared() {
		_spec.ClearField(membercontract.FieldSign, field.TypeString)
	}
	if _u.mutation.ContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   membercontract.ContentTable,
			Columns: []string{membercontract.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontractcontent.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedContentIDs(); len(nodes) > 0 && !_u.mutation.ContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   membercontract.ContentTable,
			Columns: []string{membercontract.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontractcontent.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   membercontract.ContentTable,
			Columns: []string{membercontract.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontractcontent.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membercontract.MemberTable,
			Columns: []string{membercontract.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membercontract.MemberTable,
			Columns: []string{membercontract.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MemberProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membercontract.MemberProductTable,
			Columns: []string{membercontract.MemberProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemberProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membercontract.MemberProductTable,
			Columns: []string{membercontract.MemberProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MemberContract{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{membercontract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
