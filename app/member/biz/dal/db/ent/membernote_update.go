// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"member/biz/dal/db/ent/member"
	"member/biz/dal/db/ent/membernote"
	"member/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberNoteUpdate is the builder for updating MemberNote entities.
type MemberNoteUpdate struct {
	config
	hooks    []Hook
	mutation *MemberNoteMutation
}

// Where appends a list predicates to the MemberNoteUpdate builder.
func (_u *MemberNoteUpdate) Where(ps ...predicate.MemberNote) *MemberNoteUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MemberNoteUpdate) SetUpdatedAt(v time.Time) *MemberNoteUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MemberNoteUpdate) ClearUpdatedAt() *MemberNoteUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *MemberNoteUpdate) SetDelete(v int64) *MemberNoteUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *MemberNoteUpdate) SetNillableDelete(v *int64) *MemberNoteUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *MemberNoteUpdate) AddDelete(v int64) *MemberNoteUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *MemberNoteUpdate) ClearDelete() *MemberNoteUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *MemberNoteUpdate) SetCreatedID(v int64) *MemberNoteUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *MemberNoteUpdate) SetNillableCreatedID(v *int64) *MemberNoteUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *MemberNoteUpdate) AddCreatedID(v int64) *MemberNoteUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *MemberNoteUpdate) ClearCreatedID() *MemberNoteUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *MemberNoteUpdate) SetStatus(v int64) *MemberNoteUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MemberNoteUpdate) SetNillableStatus(v *int64) *MemberNoteUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *MemberNoteUpdate) AddStatus(v int64) *MemberNoteUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *MemberNoteUpdate) ClearStatus() *MemberNoteUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetMemberID sets the "member_id" field.
func (_u *MemberNoteUpdate) SetMemberID(v int64) *MemberNoteUpdate {
	_u.mutation.SetMemberID(v)
	return _u
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (_u *MemberNoteUpdate) SetNillableMemberID(v *int64) *MemberNoteUpdate {
	if v != nil {
		_u.SetMemberID(*v)
	}
	return _u
}

// ClearMemberID clears the value of the "member_id" field.
func (_u *MemberNoteUpdate) ClearMemberID() *MemberNoteUpdate {
	_u.mutation.ClearMemberID()
	return _u
}

// SetNote sets the "note" field.
func (_u *MemberNoteUpdate) SetNote(v string) *MemberNoteUpdate {
	_u.mutation.SetNote(v)
	return _u
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (_u *MemberNoteUpdate) SetNillableNote(v *string) *MemberNoteUpdate {
	if v != nil {
		_u.SetNote(*v)
	}
	return _u
}

// ClearNote clears the value of the "note" field.
func (_u *MemberNoteUpdate) ClearNote() *MemberNoteUpdate {
	_u.mutation.ClearNote()
	return _u
}

// SetNotesID sets the "notes" edge to the Member entity by ID.
func (_u *MemberNoteUpdate) SetNotesID(id int64) *MemberNoteUpdate {
	_u.mutation.SetNotesID(id)
	return _u
}

// SetNillableNotesID sets the "notes" edge to the Member entity by ID if the given value is not nil.
func (_u *MemberNoteUpdate) SetNillableNotesID(id *int64) *MemberNoteUpdate {
	if id != nil {
		_u = _u.SetNotesID(*id)
	}
	return _u
}

// SetNotes sets the "notes" edge to the Member entity.
func (_u *MemberNoteUpdate) SetNotes(v *Member) *MemberNoteUpdate {
	return _u.SetNotesID(v.ID)
}

// Mutation returns the MemberNoteMutation object of the builder.
func (_u *MemberNoteUpdate) Mutation() *MemberNoteMutation {
	return _u.mutation
}

// ClearNotes clears the "notes" edge to the Member entity.
func (_u *MemberNoteUpdate) ClearNotes() *MemberNoteUpdate {
	_u.mutation.ClearNotes()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MemberNoteUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MemberNoteUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MemberNoteUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MemberNoteUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MemberNoteUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := membernote.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MemberNoteUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(membernote.Table, membernote.Columns, sqlgraph.NewFieldSpec(membernote.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(membernote.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(membernote.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(membernote.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(membernote.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(membernote.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(membernote.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(membernote.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(membernote.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(membernote.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(membernote.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(membernote.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(membernote.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.Note(); ok {
		_spec.SetField(membernote.FieldNote, field.TypeString, value)
	}
	if _u.mutation.NoteCleared() {
		_spec.ClearField(membernote.FieldNote, field.TypeString)
	}
	if _u.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membernote.NotesTable,
			Columns: []string{membernote.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membernote.NotesTable,
			Columns: []string{membernote.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{membernote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MemberNoteUpdateOne is the builder for updating a single MemberNote entity.
type MemberNoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberNoteMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MemberNoteUpdateOne) SetUpdatedAt(v time.Time) *MemberNoteUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MemberNoteUpdateOne) ClearUpdatedAt() *MemberNoteUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *MemberNoteUpdateOne) SetDelete(v int64) *MemberNoteUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *MemberNoteUpdateOne) SetNillableDelete(v *int64) *MemberNoteUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *MemberNoteUpdateOne) AddDelete(v int64) *MemberNoteUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *MemberNoteUpdateOne) ClearDelete() *MemberNoteUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *MemberNoteUpdateOne) SetCreatedID(v int64) *MemberNoteUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *MemberNoteUpdateOne) SetNillableCreatedID(v *int64) *MemberNoteUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *MemberNoteUpdateOne) AddCreatedID(v int64) *MemberNoteUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *MemberNoteUpdateOne) ClearCreatedID() *MemberNoteUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *MemberNoteUpdateOne) SetStatus(v int64) *MemberNoteUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MemberNoteUpdateOne) SetNillableStatus(v *int64) *MemberNoteUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *MemberNoteUpdateOne) AddStatus(v int64) *MemberNoteUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *MemberNoteUpdateOne) ClearStatus() *MemberNoteUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetMemberID sets the "member_id" field.
func (_u *MemberNoteUpdateOne) SetMemberID(v int64) *MemberNoteUpdateOne {
	_u.mutation.SetMemberID(v)
	return _u
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (_u *MemberNoteUpdateOne) SetNillableMemberID(v *int64) *MemberNoteUpdateOne {
	if v != nil {
		_u.SetMemberID(*v)
	}
	return _u
}

// ClearMemberID clears the value of the "member_id" field.
func (_u *MemberNoteUpdateOne) ClearMemberID() *MemberNoteUpdateOne {
	_u.mutation.ClearMemberID()
	return _u
}

// SetNote sets the "note" field.
func (_u *MemberNoteUpdateOne) SetNote(v string) *MemberNoteUpdateOne {
	_u.mutation.SetNote(v)
	return _u
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (_u *MemberNoteUpdateOne) SetNillableNote(v *string) *MemberNoteUpdateOne {
	if v != nil {
		_u.SetNote(*v)
	}
	return _u
}

// ClearNote clears the value of the "note" field.
func (_u *MemberNoteUpdateOne) ClearNote() *MemberNoteUpdateOne {
	_u.mutation.ClearNote()
	return _u
}

// SetNotesID sets the "notes" edge to the Member entity by ID.
func (_u *MemberNoteUpdateOne) SetNotesID(id int64) *MemberNoteUpdateOne {
	_u.mutation.SetNotesID(id)
	return _u
}

// SetNillableNotesID sets the "notes" edge to the Member entity by ID if the given value is not nil.
func (_u *MemberNoteUpdateOne) SetNillableNotesID(id *int64) *MemberNoteUpdateOne {
	if id != nil {
		_u = _u.SetNotesID(*id)
	}
	return _u
}

// SetNotes sets the "notes" edge to the Member entity.
func (_u *MemberNoteUpdateOne) SetNotes(v *Member) *MemberNoteUpdateOne {
	return _u.SetNotesID(v.ID)
}

// Mutation returns the MemberNoteMutation object of the builder.
func (_u *MemberNoteUpdateOne) Mutation() *MemberNoteMutation {
	return _u.mutation
}

// ClearNotes clears the "notes" edge to the Member entity.
func (_u *MemberNoteUpdateOne) ClearNotes() *MemberNoteUpdateOne {
	_u.mutation.ClearNotes()
	return _u
}

// Where appends a list predicates to the MemberNoteUpdate builder.
func (_u *MemberNoteUpdateOne) Where(ps ...predicate.MemberNote) *MemberNoteUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MemberNoteUpdateOne) Select(field string, fields ...string) *MemberNoteUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated MemberNote entity.
func (_u *MemberNoteUpdateOne) Save(ctx context.Context) (*MemberNote, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MemberNoteUpdateOne) SaveX(ctx context.Context) *MemberNote {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MemberNoteUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MemberNoteUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MemberNoteUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := membernote.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MemberNoteUpdateOne) sqlSave(ctx context.Context) (_node *MemberNote, err error) {
	_spec := sqlgraph.NewUpdateSpec(membernote.Table, membernote.Columns, sqlgraph.NewFieldSpec(membernote.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MemberNote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, membernote.FieldID)
		for _, f := range fields {
			if !membernote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != membernote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(membernote.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(membernote.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(membernote.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(membernote.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(membernote.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(membernote.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(membernote.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(membernote.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(membernote.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(membernote.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(membernote.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(membernote.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.Note(); ok {
		_spec.SetField(membernote.FieldNote, field.TypeString, value)
	}
	if _u.mutation.NoteCleared() {
		_spec.ClearField(membernote.FieldNote, field.TypeString)
	}
	if _u.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membernote.NotesTable,
			Columns: []string{membernote.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membernote.NotesTable,
			Columns: []string{membernote.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MemberNote{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{membernote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
