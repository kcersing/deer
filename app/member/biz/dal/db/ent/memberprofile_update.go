// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"member/biz/dal/db/ent/member"
	"member/biz/dal/db/ent/memberprofile"
	"member/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberProfileUpdate is the builder for updating MemberProfile entities.
type MemberProfileUpdate struct {
	config
	hooks    []Hook
	mutation *MemberProfileMutation
}

// Where appends a list predicates to the MemberProfileUpdate builder.
func (_u *MemberProfileUpdate) Where(ps ...predicate.MemberProfile) *MemberProfileUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MemberProfileUpdate) SetUpdatedAt(v time.Time) *MemberProfileUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MemberProfileUpdate) ClearUpdatedAt() *MemberProfileUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *MemberProfileUpdate) SetDelete(v int64) *MemberProfileUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *MemberProfileUpdate) SetNillableDelete(v *int64) *MemberProfileUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *MemberProfileUpdate) AddDelete(v int64) *MemberProfileUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *MemberProfileUpdate) ClearDelete() *MemberProfileUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *MemberProfileUpdate) SetCreatedID(v int64) *MemberProfileUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *MemberProfileUpdate) SetNillableCreatedID(v *int64) *MemberProfileUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *MemberProfileUpdate) AddCreatedID(v int64) *MemberProfileUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *MemberProfileUpdate) ClearCreatedID() *MemberProfileUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetIntention sets the "intention" field.
func (_u *MemberProfileUpdate) SetIntention(v int64) *MemberProfileUpdate {
	_u.mutation.ResetIntention()
	_u.mutation.SetIntention(v)
	return _u
}

// SetNillableIntention sets the "intention" field if the given value is not nil.
func (_u *MemberProfileUpdate) SetNillableIntention(v *int64) *MemberProfileUpdate {
	if v != nil {
		_u.SetIntention(*v)
	}
	return _u
}

// AddIntention adds value to the "intention" field.
func (_u *MemberProfileUpdate) AddIntention(v int64) *MemberProfileUpdate {
	_u.mutation.AddIntention(v)
	return _u
}

// ClearIntention clears the value of the "intention" field.
func (_u *MemberProfileUpdate) ClearIntention() *MemberProfileUpdate {
	_u.mutation.ClearIntention()
	return _u
}

// SetSource sets the "source" field.
func (_u *MemberProfileUpdate) SetSource(v int64) *MemberProfileUpdate {
	_u.mutation.ResetSource()
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *MemberProfileUpdate) SetNillableSource(v *int64) *MemberProfileUpdate {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// AddSource adds value to the "source" field.
func (_u *MemberProfileUpdate) AddSource(v int64) *MemberProfileUpdate {
	_u.mutation.AddSource(v)
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *MemberProfileUpdate) ClearSource() *MemberProfileUpdate {
	_u.mutation.ClearSource()
	return _u
}

// SetMemberID sets the "member_id" field.
func (_u *MemberProfileUpdate) SetMemberID(v int64) *MemberProfileUpdate {
	_u.mutation.SetMemberID(v)
	return _u
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (_u *MemberProfileUpdate) SetNillableMemberID(v *int64) *MemberProfileUpdate {
	if v != nil {
		_u.SetMemberID(*v)
	}
	return _u
}

// ClearMemberID clears the value of the "member_id" field.
func (_u *MemberProfileUpdate) ClearMemberID() *MemberProfileUpdate {
	_u.mutation.ClearMemberID()
	return _u
}

// SetGender sets the "gender" field.
func (_u *MemberProfileUpdate) SetGender(v int64) *MemberProfileUpdate {
	_u.mutation.ResetGender()
	_u.mutation.SetGender(v)
	return _u
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (_u *MemberProfileUpdate) SetNillableGender(v *int64) *MemberProfileUpdate {
	if v != nil {
		_u.SetGender(*v)
	}
	return _u
}

// AddGender adds value to the "gender" field.
func (_u *MemberProfileUpdate) AddGender(v int64) *MemberProfileUpdate {
	_u.mutation.AddGender(v)
	return _u
}

// ClearGender clears the value of the "gender" field.
func (_u *MemberProfileUpdate) ClearGender() *MemberProfileUpdate {
	_u.mutation.ClearGender()
	return _u
}

// SetBirthday sets the "birthday" field.
func (_u *MemberProfileUpdate) SetBirthday(v time.Time) *MemberProfileUpdate {
	_u.mutation.SetBirthday(v)
	return _u
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (_u *MemberProfileUpdate) SetNillableBirthday(v *time.Time) *MemberProfileUpdate {
	if v != nil {
		_u.SetBirthday(*v)
	}
	return _u
}

// ClearBirthday clears the value of the "birthday" field.
func (_u *MemberProfileUpdate) ClearBirthday() *MemberProfileUpdate {
	_u.mutation.ClearBirthday()
	return _u
}

// SetEmail sets the "email" field.
func (_u *MemberProfileUpdate) SetEmail(v string) *MemberProfileUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *MemberProfileUpdate) SetNillableEmail(v *string) *MemberProfileUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *MemberProfileUpdate) ClearEmail() *MemberProfileUpdate {
	_u.mutation.ClearEmail()
	return _u
}

// SetWecom sets the "wecom" field.
func (_u *MemberProfileUpdate) SetWecom(v string) *MemberProfileUpdate {
	_u.mutation.SetWecom(v)
	return _u
}

// SetNillableWecom sets the "wecom" field if the given value is not nil.
func (_u *MemberProfileUpdate) SetNillableWecom(v *string) *MemberProfileUpdate {
	if v != nil {
		_u.SetWecom(*v)
	}
	return _u
}

// ClearWecom clears the value of the "wecom" field.
func (_u *MemberProfileUpdate) ClearWecom() *MemberProfileUpdate {
	_u.mutation.ClearWecom()
	return _u
}

// SetRelationMid sets the "relation_mid" field.
func (_u *MemberProfileUpdate) SetRelationMid(v int64) *MemberProfileUpdate {
	_u.mutation.ResetRelationMid()
	_u.mutation.SetRelationMid(v)
	return _u
}

// SetNillableRelationMid sets the "relation_mid" field if the given value is not nil.
func (_u *MemberProfileUpdate) SetNillableRelationMid(v *int64) *MemberProfileUpdate {
	if v != nil {
		_u.SetRelationMid(*v)
	}
	return _u
}

// AddRelationMid adds value to the "relation_mid" field.
func (_u *MemberProfileUpdate) AddRelationMid(v int64) *MemberProfileUpdate {
	_u.mutation.AddRelationMid(v)
	return _u
}

// ClearRelationMid clears the value of the "relation_mid" field.
func (_u *MemberProfileUpdate) ClearRelationMid() *MemberProfileUpdate {
	_u.mutation.ClearRelationMid()
	return _u
}

// SetRelationMame sets the "relation_mame" field.
func (_u *MemberProfileUpdate) SetRelationMame(v string) *MemberProfileUpdate {
	_u.mutation.SetRelationMame(v)
	return _u
}

// SetNillableRelationMame sets the "relation_mame" field if the given value is not nil.
func (_u *MemberProfileUpdate) SetNillableRelationMame(v *string) *MemberProfileUpdate {
	if v != nil {
		_u.SetRelationMame(*v)
	}
	return _u
}

// ClearRelationMame clears the value of the "relation_mame" field.
func (_u *MemberProfileUpdate) ClearRelationMame() *MemberProfileUpdate {
	_u.mutation.ClearRelationMame()
	return _u
}

// SetMember sets the "member" edge to the Member entity.
func (_u *MemberProfileUpdate) SetMember(v *Member) *MemberProfileUpdate {
	return _u.SetMemberID(v.ID)
}

// Mutation returns the MemberProfileMutation object of the builder.
func (_u *MemberProfileUpdate) Mutation() *MemberProfileMutation {
	return _u.mutation
}

// ClearMember clears the "member" edge to the Member entity.
func (_u *MemberProfileUpdate) ClearMember() *MemberProfileUpdate {
	_u.mutation.ClearMember()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MemberProfileUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MemberProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MemberProfileUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MemberProfileUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MemberProfileUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := memberprofile.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MemberProfileUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberprofile.Table, memberprofile.Columns, sqlgraph.NewFieldSpec(memberprofile.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(memberprofile.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(memberprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(memberprofile.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(memberprofile.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(memberprofile.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(memberprofile.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(memberprofile.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(memberprofile.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(memberprofile.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Intention(); ok {
		_spec.SetField(memberprofile.FieldIntention, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedIntention(); ok {
		_spec.AddField(memberprofile.FieldIntention, field.TypeInt64, value)
	}
	if _u.mutation.IntentionCleared() {
		_spec.ClearField(memberprofile.FieldIntention, field.TypeInt64)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(memberprofile.FieldSource, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedSource(); ok {
		_spec.AddField(memberprofile.FieldSource, field.TypeInt64, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(memberprofile.FieldSource, field.TypeInt64)
	}
	if value, ok := _u.mutation.Gender(); ok {
		_spec.SetField(memberprofile.FieldGender, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedGender(); ok {
		_spec.AddField(memberprofile.FieldGender, field.TypeInt64, value)
	}
	if _u.mutation.GenderCleared() {
		_spec.ClearField(memberprofile.FieldGender, field.TypeInt64)
	}
	if value, ok := _u.mutation.Birthday(); ok {
		_spec.SetField(memberprofile.FieldBirthday, field.TypeTime, value)
	}
	if _u.mutation.BirthdayCleared() {
		_spec.ClearField(memberprofile.FieldBirthday, field.TypeTime)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(memberprofile.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(memberprofile.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Wecom(); ok {
		_spec.SetField(memberprofile.FieldWecom, field.TypeString, value)
	}
	if _u.mutation.WecomCleared() {
		_spec.ClearField(memberprofile.FieldWecom, field.TypeString)
	}
	if value, ok := _u.mutation.RelationMid(); ok {
		_spec.SetField(memberprofile.FieldRelationMid, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedRelationMid(); ok {
		_spec.AddField(memberprofile.FieldRelationMid, field.TypeInt64, value)
	}
	if _u.mutation.RelationMidCleared() {
		_spec.ClearField(memberprofile.FieldRelationMid, field.TypeInt64)
	}
	if value, ok := _u.mutation.RelationMame(); ok {
		_spec.SetField(memberprofile.FieldRelationMame, field.TypeString, value)
	}
	if _u.mutation.RelationMameCleared() {
		_spec.ClearField(memberprofile.FieldRelationMame, field.TypeString)
	}
	if _u.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberprofile.MemberTable,
			Columns: []string{memberprofile.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberprofile.MemberTable,
			Columns: []string{memberprofile.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MemberProfileUpdateOne is the builder for updating a single MemberProfile entity.
type MemberProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberProfileMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MemberProfileUpdateOne) SetUpdatedAt(v time.Time) *MemberProfileUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MemberProfileUpdateOne) ClearUpdatedAt() *MemberProfileUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *MemberProfileUpdateOne) SetDelete(v int64) *MemberProfileUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *MemberProfileUpdateOne) SetNillableDelete(v *int64) *MemberProfileUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *MemberProfileUpdateOne) AddDelete(v int64) *MemberProfileUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *MemberProfileUpdateOne) ClearDelete() *MemberProfileUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *MemberProfileUpdateOne) SetCreatedID(v int64) *MemberProfileUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *MemberProfileUpdateOne) SetNillableCreatedID(v *int64) *MemberProfileUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *MemberProfileUpdateOne) AddCreatedID(v int64) *MemberProfileUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *MemberProfileUpdateOne) ClearCreatedID() *MemberProfileUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetIntention sets the "intention" field.
func (_u *MemberProfileUpdateOne) SetIntention(v int64) *MemberProfileUpdateOne {
	_u.mutation.ResetIntention()
	_u.mutation.SetIntention(v)
	return _u
}

// SetNillableIntention sets the "intention" field if the given value is not nil.
func (_u *MemberProfileUpdateOne) SetNillableIntention(v *int64) *MemberProfileUpdateOne {
	if v != nil {
		_u.SetIntention(*v)
	}
	return _u
}

// AddIntention adds value to the "intention" field.
func (_u *MemberProfileUpdateOne) AddIntention(v int64) *MemberProfileUpdateOne {
	_u.mutation.AddIntention(v)
	return _u
}

// ClearIntention clears the value of the "intention" field.
func (_u *MemberProfileUpdateOne) ClearIntention() *MemberProfileUpdateOne {
	_u.mutation.ClearIntention()
	return _u
}

// SetSource sets the "source" field.
func (_u *MemberProfileUpdateOne) SetSource(v int64) *MemberProfileUpdateOne {
	_u.mutation.ResetSource()
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *MemberProfileUpdateOne) SetNillableSource(v *int64) *MemberProfileUpdateOne {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// AddSource adds value to the "source" field.
func (_u *MemberProfileUpdateOne) AddSource(v int64) *MemberProfileUpdateOne {
	_u.mutation.AddSource(v)
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *MemberProfileUpdateOne) ClearSource() *MemberProfileUpdateOne {
	_u.mutation.ClearSource()
	return _u
}

// SetMemberID sets the "member_id" field.
func (_u *MemberProfileUpdateOne) SetMemberID(v int64) *MemberProfileUpdateOne {
	_u.mutation.SetMemberID(v)
	return _u
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (_u *MemberProfileUpdateOne) SetNillableMemberID(v *int64) *MemberProfileUpdateOne {
	if v != nil {
		_u.SetMemberID(*v)
	}
	return _u
}

// ClearMemberID clears the value of the "member_id" field.
func (_u *MemberProfileUpdateOne) ClearMemberID() *MemberProfileUpdateOne {
	_u.mutation.ClearMemberID()
	return _u
}

// SetGender sets the "gender" field.
func (_u *MemberProfileUpdateOne) SetGender(v int64) *MemberProfileUpdateOne {
	_u.mutation.ResetGender()
	_u.mutation.SetGender(v)
	return _u
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (_u *MemberProfileUpdateOne) SetNillableGender(v *int64) *MemberProfileUpdateOne {
	if v != nil {
		_u.SetGender(*v)
	}
	return _u
}

// AddGender adds value to the "gender" field.
func (_u *MemberProfileUpdateOne) AddGender(v int64) *MemberProfileUpdateOne {
	_u.mutation.AddGender(v)
	return _u
}

// ClearGender clears the value of the "gender" field.
func (_u *MemberProfileUpdateOne) ClearGender() *MemberProfileUpdateOne {
	_u.mutation.ClearGender()
	return _u
}

// SetBirthday sets the "birthday" field.
func (_u *MemberProfileUpdateOne) SetBirthday(v time.Time) *MemberProfileUpdateOne {
	_u.mutation.SetBirthday(v)
	return _u
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (_u *MemberProfileUpdateOne) SetNillableBirthday(v *time.Time) *MemberProfileUpdateOne {
	if v != nil {
		_u.SetBirthday(*v)
	}
	return _u
}

// ClearBirthday clears the value of the "birthday" field.
func (_u *MemberProfileUpdateOne) ClearBirthday() *MemberProfileUpdateOne {
	_u.mutation.ClearBirthday()
	return _u
}

// SetEmail sets the "email" field.
func (_u *MemberProfileUpdateOne) SetEmail(v string) *MemberProfileUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *MemberProfileUpdateOne) SetNillableEmail(v *string) *MemberProfileUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *MemberProfileUpdateOne) ClearEmail() *MemberProfileUpdateOne {
	_u.mutation.ClearEmail()
	return _u
}

// SetWecom sets the "wecom" field.
func (_u *MemberProfileUpdateOne) SetWecom(v string) *MemberProfileUpdateOne {
	_u.mutation.SetWecom(v)
	return _u
}

// SetNillableWecom sets the "wecom" field if the given value is not nil.
func (_u *MemberProfileUpdateOne) SetNillableWecom(v *string) *MemberProfileUpdateOne {
	if v != nil {
		_u.SetWecom(*v)
	}
	return _u
}

// ClearWecom clears the value of the "wecom" field.
func (_u *MemberProfileUpdateOne) ClearWecom() *MemberProfileUpdateOne {
	_u.mutation.ClearWecom()
	return _u
}

// SetRelationMid sets the "relation_mid" field.
func (_u *MemberProfileUpdateOne) SetRelationMid(v int64) *MemberProfileUpdateOne {
	_u.mutation.ResetRelationMid()
	_u.mutation.SetRelationMid(v)
	return _u
}

// SetNillableRelationMid sets the "relation_mid" field if the given value is not nil.
func (_u *MemberProfileUpdateOne) SetNillableRelationMid(v *int64) *MemberProfileUpdateOne {
	if v != nil {
		_u.SetRelationMid(*v)
	}
	return _u
}

// AddRelationMid adds value to the "relation_mid" field.
func (_u *MemberProfileUpdateOne) AddRelationMid(v int64) *MemberProfileUpdateOne {
	_u.mutation.AddRelationMid(v)
	return _u
}

// ClearRelationMid clears the value of the "relation_mid" field.
func (_u *MemberProfileUpdateOne) ClearRelationMid() *MemberProfileUpdateOne {
	_u.mutation.ClearRelationMid()
	return _u
}

// SetRelationMame sets the "relation_mame" field.
func (_u *MemberProfileUpdateOne) SetRelationMame(v string) *MemberProfileUpdateOne {
	_u.mutation.SetRelationMame(v)
	return _u
}

// SetNillableRelationMame sets the "relation_mame" field if the given value is not nil.
func (_u *MemberProfileUpdateOne) SetNillableRelationMame(v *string) *MemberProfileUpdateOne {
	if v != nil {
		_u.SetRelationMame(*v)
	}
	return _u
}

// ClearRelationMame clears the value of the "relation_mame" field.
func (_u *MemberProfileUpdateOne) ClearRelationMame() *MemberProfileUpdateOne {
	_u.mutation.ClearRelationMame()
	return _u
}

// SetMember sets the "member" edge to the Member entity.
func (_u *MemberProfileUpdateOne) SetMember(v *Member) *MemberProfileUpdateOne {
	return _u.SetMemberID(v.ID)
}

// Mutation returns the MemberProfileMutation object of the builder.
func (_u *MemberProfileUpdateOne) Mutation() *MemberProfileMutation {
	return _u.mutation
}

// ClearMember clears the "member" edge to the Member entity.
func (_u *MemberProfileUpdateOne) ClearMember() *MemberProfileUpdateOne {
	_u.mutation.ClearMember()
	return _u
}

// Where appends a list predicates to the MemberProfileUpdate builder.
func (_u *MemberProfileUpdateOne) Where(ps ...predicate.MemberProfile) *MemberProfileUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MemberProfileUpdateOne) Select(field string, fields ...string) *MemberProfileUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated MemberProfile entity.
func (_u *MemberProfileUpdateOne) Save(ctx context.Context) (*MemberProfile, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MemberProfileUpdateOne) SaveX(ctx context.Context) *MemberProfile {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MemberProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MemberProfileUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MemberProfileUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := memberprofile.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MemberProfileUpdateOne) sqlSave(ctx context.Context) (_node *MemberProfile, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberprofile.Table, memberprofile.Columns, sqlgraph.NewFieldSpec(memberprofile.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MemberProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memberprofile.FieldID)
		for _, f := range fields {
			if !memberprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != memberprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(memberprofile.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(memberprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(memberprofile.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(memberprofile.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(memberprofile.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(memberprofile.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(memberprofile.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(memberprofile.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(memberprofile.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Intention(); ok {
		_spec.SetField(memberprofile.FieldIntention, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedIntention(); ok {
		_spec.AddField(memberprofile.FieldIntention, field.TypeInt64, value)
	}
	if _u.mutation.IntentionCleared() {
		_spec.ClearField(memberprofile.FieldIntention, field.TypeInt64)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(memberprofile.FieldSource, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedSource(); ok {
		_spec.AddField(memberprofile.FieldSource, field.TypeInt64, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(memberprofile.FieldSource, field.TypeInt64)
	}
	if value, ok := _u.mutation.Gender(); ok {
		_spec.SetField(memberprofile.FieldGender, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedGender(); ok {
		_spec.AddField(memberprofile.FieldGender, field.TypeInt64, value)
	}
	if _u.mutation.GenderCleared() {
		_spec.ClearField(memberprofile.FieldGender, field.TypeInt64)
	}
	if value, ok := _u.mutation.Birthday(); ok {
		_spec.SetField(memberprofile.FieldBirthday, field.TypeTime, value)
	}
	if _u.mutation.BirthdayCleared() {
		_spec.ClearField(memberprofile.FieldBirthday, field.TypeTime)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(memberprofile.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(memberprofile.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Wecom(); ok {
		_spec.SetField(memberprofile.FieldWecom, field.TypeString, value)
	}
	if _u.mutation.WecomCleared() {
		_spec.ClearField(memberprofile.FieldWecom, field.TypeString)
	}
	if value, ok := _u.mutation.RelationMid(); ok {
		_spec.SetField(memberprofile.FieldRelationMid, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedRelationMid(); ok {
		_spec.AddField(memberprofile.FieldRelationMid, field.TypeInt64, value)
	}
	if _u.mutation.RelationMidCleared() {
		_spec.ClearField(memberprofile.FieldRelationMid, field.TypeInt64)
	}
	if value, ok := _u.mutation.RelationMame(); ok {
		_spec.SetField(memberprofile.FieldRelationMame, field.TypeString, value)
	}
	if _u.mutation.RelationMameCleared() {
		_spec.ClearField(memberprofile.FieldRelationMame, field.TypeString)
	}
	if _u.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberprofile.MemberTable,
			Columns: []string{memberprofile.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberprofile.MemberTable,
			Columns: []string{memberprofile.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MemberProfile{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
