// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"member/biz/dal/db/ent/migrate"

	"member/biz/dal/db/ent/member"
	"member/biz/dal/db/ent/membercontract"
	"member/biz/dal/db/ent/membercontractcontent"
	"member/biz/dal/db/ent/membernote"
	"member/biz/dal/db/ent/memberproduct"
	"member/biz/dal/db/ent/memberproductproperty"
	"member/biz/dal/db/ent/memberprofile"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Member is the client for interacting with the Member builders.
	Member *MemberClient
	// MemberContract is the client for interacting with the MemberContract builders.
	MemberContract *MemberContractClient
	// MemberContractContent is the client for interacting with the MemberContractContent builders.
	MemberContractContent *MemberContractContentClient
	// MemberNote is the client for interacting with the MemberNote builders.
	MemberNote *MemberNoteClient
	// MemberProduct is the client for interacting with the MemberProduct builders.
	MemberProduct *MemberProductClient
	// MemberProductProperty is the client for interacting with the MemberProductProperty builders.
	MemberProductProperty *MemberProductPropertyClient
	// MemberProfile is the client for interacting with the MemberProfile builders.
	MemberProfile *MemberProfileClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Member = NewMemberClient(c.config)
	c.MemberContract = NewMemberContractClient(c.config)
	c.MemberContractContent = NewMemberContractContentClient(c.config)
	c.MemberNote = NewMemberNoteClient(c.config)
	c.MemberProduct = NewMemberProductClient(c.config)
	c.MemberProductProperty = NewMemberProductPropertyClient(c.config)
	c.MemberProfile = NewMemberProfileClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Member:                NewMemberClient(cfg),
		MemberContract:        NewMemberContractClient(cfg),
		MemberContractContent: NewMemberContractContentClient(cfg),
		MemberNote:            NewMemberNoteClient(cfg),
		MemberProduct:         NewMemberProductClient(cfg),
		MemberProductProperty: NewMemberProductPropertyClient(cfg),
		MemberProfile:         NewMemberProfileClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Member:                NewMemberClient(cfg),
		MemberContract:        NewMemberContractClient(cfg),
		MemberContractContent: NewMemberContractContentClient(cfg),
		MemberNote:            NewMemberNoteClient(cfg),
		MemberProduct:         NewMemberProductClient(cfg),
		MemberProductProperty: NewMemberProductPropertyClient(cfg),
		MemberProfile:         NewMemberProfileClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Member.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Member, c.MemberContract, c.MemberContractContent, c.MemberNote,
		c.MemberProduct, c.MemberProductProperty, c.MemberProfile,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Member, c.MemberContract, c.MemberContractContent, c.MemberNote,
		c.MemberProduct, c.MemberProductProperty, c.MemberProfile,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *MemberMutation:
		return c.Member.mutate(ctx, m)
	case *MemberContractMutation:
		return c.MemberContract.mutate(ctx, m)
	case *MemberContractContentMutation:
		return c.MemberContractContent.mutate(ctx, m)
	case *MemberNoteMutation:
		return c.MemberNote.mutate(ctx, m)
	case *MemberProductMutation:
		return c.MemberProduct.mutate(ctx, m)
	case *MemberProductPropertyMutation:
		return c.MemberProductProperty.mutate(ctx, m)
	case *MemberProfileMutation:
		return c.MemberProfile.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// MemberClient is a client for the Member schema.
type MemberClient struct {
	config
}

// NewMemberClient returns a client for the Member from the given config.
func NewMemberClient(c config) *MemberClient {
	return &MemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `member.Hooks(f(g(h())))`.
func (c *MemberClient) Use(hooks ...Hook) {
	c.hooks.Member = append(c.hooks.Member, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `member.Intercept(f(g(h())))`.
func (c *MemberClient) Intercept(interceptors ...Interceptor) {
	c.inters.Member = append(c.inters.Member, interceptors...)
}

// Create returns a builder for creating a Member entity.
func (c *MemberClient) Create() *MemberCreate {
	mutation := newMemberMutation(c.config, OpCreate)
	return &MemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Member entities.
func (c *MemberClient) CreateBulk(builders ...*MemberCreate) *MemberCreateBulk {
	return &MemberCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MemberClient) MapCreateBulk(slice any, setFunc func(*MemberCreate, int)) *MemberCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MemberCreateBulk{err: fmt.Errorf("calling to MemberClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MemberCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MemberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Member.
func (c *MemberClient) Update() *MemberUpdate {
	mutation := newMemberMutation(c.config, OpUpdate)
	return &MemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MemberClient) UpdateOne(_m *Member) *MemberUpdateOne {
	mutation := newMemberMutation(c.config, OpUpdateOne, withMember(_m))
	return &MemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MemberClient) UpdateOneID(id int64) *MemberUpdateOne {
	mutation := newMemberMutation(c.config, OpUpdateOne, withMemberID(id))
	return &MemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Member.
func (c *MemberClient) Delete() *MemberDelete {
	mutation := newMemberMutation(c.config, OpDelete)
	return &MemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MemberClient) DeleteOne(_m *Member) *MemberDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MemberClient) DeleteOneID(id int64) *MemberDeleteOne {
	builder := c.Delete().Where(member.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MemberDeleteOne{builder}
}

// Query returns a query builder for Member.
func (c *MemberClient) Query() *MemberQuery {
	return &MemberQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMember},
		inters: c.Interceptors(),
	}
}

// Get returns a Member entity by its id.
func (c *MemberClient) Get(ctx context.Context, id int64) (*Member, error) {
	return c.Query().Where(member.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MemberClient) GetX(ctx context.Context, id int64) *Member {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMemberProfile queries the member_profile edge of a Member.
func (c *MemberClient) QueryMemberProfile(_m *Member) *MemberProfileQuery {
	query := (&MemberProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(member.Table, member.FieldID, id),
			sqlgraph.To(memberprofile.Table, memberprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, member.MemberProfileTable, member.MemberProfileColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMemberNotes queries the member_notes edge of a Member.
func (c *MemberClient) QueryMemberNotes(_m *Member) *MemberNoteQuery {
	query := (&MemberNoteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(member.Table, member.FieldID, id),
			sqlgraph.To(membernote.Table, membernote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, member.MemberNotesTable, member.MemberNotesColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMemberProducts queries the member_products edge of a Member.
func (c *MemberClient) QueryMemberProducts(_m *Member) *MemberProductQuery {
	query := (&MemberProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(member.Table, member.FieldID, id),
			sqlgraph.To(memberproduct.Table, memberproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, member.MemberProductsTable, member.MemberProductsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMemberContents queries the member_contents edge of a Member.
func (c *MemberClient) QueryMemberContents(_m *Member) *MemberContractQuery {
	query := (&MemberContractClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(member.Table, member.FieldID, id),
			sqlgraph.To(membercontract.Table, membercontract.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, member.MemberContentsTable, member.MemberContentsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MemberClient) Hooks() []Hook {
	return c.hooks.Member
}

// Interceptors returns the client interceptors.
func (c *MemberClient) Interceptors() []Interceptor {
	return c.inters.Member
}

func (c *MemberClient) mutate(ctx context.Context, m *MemberMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MemberCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MemberUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MemberDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Member mutation op: %q", m.Op())
	}
}

// MemberContractClient is a client for the MemberContract schema.
type MemberContractClient struct {
	config
}

// NewMemberContractClient returns a client for the MemberContract from the given config.
func NewMemberContractClient(c config) *MemberContractClient {
	return &MemberContractClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `membercontract.Hooks(f(g(h())))`.
func (c *MemberContractClient) Use(hooks ...Hook) {
	c.hooks.MemberContract = append(c.hooks.MemberContract, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `membercontract.Intercept(f(g(h())))`.
func (c *MemberContractClient) Intercept(interceptors ...Interceptor) {
	c.inters.MemberContract = append(c.inters.MemberContract, interceptors...)
}

// Create returns a builder for creating a MemberContract entity.
func (c *MemberContractClient) Create() *MemberContractCreate {
	mutation := newMemberContractMutation(c.config, OpCreate)
	return &MemberContractCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MemberContract entities.
func (c *MemberContractClient) CreateBulk(builders ...*MemberContractCreate) *MemberContractCreateBulk {
	return &MemberContractCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MemberContractClient) MapCreateBulk(slice any, setFunc func(*MemberContractCreate, int)) *MemberContractCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MemberContractCreateBulk{err: fmt.Errorf("calling to MemberContractClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MemberContractCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MemberContractCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MemberContract.
func (c *MemberContractClient) Update() *MemberContractUpdate {
	mutation := newMemberContractMutation(c.config, OpUpdate)
	return &MemberContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MemberContractClient) UpdateOne(_m *MemberContract) *MemberContractUpdateOne {
	mutation := newMemberContractMutation(c.config, OpUpdateOne, withMemberContract(_m))
	return &MemberContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MemberContractClient) UpdateOneID(id int64) *MemberContractUpdateOne {
	mutation := newMemberContractMutation(c.config, OpUpdateOne, withMemberContractID(id))
	return &MemberContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MemberContract.
func (c *MemberContractClient) Delete() *MemberContractDelete {
	mutation := newMemberContractMutation(c.config, OpDelete)
	return &MemberContractDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MemberContractClient) DeleteOne(_m *MemberContract) *MemberContractDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MemberContractClient) DeleteOneID(id int64) *MemberContractDeleteOne {
	builder := c.Delete().Where(membercontract.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MemberContractDeleteOne{builder}
}

// Query returns a query builder for MemberContract.
func (c *MemberContractClient) Query() *MemberContractQuery {
	return &MemberContractQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMemberContract},
		inters: c.Interceptors(),
	}
}

// Get returns a MemberContract entity by its id.
func (c *MemberContractClient) Get(ctx context.Context, id int64) (*MemberContract, error) {
	return c.Query().Where(membercontract.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MemberContractClient) GetX(ctx context.Context, id int64) *MemberContract {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryContent queries the content edge of a MemberContract.
func (c *MemberContractClient) QueryContent(_m *MemberContract) *MemberContractContentQuery {
	query := (&MemberContractContentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(membercontract.Table, membercontract.FieldID, id),
			sqlgraph.To(membercontractcontent.Table, membercontractcontent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, membercontract.ContentTable, membercontract.ContentColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMember queries the member edge of a MemberContract.
func (c *MemberContractClient) QueryMember(_m *MemberContract) *MemberQuery {
	query := (&MemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(membercontract.Table, membercontract.FieldID, id),
			sqlgraph.To(member.Table, member.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, membercontract.MemberTable, membercontract.MemberColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMemberProduct queries the member_product edge of a MemberContract.
func (c *MemberContractClient) QueryMemberProduct(_m *MemberContract) *MemberProductQuery {
	query := (&MemberProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(membercontract.Table, membercontract.FieldID, id),
			sqlgraph.To(memberproduct.Table, memberproduct.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, membercontract.MemberProductTable, membercontract.MemberProductColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MemberContractClient) Hooks() []Hook {
	return c.hooks.MemberContract
}

// Interceptors returns the client interceptors.
func (c *MemberContractClient) Interceptors() []Interceptor {
	return c.inters.MemberContract
}

func (c *MemberContractClient) mutate(ctx context.Context, m *MemberContractMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MemberContractCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MemberContractUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MemberContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MemberContractDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MemberContract mutation op: %q", m.Op())
	}
}

// MemberContractContentClient is a client for the MemberContractContent schema.
type MemberContractContentClient struct {
	config
}

// NewMemberContractContentClient returns a client for the MemberContractContent from the given config.
func NewMemberContractContentClient(c config) *MemberContractContentClient {
	return &MemberContractContentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `membercontractcontent.Hooks(f(g(h())))`.
func (c *MemberContractContentClient) Use(hooks ...Hook) {
	c.hooks.MemberContractContent = append(c.hooks.MemberContractContent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `membercontractcontent.Intercept(f(g(h())))`.
func (c *MemberContractContentClient) Intercept(interceptors ...Interceptor) {
	c.inters.MemberContractContent = append(c.inters.MemberContractContent, interceptors...)
}

// Create returns a builder for creating a MemberContractContent entity.
func (c *MemberContractContentClient) Create() *MemberContractContentCreate {
	mutation := newMemberContractContentMutation(c.config, OpCreate)
	return &MemberContractContentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MemberContractContent entities.
func (c *MemberContractContentClient) CreateBulk(builders ...*MemberContractContentCreate) *MemberContractContentCreateBulk {
	return &MemberContractContentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MemberContractContentClient) MapCreateBulk(slice any, setFunc func(*MemberContractContentCreate, int)) *MemberContractContentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MemberContractContentCreateBulk{err: fmt.Errorf("calling to MemberContractContentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MemberContractContentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MemberContractContentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MemberContractContent.
func (c *MemberContractContentClient) Update() *MemberContractContentUpdate {
	mutation := newMemberContractContentMutation(c.config, OpUpdate)
	return &MemberContractContentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MemberContractContentClient) UpdateOne(_m *MemberContractContent) *MemberContractContentUpdateOne {
	mutation := newMemberContractContentMutation(c.config, OpUpdateOne, withMemberContractContent(_m))
	return &MemberContractContentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MemberContractContentClient) UpdateOneID(id int64) *MemberContractContentUpdateOne {
	mutation := newMemberContractContentMutation(c.config, OpUpdateOne, withMemberContractContentID(id))
	return &MemberContractContentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MemberContractContent.
func (c *MemberContractContentClient) Delete() *MemberContractContentDelete {
	mutation := newMemberContractContentMutation(c.config, OpDelete)
	return &MemberContractContentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MemberContractContentClient) DeleteOne(_m *MemberContractContent) *MemberContractContentDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MemberContractContentClient) DeleteOneID(id int64) *MemberContractContentDeleteOne {
	builder := c.Delete().Where(membercontractcontent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MemberContractContentDeleteOne{builder}
}

// Query returns a query builder for MemberContractContent.
func (c *MemberContractContentClient) Query() *MemberContractContentQuery {
	return &MemberContractContentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMemberContractContent},
		inters: c.Interceptors(),
	}
}

// Get returns a MemberContractContent entity by its id.
func (c *MemberContractContentClient) Get(ctx context.Context, id int64) (*MemberContractContent, error) {
	return c.Query().Where(membercontractcontent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MemberContractContentClient) GetX(ctx context.Context, id int64) *MemberContractContent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryContract queries the contract edge of a MemberContractContent.
func (c *MemberContractContentClient) QueryContract(_m *MemberContractContent) *MemberContractQuery {
	query := (&MemberContractClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(membercontractcontent.Table, membercontractcontent.FieldID, id),
			sqlgraph.To(membercontract.Table, membercontract.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, membercontractcontent.ContractTable, membercontractcontent.ContractColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MemberContractContentClient) Hooks() []Hook {
	return c.hooks.MemberContractContent
}

// Interceptors returns the client interceptors.
func (c *MemberContractContentClient) Interceptors() []Interceptor {
	return c.inters.MemberContractContent
}

func (c *MemberContractContentClient) mutate(ctx context.Context, m *MemberContractContentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MemberContractContentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MemberContractContentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MemberContractContentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MemberContractContentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MemberContractContent mutation op: %q", m.Op())
	}
}

// MemberNoteClient is a client for the MemberNote schema.
type MemberNoteClient struct {
	config
}

// NewMemberNoteClient returns a client for the MemberNote from the given config.
func NewMemberNoteClient(c config) *MemberNoteClient {
	return &MemberNoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `membernote.Hooks(f(g(h())))`.
func (c *MemberNoteClient) Use(hooks ...Hook) {
	c.hooks.MemberNote = append(c.hooks.MemberNote, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `membernote.Intercept(f(g(h())))`.
func (c *MemberNoteClient) Intercept(interceptors ...Interceptor) {
	c.inters.MemberNote = append(c.inters.MemberNote, interceptors...)
}

// Create returns a builder for creating a MemberNote entity.
func (c *MemberNoteClient) Create() *MemberNoteCreate {
	mutation := newMemberNoteMutation(c.config, OpCreate)
	return &MemberNoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MemberNote entities.
func (c *MemberNoteClient) CreateBulk(builders ...*MemberNoteCreate) *MemberNoteCreateBulk {
	return &MemberNoteCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MemberNoteClient) MapCreateBulk(slice any, setFunc func(*MemberNoteCreate, int)) *MemberNoteCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MemberNoteCreateBulk{err: fmt.Errorf("calling to MemberNoteClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MemberNoteCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MemberNoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MemberNote.
func (c *MemberNoteClient) Update() *MemberNoteUpdate {
	mutation := newMemberNoteMutation(c.config, OpUpdate)
	return &MemberNoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MemberNoteClient) UpdateOne(_m *MemberNote) *MemberNoteUpdateOne {
	mutation := newMemberNoteMutation(c.config, OpUpdateOne, withMemberNote(_m))
	return &MemberNoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MemberNoteClient) UpdateOneID(id int64) *MemberNoteUpdateOne {
	mutation := newMemberNoteMutation(c.config, OpUpdateOne, withMemberNoteID(id))
	return &MemberNoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MemberNote.
func (c *MemberNoteClient) Delete() *MemberNoteDelete {
	mutation := newMemberNoteMutation(c.config, OpDelete)
	return &MemberNoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MemberNoteClient) DeleteOne(_m *MemberNote) *MemberNoteDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MemberNoteClient) DeleteOneID(id int64) *MemberNoteDeleteOne {
	builder := c.Delete().Where(membernote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MemberNoteDeleteOne{builder}
}

// Query returns a query builder for MemberNote.
func (c *MemberNoteClient) Query() *MemberNoteQuery {
	return &MemberNoteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMemberNote},
		inters: c.Interceptors(),
	}
}

// Get returns a MemberNote entity by its id.
func (c *MemberNoteClient) Get(ctx context.Context, id int64) (*MemberNote, error) {
	return c.Query().Where(membernote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MemberNoteClient) GetX(ctx context.Context, id int64) *MemberNote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNotes queries the notes edge of a MemberNote.
func (c *MemberNoteClient) QueryNotes(_m *MemberNote) *MemberQuery {
	query := (&MemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(membernote.Table, membernote.FieldID, id),
			sqlgraph.To(member.Table, member.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, membernote.NotesTable, membernote.NotesColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MemberNoteClient) Hooks() []Hook {
	return c.hooks.MemberNote
}

// Interceptors returns the client interceptors.
func (c *MemberNoteClient) Interceptors() []Interceptor {
	return c.inters.MemberNote
}

func (c *MemberNoteClient) mutate(ctx context.Context, m *MemberNoteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MemberNoteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MemberNoteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MemberNoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MemberNoteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MemberNote mutation op: %q", m.Op())
	}
}

// MemberProductClient is a client for the MemberProduct schema.
type MemberProductClient struct {
	config
}

// NewMemberProductClient returns a client for the MemberProduct from the given config.
func NewMemberProductClient(c config) *MemberProductClient {
	return &MemberProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `memberproduct.Hooks(f(g(h())))`.
func (c *MemberProductClient) Use(hooks ...Hook) {
	c.hooks.MemberProduct = append(c.hooks.MemberProduct, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `memberproduct.Intercept(f(g(h())))`.
func (c *MemberProductClient) Intercept(interceptors ...Interceptor) {
	c.inters.MemberProduct = append(c.inters.MemberProduct, interceptors...)
}

// Create returns a builder for creating a MemberProduct entity.
func (c *MemberProductClient) Create() *MemberProductCreate {
	mutation := newMemberProductMutation(c.config, OpCreate)
	return &MemberProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MemberProduct entities.
func (c *MemberProductClient) CreateBulk(builders ...*MemberProductCreate) *MemberProductCreateBulk {
	return &MemberProductCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MemberProductClient) MapCreateBulk(slice any, setFunc func(*MemberProductCreate, int)) *MemberProductCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MemberProductCreateBulk{err: fmt.Errorf("calling to MemberProductClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MemberProductCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MemberProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MemberProduct.
func (c *MemberProductClient) Update() *MemberProductUpdate {
	mutation := newMemberProductMutation(c.config, OpUpdate)
	return &MemberProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MemberProductClient) UpdateOne(_m *MemberProduct) *MemberProductUpdateOne {
	mutation := newMemberProductMutation(c.config, OpUpdateOne, withMemberProduct(_m))
	return &MemberProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MemberProductClient) UpdateOneID(id int64) *MemberProductUpdateOne {
	mutation := newMemberProductMutation(c.config, OpUpdateOne, withMemberProductID(id))
	return &MemberProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MemberProduct.
func (c *MemberProductClient) Delete() *MemberProductDelete {
	mutation := newMemberProductMutation(c.config, OpDelete)
	return &MemberProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MemberProductClient) DeleteOne(_m *MemberProduct) *MemberProductDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MemberProductClient) DeleteOneID(id int64) *MemberProductDeleteOne {
	builder := c.Delete().Where(memberproduct.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MemberProductDeleteOne{builder}
}

// Query returns a query builder for MemberProduct.
func (c *MemberProductClient) Query() *MemberProductQuery {
	return &MemberProductQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMemberProduct},
		inters: c.Interceptors(),
	}
}

// Get returns a MemberProduct entity by its id.
func (c *MemberProductClient) Get(ctx context.Context, id int64) (*MemberProduct, error) {
	return c.Query().Where(memberproduct.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MemberProductClient) GetX(ctx context.Context, id int64) *MemberProduct {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMembers queries the members edge of a MemberProduct.
func (c *MemberProductClient) QueryMembers(_m *MemberProduct) *MemberQuery {
	query := (&MemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(memberproduct.Table, memberproduct.FieldID, id),
			sqlgraph.To(member.Table, member.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, memberproduct.MembersTable, memberproduct.MembersColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMemberProductPropertys queries the member_product_propertys edge of a MemberProduct.
func (c *MemberProductClient) QueryMemberProductPropertys(_m *MemberProduct) *MemberProductPropertyQuery {
	query := (&MemberProductPropertyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(memberproduct.Table, memberproduct.FieldID, id),
			sqlgraph.To(memberproductproperty.Table, memberproductproperty.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, memberproduct.MemberProductPropertysTable, memberproduct.MemberProductPropertysColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMemberProductContents queries the member_product_contents edge of a MemberProduct.
func (c *MemberProductClient) QueryMemberProductContents(_m *MemberProduct) *MemberContractQuery {
	query := (&MemberContractClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(memberproduct.Table, memberproduct.FieldID, id),
			sqlgraph.To(membercontract.Table, membercontract.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, memberproduct.MemberProductContentsTable, memberproduct.MemberProductContentsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MemberProductClient) Hooks() []Hook {
	return c.hooks.MemberProduct
}

// Interceptors returns the client interceptors.
func (c *MemberProductClient) Interceptors() []Interceptor {
	return c.inters.MemberProduct
}

func (c *MemberProductClient) mutate(ctx context.Context, m *MemberProductMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MemberProductCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MemberProductUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MemberProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MemberProductDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MemberProduct mutation op: %q", m.Op())
	}
}

// MemberProductPropertyClient is a client for the MemberProductProperty schema.
type MemberProductPropertyClient struct {
	config
}

// NewMemberProductPropertyClient returns a client for the MemberProductProperty from the given config.
func NewMemberProductPropertyClient(c config) *MemberProductPropertyClient {
	return &MemberProductPropertyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `memberproductproperty.Hooks(f(g(h())))`.
func (c *MemberProductPropertyClient) Use(hooks ...Hook) {
	c.hooks.MemberProductProperty = append(c.hooks.MemberProductProperty, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `memberproductproperty.Intercept(f(g(h())))`.
func (c *MemberProductPropertyClient) Intercept(interceptors ...Interceptor) {
	c.inters.MemberProductProperty = append(c.inters.MemberProductProperty, interceptors...)
}

// Create returns a builder for creating a MemberProductProperty entity.
func (c *MemberProductPropertyClient) Create() *MemberProductPropertyCreate {
	mutation := newMemberProductPropertyMutation(c.config, OpCreate)
	return &MemberProductPropertyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MemberProductProperty entities.
func (c *MemberProductPropertyClient) CreateBulk(builders ...*MemberProductPropertyCreate) *MemberProductPropertyCreateBulk {
	return &MemberProductPropertyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MemberProductPropertyClient) MapCreateBulk(slice any, setFunc func(*MemberProductPropertyCreate, int)) *MemberProductPropertyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MemberProductPropertyCreateBulk{err: fmt.Errorf("calling to MemberProductPropertyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MemberProductPropertyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MemberProductPropertyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MemberProductProperty.
func (c *MemberProductPropertyClient) Update() *MemberProductPropertyUpdate {
	mutation := newMemberProductPropertyMutation(c.config, OpUpdate)
	return &MemberProductPropertyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MemberProductPropertyClient) UpdateOne(_m *MemberProductProperty) *MemberProductPropertyUpdateOne {
	mutation := newMemberProductPropertyMutation(c.config, OpUpdateOne, withMemberProductProperty(_m))
	return &MemberProductPropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MemberProductPropertyClient) UpdateOneID(id int64) *MemberProductPropertyUpdateOne {
	mutation := newMemberProductPropertyMutation(c.config, OpUpdateOne, withMemberProductPropertyID(id))
	return &MemberProductPropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MemberProductProperty.
func (c *MemberProductPropertyClient) Delete() *MemberProductPropertyDelete {
	mutation := newMemberProductPropertyMutation(c.config, OpDelete)
	return &MemberProductPropertyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MemberProductPropertyClient) DeleteOne(_m *MemberProductProperty) *MemberProductPropertyDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MemberProductPropertyClient) DeleteOneID(id int64) *MemberProductPropertyDeleteOne {
	builder := c.Delete().Where(memberproductproperty.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MemberProductPropertyDeleteOne{builder}
}

// Query returns a query builder for MemberProductProperty.
func (c *MemberProductPropertyClient) Query() *MemberProductPropertyQuery {
	return &MemberProductPropertyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMemberProductProperty},
		inters: c.Interceptors(),
	}
}

// Get returns a MemberProductProperty entity by its id.
func (c *MemberProductPropertyClient) Get(ctx context.Context, id int64) (*MemberProductProperty, error) {
	return c.Query().Where(memberproductproperty.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MemberProductPropertyClient) GetX(ctx context.Context, id int64) *MemberProductProperty {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a MemberProductProperty.
func (c *MemberProductPropertyClient) QueryOwner(_m *MemberProductProperty) *MemberProductQuery {
	query := (&MemberProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(memberproductproperty.Table, memberproductproperty.FieldID, id),
			sqlgraph.To(memberproduct.Table, memberproduct.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, memberproductproperty.OwnerTable, memberproductproperty.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MemberProductPropertyClient) Hooks() []Hook {
	return c.hooks.MemberProductProperty
}

// Interceptors returns the client interceptors.
func (c *MemberProductPropertyClient) Interceptors() []Interceptor {
	return c.inters.MemberProductProperty
}

func (c *MemberProductPropertyClient) mutate(ctx context.Context, m *MemberProductPropertyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MemberProductPropertyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MemberProductPropertyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MemberProductPropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MemberProductPropertyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MemberProductProperty mutation op: %q", m.Op())
	}
}

// MemberProfileClient is a client for the MemberProfile schema.
type MemberProfileClient struct {
	config
}

// NewMemberProfileClient returns a client for the MemberProfile from the given config.
func NewMemberProfileClient(c config) *MemberProfileClient {
	return &MemberProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `memberprofile.Hooks(f(g(h())))`.
func (c *MemberProfileClient) Use(hooks ...Hook) {
	c.hooks.MemberProfile = append(c.hooks.MemberProfile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `memberprofile.Intercept(f(g(h())))`.
func (c *MemberProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.MemberProfile = append(c.inters.MemberProfile, interceptors...)
}

// Create returns a builder for creating a MemberProfile entity.
func (c *MemberProfileClient) Create() *MemberProfileCreate {
	mutation := newMemberProfileMutation(c.config, OpCreate)
	return &MemberProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MemberProfile entities.
func (c *MemberProfileClient) CreateBulk(builders ...*MemberProfileCreate) *MemberProfileCreateBulk {
	return &MemberProfileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MemberProfileClient) MapCreateBulk(slice any, setFunc func(*MemberProfileCreate, int)) *MemberProfileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MemberProfileCreateBulk{err: fmt.Errorf("calling to MemberProfileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MemberProfileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MemberProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MemberProfile.
func (c *MemberProfileClient) Update() *MemberProfileUpdate {
	mutation := newMemberProfileMutation(c.config, OpUpdate)
	return &MemberProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MemberProfileClient) UpdateOne(_m *MemberProfile) *MemberProfileUpdateOne {
	mutation := newMemberProfileMutation(c.config, OpUpdateOne, withMemberProfile(_m))
	return &MemberProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MemberProfileClient) UpdateOneID(id int64) *MemberProfileUpdateOne {
	mutation := newMemberProfileMutation(c.config, OpUpdateOne, withMemberProfileID(id))
	return &MemberProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MemberProfile.
func (c *MemberProfileClient) Delete() *MemberProfileDelete {
	mutation := newMemberProfileMutation(c.config, OpDelete)
	return &MemberProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MemberProfileClient) DeleteOne(_m *MemberProfile) *MemberProfileDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MemberProfileClient) DeleteOneID(id int64) *MemberProfileDeleteOne {
	builder := c.Delete().Where(memberprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MemberProfileDeleteOne{builder}
}

// Query returns a query builder for MemberProfile.
func (c *MemberProfileClient) Query() *MemberProfileQuery {
	return &MemberProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMemberProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a MemberProfile entity by its id.
func (c *MemberProfileClient) Get(ctx context.Context, id int64) (*MemberProfile, error) {
	return c.Query().Where(memberprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MemberProfileClient) GetX(ctx context.Context, id int64) *MemberProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMember queries the member edge of a MemberProfile.
func (c *MemberProfileClient) QueryMember(_m *MemberProfile) *MemberQuery {
	query := (&MemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(memberprofile.Table, memberprofile.FieldID, id),
			sqlgraph.To(member.Table, member.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, memberprofile.MemberTable, memberprofile.MemberColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MemberProfileClient) Hooks() []Hook {
	return c.hooks.MemberProfile
}

// Interceptors returns the client interceptors.
func (c *MemberProfileClient) Interceptors() []Interceptor {
	return c.inters.MemberProfile
}

func (c *MemberProfileClient) mutate(ctx context.Context, m *MemberProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MemberProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MemberProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MemberProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MemberProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MemberProfile mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Member, MemberContract, MemberContractContent, MemberNote, MemberProduct,
		MemberProductProperty, MemberProfile []ent.Hook
	}
	inters struct {
		Member, MemberContract, MemberContractContent, MemberNote, MemberProduct,
		MemberProductProperty, MemberProfile []ent.Interceptor
	}
)
