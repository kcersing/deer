// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"member/biz/dal/db/ent/memberproduct"
	"member/biz/dal/db/ent/memberproductproperty"
	"member/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberProductPropertyUpdate is the builder for updating MemberProductProperty entities.
type MemberProductPropertyUpdate struct {
	config
	hooks    []Hook
	mutation *MemberProductPropertyMutation
}

// Where appends a list predicates to the MemberProductPropertyUpdate builder.
func (_u *MemberProductPropertyUpdate) Where(ps ...predicate.MemberProductProperty) *MemberProductPropertyUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MemberProductPropertyUpdate) SetUpdatedAt(v time.Time) *MemberProductPropertyUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MemberProductPropertyUpdate) ClearUpdatedAt() *MemberProductPropertyUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *MemberProductPropertyUpdate) SetDelete(v int64) *MemberProductPropertyUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *MemberProductPropertyUpdate) SetNillableDelete(v *int64) *MemberProductPropertyUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *MemberProductPropertyUpdate) AddDelete(v int64) *MemberProductPropertyUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *MemberProductPropertyUpdate) ClearDelete() *MemberProductPropertyUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *MemberProductPropertyUpdate) SetCreatedID(v int64) *MemberProductPropertyUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *MemberProductPropertyUpdate) SetNillableCreatedID(v *int64) *MemberProductPropertyUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *MemberProductPropertyUpdate) AddCreatedID(v int64) *MemberProductPropertyUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *MemberProductPropertyUpdate) ClearCreatedID() *MemberProductPropertyUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *MemberProductPropertyUpdate) SetStatus(v int64) *MemberProductPropertyUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MemberProductPropertyUpdate) SetNillableStatus(v *int64) *MemberProductPropertyUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *MemberProductPropertyUpdate) AddStatus(v int64) *MemberProductPropertyUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *MemberProductPropertyUpdate) ClearStatus() *MemberProductPropertyUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetMemberID sets the "member_id" field.
func (_u *MemberProductPropertyUpdate) SetMemberID(v int64) *MemberProductPropertyUpdate {
	_u.mutation.ResetMemberID()
	_u.mutation.SetMemberID(v)
	return _u
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (_u *MemberProductPropertyUpdate) SetNillableMemberID(v *int64) *MemberProductPropertyUpdate {
	if v != nil {
		_u.SetMemberID(*v)
	}
	return _u
}

// AddMemberID adds value to the "member_id" field.
func (_u *MemberProductPropertyUpdate) AddMemberID(v int64) *MemberProductPropertyUpdate {
	_u.mutation.AddMemberID(v)
	return _u
}

// ClearMemberID clears the value of the "member_id" field.
func (_u *MemberProductPropertyUpdate) ClearMemberID() *MemberProductPropertyUpdate {
	_u.mutation.ClearMemberID()
	return _u
}

// SetMemberProductID sets the "member_product_id" field.
func (_u *MemberProductPropertyUpdate) SetMemberProductID(v int64) *MemberProductPropertyUpdate {
	_u.mutation.SetMemberProductID(v)
	return _u
}

// SetNillableMemberProductID sets the "member_product_id" field if the given value is not nil.
func (_u *MemberProductPropertyUpdate) SetNillableMemberProductID(v *int64) *MemberProductPropertyUpdate {
	if v != nil {
		_u.SetMemberProductID(*v)
	}
	return _u
}

// ClearMemberProductID clears the value of the "member_product_id" field.
func (_u *MemberProductPropertyUpdate) ClearMemberProductID() *MemberProductPropertyUpdate {
	_u.mutation.ClearMemberProductID()
	return _u
}

// SetSn sets the "sn" field.
func (_u *MemberProductPropertyUpdate) SetSn(v string) *MemberProductPropertyUpdate {
	_u.mutation.SetSn(v)
	return _u
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (_u *MemberProductPropertyUpdate) SetNillableSn(v *string) *MemberProductPropertyUpdate {
	if v != nil {
		_u.SetSn(*v)
	}
	return _u
}

// ClearSn clears the value of the "sn" field.
func (_u *MemberProductPropertyUpdate) ClearSn() *MemberProductPropertyUpdate {
	_u.mutation.ClearSn()
	return _u
}

// SetPropertyID sets the "property_id" field.
func (_u *MemberProductPropertyUpdate) SetPropertyID(v int64) *MemberProductPropertyUpdate {
	_u.mutation.ResetPropertyID()
	_u.mutation.SetPropertyID(v)
	return _u
}

// SetNillablePropertyID sets the "property_id" field if the given value is not nil.
func (_u *MemberProductPropertyUpdate) SetNillablePropertyID(v *int64) *MemberProductPropertyUpdate {
	if v != nil {
		_u.SetPropertyID(*v)
	}
	return _u
}

// AddPropertyID adds value to the "property_id" field.
func (_u *MemberProductPropertyUpdate) AddPropertyID(v int64) *MemberProductPropertyUpdate {
	_u.mutation.AddPropertyID(v)
	return _u
}

// ClearPropertyID clears the value of the "property_id" field.
func (_u *MemberProductPropertyUpdate) ClearPropertyID() *MemberProductPropertyUpdate {
	_u.mutation.ClearPropertyID()
	return _u
}

// SetType sets the "type" field.
func (_u *MemberProductPropertyUpdate) SetType(v string) *MemberProductPropertyUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *MemberProductPropertyUpdate) SetNillableType(v *string) *MemberProductPropertyUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *MemberProductPropertyUpdate) ClearType() *MemberProductPropertyUpdate {
	_u.mutation.ClearType()
	return _u
}

// SetName sets the "name" field.
func (_u *MemberProductPropertyUpdate) SetName(v string) *MemberProductPropertyUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MemberProductPropertyUpdate) SetNillableName(v *string) *MemberProductPropertyUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *MemberProductPropertyUpdate) ClearName() *MemberProductPropertyUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetDuration sets the "duration" field.
func (_u *MemberProductPropertyUpdate) SetDuration(v int64) *MemberProductPropertyUpdate {
	_u.mutation.ResetDuration()
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *MemberProductPropertyUpdate) SetNillableDuration(v *int64) *MemberProductPropertyUpdate {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// AddDuration adds value to the "duration" field.
func (_u *MemberProductPropertyUpdate) AddDuration(v int64) *MemberProductPropertyUpdate {
	_u.mutation.AddDuration(v)
	return _u
}

// ClearDuration clears the value of the "duration" field.
func (_u *MemberProductPropertyUpdate) ClearDuration() *MemberProductPropertyUpdate {
	_u.mutation.ClearDuration()
	return _u
}

// SetLength sets the "length" field.
func (_u *MemberProductPropertyUpdate) SetLength(v int64) *MemberProductPropertyUpdate {
	_u.mutation.ResetLength()
	_u.mutation.SetLength(v)
	return _u
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (_u *MemberProductPropertyUpdate) SetNillableLength(v *int64) *MemberProductPropertyUpdate {
	if v != nil {
		_u.SetLength(*v)
	}
	return _u
}

// AddLength adds value to the "length" field.
func (_u *MemberProductPropertyUpdate) AddLength(v int64) *MemberProductPropertyUpdate {
	_u.mutation.AddLength(v)
	return _u
}

// ClearLength clears the value of the "length" field.
func (_u *MemberProductPropertyUpdate) ClearLength() *MemberProductPropertyUpdate {
	_u.mutation.ClearLength()
	return _u
}

// SetCount sets the "count" field.
func (_u *MemberProductPropertyUpdate) SetCount(v int64) *MemberProductPropertyUpdate {
	_u.mutation.ResetCount()
	_u.mutation.SetCount(v)
	return _u
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (_u *MemberProductPropertyUpdate) SetNillableCount(v *int64) *MemberProductPropertyUpdate {
	if v != nil {
		_u.SetCount(*v)
	}
	return _u
}

// AddCount adds value to the "count" field.
func (_u *MemberProductPropertyUpdate) AddCount(v int64) *MemberProductPropertyUpdate {
	_u.mutation.AddCount(v)
	return _u
}

// ClearCount clears the value of the "count" field.
func (_u *MemberProductPropertyUpdate) ClearCount() *MemberProductPropertyUpdate {
	_u.mutation.ClearCount()
	return _u
}

// SetCountSurplus sets the "count_surplus" field.
func (_u *MemberProductPropertyUpdate) SetCountSurplus(v int64) *MemberProductPropertyUpdate {
	_u.mutation.ResetCountSurplus()
	_u.mutation.SetCountSurplus(v)
	return _u
}

// SetNillableCountSurplus sets the "count_surplus" field if the given value is not nil.
func (_u *MemberProductPropertyUpdate) SetNillableCountSurplus(v *int64) *MemberProductPropertyUpdate {
	if v != nil {
		_u.SetCountSurplus(*v)
	}
	return _u
}

// AddCountSurplus adds value to the "count_surplus" field.
func (_u *MemberProductPropertyUpdate) AddCountSurplus(v int64) *MemberProductPropertyUpdate {
	_u.mutation.AddCountSurplus(v)
	return _u
}

// ClearCountSurplus clears the value of the "count_surplus" field.
func (_u *MemberProductPropertyUpdate) ClearCountSurplus() *MemberProductPropertyUpdate {
	_u.mutation.ClearCountSurplus()
	return _u
}

// SetPrice sets the "price" field.
func (_u *MemberProductPropertyUpdate) SetPrice(v float64) *MemberProductPropertyUpdate {
	_u.mutation.ResetPrice()
	_u.mutation.SetPrice(v)
	return _u
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (_u *MemberProductPropertyUpdate) SetNillablePrice(v *float64) *MemberProductPropertyUpdate {
	if v != nil {
		_u.SetPrice(*v)
	}
	return _u
}

// AddPrice adds value to the "price" field.
func (_u *MemberProductPropertyUpdate) AddPrice(v float64) *MemberProductPropertyUpdate {
	_u.mutation.AddPrice(v)
	return _u
}

// ClearPrice clears the value of the "price" field.
func (_u *MemberProductPropertyUpdate) ClearPrice() *MemberProductPropertyUpdate {
	_u.mutation.ClearPrice()
	return _u
}

// SetValidityAt sets the "validity_at" field.
func (_u *MemberProductPropertyUpdate) SetValidityAt(v time.Time) *MemberProductPropertyUpdate {
	_u.mutation.SetValidityAt(v)
	return _u
}

// SetNillableValidityAt sets the "validity_at" field if the given value is not nil.
func (_u *MemberProductPropertyUpdate) SetNillableValidityAt(v *time.Time) *MemberProductPropertyUpdate {
	if v != nil {
		_u.SetValidityAt(*v)
	}
	return _u
}

// ClearValidityAt clears the value of the "validity_at" field.
func (_u *MemberProductPropertyUpdate) ClearValidityAt() *MemberProductPropertyUpdate {
	_u.mutation.ClearValidityAt()
	return _u
}

// SetCancelAt sets the "cancel_at" field.
func (_u *MemberProductPropertyUpdate) SetCancelAt(v time.Time) *MemberProductPropertyUpdate {
	_u.mutation.SetCancelAt(v)
	return _u
}

// SetNillableCancelAt sets the "cancel_at" field if the given value is not nil.
func (_u *MemberProductPropertyUpdate) SetNillableCancelAt(v *time.Time) *MemberProductPropertyUpdate {
	if v != nil {
		_u.SetCancelAt(*v)
	}
	return _u
}

// ClearCancelAt clears the value of the "cancel_at" field.
func (_u *MemberProductPropertyUpdate) ClearCancelAt() *MemberProductPropertyUpdate {
	_u.mutation.ClearCancelAt()
	return _u
}

// SetOwnerID sets the "owner" edge to the MemberProduct entity by ID.
func (_u *MemberProductPropertyUpdate) SetOwnerID(id int64) *MemberProductPropertyUpdate {
	_u.mutation.SetOwnerID(id)
	return _u
}

// SetNillableOwnerID sets the "owner" edge to the MemberProduct entity by ID if the given value is not nil.
func (_u *MemberProductPropertyUpdate) SetNillableOwnerID(id *int64) *MemberProductPropertyUpdate {
	if id != nil {
		_u = _u.SetOwnerID(*id)
	}
	return _u
}

// SetOwner sets the "owner" edge to the MemberProduct entity.
func (_u *MemberProductPropertyUpdate) SetOwner(v *MemberProduct) *MemberProductPropertyUpdate {
	return _u.SetOwnerID(v.ID)
}

// Mutation returns the MemberProductPropertyMutation object of the builder.
func (_u *MemberProductPropertyUpdate) Mutation() *MemberProductPropertyMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the MemberProduct entity.
func (_u *MemberProductPropertyUpdate) ClearOwner() *MemberProductPropertyUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MemberProductPropertyUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MemberProductPropertyUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MemberProductPropertyUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MemberProductPropertyUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MemberProductPropertyUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := memberproductproperty.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MemberProductPropertyUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberproductproperty.Table, memberproductproperty.Columns, sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(memberproductproperty.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(memberproductproperty.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(memberproductproperty.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(memberproductproperty.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(memberproductproperty.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(memberproductproperty.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(memberproductproperty.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(memberproductproperty.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(memberproductproperty.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(memberproductproperty.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(memberproductproperty.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(memberproductproperty.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.MemberID(); ok {
		_spec.SetField(memberproductproperty.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedMemberID(); ok {
		_spec.AddField(memberproductproperty.FieldMemberID, field.TypeInt64, value)
	}
	if _u.mutation.MemberIDCleared() {
		_spec.ClearField(memberproductproperty.FieldMemberID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Sn(); ok {
		_spec.SetField(memberproductproperty.FieldSn, field.TypeString, value)
	}
	if _u.mutation.SnCleared() {
		_spec.ClearField(memberproductproperty.FieldSn, field.TypeString)
	}
	if value, ok := _u.mutation.PropertyID(); ok {
		_spec.SetField(memberproductproperty.FieldPropertyID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedPropertyID(); ok {
		_spec.AddField(memberproductproperty.FieldPropertyID, field.TypeInt64, value)
	}
	if _u.mutation.PropertyIDCleared() {
		_spec.ClearField(memberproductproperty.FieldPropertyID, field.TypeInt64)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(memberproductproperty.FieldType, field.TypeString, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(memberproductproperty.FieldType, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(memberproductproperty.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(memberproductproperty.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(memberproductproperty.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDuration(); ok {
		_spec.AddField(memberproductproperty.FieldDuration, field.TypeInt64, value)
	}
	if _u.mutation.DurationCleared() {
		_spec.ClearField(memberproductproperty.FieldDuration, field.TypeInt64)
	}
	if value, ok := _u.mutation.Length(); ok {
		_spec.SetField(memberproductproperty.FieldLength, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedLength(); ok {
		_spec.AddField(memberproductproperty.FieldLength, field.TypeInt64, value)
	}
	if _u.mutation.LengthCleared() {
		_spec.ClearField(memberproductproperty.FieldLength, field.TypeInt64)
	}
	if value, ok := _u.mutation.Count(); ok {
		_spec.SetField(memberproductproperty.FieldCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCount(); ok {
		_spec.AddField(memberproductproperty.FieldCount, field.TypeInt64, value)
	}
	if _u.mutation.CountCleared() {
		_spec.ClearField(memberproductproperty.FieldCount, field.TypeInt64)
	}
	if value, ok := _u.mutation.CountSurplus(); ok {
		_spec.SetField(memberproductproperty.FieldCountSurplus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCountSurplus(); ok {
		_spec.AddField(memberproductproperty.FieldCountSurplus, field.TypeInt64, value)
	}
	if _u.mutation.CountSurplusCleared() {
		_spec.ClearField(memberproductproperty.FieldCountSurplus, field.TypeInt64)
	}
	if value, ok := _u.mutation.Price(); ok {
		_spec.SetField(memberproductproperty.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedPrice(); ok {
		_spec.AddField(memberproductproperty.FieldPrice, field.TypeFloat64, value)
	}
	if _u.mutation.PriceCleared() {
		_spec.ClearField(memberproductproperty.FieldPrice, field.TypeFloat64)
	}
	if value, ok := _u.mutation.ValidityAt(); ok {
		_spec.SetField(memberproductproperty.FieldValidityAt, field.TypeTime, value)
	}
	if _u.mutation.ValidityAtCleared() {
		_spec.ClearField(memberproductproperty.FieldValidityAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CancelAt(); ok {
		_spec.SetField(memberproductproperty.FieldCancelAt, field.TypeTime, value)
	}
	if _u.mutation.CancelAtCleared() {
		_spec.ClearField(memberproductproperty.FieldCancelAt, field.TypeTime)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproductproperty.OwnerTable,
			Columns: []string{memberproductproperty.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproductproperty.OwnerTable,
			Columns: []string{memberproductproperty.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberproductproperty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MemberProductPropertyUpdateOne is the builder for updating a single MemberProductProperty entity.
type MemberProductPropertyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberProductPropertyMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MemberProductPropertyUpdateOne) SetUpdatedAt(v time.Time) *MemberProductPropertyUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MemberProductPropertyUpdateOne) ClearUpdatedAt() *MemberProductPropertyUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *MemberProductPropertyUpdateOne) SetDelete(v int64) *MemberProductPropertyUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *MemberProductPropertyUpdateOne) SetNillableDelete(v *int64) *MemberProductPropertyUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *MemberProductPropertyUpdateOne) AddDelete(v int64) *MemberProductPropertyUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *MemberProductPropertyUpdateOne) ClearDelete() *MemberProductPropertyUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *MemberProductPropertyUpdateOne) SetCreatedID(v int64) *MemberProductPropertyUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *MemberProductPropertyUpdateOne) SetNillableCreatedID(v *int64) *MemberProductPropertyUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *MemberProductPropertyUpdateOne) AddCreatedID(v int64) *MemberProductPropertyUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *MemberProductPropertyUpdateOne) ClearCreatedID() *MemberProductPropertyUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *MemberProductPropertyUpdateOne) SetStatus(v int64) *MemberProductPropertyUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MemberProductPropertyUpdateOne) SetNillableStatus(v *int64) *MemberProductPropertyUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *MemberProductPropertyUpdateOne) AddStatus(v int64) *MemberProductPropertyUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *MemberProductPropertyUpdateOne) ClearStatus() *MemberProductPropertyUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetMemberID sets the "member_id" field.
func (_u *MemberProductPropertyUpdateOne) SetMemberID(v int64) *MemberProductPropertyUpdateOne {
	_u.mutation.ResetMemberID()
	_u.mutation.SetMemberID(v)
	return _u
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (_u *MemberProductPropertyUpdateOne) SetNillableMemberID(v *int64) *MemberProductPropertyUpdateOne {
	if v != nil {
		_u.SetMemberID(*v)
	}
	return _u
}

// AddMemberID adds value to the "member_id" field.
func (_u *MemberProductPropertyUpdateOne) AddMemberID(v int64) *MemberProductPropertyUpdateOne {
	_u.mutation.AddMemberID(v)
	return _u
}

// ClearMemberID clears the value of the "member_id" field.
func (_u *MemberProductPropertyUpdateOne) ClearMemberID() *MemberProductPropertyUpdateOne {
	_u.mutation.ClearMemberID()
	return _u
}

// SetMemberProductID sets the "member_product_id" field.
func (_u *MemberProductPropertyUpdateOne) SetMemberProductID(v int64) *MemberProductPropertyUpdateOne {
	_u.mutation.SetMemberProductID(v)
	return _u
}

// SetNillableMemberProductID sets the "member_product_id" field if the given value is not nil.
func (_u *MemberProductPropertyUpdateOne) SetNillableMemberProductID(v *int64) *MemberProductPropertyUpdateOne {
	if v != nil {
		_u.SetMemberProductID(*v)
	}
	return _u
}

// ClearMemberProductID clears the value of the "member_product_id" field.
func (_u *MemberProductPropertyUpdateOne) ClearMemberProductID() *MemberProductPropertyUpdateOne {
	_u.mutation.ClearMemberProductID()
	return _u
}

// SetSn sets the "sn" field.
func (_u *MemberProductPropertyUpdateOne) SetSn(v string) *MemberProductPropertyUpdateOne {
	_u.mutation.SetSn(v)
	return _u
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (_u *MemberProductPropertyUpdateOne) SetNillableSn(v *string) *MemberProductPropertyUpdateOne {
	if v != nil {
		_u.SetSn(*v)
	}
	return _u
}

// ClearSn clears the value of the "sn" field.
func (_u *MemberProductPropertyUpdateOne) ClearSn() *MemberProductPropertyUpdateOne {
	_u.mutation.ClearSn()
	return _u
}

// SetPropertyID sets the "property_id" field.
func (_u *MemberProductPropertyUpdateOne) SetPropertyID(v int64) *MemberProductPropertyUpdateOne {
	_u.mutation.ResetPropertyID()
	_u.mutation.SetPropertyID(v)
	return _u
}

// SetNillablePropertyID sets the "property_id" field if the given value is not nil.
func (_u *MemberProductPropertyUpdateOne) SetNillablePropertyID(v *int64) *MemberProductPropertyUpdateOne {
	if v != nil {
		_u.SetPropertyID(*v)
	}
	return _u
}

// AddPropertyID adds value to the "property_id" field.
func (_u *MemberProductPropertyUpdateOne) AddPropertyID(v int64) *MemberProductPropertyUpdateOne {
	_u.mutation.AddPropertyID(v)
	return _u
}

// ClearPropertyID clears the value of the "property_id" field.
func (_u *MemberProductPropertyUpdateOne) ClearPropertyID() *MemberProductPropertyUpdateOne {
	_u.mutation.ClearPropertyID()
	return _u
}

// SetType sets the "type" field.
func (_u *MemberProductPropertyUpdateOne) SetType(v string) *MemberProductPropertyUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *MemberProductPropertyUpdateOne) SetNillableType(v *string) *MemberProductPropertyUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *MemberProductPropertyUpdateOne) ClearType() *MemberProductPropertyUpdateOne {
	_u.mutation.ClearType()
	return _u
}

// SetName sets the "name" field.
func (_u *MemberProductPropertyUpdateOne) SetName(v string) *MemberProductPropertyUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MemberProductPropertyUpdateOne) SetNillableName(v *string) *MemberProductPropertyUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *MemberProductPropertyUpdateOne) ClearName() *MemberProductPropertyUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetDuration sets the "duration" field.
func (_u *MemberProductPropertyUpdateOne) SetDuration(v int64) *MemberProductPropertyUpdateOne {
	_u.mutation.ResetDuration()
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *MemberProductPropertyUpdateOne) SetNillableDuration(v *int64) *MemberProductPropertyUpdateOne {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// AddDuration adds value to the "duration" field.
func (_u *MemberProductPropertyUpdateOne) AddDuration(v int64) *MemberProductPropertyUpdateOne {
	_u.mutation.AddDuration(v)
	return _u
}

// ClearDuration clears the value of the "duration" field.
func (_u *MemberProductPropertyUpdateOne) ClearDuration() *MemberProductPropertyUpdateOne {
	_u.mutation.ClearDuration()
	return _u
}

// SetLength sets the "length" field.
func (_u *MemberProductPropertyUpdateOne) SetLength(v int64) *MemberProductPropertyUpdateOne {
	_u.mutation.ResetLength()
	_u.mutation.SetLength(v)
	return _u
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (_u *MemberProductPropertyUpdateOne) SetNillableLength(v *int64) *MemberProductPropertyUpdateOne {
	if v != nil {
		_u.SetLength(*v)
	}
	return _u
}

// AddLength adds value to the "length" field.
func (_u *MemberProductPropertyUpdateOne) AddLength(v int64) *MemberProductPropertyUpdateOne {
	_u.mutation.AddLength(v)
	return _u
}

// ClearLength clears the value of the "length" field.
func (_u *MemberProductPropertyUpdateOne) ClearLength() *MemberProductPropertyUpdateOne {
	_u.mutation.ClearLength()
	return _u
}

// SetCount sets the "count" field.
func (_u *MemberProductPropertyUpdateOne) SetCount(v int64) *MemberProductPropertyUpdateOne {
	_u.mutation.ResetCount()
	_u.mutation.SetCount(v)
	return _u
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (_u *MemberProductPropertyUpdateOne) SetNillableCount(v *int64) *MemberProductPropertyUpdateOne {
	if v != nil {
		_u.SetCount(*v)
	}
	return _u
}

// AddCount adds value to the "count" field.
func (_u *MemberProductPropertyUpdateOne) AddCount(v int64) *MemberProductPropertyUpdateOne {
	_u.mutation.AddCount(v)
	return _u
}

// ClearCount clears the value of the "count" field.
func (_u *MemberProductPropertyUpdateOne) ClearCount() *MemberProductPropertyUpdateOne {
	_u.mutation.ClearCount()
	return _u
}

// SetCountSurplus sets the "count_surplus" field.
func (_u *MemberProductPropertyUpdateOne) SetCountSurplus(v int64) *MemberProductPropertyUpdateOne {
	_u.mutation.ResetCountSurplus()
	_u.mutation.SetCountSurplus(v)
	return _u
}

// SetNillableCountSurplus sets the "count_surplus" field if the given value is not nil.
func (_u *MemberProductPropertyUpdateOne) SetNillableCountSurplus(v *int64) *MemberProductPropertyUpdateOne {
	if v != nil {
		_u.SetCountSurplus(*v)
	}
	return _u
}

// AddCountSurplus adds value to the "count_surplus" field.
func (_u *MemberProductPropertyUpdateOne) AddCountSurplus(v int64) *MemberProductPropertyUpdateOne {
	_u.mutation.AddCountSurplus(v)
	return _u
}

// ClearCountSurplus clears the value of the "count_surplus" field.
func (_u *MemberProductPropertyUpdateOne) ClearCountSurplus() *MemberProductPropertyUpdateOne {
	_u.mutation.ClearCountSurplus()
	return _u
}

// SetPrice sets the "price" field.
func (_u *MemberProductPropertyUpdateOne) SetPrice(v float64) *MemberProductPropertyUpdateOne {
	_u.mutation.ResetPrice()
	_u.mutation.SetPrice(v)
	return _u
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (_u *MemberProductPropertyUpdateOne) SetNillablePrice(v *float64) *MemberProductPropertyUpdateOne {
	if v != nil {
		_u.SetPrice(*v)
	}
	return _u
}

// AddPrice adds value to the "price" field.
func (_u *MemberProductPropertyUpdateOne) AddPrice(v float64) *MemberProductPropertyUpdateOne {
	_u.mutation.AddPrice(v)
	return _u
}

// ClearPrice clears the value of the "price" field.
func (_u *MemberProductPropertyUpdateOne) ClearPrice() *MemberProductPropertyUpdateOne {
	_u.mutation.ClearPrice()
	return _u
}

// SetValidityAt sets the "validity_at" field.
func (_u *MemberProductPropertyUpdateOne) SetValidityAt(v time.Time) *MemberProductPropertyUpdateOne {
	_u.mutation.SetValidityAt(v)
	return _u
}

// SetNillableValidityAt sets the "validity_at" field if the given value is not nil.
func (_u *MemberProductPropertyUpdateOne) SetNillableValidityAt(v *time.Time) *MemberProductPropertyUpdateOne {
	if v != nil {
		_u.SetValidityAt(*v)
	}
	return _u
}

// ClearValidityAt clears the value of the "validity_at" field.
func (_u *MemberProductPropertyUpdateOne) ClearValidityAt() *MemberProductPropertyUpdateOne {
	_u.mutation.ClearValidityAt()
	return _u
}

// SetCancelAt sets the "cancel_at" field.
func (_u *MemberProductPropertyUpdateOne) SetCancelAt(v time.Time) *MemberProductPropertyUpdateOne {
	_u.mutation.SetCancelAt(v)
	return _u
}

// SetNillableCancelAt sets the "cancel_at" field if the given value is not nil.
func (_u *MemberProductPropertyUpdateOne) SetNillableCancelAt(v *time.Time) *MemberProductPropertyUpdateOne {
	if v != nil {
		_u.SetCancelAt(*v)
	}
	return _u
}

// ClearCancelAt clears the value of the "cancel_at" field.
func (_u *MemberProductPropertyUpdateOne) ClearCancelAt() *MemberProductPropertyUpdateOne {
	_u.mutation.ClearCancelAt()
	return _u
}

// SetOwnerID sets the "owner" edge to the MemberProduct entity by ID.
func (_u *MemberProductPropertyUpdateOne) SetOwnerID(id int64) *MemberProductPropertyUpdateOne {
	_u.mutation.SetOwnerID(id)
	return _u
}

// SetNillableOwnerID sets the "owner" edge to the MemberProduct entity by ID if the given value is not nil.
func (_u *MemberProductPropertyUpdateOne) SetNillableOwnerID(id *int64) *MemberProductPropertyUpdateOne {
	if id != nil {
		_u = _u.SetOwnerID(*id)
	}
	return _u
}

// SetOwner sets the "owner" edge to the MemberProduct entity.
func (_u *MemberProductPropertyUpdateOne) SetOwner(v *MemberProduct) *MemberProductPropertyUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// Mutation returns the MemberProductPropertyMutation object of the builder.
func (_u *MemberProductPropertyUpdateOne) Mutation() *MemberProductPropertyMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the MemberProduct entity.
func (_u *MemberProductPropertyUpdateOne) ClearOwner() *MemberProductPropertyUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// Where appends a list predicates to the MemberProductPropertyUpdate builder.
func (_u *MemberProductPropertyUpdateOne) Where(ps ...predicate.MemberProductProperty) *MemberProductPropertyUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MemberProductPropertyUpdateOne) Select(field string, fields ...string) *MemberProductPropertyUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated MemberProductProperty entity.
func (_u *MemberProductPropertyUpdateOne) Save(ctx context.Context) (*MemberProductProperty, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MemberProductPropertyUpdateOne) SaveX(ctx context.Context) *MemberProductProperty {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MemberProductPropertyUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MemberProductPropertyUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MemberProductPropertyUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := memberproductproperty.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MemberProductPropertyUpdateOne) sqlSave(ctx context.Context) (_node *MemberProductProperty, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberproductproperty.Table, memberproductproperty.Columns, sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MemberProductProperty.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memberproductproperty.FieldID)
		for _, f := range fields {
			if !memberproductproperty.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != memberproductproperty.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(memberproductproperty.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(memberproductproperty.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(memberproductproperty.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(memberproductproperty.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(memberproductproperty.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(memberproductproperty.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(memberproductproperty.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(memberproductproperty.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(memberproductproperty.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(memberproductproperty.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(memberproductproperty.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(memberproductproperty.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.MemberID(); ok {
		_spec.SetField(memberproductproperty.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedMemberID(); ok {
		_spec.AddField(memberproductproperty.FieldMemberID, field.TypeInt64, value)
	}
	if _u.mutation.MemberIDCleared() {
		_spec.ClearField(memberproductproperty.FieldMemberID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Sn(); ok {
		_spec.SetField(memberproductproperty.FieldSn, field.TypeString, value)
	}
	if _u.mutation.SnCleared() {
		_spec.ClearField(memberproductproperty.FieldSn, field.TypeString)
	}
	if value, ok := _u.mutation.PropertyID(); ok {
		_spec.SetField(memberproductproperty.FieldPropertyID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedPropertyID(); ok {
		_spec.AddField(memberproductproperty.FieldPropertyID, field.TypeInt64, value)
	}
	if _u.mutation.PropertyIDCleared() {
		_spec.ClearField(memberproductproperty.FieldPropertyID, field.TypeInt64)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(memberproductproperty.FieldType, field.TypeString, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(memberproductproperty.FieldType, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(memberproductproperty.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(memberproductproperty.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(memberproductproperty.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDuration(); ok {
		_spec.AddField(memberproductproperty.FieldDuration, field.TypeInt64, value)
	}
	if _u.mutation.DurationCleared() {
		_spec.ClearField(memberproductproperty.FieldDuration, field.TypeInt64)
	}
	if value, ok := _u.mutation.Length(); ok {
		_spec.SetField(memberproductproperty.FieldLength, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedLength(); ok {
		_spec.AddField(memberproductproperty.FieldLength, field.TypeInt64, value)
	}
	if _u.mutation.LengthCleared() {
		_spec.ClearField(memberproductproperty.FieldLength, field.TypeInt64)
	}
	if value, ok := _u.mutation.Count(); ok {
		_spec.SetField(memberproductproperty.FieldCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCount(); ok {
		_spec.AddField(memberproductproperty.FieldCount, field.TypeInt64, value)
	}
	if _u.mutation.CountCleared() {
		_spec.ClearField(memberproductproperty.FieldCount, field.TypeInt64)
	}
	if value, ok := _u.mutation.CountSurplus(); ok {
		_spec.SetField(memberproductproperty.FieldCountSurplus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCountSurplus(); ok {
		_spec.AddField(memberproductproperty.FieldCountSurplus, field.TypeInt64, value)
	}
	if _u.mutation.CountSurplusCleared() {
		_spec.ClearField(memberproductproperty.FieldCountSurplus, field.TypeInt64)
	}
	if value, ok := _u.mutation.Price(); ok {
		_spec.SetField(memberproductproperty.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedPrice(); ok {
		_spec.AddField(memberproductproperty.FieldPrice, field.TypeFloat64, value)
	}
	if _u.mutation.PriceCleared() {
		_spec.ClearField(memberproductproperty.FieldPrice, field.TypeFloat64)
	}
	if value, ok := _u.mutation.ValidityAt(); ok {
		_spec.SetField(memberproductproperty.FieldValidityAt, field.TypeTime, value)
	}
	if _u.mutation.ValidityAtCleared() {
		_spec.ClearField(memberproductproperty.FieldValidityAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CancelAt(); ok {
		_spec.SetField(memberproductproperty.FieldCancelAt, field.TypeTime, value)
	}
	if _u.mutation.CancelAtCleared() {
		_spec.ClearField(memberproductproperty.FieldCancelAt, field.TypeTime)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproductproperty.OwnerTable,
			Columns: []string{memberproductproperty.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproductproperty.OwnerTable,
			Columns: []string{memberproductproperty.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MemberProductProperty{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberproductproperty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
