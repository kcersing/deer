// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"member/biz/dal/db/ent/memberproduct"
	"member/biz/dal/db/ent/memberproductproperty"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberProductPropertyCreate is the builder for creating a MemberProductProperty entity.
type MemberProductPropertyCreate struct {
	config
	mutation *MemberProductPropertyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *MemberProductPropertyCreate) SetCreatedAt(v time.Time) *MemberProductPropertyCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *MemberProductPropertyCreate) SetNillableCreatedAt(v *time.Time) *MemberProductPropertyCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *MemberProductPropertyCreate) SetUpdatedAt(v time.Time) *MemberProductPropertyCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *MemberProductPropertyCreate) SetNillableUpdatedAt(v *time.Time) *MemberProductPropertyCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDelete sets the "delete" field.
func (_c *MemberProductPropertyCreate) SetDelete(v int64) *MemberProductPropertyCreate {
	_c.mutation.SetDelete(v)
	return _c
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_c *MemberProductPropertyCreate) SetNillableDelete(v *int64) *MemberProductPropertyCreate {
	if v != nil {
		_c.SetDelete(*v)
	}
	return _c
}

// SetCreatedID sets the "created_id" field.
func (_c *MemberProductPropertyCreate) SetCreatedID(v int64) *MemberProductPropertyCreate {
	_c.mutation.SetCreatedID(v)
	return _c
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_c *MemberProductPropertyCreate) SetNillableCreatedID(v *int64) *MemberProductPropertyCreate {
	if v != nil {
		_c.SetCreatedID(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *MemberProductPropertyCreate) SetStatus(v int64) *MemberProductPropertyCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *MemberProductPropertyCreate) SetNillableStatus(v *int64) *MemberProductPropertyCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetMemberID sets the "member_id" field.
func (_c *MemberProductPropertyCreate) SetMemberID(v int64) *MemberProductPropertyCreate {
	_c.mutation.SetMemberID(v)
	return _c
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (_c *MemberProductPropertyCreate) SetNillableMemberID(v *int64) *MemberProductPropertyCreate {
	if v != nil {
		_c.SetMemberID(*v)
	}
	return _c
}

// SetMemberProductID sets the "member_product_id" field.
func (_c *MemberProductPropertyCreate) SetMemberProductID(v int64) *MemberProductPropertyCreate {
	_c.mutation.SetMemberProductID(v)
	return _c
}

// SetNillableMemberProductID sets the "member_product_id" field if the given value is not nil.
func (_c *MemberProductPropertyCreate) SetNillableMemberProductID(v *int64) *MemberProductPropertyCreate {
	if v != nil {
		_c.SetMemberProductID(*v)
	}
	return _c
}

// SetSn sets the "sn" field.
func (_c *MemberProductPropertyCreate) SetSn(v string) *MemberProductPropertyCreate {
	_c.mutation.SetSn(v)
	return _c
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (_c *MemberProductPropertyCreate) SetNillableSn(v *string) *MemberProductPropertyCreate {
	if v != nil {
		_c.SetSn(*v)
	}
	return _c
}

// SetPropertyID sets the "property_id" field.
func (_c *MemberProductPropertyCreate) SetPropertyID(v int64) *MemberProductPropertyCreate {
	_c.mutation.SetPropertyID(v)
	return _c
}

// SetNillablePropertyID sets the "property_id" field if the given value is not nil.
func (_c *MemberProductPropertyCreate) SetNillablePropertyID(v *int64) *MemberProductPropertyCreate {
	if v != nil {
		_c.SetPropertyID(*v)
	}
	return _c
}

// SetType sets the "type" field.
func (_c *MemberProductPropertyCreate) SetType(v string) *MemberProductPropertyCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_c *MemberProductPropertyCreate) SetNillableType(v *string) *MemberProductPropertyCreate {
	if v != nil {
		_c.SetType(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *MemberProductPropertyCreate) SetName(v string) *MemberProductPropertyCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *MemberProductPropertyCreate) SetNillableName(v *string) *MemberProductPropertyCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetDuration sets the "duration" field.
func (_c *MemberProductPropertyCreate) SetDuration(v int64) *MemberProductPropertyCreate {
	_c.mutation.SetDuration(v)
	return _c
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_c *MemberProductPropertyCreate) SetNillableDuration(v *int64) *MemberProductPropertyCreate {
	if v != nil {
		_c.SetDuration(*v)
	}
	return _c
}

// SetLength sets the "length" field.
func (_c *MemberProductPropertyCreate) SetLength(v int64) *MemberProductPropertyCreate {
	_c.mutation.SetLength(v)
	return _c
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (_c *MemberProductPropertyCreate) SetNillableLength(v *int64) *MemberProductPropertyCreate {
	if v != nil {
		_c.SetLength(*v)
	}
	return _c
}

// SetCount sets the "count" field.
func (_c *MemberProductPropertyCreate) SetCount(v int64) *MemberProductPropertyCreate {
	_c.mutation.SetCount(v)
	return _c
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (_c *MemberProductPropertyCreate) SetNillableCount(v *int64) *MemberProductPropertyCreate {
	if v != nil {
		_c.SetCount(*v)
	}
	return _c
}

// SetCountSurplus sets the "count_surplus" field.
func (_c *MemberProductPropertyCreate) SetCountSurplus(v int64) *MemberProductPropertyCreate {
	_c.mutation.SetCountSurplus(v)
	return _c
}

// SetNillableCountSurplus sets the "count_surplus" field if the given value is not nil.
func (_c *MemberProductPropertyCreate) SetNillableCountSurplus(v *int64) *MemberProductPropertyCreate {
	if v != nil {
		_c.SetCountSurplus(*v)
	}
	return _c
}

// SetPrice sets the "price" field.
func (_c *MemberProductPropertyCreate) SetPrice(v float64) *MemberProductPropertyCreate {
	_c.mutation.SetPrice(v)
	return _c
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (_c *MemberProductPropertyCreate) SetNillablePrice(v *float64) *MemberProductPropertyCreate {
	if v != nil {
		_c.SetPrice(*v)
	}
	return _c
}

// SetValidityAt sets the "validity_at" field.
func (_c *MemberProductPropertyCreate) SetValidityAt(v time.Time) *MemberProductPropertyCreate {
	_c.mutation.SetValidityAt(v)
	return _c
}

// SetNillableValidityAt sets the "validity_at" field if the given value is not nil.
func (_c *MemberProductPropertyCreate) SetNillableValidityAt(v *time.Time) *MemberProductPropertyCreate {
	if v != nil {
		_c.SetValidityAt(*v)
	}
	return _c
}

// SetCancelAt sets the "cancel_at" field.
func (_c *MemberProductPropertyCreate) SetCancelAt(v time.Time) *MemberProductPropertyCreate {
	_c.mutation.SetCancelAt(v)
	return _c
}

// SetNillableCancelAt sets the "cancel_at" field if the given value is not nil.
func (_c *MemberProductPropertyCreate) SetNillableCancelAt(v *time.Time) *MemberProductPropertyCreate {
	if v != nil {
		_c.SetCancelAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *MemberProductPropertyCreate) SetID(v int64) *MemberProductPropertyCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetOwnerID sets the "owner" edge to the MemberProduct entity by ID.
func (_c *MemberProductPropertyCreate) SetOwnerID(id int64) *MemberProductPropertyCreate {
	_c.mutation.SetOwnerID(id)
	return _c
}

// SetNillableOwnerID sets the "owner" edge to the MemberProduct entity by ID if the given value is not nil.
func (_c *MemberProductPropertyCreate) SetNillableOwnerID(id *int64) *MemberProductPropertyCreate {
	if id != nil {
		_c = _c.SetOwnerID(*id)
	}
	return _c
}

// SetOwner sets the "owner" edge to the MemberProduct entity.
func (_c *MemberProductPropertyCreate) SetOwner(v *MemberProduct) *MemberProductPropertyCreate {
	return _c.SetOwnerID(v.ID)
}

// Mutation returns the MemberProductPropertyMutation object of the builder.
func (_c *MemberProductPropertyCreate) Mutation() *MemberProductPropertyMutation {
	return _c.mutation
}

// Save creates the MemberProductProperty in the database.
func (_c *MemberProductPropertyCreate) Save(ctx context.Context) (*MemberProductProperty, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *MemberProductPropertyCreate) SaveX(ctx context.Context) *MemberProductProperty {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MemberProductPropertyCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MemberProductPropertyCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *MemberProductPropertyCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := memberproductproperty.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := memberproductproperty.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Delete(); !ok {
		v := memberproductproperty.DefaultDelete
		_c.mutation.SetDelete(v)
	}
	if _, ok := _c.mutation.CreatedID(); !ok {
		v := memberproductproperty.DefaultCreatedID
		_c.mutation.SetCreatedID(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := memberproductproperty.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.Count(); !ok {
		v := memberproductproperty.DefaultCount
		_c.mutation.SetCount(v)
	}
	if _, ok := _c.mutation.CountSurplus(); !ok {
		v := memberproductproperty.DefaultCountSurplus
		_c.mutation.SetCountSurplus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *MemberProductPropertyCreate) check() error {
	return nil
}

func (_c *MemberProductPropertyCreate) sqlSave(ctx context.Context) (*MemberProductProperty, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *MemberProductPropertyCreate) createSpec() (*MemberProductProperty, *sqlgraph.CreateSpec) {
	var (
		_node = &MemberProductProperty{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(memberproductproperty.Table, sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(memberproductproperty.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(memberproductproperty.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Delete(); ok {
		_spec.SetField(memberproductproperty.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := _c.mutation.CreatedID(); ok {
		_spec.SetField(memberproductproperty.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(memberproductproperty.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.MemberID(); ok {
		_spec.SetField(memberproductproperty.FieldMemberID, field.TypeInt64, value)
		_node.MemberID = value
	}
	if value, ok := _c.mutation.Sn(); ok {
		_spec.SetField(memberproductproperty.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := _c.mutation.PropertyID(); ok {
		_spec.SetField(memberproductproperty.FieldPropertyID, field.TypeInt64, value)
		_node.PropertyID = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(memberproductproperty.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(memberproductproperty.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Duration(); ok {
		_spec.SetField(memberproductproperty.FieldDuration, field.TypeInt64, value)
		_node.Duration = value
	}
	if value, ok := _c.mutation.Length(); ok {
		_spec.SetField(memberproductproperty.FieldLength, field.TypeInt64, value)
		_node.Length = value
	}
	if value, ok := _c.mutation.Count(); ok {
		_spec.SetField(memberproductproperty.FieldCount, field.TypeInt64, value)
		_node.Count = value
	}
	if value, ok := _c.mutation.CountSurplus(); ok {
		_spec.SetField(memberproductproperty.FieldCountSurplus, field.TypeInt64, value)
		_node.CountSurplus = value
	}
	if value, ok := _c.mutation.Price(); ok {
		_spec.SetField(memberproductproperty.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := _c.mutation.ValidityAt(); ok {
		_spec.SetField(memberproductproperty.FieldValidityAt, field.TypeTime, value)
		_node.ValidityAt = value
	}
	if value, ok := _c.mutation.CancelAt(); ok {
		_spec.SetField(memberproductproperty.FieldCancelAt, field.TypeTime, value)
		_node.CancelAt = value
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproductproperty.OwnerTable,
			Columns: []string{memberproductproperty.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MemberProductPropertyCreateBulk is the builder for creating many MemberProductProperty entities in bulk.
type MemberProductPropertyCreateBulk struct {
	config
	err      error
	builders []*MemberProductPropertyCreate
}

// Save creates the MemberProductProperty entities in the database.
func (_c *MemberProductPropertyCreateBulk) Save(ctx context.Context) ([]*MemberProductProperty, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*MemberProductProperty, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MemberProductPropertyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *MemberProductPropertyCreateBulk) SaveX(ctx context.Context) []*MemberProductProperty {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MemberProductPropertyCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MemberProductPropertyCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
