// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"member/biz/dal/db/ent/member"
	"member/biz/dal/db/ent/membercontract"
	"member/biz/dal/db/ent/memberproduct"
	"member/biz/dal/db/ent/memberproductproperty"
	"member/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberProductUpdate is the builder for updating MemberProduct entities.
type MemberProductUpdate struct {
	config
	hooks    []Hook
	mutation *MemberProductMutation
}

// Where appends a list predicates to the MemberProductUpdate builder.
func (_u *MemberProductUpdate) Where(ps ...predicate.MemberProduct) *MemberProductUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MemberProductUpdate) SetUpdatedAt(v time.Time) *MemberProductUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MemberProductUpdate) ClearUpdatedAt() *MemberProductUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *MemberProductUpdate) SetDelete(v int64) *MemberProductUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *MemberProductUpdate) SetNillableDelete(v *int64) *MemberProductUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *MemberProductUpdate) AddDelete(v int64) *MemberProductUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *MemberProductUpdate) ClearDelete() *MemberProductUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *MemberProductUpdate) SetCreatedID(v int64) *MemberProductUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *MemberProductUpdate) SetNillableCreatedID(v *int64) *MemberProductUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *MemberProductUpdate) AddCreatedID(v int64) *MemberProductUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *MemberProductUpdate) ClearCreatedID() *MemberProductUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *MemberProductUpdate) SetStatus(v int64) *MemberProductUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MemberProductUpdate) SetNillableStatus(v *int64) *MemberProductUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *MemberProductUpdate) AddStatus(v int64) *MemberProductUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *MemberProductUpdate) ClearStatus() *MemberProductUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetSn sets the "sn" field.
func (_u *MemberProductUpdate) SetSn(v string) *MemberProductUpdate {
	_u.mutation.SetSn(v)
	return _u
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (_u *MemberProductUpdate) SetNillableSn(v *string) *MemberProductUpdate {
	if v != nil {
		_u.SetSn(*v)
	}
	return _u
}

// ClearSn clears the value of the "sn" field.
func (_u *MemberProductUpdate) ClearSn() *MemberProductUpdate {
	_u.mutation.ClearSn()
	return _u
}

// SetMemberID sets the "member_id" field.
func (_u *MemberProductUpdate) SetMemberID(v int64) *MemberProductUpdate {
	_u.mutation.SetMemberID(v)
	return _u
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (_u *MemberProductUpdate) SetNillableMemberID(v *int64) *MemberProductUpdate {
	if v != nil {
		_u.SetMemberID(*v)
	}
	return _u
}

// ClearMemberID clears the value of the "member_id" field.
func (_u *MemberProductUpdate) ClearMemberID() *MemberProductUpdate {
	_u.mutation.ClearMemberID()
	return _u
}

// SetProductID sets the "product_id" field.
func (_u *MemberProductUpdate) SetProductID(v int64) *MemberProductUpdate {
	_u.mutation.ResetProductID()
	_u.mutation.SetProductID(v)
	return _u
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (_u *MemberProductUpdate) SetNillableProductID(v *int64) *MemberProductUpdate {
	if v != nil {
		_u.SetProductID(*v)
	}
	return _u
}

// AddProductID adds value to the "product_id" field.
func (_u *MemberProductUpdate) AddProductID(v int64) *MemberProductUpdate {
	_u.mutation.AddProductID(v)
	return _u
}

// ClearProductID clears the value of the "product_id" field.
func (_u *MemberProductUpdate) ClearProductID() *MemberProductUpdate {
	_u.mutation.ClearProductID()
	return _u
}

// SetVenueID sets the "venue_id" field.
func (_u *MemberProductUpdate) SetVenueID(v int64) *MemberProductUpdate {
	_u.mutation.ResetVenueID()
	_u.mutation.SetVenueID(v)
	return _u
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (_u *MemberProductUpdate) SetNillableVenueID(v *int64) *MemberProductUpdate {
	if v != nil {
		_u.SetVenueID(*v)
	}
	return _u
}

// AddVenueID adds value to the "venue_id" field.
func (_u *MemberProductUpdate) AddVenueID(v int64) *MemberProductUpdate {
	_u.mutation.AddVenueID(v)
	return _u
}

// ClearVenueID clears the value of the "venue_id" field.
func (_u *MemberProductUpdate) ClearVenueID() *MemberProductUpdate {
	_u.mutation.ClearVenueID()
	return _u
}

// SetOrderID sets the "order_id" field.
func (_u *MemberProductUpdate) SetOrderID(v int64) *MemberProductUpdate {
	_u.mutation.ResetOrderID()
	_u.mutation.SetOrderID(v)
	return _u
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (_u *MemberProductUpdate) SetNillableOrderID(v *int64) *MemberProductUpdate {
	if v != nil {
		_u.SetOrderID(*v)
	}
	return _u
}

// AddOrderID adds value to the "order_id" field.
func (_u *MemberProductUpdate) AddOrderID(v int64) *MemberProductUpdate {
	_u.mutation.AddOrderID(v)
	return _u
}

// ClearOrderID clears the value of the "order_id" field.
func (_u *MemberProductUpdate) ClearOrderID() *MemberProductUpdate {
	_u.mutation.ClearOrderID()
	return _u
}

// SetName sets the "name" field.
func (_u *MemberProductUpdate) SetName(v string) *MemberProductUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MemberProductUpdate) SetNillableName(v *string) *MemberProductUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *MemberProductUpdate) ClearName() *MemberProductUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetPrice sets the "price" field.
func (_u *MemberProductUpdate) SetPrice(v float64) *MemberProductUpdate {
	_u.mutation.ResetPrice()
	_u.mutation.SetPrice(v)
	return _u
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (_u *MemberProductUpdate) SetNillablePrice(v *float64) *MemberProductUpdate {
	if v != nil {
		_u.SetPrice(*v)
	}
	return _u
}

// AddPrice adds value to the "price" field.
func (_u *MemberProductUpdate) AddPrice(v float64) *MemberProductUpdate {
	_u.mutation.AddPrice(v)
	return _u
}

// ClearPrice clears the value of the "price" field.
func (_u *MemberProductUpdate) ClearPrice() *MemberProductUpdate {
	_u.mutation.ClearPrice()
	return _u
}

// SetMembersID sets the "members" edge to the Member entity by ID.
func (_u *MemberProductUpdate) SetMembersID(id int64) *MemberProductUpdate {
	_u.mutation.SetMembersID(id)
	return _u
}

// SetNillableMembersID sets the "members" edge to the Member entity by ID if the given value is not nil.
func (_u *MemberProductUpdate) SetNillableMembersID(id *int64) *MemberProductUpdate {
	if id != nil {
		_u = _u.SetMembersID(*id)
	}
	return _u
}

// SetMembers sets the "members" edge to the Member entity.
func (_u *MemberProductUpdate) SetMembers(v *Member) *MemberProductUpdate {
	return _u.SetMembersID(v.ID)
}

// AddMemberProductPropertyIDs adds the "member_product_propertys" edge to the MemberProductProperty entity by IDs.
func (_u *MemberProductUpdate) AddMemberProductPropertyIDs(ids ...int64) *MemberProductUpdate {
	_u.mutation.AddMemberProductPropertyIDs(ids...)
	return _u
}

// AddMemberProductPropertys adds the "member_product_propertys" edges to the MemberProductProperty entity.
func (_u *MemberProductUpdate) AddMemberProductPropertys(v ...*MemberProductProperty) *MemberProductUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMemberProductPropertyIDs(ids...)
}

// AddMemberProductContentIDs adds the "member_product_contents" edge to the MemberContract entity by IDs.
func (_u *MemberProductUpdate) AddMemberProductContentIDs(ids ...int64) *MemberProductUpdate {
	_u.mutation.AddMemberProductContentIDs(ids...)
	return _u
}

// AddMemberProductContents adds the "member_product_contents" edges to the MemberContract entity.
func (_u *MemberProductUpdate) AddMemberProductContents(v ...*MemberContract) *MemberProductUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMemberProductContentIDs(ids...)
}

// Mutation returns the MemberProductMutation object of the builder.
func (_u *MemberProductUpdate) Mutation() *MemberProductMutation {
	return _u.mutation
}

// ClearMembers clears the "members" edge to the Member entity.
func (_u *MemberProductUpdate) ClearMembers() *MemberProductUpdate {
	_u.mutation.ClearMembers()
	return _u
}

// ClearMemberProductPropertys clears all "member_product_propertys" edges to the MemberProductProperty entity.
func (_u *MemberProductUpdate) ClearMemberProductPropertys() *MemberProductUpdate {
	_u.mutation.ClearMemberProductPropertys()
	return _u
}

// RemoveMemberProductPropertyIDs removes the "member_product_propertys" edge to MemberProductProperty entities by IDs.
func (_u *MemberProductUpdate) RemoveMemberProductPropertyIDs(ids ...int64) *MemberProductUpdate {
	_u.mutation.RemoveMemberProductPropertyIDs(ids...)
	return _u
}

// RemoveMemberProductPropertys removes "member_product_propertys" edges to MemberProductProperty entities.
func (_u *MemberProductUpdate) RemoveMemberProductPropertys(v ...*MemberProductProperty) *MemberProductUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMemberProductPropertyIDs(ids...)
}

// ClearMemberProductContents clears all "member_product_contents" edges to the MemberContract entity.
func (_u *MemberProductUpdate) ClearMemberProductContents() *MemberProductUpdate {
	_u.mutation.ClearMemberProductContents()
	return _u
}

// RemoveMemberProductContentIDs removes the "member_product_contents" edge to MemberContract entities by IDs.
func (_u *MemberProductUpdate) RemoveMemberProductContentIDs(ids ...int64) *MemberProductUpdate {
	_u.mutation.RemoveMemberProductContentIDs(ids...)
	return _u
}

// RemoveMemberProductContents removes "member_product_contents" edges to MemberContract entities.
func (_u *MemberProductUpdate) RemoveMemberProductContents(v ...*MemberContract) *MemberProductUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMemberProductContentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MemberProductUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MemberProductUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MemberProductUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MemberProductUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MemberProductUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := memberproduct.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MemberProductUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberproduct.Table, memberproduct.Columns, sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(memberproduct.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(memberproduct.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(memberproduct.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(memberproduct.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(memberproduct.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(memberproduct.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(memberproduct.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(memberproduct.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(memberproduct.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(memberproduct.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(memberproduct.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(memberproduct.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.Sn(); ok {
		_spec.SetField(memberproduct.FieldSn, field.TypeString, value)
	}
	if _u.mutation.SnCleared() {
		_spec.ClearField(memberproduct.FieldSn, field.TypeString)
	}
	if value, ok := _u.mutation.ProductID(); ok {
		_spec.SetField(memberproduct.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedProductID(); ok {
		_spec.AddField(memberproduct.FieldProductID, field.TypeInt64, value)
	}
	if _u.mutation.ProductIDCleared() {
		_spec.ClearField(memberproduct.FieldProductID, field.TypeInt64)
	}
	if value, ok := _u.mutation.VenueID(); ok {
		_spec.SetField(memberproduct.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedVenueID(); ok {
		_spec.AddField(memberproduct.FieldVenueID, field.TypeInt64, value)
	}
	if _u.mutation.VenueIDCleared() {
		_spec.ClearField(memberproduct.FieldVenueID, field.TypeInt64)
	}
	if value, ok := _u.mutation.OrderID(); ok {
		_spec.SetField(memberproduct.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedOrderID(); ok {
		_spec.AddField(memberproduct.FieldOrderID, field.TypeInt64, value)
	}
	if _u.mutation.OrderIDCleared() {
		_spec.ClearField(memberproduct.FieldOrderID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(memberproduct.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(memberproduct.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Price(); ok {
		_spec.SetField(memberproduct.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedPrice(); ok {
		_spec.AddField(memberproduct.FieldPrice, field.TypeFloat64, value)
	}
	if _u.mutation.PriceCleared() {
		_spec.ClearField(memberproduct.FieldPrice, field.TypeFloat64)
	}
	if _u.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproduct.MembersTable,
			Columns: []string{memberproduct.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproduct.MembersTable,
			Columns: []string{memberproduct.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MemberProductPropertysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductPropertysTable,
			Columns: []string{memberproduct.MemberProductPropertysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMemberProductPropertysIDs(); len(nodes) > 0 && !_u.mutation.MemberProductPropertysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductPropertysTable,
			Columns: []string{memberproduct.MemberProductPropertysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemberProductPropertysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductPropertysTable,
			Columns: []string{memberproduct.MemberProductPropertysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MemberProductContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductContentsTable,
			Columns: []string{memberproduct.MemberProductContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMemberProductContentsIDs(); len(nodes) > 0 && !_u.mutation.MemberProductContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductContentsTable,
			Columns: []string{memberproduct.MemberProductContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemberProductContentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductContentsTable,
			Columns: []string{memberproduct.MemberProductContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MemberProductUpdateOne is the builder for updating a single MemberProduct entity.
type MemberProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberProductMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MemberProductUpdateOne) SetUpdatedAt(v time.Time) *MemberProductUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MemberProductUpdateOne) ClearUpdatedAt() *MemberProductUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *MemberProductUpdateOne) SetDelete(v int64) *MemberProductUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *MemberProductUpdateOne) SetNillableDelete(v *int64) *MemberProductUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *MemberProductUpdateOne) AddDelete(v int64) *MemberProductUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *MemberProductUpdateOne) ClearDelete() *MemberProductUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *MemberProductUpdateOne) SetCreatedID(v int64) *MemberProductUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *MemberProductUpdateOne) SetNillableCreatedID(v *int64) *MemberProductUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *MemberProductUpdateOne) AddCreatedID(v int64) *MemberProductUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *MemberProductUpdateOne) ClearCreatedID() *MemberProductUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *MemberProductUpdateOne) SetStatus(v int64) *MemberProductUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MemberProductUpdateOne) SetNillableStatus(v *int64) *MemberProductUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *MemberProductUpdateOne) AddStatus(v int64) *MemberProductUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *MemberProductUpdateOne) ClearStatus() *MemberProductUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetSn sets the "sn" field.
func (_u *MemberProductUpdateOne) SetSn(v string) *MemberProductUpdateOne {
	_u.mutation.SetSn(v)
	return _u
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (_u *MemberProductUpdateOne) SetNillableSn(v *string) *MemberProductUpdateOne {
	if v != nil {
		_u.SetSn(*v)
	}
	return _u
}

// ClearSn clears the value of the "sn" field.
func (_u *MemberProductUpdateOne) ClearSn() *MemberProductUpdateOne {
	_u.mutation.ClearSn()
	return _u
}

// SetMemberID sets the "member_id" field.
func (_u *MemberProductUpdateOne) SetMemberID(v int64) *MemberProductUpdateOne {
	_u.mutation.SetMemberID(v)
	return _u
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (_u *MemberProductUpdateOne) SetNillableMemberID(v *int64) *MemberProductUpdateOne {
	if v != nil {
		_u.SetMemberID(*v)
	}
	return _u
}

// ClearMemberID clears the value of the "member_id" field.
func (_u *MemberProductUpdateOne) ClearMemberID() *MemberProductUpdateOne {
	_u.mutation.ClearMemberID()
	return _u
}

// SetProductID sets the "product_id" field.
func (_u *MemberProductUpdateOne) SetProductID(v int64) *MemberProductUpdateOne {
	_u.mutation.ResetProductID()
	_u.mutation.SetProductID(v)
	return _u
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (_u *MemberProductUpdateOne) SetNillableProductID(v *int64) *MemberProductUpdateOne {
	if v != nil {
		_u.SetProductID(*v)
	}
	return _u
}

// AddProductID adds value to the "product_id" field.
func (_u *MemberProductUpdateOne) AddProductID(v int64) *MemberProductUpdateOne {
	_u.mutation.AddProductID(v)
	return _u
}

// ClearProductID clears the value of the "product_id" field.
func (_u *MemberProductUpdateOne) ClearProductID() *MemberProductUpdateOne {
	_u.mutation.ClearProductID()
	return _u
}

// SetVenueID sets the "venue_id" field.
func (_u *MemberProductUpdateOne) SetVenueID(v int64) *MemberProductUpdateOne {
	_u.mutation.ResetVenueID()
	_u.mutation.SetVenueID(v)
	return _u
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (_u *MemberProductUpdateOne) SetNillableVenueID(v *int64) *MemberProductUpdateOne {
	if v != nil {
		_u.SetVenueID(*v)
	}
	return _u
}

// AddVenueID adds value to the "venue_id" field.
func (_u *MemberProductUpdateOne) AddVenueID(v int64) *MemberProductUpdateOne {
	_u.mutation.AddVenueID(v)
	return _u
}

// ClearVenueID clears the value of the "venue_id" field.
func (_u *MemberProductUpdateOne) ClearVenueID() *MemberProductUpdateOne {
	_u.mutation.ClearVenueID()
	return _u
}

// SetOrderID sets the "order_id" field.
func (_u *MemberProductUpdateOne) SetOrderID(v int64) *MemberProductUpdateOne {
	_u.mutation.ResetOrderID()
	_u.mutation.SetOrderID(v)
	return _u
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (_u *MemberProductUpdateOne) SetNillableOrderID(v *int64) *MemberProductUpdateOne {
	if v != nil {
		_u.SetOrderID(*v)
	}
	return _u
}

// AddOrderID adds value to the "order_id" field.
func (_u *MemberProductUpdateOne) AddOrderID(v int64) *MemberProductUpdateOne {
	_u.mutation.AddOrderID(v)
	return _u
}

// ClearOrderID clears the value of the "order_id" field.
func (_u *MemberProductUpdateOne) ClearOrderID() *MemberProductUpdateOne {
	_u.mutation.ClearOrderID()
	return _u
}

// SetName sets the "name" field.
func (_u *MemberProductUpdateOne) SetName(v string) *MemberProductUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MemberProductUpdateOne) SetNillableName(v *string) *MemberProductUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *MemberProductUpdateOne) ClearName() *MemberProductUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetPrice sets the "price" field.
func (_u *MemberProductUpdateOne) SetPrice(v float64) *MemberProductUpdateOne {
	_u.mutation.ResetPrice()
	_u.mutation.SetPrice(v)
	return _u
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (_u *MemberProductUpdateOne) SetNillablePrice(v *float64) *MemberProductUpdateOne {
	if v != nil {
		_u.SetPrice(*v)
	}
	return _u
}

// AddPrice adds value to the "price" field.
func (_u *MemberProductUpdateOne) AddPrice(v float64) *MemberProductUpdateOne {
	_u.mutation.AddPrice(v)
	return _u
}

// ClearPrice clears the value of the "price" field.
func (_u *MemberProductUpdateOne) ClearPrice() *MemberProductUpdateOne {
	_u.mutation.ClearPrice()
	return _u
}

// SetMembersID sets the "members" edge to the Member entity by ID.
func (_u *MemberProductUpdateOne) SetMembersID(id int64) *MemberProductUpdateOne {
	_u.mutation.SetMembersID(id)
	return _u
}

// SetNillableMembersID sets the "members" edge to the Member entity by ID if the given value is not nil.
func (_u *MemberProductUpdateOne) SetNillableMembersID(id *int64) *MemberProductUpdateOne {
	if id != nil {
		_u = _u.SetMembersID(*id)
	}
	return _u
}

// SetMembers sets the "members" edge to the Member entity.
func (_u *MemberProductUpdateOne) SetMembers(v *Member) *MemberProductUpdateOne {
	return _u.SetMembersID(v.ID)
}

// AddMemberProductPropertyIDs adds the "member_product_propertys" edge to the MemberProductProperty entity by IDs.
func (_u *MemberProductUpdateOne) AddMemberProductPropertyIDs(ids ...int64) *MemberProductUpdateOne {
	_u.mutation.AddMemberProductPropertyIDs(ids...)
	return _u
}

// AddMemberProductPropertys adds the "member_product_propertys" edges to the MemberProductProperty entity.
func (_u *MemberProductUpdateOne) AddMemberProductPropertys(v ...*MemberProductProperty) *MemberProductUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMemberProductPropertyIDs(ids...)
}

// AddMemberProductContentIDs adds the "member_product_contents" edge to the MemberContract entity by IDs.
func (_u *MemberProductUpdateOne) AddMemberProductContentIDs(ids ...int64) *MemberProductUpdateOne {
	_u.mutation.AddMemberProductContentIDs(ids...)
	return _u
}

// AddMemberProductContents adds the "member_product_contents" edges to the MemberContract entity.
func (_u *MemberProductUpdateOne) AddMemberProductContents(v ...*MemberContract) *MemberProductUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMemberProductContentIDs(ids...)
}

// Mutation returns the MemberProductMutation object of the builder.
func (_u *MemberProductUpdateOne) Mutation() *MemberProductMutation {
	return _u.mutation
}

// ClearMembers clears the "members" edge to the Member entity.
func (_u *MemberProductUpdateOne) ClearMembers() *MemberProductUpdateOne {
	_u.mutation.ClearMembers()
	return _u
}

// ClearMemberProductPropertys clears all "member_product_propertys" edges to the MemberProductProperty entity.
func (_u *MemberProductUpdateOne) ClearMemberProductPropertys() *MemberProductUpdateOne {
	_u.mutation.ClearMemberProductPropertys()
	return _u
}

// RemoveMemberProductPropertyIDs removes the "member_product_propertys" edge to MemberProductProperty entities by IDs.
func (_u *MemberProductUpdateOne) RemoveMemberProductPropertyIDs(ids ...int64) *MemberProductUpdateOne {
	_u.mutation.RemoveMemberProductPropertyIDs(ids...)
	return _u
}

// RemoveMemberProductPropertys removes "member_product_propertys" edges to MemberProductProperty entities.
func (_u *MemberProductUpdateOne) RemoveMemberProductPropertys(v ...*MemberProductProperty) *MemberProductUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMemberProductPropertyIDs(ids...)
}

// ClearMemberProductContents clears all "member_product_contents" edges to the MemberContract entity.
func (_u *MemberProductUpdateOne) ClearMemberProductContents() *MemberProductUpdateOne {
	_u.mutation.ClearMemberProductContents()
	return _u
}

// RemoveMemberProductContentIDs removes the "member_product_contents" edge to MemberContract entities by IDs.
func (_u *MemberProductUpdateOne) RemoveMemberProductContentIDs(ids ...int64) *MemberProductUpdateOne {
	_u.mutation.RemoveMemberProductContentIDs(ids...)
	return _u
}

// RemoveMemberProductContents removes "member_product_contents" edges to MemberContract entities.
func (_u *MemberProductUpdateOne) RemoveMemberProductContents(v ...*MemberContract) *MemberProductUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMemberProductContentIDs(ids...)
}

// Where appends a list predicates to the MemberProductUpdate builder.
func (_u *MemberProductUpdateOne) Where(ps ...predicate.MemberProduct) *MemberProductUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MemberProductUpdateOne) Select(field string, fields ...string) *MemberProductUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated MemberProduct entity.
func (_u *MemberProductUpdateOne) Save(ctx context.Context) (*MemberProduct, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MemberProductUpdateOne) SaveX(ctx context.Context) *MemberProduct {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MemberProductUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MemberProductUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MemberProductUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := memberproduct.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MemberProductUpdateOne) sqlSave(ctx context.Context) (_node *MemberProduct, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberproduct.Table, memberproduct.Columns, sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MemberProduct.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memberproduct.FieldID)
		for _, f := range fields {
			if !memberproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != memberproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(memberproduct.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(memberproduct.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(memberproduct.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(memberproduct.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(memberproduct.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(memberproduct.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(memberproduct.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(memberproduct.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(memberproduct.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(memberproduct.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(memberproduct.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(memberproduct.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.Sn(); ok {
		_spec.SetField(memberproduct.FieldSn, field.TypeString, value)
	}
	if _u.mutation.SnCleared() {
		_spec.ClearField(memberproduct.FieldSn, field.TypeString)
	}
	if value, ok := _u.mutation.ProductID(); ok {
		_spec.SetField(memberproduct.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedProductID(); ok {
		_spec.AddField(memberproduct.FieldProductID, field.TypeInt64, value)
	}
	if _u.mutation.ProductIDCleared() {
		_spec.ClearField(memberproduct.FieldProductID, field.TypeInt64)
	}
	if value, ok := _u.mutation.VenueID(); ok {
		_spec.SetField(memberproduct.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedVenueID(); ok {
		_spec.AddField(memberproduct.FieldVenueID, field.TypeInt64, value)
	}
	if _u.mutation.VenueIDCleared() {
		_spec.ClearField(memberproduct.FieldVenueID, field.TypeInt64)
	}
	if value, ok := _u.mutation.OrderID(); ok {
		_spec.SetField(memberproduct.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedOrderID(); ok {
		_spec.AddField(memberproduct.FieldOrderID, field.TypeInt64, value)
	}
	if _u.mutation.OrderIDCleared() {
		_spec.ClearField(memberproduct.FieldOrderID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(memberproduct.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(memberproduct.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Price(); ok {
		_spec.SetField(memberproduct.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedPrice(); ok {
		_spec.AddField(memberproduct.FieldPrice, field.TypeFloat64, value)
	}
	if _u.mutation.PriceCleared() {
		_spec.ClearField(memberproduct.FieldPrice, field.TypeFloat64)
	}
	if _u.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproduct.MembersTable,
			Columns: []string{memberproduct.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproduct.MembersTable,
			Columns: []string{memberproduct.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MemberProductPropertysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductPropertysTable,
			Columns: []string{memberproduct.MemberProductPropertysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMemberProductPropertysIDs(); len(nodes) > 0 && !_u.mutation.MemberProductPropertysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductPropertysTable,
			Columns: []string{memberproduct.MemberProductPropertysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemberProductPropertysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductPropertysTable,
			Columns: []string{memberproduct.MemberProductPropertysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MemberProductContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductContentsTable,
			Columns: []string{memberproduct.MemberProductContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMemberProductContentsIDs(); len(nodes) > 0 && !_u.mutation.MemberProductContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductContentsTable,
			Columns: []string{memberproduct.MemberProductContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemberProductContentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductContentsTable,
			Columns: []string{memberproduct.MemberProductContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MemberProduct{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
