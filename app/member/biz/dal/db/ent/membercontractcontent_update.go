// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"member/biz/dal/db/ent/membercontract"
	"member/biz/dal/db/ent/membercontractcontent"
	"member/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberContractContentUpdate is the builder for updating MemberContractContent entities.
type MemberContractContentUpdate struct {
	config
	hooks    []Hook
	mutation *MemberContractContentMutation
}

// Where appends a list predicates to the MemberContractContentUpdate builder.
func (_u *MemberContractContentUpdate) Where(ps ...predicate.MemberContractContent) *MemberContractContentUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MemberContractContentUpdate) SetUpdatedAt(v time.Time) *MemberContractContentUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MemberContractContentUpdate) ClearUpdatedAt() *MemberContractContentUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *MemberContractContentUpdate) SetDelete(v int64) *MemberContractContentUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *MemberContractContentUpdate) SetNillableDelete(v *int64) *MemberContractContentUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *MemberContractContentUpdate) AddDelete(v int64) *MemberContractContentUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *MemberContractContentUpdate) ClearDelete() *MemberContractContentUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *MemberContractContentUpdate) SetCreatedID(v int64) *MemberContractContentUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *MemberContractContentUpdate) SetNillableCreatedID(v *int64) *MemberContractContentUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *MemberContractContentUpdate) AddCreatedID(v int64) *MemberContractContentUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *MemberContractContentUpdate) ClearCreatedID() *MemberContractContentUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetMemberContractID sets the "member_contract_id" field.
func (_u *MemberContractContentUpdate) SetMemberContractID(v int64) *MemberContractContentUpdate {
	_u.mutation.SetMemberContractID(v)
	return _u
}

// SetNillableMemberContractID sets the "member_contract_id" field if the given value is not nil.
func (_u *MemberContractContentUpdate) SetNillableMemberContractID(v *int64) *MemberContractContentUpdate {
	if v != nil {
		_u.SetMemberContractID(*v)
	}
	return _u
}

// ClearMemberContractID clears the value of the "member_contract_id" field.
func (_u *MemberContractContentUpdate) ClearMemberContractID() *MemberContractContentUpdate {
	_u.mutation.ClearMemberContractID()
	return _u
}

// SetContent sets the "content" field.
func (_u *MemberContractContentUpdate) SetContent(v string) *MemberContractContentUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *MemberContractContentUpdate) SetNillableContent(v *string) *MemberContractContentUpdate {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// ClearContent clears the value of the "content" field.
func (_u *MemberContractContentUpdate) ClearContent() *MemberContractContentUpdate {
	_u.mutation.ClearContent()
	return _u
}

// SetSignImg sets the "sign_img" field.
func (_u *MemberContractContentUpdate) SetSignImg(v string) *MemberContractContentUpdate {
	_u.mutation.SetSignImg(v)
	return _u
}

// SetNillableSignImg sets the "sign_img" field if the given value is not nil.
func (_u *MemberContractContentUpdate) SetNillableSignImg(v *string) *MemberContractContentUpdate {
	if v != nil {
		_u.SetSignImg(*v)
	}
	return _u
}

// ClearSignImg clears the value of the "sign_img" field.
func (_u *MemberContractContentUpdate) ClearSignImg() *MemberContractContentUpdate {
	_u.mutation.ClearSignImg()
	return _u
}

// SetContractID sets the "contract" edge to the MemberContract entity by ID.
func (_u *MemberContractContentUpdate) SetContractID(id int64) *MemberContractContentUpdate {
	_u.mutation.SetContractID(id)
	return _u
}

// SetNillableContractID sets the "contract" edge to the MemberContract entity by ID if the given value is not nil.
func (_u *MemberContractContentUpdate) SetNillableContractID(id *int64) *MemberContractContentUpdate {
	if id != nil {
		_u = _u.SetContractID(*id)
	}
	return _u
}

// SetContract sets the "contract" edge to the MemberContract entity.
func (_u *MemberContractContentUpdate) SetContract(v *MemberContract) *MemberContractContentUpdate {
	return _u.SetContractID(v.ID)
}

// Mutation returns the MemberContractContentMutation object of the builder.
func (_u *MemberContractContentUpdate) Mutation() *MemberContractContentMutation {
	return _u.mutation
}

// ClearContract clears the "contract" edge to the MemberContract entity.
func (_u *MemberContractContentUpdate) ClearContract() *MemberContractContentUpdate {
	_u.mutation.ClearContract()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MemberContractContentUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MemberContractContentUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MemberContractContentUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MemberContractContentUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MemberContractContentUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := membercontractcontent.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MemberContractContentUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(membercontractcontent.Table, membercontractcontent.Columns, sqlgraph.NewFieldSpec(membercontractcontent.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(membercontractcontent.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(membercontractcontent.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(membercontractcontent.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(membercontractcontent.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(membercontractcontent.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(membercontractcontent.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(membercontractcontent.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(membercontractcontent.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(membercontractcontent.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(membercontractcontent.FieldContent, field.TypeString, value)
	}
	if _u.mutation.ContentCleared() {
		_spec.ClearField(membercontractcontent.FieldContent, field.TypeString)
	}
	if value, ok := _u.mutation.SignImg(); ok {
		_spec.SetField(membercontractcontent.FieldSignImg, field.TypeString, value)
	}
	if _u.mutation.SignImgCleared() {
		_spec.ClearField(membercontractcontent.FieldSignImg, field.TypeString)
	}
	if _u.mutation.ContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membercontractcontent.ContractTable,
			Columns: []string{membercontractcontent.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membercontractcontent.ContractTable,
			Columns: []string{membercontractcontent.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{membercontractcontent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MemberContractContentUpdateOne is the builder for updating a single MemberContractContent entity.
type MemberContractContentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberContractContentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MemberContractContentUpdateOne) SetUpdatedAt(v time.Time) *MemberContractContentUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *MemberContractContentUpdateOne) ClearUpdatedAt() *MemberContractContentUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *MemberContractContentUpdateOne) SetDelete(v int64) *MemberContractContentUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *MemberContractContentUpdateOne) SetNillableDelete(v *int64) *MemberContractContentUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *MemberContractContentUpdateOne) AddDelete(v int64) *MemberContractContentUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *MemberContractContentUpdateOne) ClearDelete() *MemberContractContentUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *MemberContractContentUpdateOne) SetCreatedID(v int64) *MemberContractContentUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *MemberContractContentUpdateOne) SetNillableCreatedID(v *int64) *MemberContractContentUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *MemberContractContentUpdateOne) AddCreatedID(v int64) *MemberContractContentUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *MemberContractContentUpdateOne) ClearCreatedID() *MemberContractContentUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetMemberContractID sets the "member_contract_id" field.
func (_u *MemberContractContentUpdateOne) SetMemberContractID(v int64) *MemberContractContentUpdateOne {
	_u.mutation.SetMemberContractID(v)
	return _u
}

// SetNillableMemberContractID sets the "member_contract_id" field if the given value is not nil.
func (_u *MemberContractContentUpdateOne) SetNillableMemberContractID(v *int64) *MemberContractContentUpdateOne {
	if v != nil {
		_u.SetMemberContractID(*v)
	}
	return _u
}

// ClearMemberContractID clears the value of the "member_contract_id" field.
func (_u *MemberContractContentUpdateOne) ClearMemberContractID() *MemberContractContentUpdateOne {
	_u.mutation.ClearMemberContractID()
	return _u
}

// SetContent sets the "content" field.
func (_u *MemberContractContentUpdateOne) SetContent(v string) *MemberContractContentUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *MemberContractContentUpdateOne) SetNillableContent(v *string) *MemberContractContentUpdateOne {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// ClearContent clears the value of the "content" field.
func (_u *MemberContractContentUpdateOne) ClearContent() *MemberContractContentUpdateOne {
	_u.mutation.ClearContent()
	return _u
}

// SetSignImg sets the "sign_img" field.
func (_u *MemberContractContentUpdateOne) SetSignImg(v string) *MemberContractContentUpdateOne {
	_u.mutation.SetSignImg(v)
	return _u
}

// SetNillableSignImg sets the "sign_img" field if the given value is not nil.
func (_u *MemberContractContentUpdateOne) SetNillableSignImg(v *string) *MemberContractContentUpdateOne {
	if v != nil {
		_u.SetSignImg(*v)
	}
	return _u
}

// ClearSignImg clears the value of the "sign_img" field.
func (_u *MemberContractContentUpdateOne) ClearSignImg() *MemberContractContentUpdateOne {
	_u.mutation.ClearSignImg()
	return _u
}

// SetContractID sets the "contract" edge to the MemberContract entity by ID.
func (_u *MemberContractContentUpdateOne) SetContractID(id int64) *MemberContractContentUpdateOne {
	_u.mutation.SetContractID(id)
	return _u
}

// SetNillableContractID sets the "contract" edge to the MemberContract entity by ID if the given value is not nil.
func (_u *MemberContractContentUpdateOne) SetNillableContractID(id *int64) *MemberContractContentUpdateOne {
	if id != nil {
		_u = _u.SetContractID(*id)
	}
	return _u
}

// SetContract sets the "contract" edge to the MemberContract entity.
func (_u *MemberContractContentUpdateOne) SetContract(v *MemberContract) *MemberContractContentUpdateOne {
	return _u.SetContractID(v.ID)
}

// Mutation returns the MemberContractContentMutation object of the builder.
func (_u *MemberContractContentUpdateOne) Mutation() *MemberContractContentMutation {
	return _u.mutation
}

// ClearContract clears the "contract" edge to the MemberContract entity.
func (_u *MemberContractContentUpdateOne) ClearContract() *MemberContractContentUpdateOne {
	_u.mutation.ClearContract()
	return _u
}

// Where appends a list predicates to the MemberContractContentUpdate builder.
func (_u *MemberContractContentUpdateOne) Where(ps ...predicate.MemberContractContent) *MemberContractContentUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MemberContractContentUpdateOne) Select(field string, fields ...string) *MemberContractContentUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated MemberContractContent entity.
func (_u *MemberContractContentUpdateOne) Save(ctx context.Context) (*MemberContractContent, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MemberContractContentUpdateOne) SaveX(ctx context.Context) *MemberContractContent {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MemberContractContentUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MemberContractContentUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MemberContractContentUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := membercontractcontent.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MemberContractContentUpdateOne) sqlSave(ctx context.Context) (_node *MemberContractContent, err error) {
	_spec := sqlgraph.NewUpdateSpec(membercontractcontent.Table, membercontractcontent.Columns, sqlgraph.NewFieldSpec(membercontractcontent.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MemberContractContent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, membercontractcontent.FieldID)
		for _, f := range fields {
			if !membercontractcontent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != membercontractcontent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(membercontractcontent.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(membercontractcontent.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(membercontractcontent.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(membercontractcontent.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(membercontractcontent.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(membercontractcontent.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(membercontractcontent.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(membercontractcontent.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(membercontractcontent.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(membercontractcontent.FieldContent, field.TypeString, value)
	}
	if _u.mutation.ContentCleared() {
		_spec.ClearField(membercontractcontent.FieldContent, field.TypeString)
	}
	if value, ok := _u.mutation.SignImg(); ok {
		_spec.SetField(membercontractcontent.FieldSignImg, field.TypeString, value)
	}
	if _u.mutation.SignImgCleared() {
		_spec.ClearField(membercontractcontent.FieldSignImg, field.TypeString)
	}
	if _u.mutation.ContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membercontractcontent.ContractTable,
			Columns: []string{membercontractcontent.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membercontractcontent.ContractTable,
			Columns: []string{membercontractcontent.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MemberContractContent{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{membercontractcontent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
