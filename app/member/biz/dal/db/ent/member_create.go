// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"member/biz/dal/db/ent/member"
	"member/biz/dal/db/ent/membercontract"
	"member/biz/dal/db/ent/membernote"
	"member/biz/dal/db/ent/memberproduct"
	"member/biz/dal/db/ent/memberprofile"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberCreate is the builder for creating a Member entity.
type MemberCreate struct {
	config
	mutation *MemberMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *MemberCreate) SetCreatedAt(v time.Time) *MemberCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *MemberCreate) SetNillableCreatedAt(v *time.Time) *MemberCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *MemberCreate) SetUpdatedAt(v time.Time) *MemberCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *MemberCreate) SetNillableUpdatedAt(v *time.Time) *MemberCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDelete sets the "delete" field.
func (_c *MemberCreate) SetDelete(v int64) *MemberCreate {
	_c.mutation.SetDelete(v)
	return _c
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_c *MemberCreate) SetNillableDelete(v *int64) *MemberCreate {
	if v != nil {
		_c.SetDelete(*v)
	}
	return _c
}

// SetCreatedID sets the "created_id" field.
func (_c *MemberCreate) SetCreatedID(v int64) *MemberCreate {
	_c.mutation.SetCreatedID(v)
	return _c
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_c *MemberCreate) SetNillableCreatedID(v *int64) *MemberCreate {
	if v != nil {
		_c.SetCreatedID(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *MemberCreate) SetStatus(v int64) *MemberCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *MemberCreate) SetNillableStatus(v *int64) *MemberCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetPassword sets the "password" field.
func (_c *MemberCreate) SetPassword(v string) *MemberCreate {
	_c.mutation.SetPassword(v)
	return _c
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_c *MemberCreate) SetNillablePassword(v *string) *MemberCreate {
	if v != nil {
		_c.SetPassword(*v)
	}
	return _c
}

// SetUsername sets the "username" field.
func (_c *MemberCreate) SetUsername(v string) *MemberCreate {
	_c.mutation.SetUsername(v)
	return _c
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_c *MemberCreate) SetNillableUsername(v *string) *MemberCreate {
	if v != nil {
		_c.SetUsername(*v)
	}
	return _c
}

// SetMobile sets the "mobile" field.
func (_c *MemberCreate) SetMobile(v string) *MemberCreate {
	_c.mutation.SetMobile(v)
	return _c
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (_c *MemberCreate) SetNillableMobile(v *string) *MemberCreate {
	if v != nil {
		_c.SetMobile(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *MemberCreate) SetName(v string) *MemberCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *MemberCreate) SetNillableName(v *string) *MemberCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetAvatar sets the "avatar" field.
func (_c *MemberCreate) SetAvatar(v string) *MemberCreate {
	_c.mutation.SetAvatar(v)
	return _c
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (_c *MemberCreate) SetNillableAvatar(v *string) *MemberCreate {
	if v != nil {
		_c.SetAvatar(*v)
	}
	return _c
}

// SetCondition sets the "condition" field.
func (_c *MemberCreate) SetCondition(v int64) *MemberCreate {
	_c.mutation.SetCondition(v)
	return _c
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (_c *MemberCreate) SetNillableCondition(v *int64) *MemberCreate {
	if v != nil {
		_c.SetCondition(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *MemberCreate) SetID(v int64) *MemberCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddMemberProfileIDs adds the "member_profile" edge to the MemberProfile entity by IDs.
func (_c *MemberCreate) AddMemberProfileIDs(ids ...int64) *MemberCreate {
	_c.mutation.AddMemberProfileIDs(ids...)
	return _c
}

// AddMemberProfile adds the "member_profile" edges to the MemberProfile entity.
func (_c *MemberCreate) AddMemberProfile(v ...*MemberProfile) *MemberCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddMemberProfileIDs(ids...)
}

// AddMemberNoteIDs adds the "member_notes" edge to the MemberNote entity by IDs.
func (_c *MemberCreate) AddMemberNoteIDs(ids ...int64) *MemberCreate {
	_c.mutation.AddMemberNoteIDs(ids...)
	return _c
}

// AddMemberNotes adds the "member_notes" edges to the MemberNote entity.
func (_c *MemberCreate) AddMemberNotes(v ...*MemberNote) *MemberCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddMemberNoteIDs(ids...)
}

// AddMemberProductIDs adds the "member_products" edge to the MemberProduct entity by IDs.
func (_c *MemberCreate) AddMemberProductIDs(ids ...int64) *MemberCreate {
	_c.mutation.AddMemberProductIDs(ids...)
	return _c
}

// AddMemberProducts adds the "member_products" edges to the MemberProduct entity.
func (_c *MemberCreate) AddMemberProducts(v ...*MemberProduct) *MemberCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddMemberProductIDs(ids...)
}

// AddMemberContentIDs adds the "member_contents" edge to the MemberContract entity by IDs.
func (_c *MemberCreate) AddMemberContentIDs(ids ...int64) *MemberCreate {
	_c.mutation.AddMemberContentIDs(ids...)
	return _c
}

// AddMemberContents adds the "member_contents" edges to the MemberContract entity.
func (_c *MemberCreate) AddMemberContents(v ...*MemberContract) *MemberCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddMemberContentIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (_c *MemberCreate) Mutation() *MemberMutation {
	return _c.mutation
}

// Save creates the Member in the database.
func (_c *MemberCreate) Save(ctx context.Context) (*Member, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *MemberCreate) SaveX(ctx context.Context) *Member {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MemberCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MemberCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *MemberCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := member.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := member.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Delete(); !ok {
		v := member.DefaultDelete
		_c.mutation.SetDelete(v)
	}
	if _, ok := _c.mutation.CreatedID(); !ok {
		v := member.DefaultCreatedID
		_c.mutation.SetCreatedID(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := member.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.Avatar(); !ok {
		v := member.DefaultAvatar
		_c.mutation.SetAvatar(v)
	}
	if _, ok := _c.mutation.Condition(); !ok {
		v := member.DefaultCondition
		_c.mutation.SetCondition(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *MemberCreate) check() error {
	return nil
}

func (_c *MemberCreate) sqlSave(ctx context.Context) (*Member, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *MemberCreate) createSpec() (*Member, *sqlgraph.CreateSpec) {
	var (
		_node = &Member{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(member.Table, sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(member.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(member.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Delete(); ok {
		_spec.SetField(member.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := _c.mutation.CreatedID(); ok {
		_spec.SetField(member.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(member.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Password(); ok {
		_spec.SetField(member.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := _c.mutation.Username(); ok {
		_spec.SetField(member.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := _c.mutation.Mobile(); ok {
		_spec.SetField(member.FieldMobile, field.TypeString, value)
		_node.Mobile = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(member.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Avatar(); ok {
		_spec.SetField(member.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if value, ok := _c.mutation.Condition(); ok {
		_spec.SetField(member.FieldCondition, field.TypeInt64, value)
		_node.Condition = value
	}
	if nodes := _c.mutation.MemberProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProfileTable,
			Columns: []string{member.MemberProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberprofile.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.MemberNotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberNotesTable,
			Columns: []string{member.MemberNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membernote.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.MemberProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProductsTable,
			Columns: []string{member.MemberProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.MemberContentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberContentsTable,
			Columns: []string{member.MemberContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MemberCreateBulk is the builder for creating many Member entities in bulk.
type MemberCreateBulk struct {
	config
	err      error
	builders []*MemberCreate
}

// Save creates the Member entities in the database.
func (_c *MemberCreateBulk) Save(ctx context.Context) ([]*Member, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Member, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *MemberCreateBulk) SaveX(ctx context.Context) []*Member {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MemberCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MemberCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
