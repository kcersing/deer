// Code generated by hertz generator.

package system

import (
	"admin/rpc/client"
	"common/pkg/errno"
	utils2 "common/pkg/utils"
	"context"
	base "gen/hertz_gen/base"
	system "gen/hertz_gen/system"
	base2 "gen/kitex_gen/base"
	system2 "gen/kitex_gen/system"

	"github.com/cloudwego/hertz/pkg/app"
)

// CreateApi .
// @router /service/api/create [POST]
func CreateApi(ctx context.Context, c *app.RequestContext) {
	var err error
	var req system.CreateApiReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	resp, err := client.SystemClient.UpdateApi(ctx, &system2.UpdateApiReq{
		Title:       req.GetTitle(),
		Path:        req.GetPath(),
		Description: req.GetDescription(),
		Method:      req.GetMethod(),
		Group:       req.GetGroup(),
	})
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// UpdateApi .
// @router /service/api/update [POST]
func UpdateApi(ctx context.Context, c *app.RequestContext) {
	var err error
	var req system.UpdateApiReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	resp, err := client.SystemClient.UpdateApi(ctx, &system2.UpdateApiReq{
		Id:          req.GetID(),
		Title:       req.GetTitle(),
		Path:        req.GetPath(),
		Description: req.GetDescription(),
		Method:      req.GetMethod(),
		Group:       req.GetGroup(),
	})
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// DeleteApi .
// @router /service/api/delete [POST]
func DeleteApi(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IdReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	resp, err := client.SystemClient.DeleteApi(ctx, &base2.IdReq{Id: req.GetID()})
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// ApiList .
// @router /service/api/list [POST]
func ApiList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req system.ApiListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	resp, err := client.SystemClient.ApiList(ctx, &system2.ApiListReq{
		Path:        req.GetPath(),
		Description: req.GetDescription(),
		Method:      req.GetMethod(),
		Group:       req.GetGroup(),
		Page:        req.GetPage(),
		PageSize:    req.GetPageSize(),
		Keyword:     req.GetKeyword(),
	})
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// ApiTree .
// @router /service/api/tree [POST]
func ApiTree(ctx context.Context, c *app.RequestContext) {
	var err error
	var req system.ApiListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	resp, err := client.SystemClient.ApiTree(ctx, &system2.ApiListReq{
		Path:        req.GetPath(),
		Description: req.GetDescription(),
		Method:      req.GetMethod(),
		Group:       req.GetGroup(),
		Page:        req.GetPage(),
		PageSize:    req.GetPageSize(),
		Keyword:     req.GetKeyword(),
	})
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// LogList .
// @router /service/logs/list [POST]
func LogList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req system.LogListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	resp, err := client.SystemClient.LogList(ctx, &system2.LogListReq{
		Page:       req.GetPage(),
		PageSize:   req.GetPageSize(),
		Type:       req.GetType(),
		Method:     req.GetMethod(),
		Api:        req.GetAPI(),
		Success:    req.GetSuccess(),
		Operatorsr: req.GetOperatorsr(),
		Identity:   req.GetIdentity(),
	})
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// DeleteLog .
// @router /service/logs/deleteAll [POST]
func DeleteLog(ctx context.Context, c *app.RequestContext) {
	var err error
	var req system.DeleteLogReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	resp, err := client.SystemClient.DeleteLog(ctx, &system2.DeleteLogReq{
		StartAt: req.GetStartAt(),
		EndAt:   req.GetEndAt(),
	})
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}
