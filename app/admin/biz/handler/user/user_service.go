// Code generated by hertz generator.

package user

import (
	"admin/infras/utils"
	"admin/rpc/client"
	"common/pkg/errno"
	utils2 "common/pkg/utils"
	"context"
	base "gen/hertz_gen/base"
	user "gen/hertz_gen/user"
	base1 "gen/kitex_gen/base"
	"github.com/cloudwego/hertz/pkg/app"

	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateUser .
// @router /service/user/create [POST]
func CreateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.CreateUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetUser .
// @router /service/user [POST]
func GetUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IdReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	var id = req.GetID()
	if req.GetID() == 0 {
		// get token id
		id = utils.GetTokenId(ctx, c)
		if id == 0 {
			utils2.SendResponse(c, errno.NewErrNo(10002, "token is invalid"), nil, 0, "")
			return
		}
	}

	resp, err := client.UserClient.GetUser(ctx, &base1.IdReq{
		Id: id,
	})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), resp.Data, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp.Data, 0, "")
	return
}

// GetUserList .
// @router /service/user/list [POST]
func GetUserList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.GetUserListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}
