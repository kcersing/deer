// Code generated by hertz generator.

package role

import (
	"admin/rpc/client"
	"common/pkg/errno"
	utils2 "common/pkg/utils"
	"context"
	base "gen/hertz_gen/base"
	role "gen/hertz_gen/role"
	base1 "gen/kitex_gen/base"
	"gen/kitex_gen/system"

	"github.com/cloudwego/hertz/pkg/app"
)

// CreateRole .
// @router /service/role/create [POST]
func CreateRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.CreateRoleReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.CreateRole(ctx, &system.CreateRoleReq{
		Name:          req.GetName(),
		Value:         req.GetValue(),
		DefaultRouter: req.GetDefaultRouter(),
		Remark:        req.GetRemark(),
		Apis:          req.GetApis(),
	})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// GetRole .
// @router /service/role [POST]
func GetRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IdReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.UserClient.GetUser(ctx, &base1.IdReq{
		Id: req.GetID(),
	})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), resp.Data, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp.Data, 0, "")
	return
}

// GetRoleList .
// @router /service/role/list [POST]
func GetRoleList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.GetRoleListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.GetRoleList(ctx, &system.GetRoleListReq{
		Page:     req.GetPage(),
		PageSize: req.GetPageSize(),
		Keyword:  req.GetKeyword(),
	})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// UpdateRole .
// @router /service/role/update [POST]
func UpdateRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.UpdateRoleReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.UpdateRole(ctx, &system.UpdateRoleReq{
		Id:            req.GetID(),
		Name:          req.GetName(),
		Value:         req.GetValue(),
		DefaultRouter: req.GetDefaultRouter(),
		Remark:        req.GetRemark(),
		Apis:          req.GetApis(),
	})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// DeleteRole .
// @router /service/role/delete [POST]
func DeleteRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IdReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.DeleteRole(ctx, &base1.IdReq{Id: req.GetID()})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// CreateRoleMenu .
// @router /service/role/create/menu [POST]
func CreateRoleMenu(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.CreateMenuAuthReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.CreateRoleMenu(ctx, &system.CreateMenuAuthReq{
		RoleId: req.GetRoleId(),
		Ids:    req.GetIds(),
	})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// CreateRoleApi .
// @router /service/role/create/api [POST]
func CreateRoleApi(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.CreateMenuAuthReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.CreateRoleApi(ctx, &system.CreateMenuAuthReq{
		RoleId: req.GetRoleId(),
		Ids:    req.GetIds(),
	})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// GetRoleApi .
// @router /service/role/api [POST]
func GetRoleApi(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IdReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.GetRoleApi(ctx, &base1.IdReq{
		Id: req.GetID(),
	})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), resp.Data, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp.Data, 0, "")
	return
}

// GetRoleMenu .
// @router /service/role/menu [POST]
func GetRoleMenu(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IdReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.GetRoleMenu(ctx, &base1.IdReq{
		Id: req.GetID(),
	})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), resp.Data, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp.Data, 0, "")
	return
}
