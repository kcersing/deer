// Code generated by hertz generator.

package dict

import (
	"common/pkg/errno"
	utils2 "common/pkg/utils"
	"context"

	base "gen/hertz_gen/base"
	dict "gen/hertz_gen/dict"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateDict .
// @router /service/dict/create [POST]
func CreateDict(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dict.Dict
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateDict .
// @router /service/dict/update [POST]
func UpdateDict(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dict.Dict
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteDict .
// @router /service/dict [POST]
func DeleteDict(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IdReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// DictList .
// @router /service/dict/list [GET]
func DictList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dict.DictListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// CreateDictht .
// @router /service/dict/dictht/create [POST]
func CreateDictht(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dict.Dictht
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateDictht .
// @router /service/dict/dictht/update [POST]
func UpdateDictht(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dict.Dictht
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteDictht .
// @router /service/dict/dictht [GET]
func DeleteDictht(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IdReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// DicthtList .
// @router /service/dict/dictht/list [POST]
func DicthtList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dict.DicthtListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}
