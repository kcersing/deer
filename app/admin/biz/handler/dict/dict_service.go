// Code generated by hertz generator.

package dict

import (
	"admin/rpc/client"
	"common/pkg/errno"
	utils2 "common/pkg/utils"
	"context"
	base "gen/hertz_gen/base"
	dict "gen/hertz_gen/dict"
	base1 "gen/kitex_gen/base"
	"gen/kitex_gen/system"
	"github.com/cloudwego/hertz/pkg/app"
)

// CreateDict .
// @router /service/dict/create [POST]
func CreateDict(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dict.Dict
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.CreateDict(ctx, &system.Dict{
		Title:       req.GetTitle(),
		Name:        req.GetName(),
		Status:      req.GetStatus(),
		Description: req.GetDescription(),
	})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// UpdateDict .
// @router /service/dict/update [POST]
func UpdateDict(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dict.Dict
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.UpdateDict(ctx, &system.Dict{
		Id:          req.GetID(),
		Title:       req.GetTitle(),
		Name:        req.GetName(),
		Status:      req.GetStatus(),
		Description: req.GetDescription(),
	})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// DeleteDict .
// @router /service/dict [POST]
func DeleteDict(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IdReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.DeleteDict(ctx, &base1.IdReq{Id: req.GetID()})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// DictList .
// @router /service/dict/list [GET]
func DictList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dict.DictListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.DictList(ctx, &system.DictListReq{
		Title:    req.GetTitle(),
		Name:     req.GetName(),
		Page:     req.GetPage(),
		PageSize: req.GetPageSize(),
	})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// CreateDictht .
// @router /service/dict/dictht/create [POST]
func CreateDictht(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dict.Dictht
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.CreateDictht(ctx, &system.Dictht{
		Title:    req.GetTitle(),
		Key:      req.GetKey(),
		Value:    req.GetValue(),
		Status:   req.GetStatus(),
		ParentID: req.GetParentID(),
	})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// UpdateDictht .
// @router /service/dict/dictht/update [POST]
func UpdateDictht(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dict.Dictht
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.CreateDictht(ctx, &system.Dictht{
		Id:       req.GetID(),
		Title:    req.GetTitle(),
		Key:      req.GetKey(),
		Value:    req.GetValue(),
		Status:   req.GetStatus(),
		ParentID: req.GetParentID(),
	})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// DeleteDictht .
// @router /service/dict/dictht [GET]
func DeleteDictht(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IdReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.DeleteDictht(ctx, &base1.IdReq{Id: req.GetID()})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// DicthtList .
// @router /service/dict/dictht/list [POST]
func DicthtList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dict.DicthtListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.DicthtList(ctx, &system.DicthtListReq{
		Name:         req.GetName(),
		DictionaryId: req.GetDictionaryId(),
	})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}
