// Code generated by hertz generator.

package menu

import (
	"admin/rpc/client"
	"common/pkg/errno"
	utils2 "common/pkg/utils"
	"context"
	base "gen/hertz_gen/base"
	menu "gen/hertz_gen/menu"
	base1 "gen/kitex_gen/base"
	"gen/kitex_gen/system"
	"github.com/cloudwego/hertz/pkg/app"
)

// CreateMenu .
// @router /service/menu/create [POST]
func CreateMenu(ctx context.Context, c *app.RequestContext) {
	var err error
	var req menu.CreateMenuReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.CreateMenu(ctx, &system.CreateMenuReq{
		Name:      req.GetName(),
		ParentId:  req.GetParentId(),
		Level:     req.GetLevel(),
		Path:      req.GetPath(),
		Redirect:  req.GetRedirect(),
		Component: req.GetComponent(),
		MenuType:  req.GetMenuType(),
		Hidden:    req.GetHidden(),
		Sort:      req.GetSort(),
		Status:    req.GetStatus(),
		Url:       req.GetURL(),
		Title:     req.GetTitle(),
		Type:      req.GetType(),
	})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// UpdateMenu .
// @router /service/menu/update [POST]
func UpdateMenu(ctx context.Context, c *app.RequestContext) {
	var err error
	var req menu.UpdateMenuReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.UpdateMenu(ctx, &system.UpdateMenuReq{
		Id:        req.GetID(),
		Name:      req.GetName(),
		ParentId:  req.GetParentId(),
		Level:     req.GetLevel(),
		Path:      req.GetPath(),
		Redirect:  req.GetRedirect(),
		Component: req.GetComponent(),
		MenuType:  req.GetMenuType(),
		Hidden:    req.GetHidden(),
		Sort:      req.GetSort(),
		Status:    req.GetStatus(),
		Url:       req.GetURL(),
		Title:     req.GetTitle(),
		Type:      req.GetType(),
	})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// DeleteMenu .
// @router /service/menu/delete [POST]
func DeleteMenu(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IdReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.DeleteMenu(ctx, &base1.IdReq{Id: req.GetID()})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// GetMenu .
// @router /service/menu [POST]
func GetMenu(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IdReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.GetMenu(ctx, &base1.IdReq{Id: req.GetID()})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// MenuList .
// @router /service/menu/list [POST]
func MenuList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req menu.MenuListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.MenuList(ctx, &system.MenuListReq{
		Page:     req.GetPage(),
		PageSize: req.GetPageSize(),
	})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}

// MenuTree .
// @router /service/menu/tree [POST]
func MenuTree(ctx context.Context, c *app.RequestContext) {
	var err error
	var req menu.MenuListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp, err := client.SystemClient.MenuTree(ctx, &system.MenuListReq{
		Page:     req.GetPage(),
		PageSize: req.GetPageSize(),
	})

	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils2.SendResponse(c, errno.Success, resp, 0, "")
	return
}
