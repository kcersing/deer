// Code generated by hertz generator.

package menu

import (
	"common/pkg/errno"
	utils2 "common/pkg/utils"
	"context"
	base "gen/hertz_gen/base"
	menu "gen/hertz_gen/menu"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateMenu .
// @router /service/menu/create [POST]
func CreateMenu(ctx context.Context, c *app.RequestContext) {
	var err error
	var req menu.CreateMenuReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateMenu .
// @router /service/menu/update [POST]
func UpdateMenu(ctx context.Context, c *app.RequestContext) {
	var err error
	var req menu.UpdateMenuReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteMenu .
// @router /service/menu/delete [POST]
func DeleteMenu(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IdReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetMenu .
// @router /service/menu [POST]
func GetMenu(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IdReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MenuList .
// @router /service/menu/list [POST]
func MenuList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req menu.MenuListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MenuTree .
// @router /service/menu/tree [POST]
func MenuTree(ctx context.Context, c *app.RequestContext) {
	var err error
	var req menu.MenuListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils2.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}
