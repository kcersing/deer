// Code generated by ent, DO NOT EDIT.

package orderevents

import (
	"deer/app/order/biz/dal/mysql/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldUpdatedAt, v))
}

// Delete applies equality check predicate on the "delete" field. It's identical to DeleteEQ.
func Delete(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldDelete, v))
}

// CreatedID applies equality check predicate on the "created_id" field. It's identical to CreatedIDEQ.
func CreatedID(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldCreatedID, v))
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldEventID, v))
}

// AggregateID applies equality check predicate on the "aggregate_id" field. It's identical to AggregateIDEQ.
func AggregateID(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldAggregateID, v))
}

// AggregateType applies equality check predicate on the "aggregate_type" field. It's identical to AggregateTypeEQ.
func AggregateType(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldAggregateType, v))
}

// EventType applies equality check predicate on the "event_type" field. It's identical to EventTypeEQ.
func EventType(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldEventType, v))
}

// EventData applies equality check predicate on the "event_data" field. It's identical to EventDataEQ.
func EventData(v []byte) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldEventData, v))
}

// EventVersion applies equality check predicate on the "event_version" field. It's identical to EventVersionEQ.
func EventVersion(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldEventVersion, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotNull(FieldUpdatedAt))
}

// DeleteEQ applies the EQ predicate on the "delete" field.
func DeleteEQ(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldDelete, v))
}

// DeleteNEQ applies the NEQ predicate on the "delete" field.
func DeleteNEQ(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNEQ(FieldDelete, v))
}

// DeleteIn applies the In predicate on the "delete" field.
func DeleteIn(vs ...int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIn(FieldDelete, vs...))
}

// DeleteNotIn applies the NotIn predicate on the "delete" field.
func DeleteNotIn(vs ...int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotIn(FieldDelete, vs...))
}

// DeleteGT applies the GT predicate on the "delete" field.
func DeleteGT(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGT(FieldDelete, v))
}

// DeleteGTE applies the GTE predicate on the "delete" field.
func DeleteGTE(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGTE(FieldDelete, v))
}

// DeleteLT applies the LT predicate on the "delete" field.
func DeleteLT(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLT(FieldDelete, v))
}

// DeleteLTE applies the LTE predicate on the "delete" field.
func DeleteLTE(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLTE(FieldDelete, v))
}

// DeleteIsNil applies the IsNil predicate on the "delete" field.
func DeleteIsNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIsNull(FieldDelete))
}

// DeleteNotNil applies the NotNil predicate on the "delete" field.
func DeleteNotNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotNull(FieldDelete))
}

// CreatedIDEQ applies the EQ predicate on the "created_id" field.
func CreatedIDEQ(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldCreatedID, v))
}

// CreatedIDNEQ applies the NEQ predicate on the "created_id" field.
func CreatedIDNEQ(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNEQ(FieldCreatedID, v))
}

// CreatedIDIn applies the In predicate on the "created_id" field.
func CreatedIDIn(vs ...int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIn(FieldCreatedID, vs...))
}

// CreatedIDNotIn applies the NotIn predicate on the "created_id" field.
func CreatedIDNotIn(vs ...int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotIn(FieldCreatedID, vs...))
}

// CreatedIDGT applies the GT predicate on the "created_id" field.
func CreatedIDGT(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGT(FieldCreatedID, v))
}

// CreatedIDGTE applies the GTE predicate on the "created_id" field.
func CreatedIDGTE(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGTE(FieldCreatedID, v))
}

// CreatedIDLT applies the LT predicate on the "created_id" field.
func CreatedIDLT(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLT(FieldCreatedID, v))
}

// CreatedIDLTE applies the LTE predicate on the "created_id" field.
func CreatedIDLTE(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLTE(FieldCreatedID, v))
}

// CreatedIDIsNil applies the IsNil predicate on the "created_id" field.
func CreatedIDIsNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIsNull(FieldCreatedID))
}

// CreatedIDNotNil applies the NotNil predicate on the "created_id" field.
func CreatedIDNotNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotNull(FieldCreatedID))
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldEventID, v))
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNEQ(FieldEventID, v))
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIn(FieldEventID, vs...))
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotIn(FieldEventID, vs...))
}

// EventIDGT applies the GT predicate on the "event_id" field.
func EventIDGT(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGT(FieldEventID, v))
}

// EventIDGTE applies the GTE predicate on the "event_id" field.
func EventIDGTE(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGTE(FieldEventID, v))
}

// EventIDLT applies the LT predicate on the "event_id" field.
func EventIDLT(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLT(FieldEventID, v))
}

// EventIDLTE applies the LTE predicate on the "event_id" field.
func EventIDLTE(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLTE(FieldEventID, v))
}

// EventIDContains applies the Contains predicate on the "event_id" field.
func EventIDContains(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldContains(FieldEventID, v))
}

// EventIDHasPrefix applies the HasPrefix predicate on the "event_id" field.
func EventIDHasPrefix(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldHasPrefix(FieldEventID, v))
}

// EventIDHasSuffix applies the HasSuffix predicate on the "event_id" field.
func EventIDHasSuffix(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldHasSuffix(FieldEventID, v))
}

// EventIDIsNil applies the IsNil predicate on the "event_id" field.
func EventIDIsNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIsNull(FieldEventID))
}

// EventIDNotNil applies the NotNil predicate on the "event_id" field.
func EventIDNotNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotNull(FieldEventID))
}

// EventIDEqualFold applies the EqualFold predicate on the "event_id" field.
func EventIDEqualFold(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEqualFold(FieldEventID, v))
}

// EventIDContainsFold applies the ContainsFold predicate on the "event_id" field.
func EventIDContainsFold(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldContainsFold(FieldEventID, v))
}

// AggregateIDEQ applies the EQ predicate on the "aggregate_id" field.
func AggregateIDEQ(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldAggregateID, v))
}

// AggregateIDNEQ applies the NEQ predicate on the "aggregate_id" field.
func AggregateIDNEQ(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNEQ(FieldAggregateID, v))
}

// AggregateIDIn applies the In predicate on the "aggregate_id" field.
func AggregateIDIn(vs ...int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIn(FieldAggregateID, vs...))
}

// AggregateIDNotIn applies the NotIn predicate on the "aggregate_id" field.
func AggregateIDNotIn(vs ...int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotIn(FieldAggregateID, vs...))
}

// AggregateIDIsNil applies the IsNil predicate on the "aggregate_id" field.
func AggregateIDIsNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIsNull(FieldAggregateID))
}

// AggregateIDNotNil applies the NotNil predicate on the "aggregate_id" field.
func AggregateIDNotNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotNull(FieldAggregateID))
}

// AggregateTypeEQ applies the EQ predicate on the "aggregate_type" field.
func AggregateTypeEQ(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldAggregateType, v))
}

// AggregateTypeNEQ applies the NEQ predicate on the "aggregate_type" field.
func AggregateTypeNEQ(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNEQ(FieldAggregateType, v))
}

// AggregateTypeIn applies the In predicate on the "aggregate_type" field.
func AggregateTypeIn(vs ...string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIn(FieldAggregateType, vs...))
}

// AggregateTypeNotIn applies the NotIn predicate on the "aggregate_type" field.
func AggregateTypeNotIn(vs ...string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotIn(FieldAggregateType, vs...))
}

// AggregateTypeGT applies the GT predicate on the "aggregate_type" field.
func AggregateTypeGT(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGT(FieldAggregateType, v))
}

// AggregateTypeGTE applies the GTE predicate on the "aggregate_type" field.
func AggregateTypeGTE(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGTE(FieldAggregateType, v))
}

// AggregateTypeLT applies the LT predicate on the "aggregate_type" field.
func AggregateTypeLT(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLT(FieldAggregateType, v))
}

// AggregateTypeLTE applies the LTE predicate on the "aggregate_type" field.
func AggregateTypeLTE(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLTE(FieldAggregateType, v))
}

// AggregateTypeContains applies the Contains predicate on the "aggregate_type" field.
func AggregateTypeContains(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldContains(FieldAggregateType, v))
}

// AggregateTypeHasPrefix applies the HasPrefix predicate on the "aggregate_type" field.
func AggregateTypeHasPrefix(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldHasPrefix(FieldAggregateType, v))
}

// AggregateTypeHasSuffix applies the HasSuffix predicate on the "aggregate_type" field.
func AggregateTypeHasSuffix(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldHasSuffix(FieldAggregateType, v))
}

// AggregateTypeIsNil applies the IsNil predicate on the "aggregate_type" field.
func AggregateTypeIsNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIsNull(FieldAggregateType))
}

// AggregateTypeNotNil applies the NotNil predicate on the "aggregate_type" field.
func AggregateTypeNotNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotNull(FieldAggregateType))
}

// AggregateTypeEqualFold applies the EqualFold predicate on the "aggregate_type" field.
func AggregateTypeEqualFold(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEqualFold(FieldAggregateType, v))
}

// AggregateTypeContainsFold applies the ContainsFold predicate on the "aggregate_type" field.
func AggregateTypeContainsFold(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldContainsFold(FieldAggregateType, v))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotIn(FieldEventType, vs...))
}

// EventTypeGT applies the GT predicate on the "event_type" field.
func EventTypeGT(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGT(FieldEventType, v))
}

// EventTypeGTE applies the GTE predicate on the "event_type" field.
func EventTypeGTE(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGTE(FieldEventType, v))
}

// EventTypeLT applies the LT predicate on the "event_type" field.
func EventTypeLT(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLT(FieldEventType, v))
}

// EventTypeLTE applies the LTE predicate on the "event_type" field.
func EventTypeLTE(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLTE(FieldEventType, v))
}

// EventTypeContains applies the Contains predicate on the "event_type" field.
func EventTypeContains(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldContains(FieldEventType, v))
}

// EventTypeHasPrefix applies the HasPrefix predicate on the "event_type" field.
func EventTypeHasPrefix(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldHasPrefix(FieldEventType, v))
}

// EventTypeHasSuffix applies the HasSuffix predicate on the "event_type" field.
func EventTypeHasSuffix(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldHasSuffix(FieldEventType, v))
}

// EventTypeIsNil applies the IsNil predicate on the "event_type" field.
func EventTypeIsNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIsNull(FieldEventType))
}

// EventTypeNotNil applies the NotNil predicate on the "event_type" field.
func EventTypeNotNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotNull(FieldEventType))
}

// EventTypeEqualFold applies the EqualFold predicate on the "event_type" field.
func EventTypeEqualFold(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEqualFold(FieldEventType, v))
}

// EventTypeContainsFold applies the ContainsFold predicate on the "event_type" field.
func EventTypeContainsFold(v string) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldContainsFold(FieldEventType, v))
}

// EventDataEQ applies the EQ predicate on the "event_data" field.
func EventDataEQ(v []byte) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldEventData, v))
}

// EventDataNEQ applies the NEQ predicate on the "event_data" field.
func EventDataNEQ(v []byte) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNEQ(FieldEventData, v))
}

// EventDataIn applies the In predicate on the "event_data" field.
func EventDataIn(vs ...[]byte) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIn(FieldEventData, vs...))
}

// EventDataNotIn applies the NotIn predicate on the "event_data" field.
func EventDataNotIn(vs ...[]byte) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotIn(FieldEventData, vs...))
}

// EventDataGT applies the GT predicate on the "event_data" field.
func EventDataGT(v []byte) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGT(FieldEventData, v))
}

// EventDataGTE applies the GTE predicate on the "event_data" field.
func EventDataGTE(v []byte) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGTE(FieldEventData, v))
}

// EventDataLT applies the LT predicate on the "event_data" field.
func EventDataLT(v []byte) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLT(FieldEventData, v))
}

// EventDataLTE applies the LTE predicate on the "event_data" field.
func EventDataLTE(v []byte) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLTE(FieldEventData, v))
}

// EventDataIsNil applies the IsNil predicate on the "event_data" field.
func EventDataIsNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIsNull(FieldEventData))
}

// EventDataNotNil applies the NotNil predicate on the "event_data" field.
func EventDataNotNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotNull(FieldEventData))
}

// EventVersionEQ applies the EQ predicate on the "event_version" field.
func EventVersionEQ(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldEQ(FieldEventVersion, v))
}

// EventVersionNEQ applies the NEQ predicate on the "event_version" field.
func EventVersionNEQ(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNEQ(FieldEventVersion, v))
}

// EventVersionIn applies the In predicate on the "event_version" field.
func EventVersionIn(vs ...int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIn(FieldEventVersion, vs...))
}

// EventVersionNotIn applies the NotIn predicate on the "event_version" field.
func EventVersionNotIn(vs ...int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotIn(FieldEventVersion, vs...))
}

// EventVersionGT applies the GT predicate on the "event_version" field.
func EventVersionGT(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGT(FieldEventVersion, v))
}

// EventVersionGTE applies the GTE predicate on the "event_version" field.
func EventVersionGTE(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldGTE(FieldEventVersion, v))
}

// EventVersionLT applies the LT predicate on the "event_version" field.
func EventVersionLT(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLT(FieldEventVersion, v))
}

// EventVersionLTE applies the LTE predicate on the "event_version" field.
func EventVersionLTE(v int64) predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldLTE(FieldEventVersion, v))
}

// EventVersionIsNil applies the IsNil predicate on the "event_version" field.
func EventVersionIsNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldIsNull(FieldEventVersion))
}

// EventVersionNotNil applies the NotNil predicate on the "event_version" field.
func EventVersionNotNil() predicate.OrderEvents {
	return predicate.OrderEvents(sql.FieldNotNull(FieldEventVersion))
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.OrderEvents {
	return predicate.OrderEvents(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.Order) predicate.OrderEvents {
	return predicate.OrderEvents(func(s *sql.Selector) {
		step := newOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderEvents) predicate.OrderEvents {
	return predicate.OrderEvents(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderEvents) predicate.OrderEvents {
	return predicate.OrderEvents(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderEvents) predicate.OrderEvents {
	return predicate.OrderEvents(sql.NotPredicates(p))
}
