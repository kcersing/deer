// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"deer/app/order/biz/dal/mysql/ent/order"
	"deer/app/order/biz/dal/mysql/ent/orderrefund"
	"deer/app/order/biz/dal/mysql/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderRefundUpdate is the builder for updating OrderRefund entities.
type OrderRefundUpdate struct {
	config
	hooks    []Hook
	mutation *OrderRefundMutation
}

// Where appends a list predicates to the OrderRefundUpdate builder.
func (_u *OrderRefundUpdate) Where(ps ...predicate.OrderRefund) *OrderRefundUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrderRefundUpdate) SetUpdatedAt(v time.Time) *OrderRefundUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrderRefundUpdate) ClearUpdatedAt() *OrderRefundUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *OrderRefundUpdate) SetDelete(v int64) *OrderRefundUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *OrderRefundUpdate) SetNillableDelete(v *int64) *OrderRefundUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *OrderRefundUpdate) AddDelete(v int64) *OrderRefundUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *OrderRefundUpdate) ClearDelete() *OrderRefundUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *OrderRefundUpdate) SetCreatedID(v int64) *OrderRefundUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *OrderRefundUpdate) SetNillableCreatedID(v *int64) *OrderRefundUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *OrderRefundUpdate) AddCreatedID(v int64) *OrderRefundUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *OrderRefundUpdate) ClearCreatedID() *OrderRefundUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetOrderID sets the "order_id" field.
func (_u *OrderRefundUpdate) SetOrderID(v int64) *OrderRefundUpdate {
	_u.mutation.SetOrderID(v)
	return _u
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (_u *OrderRefundUpdate) SetNillableOrderID(v *int64) *OrderRefundUpdate {
	if v != nil {
		_u.SetOrderID(*v)
	}
	return _u
}

// ClearOrderID clears the value of the "order_id" field.
func (_u *OrderRefundUpdate) ClearOrderID() *OrderRefundUpdate {
	_u.mutation.ClearOrderID()
	return _u
}

// SetRefundAt sets the "refund_at" field.
func (_u *OrderRefundUpdate) SetRefundAt(v time.Time) *OrderRefundUpdate {
	_u.mutation.SetRefundAt(v)
	return _u
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (_u *OrderRefundUpdate) SetNillableRefundAt(v *time.Time) *OrderRefundUpdate {
	if v != nil {
		_u.SetRefundAt(*v)
	}
	return _u
}

// ClearRefundAt clears the value of the "refund_at" field.
func (_u *OrderRefundUpdate) ClearRefundAt() *OrderRefundUpdate {
	_u.mutation.ClearRefundAt()
	return _u
}

// SetRefund sets the "refund" field.
func (_u *OrderRefundUpdate) SetRefund(v float64) *OrderRefundUpdate {
	_u.mutation.ResetRefund()
	_u.mutation.SetRefund(v)
	return _u
}

// SetNillableRefund sets the "refund" field if the given value is not nil.
func (_u *OrderRefundUpdate) SetNillableRefund(v *float64) *OrderRefundUpdate {
	if v != nil {
		_u.SetRefund(*v)
	}
	return _u
}

// AddRefund adds value to the "refund" field.
func (_u *OrderRefundUpdate) AddRefund(v float64) *OrderRefundUpdate {
	_u.mutation.AddRefund(v)
	return _u
}

// ClearRefund clears the value of the "refund" field.
func (_u *OrderRefundUpdate) ClearRefund() *OrderRefundUpdate {
	_u.mutation.ClearRefund()
	return _u
}

// SetRefundNature sets the "refund_nature" field.
func (_u *OrderRefundUpdate) SetRefundNature(v string) *OrderRefundUpdate {
	_u.mutation.SetRefundNature(v)
	return _u
}

// SetNillableRefundNature sets the "refund_nature" field if the given value is not nil.
func (_u *OrderRefundUpdate) SetNillableRefundNature(v *string) *OrderRefundUpdate {
	if v != nil {
		_u.SetRefundNature(*v)
	}
	return _u
}

// ClearRefundNature clears the value of the "refund_nature" field.
func (_u *OrderRefundUpdate) ClearRefundNature() *OrderRefundUpdate {
	_u.mutation.ClearRefundNature()
	return _u
}

// SetOrder sets the "order" edge to the Order entity.
func (_u *OrderRefundUpdate) SetOrder(v *Order) *OrderRefundUpdate {
	return _u.SetOrderID(v.ID)
}

// Mutation returns the OrderRefundMutation object of the builder.
func (_u *OrderRefundUpdate) Mutation() *OrderRefundMutation {
	return _u.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (_u *OrderRefundUpdate) ClearOrder() *OrderRefundUpdate {
	_u.mutation.ClearOrder()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OrderRefundUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrderRefundUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OrderRefundUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrderRefundUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrderRefundUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := orderrefund.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *OrderRefundUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderrefund.Table, orderrefund.Columns, sqlgraph.NewFieldSpec(orderrefund.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(orderrefund.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(orderrefund.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(orderrefund.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(orderrefund.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(orderrefund.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(orderrefund.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(orderrefund.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(orderrefund.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(orderrefund.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.RefundAt(); ok {
		_spec.SetField(orderrefund.FieldRefundAt, field.TypeTime, value)
	}
	if _u.mutation.RefundAtCleared() {
		_spec.ClearField(orderrefund.FieldRefundAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Refund(); ok {
		_spec.SetField(orderrefund.FieldRefund, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedRefund(); ok {
		_spec.AddField(orderrefund.FieldRefund, field.TypeFloat64, value)
	}
	if _u.mutation.RefundCleared() {
		_spec.ClearField(orderrefund.FieldRefund, field.TypeFloat64)
	}
	if value, ok := _u.mutation.RefundNature(); ok {
		_spec.SetField(orderrefund.FieldRefundNature, field.TypeString, value)
	}
	if _u.mutation.RefundNatureCleared() {
		_spec.ClearField(orderrefund.FieldRefundNature, field.TypeString)
	}
	if _u.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrefund.OrderTable,
			Columns: []string{orderrefund.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrefund.OrderTable,
			Columns: []string{orderrefund.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderrefund.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OrderRefundUpdateOne is the builder for updating a single OrderRefund entity.
type OrderRefundUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderRefundMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrderRefundUpdateOne) SetUpdatedAt(v time.Time) *OrderRefundUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrderRefundUpdateOne) ClearUpdatedAt() *OrderRefundUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *OrderRefundUpdateOne) SetDelete(v int64) *OrderRefundUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *OrderRefundUpdateOne) SetNillableDelete(v *int64) *OrderRefundUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *OrderRefundUpdateOne) AddDelete(v int64) *OrderRefundUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *OrderRefundUpdateOne) ClearDelete() *OrderRefundUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *OrderRefundUpdateOne) SetCreatedID(v int64) *OrderRefundUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *OrderRefundUpdateOne) SetNillableCreatedID(v *int64) *OrderRefundUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *OrderRefundUpdateOne) AddCreatedID(v int64) *OrderRefundUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *OrderRefundUpdateOne) ClearCreatedID() *OrderRefundUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetOrderID sets the "order_id" field.
func (_u *OrderRefundUpdateOne) SetOrderID(v int64) *OrderRefundUpdateOne {
	_u.mutation.SetOrderID(v)
	return _u
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (_u *OrderRefundUpdateOne) SetNillableOrderID(v *int64) *OrderRefundUpdateOne {
	if v != nil {
		_u.SetOrderID(*v)
	}
	return _u
}

// ClearOrderID clears the value of the "order_id" field.
func (_u *OrderRefundUpdateOne) ClearOrderID() *OrderRefundUpdateOne {
	_u.mutation.ClearOrderID()
	return _u
}

// SetRefundAt sets the "refund_at" field.
func (_u *OrderRefundUpdateOne) SetRefundAt(v time.Time) *OrderRefundUpdateOne {
	_u.mutation.SetRefundAt(v)
	return _u
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (_u *OrderRefundUpdateOne) SetNillableRefundAt(v *time.Time) *OrderRefundUpdateOne {
	if v != nil {
		_u.SetRefundAt(*v)
	}
	return _u
}

// ClearRefundAt clears the value of the "refund_at" field.
func (_u *OrderRefundUpdateOne) ClearRefundAt() *OrderRefundUpdateOne {
	_u.mutation.ClearRefundAt()
	return _u
}

// SetRefund sets the "refund" field.
func (_u *OrderRefundUpdateOne) SetRefund(v float64) *OrderRefundUpdateOne {
	_u.mutation.ResetRefund()
	_u.mutation.SetRefund(v)
	return _u
}

// SetNillableRefund sets the "refund" field if the given value is not nil.
func (_u *OrderRefundUpdateOne) SetNillableRefund(v *float64) *OrderRefundUpdateOne {
	if v != nil {
		_u.SetRefund(*v)
	}
	return _u
}

// AddRefund adds value to the "refund" field.
func (_u *OrderRefundUpdateOne) AddRefund(v float64) *OrderRefundUpdateOne {
	_u.mutation.AddRefund(v)
	return _u
}

// ClearRefund clears the value of the "refund" field.
func (_u *OrderRefundUpdateOne) ClearRefund() *OrderRefundUpdateOne {
	_u.mutation.ClearRefund()
	return _u
}

// SetRefundNature sets the "refund_nature" field.
func (_u *OrderRefundUpdateOne) SetRefundNature(v string) *OrderRefundUpdateOne {
	_u.mutation.SetRefundNature(v)
	return _u
}

// SetNillableRefundNature sets the "refund_nature" field if the given value is not nil.
func (_u *OrderRefundUpdateOne) SetNillableRefundNature(v *string) *OrderRefundUpdateOne {
	if v != nil {
		_u.SetRefundNature(*v)
	}
	return _u
}

// ClearRefundNature clears the value of the "refund_nature" field.
func (_u *OrderRefundUpdateOne) ClearRefundNature() *OrderRefundUpdateOne {
	_u.mutation.ClearRefundNature()
	return _u
}

// SetOrder sets the "order" edge to the Order entity.
func (_u *OrderRefundUpdateOne) SetOrder(v *Order) *OrderRefundUpdateOne {
	return _u.SetOrderID(v.ID)
}

// Mutation returns the OrderRefundMutation object of the builder.
func (_u *OrderRefundUpdateOne) Mutation() *OrderRefundMutation {
	return _u.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (_u *OrderRefundUpdateOne) ClearOrder() *OrderRefundUpdateOne {
	_u.mutation.ClearOrder()
	return _u
}

// Where appends a list predicates to the OrderRefundUpdate builder.
func (_u *OrderRefundUpdateOne) Where(ps ...predicate.OrderRefund) *OrderRefundUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OrderRefundUpdateOne) Select(field string, fields ...string) *OrderRefundUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OrderRefund entity.
func (_u *OrderRefundUpdateOne) Save(ctx context.Context) (*OrderRefund, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrderRefundUpdateOne) SaveX(ctx context.Context) *OrderRefund {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OrderRefundUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrderRefundUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrderRefundUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := orderrefund.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *OrderRefundUpdateOne) sqlSave(ctx context.Context) (_node *OrderRefund, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderrefund.Table, orderrefund.Columns, sqlgraph.NewFieldSpec(orderrefund.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderRefund.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderrefund.FieldID)
		for _, f := range fields {
			if !orderrefund.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderrefund.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(orderrefund.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(orderrefund.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(orderrefund.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(orderrefund.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(orderrefund.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(orderrefund.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(orderrefund.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(orderrefund.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(orderrefund.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.RefundAt(); ok {
		_spec.SetField(orderrefund.FieldRefundAt, field.TypeTime, value)
	}
	if _u.mutation.RefundAtCleared() {
		_spec.ClearField(orderrefund.FieldRefundAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Refund(); ok {
		_spec.SetField(orderrefund.FieldRefund, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedRefund(); ok {
		_spec.AddField(orderrefund.FieldRefund, field.TypeFloat64, value)
	}
	if _u.mutation.RefundCleared() {
		_spec.ClearField(orderrefund.FieldRefund, field.TypeFloat64)
	}
	if value, ok := _u.mutation.RefundNature(); ok {
		_spec.SetField(orderrefund.FieldRefundNature, field.TypeString, value)
	}
	if _u.mutation.RefundNatureCleared() {
		_spec.ClearField(orderrefund.FieldRefundNature, field.TypeString)
	}
	if _u.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrefund.OrderTable,
			Columns: []string{orderrefund.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrefund.OrderTable,
			Columns: []string{orderrefund.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderRefund{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderrefund.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
