// Code generated by ent, DO NOT EDIT.

package ent

import (
	"deer/app/order/biz/dal/mysql/ent/ordereventsubscriptions"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OrderEventSubscriptions is the model entity for the OrderEventSubscriptions schema.
type OrderEventSubscriptions struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除 0:未删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 订阅的事件类型
	EventType string `json:"event_type,omitempty"`
	// 最后处理的事件ID
	LastProcessedID string `json:"last_processed_id,omitempty"`
	// 最后处理的事件版本
	LastProcessedVersion int64 `json:"last_processed_version,omitempty"`
	// 最后处理时间
	LastProcessedAt time.Time `json:"last_processed_at,omitempty"`
	// 是否活跃
	IsActive int64 `json:"is_active,omitempty"`
	// 处理错误次数
	ErrorCount int64 `json:"error_count,omitempty"`
	// 最后错误信息
	LastError    string `json:"last_error,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderEventSubscriptions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ordereventsubscriptions.FieldID, ordereventsubscriptions.FieldDelete, ordereventsubscriptions.FieldCreatedID, ordereventsubscriptions.FieldLastProcessedVersion, ordereventsubscriptions.FieldIsActive, ordereventsubscriptions.FieldErrorCount:
			values[i] = new(sql.NullInt64)
		case ordereventsubscriptions.FieldName, ordereventsubscriptions.FieldEventType, ordereventsubscriptions.FieldLastProcessedID, ordereventsubscriptions.FieldLastError:
			values[i] = new(sql.NullString)
		case ordereventsubscriptions.FieldCreatedAt, ordereventsubscriptions.FieldUpdatedAt, ordereventsubscriptions.FieldLastProcessedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderEventSubscriptions fields.
func (_m *OrderEventSubscriptions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ordereventsubscriptions.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int64(value.Int64)
		case ordereventsubscriptions.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case ordereventsubscriptions.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case ordereventsubscriptions.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				_m.Delete = value.Int64
			}
		case ordereventsubscriptions.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				_m.CreatedID = value.Int64
			}
		case ordereventsubscriptions.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case ordereventsubscriptions.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				_m.EventType = value.String
			}
		case ordereventsubscriptions.FieldLastProcessedID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_processed_id", values[i])
			} else if value.Valid {
				_m.LastProcessedID = value.String
			}
		case ordereventsubscriptions.FieldLastProcessedVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_processed_version", values[i])
			} else if value.Valid {
				_m.LastProcessedVersion = value.Int64
			}
		case ordereventsubscriptions.FieldLastProcessedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_processed_at", values[i])
			} else if value.Valid {
				_m.LastProcessedAt = value.Time
			}
		case ordereventsubscriptions.FieldIsActive:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				_m.IsActive = value.Int64
			}
		case ordereventsubscriptions.FieldErrorCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field error_count", values[i])
			} else if value.Valid {
				_m.ErrorCount = value.Int64
			}
		case ordereventsubscriptions.FieldLastError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_error", values[i])
			} else if value.Valid {
				_m.LastError = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderEventSubscriptions.
// This includes values selected through modifiers, order, etc.
func (_m *OrderEventSubscriptions) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this OrderEventSubscriptions.
// Note that you need to call OrderEventSubscriptions.Unwrap() before calling this method if this OrderEventSubscriptions
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *OrderEventSubscriptions) Update() *OrderEventSubscriptionsUpdateOne {
	return NewOrderEventSubscriptionsClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the OrderEventSubscriptions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *OrderEventSubscriptions) Unwrap() *OrderEventSubscriptions {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderEventSubscriptions is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *OrderEventSubscriptions) String() string {
	var builder strings.Builder
	builder.WriteString("OrderEventSubscriptions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", _m.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("event_type=")
	builder.WriteString(_m.EventType)
	builder.WriteString(", ")
	builder.WriteString("last_processed_id=")
	builder.WriteString(_m.LastProcessedID)
	builder.WriteString(", ")
	builder.WriteString("last_processed_version=")
	builder.WriteString(fmt.Sprintf("%v", _m.LastProcessedVersion))
	builder.WriteString(", ")
	builder.WriteString("last_processed_at=")
	builder.WriteString(_m.LastProcessedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsActive))
	builder.WriteString(", ")
	builder.WriteString("error_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.ErrorCount))
	builder.WriteString(", ")
	builder.WriteString("last_error=")
	builder.WriteString(_m.LastError)
	builder.WriteByte(')')
	return builder.String()
}

// OrderEventSubscriptionsSlice is a parsable slice of OrderEventSubscriptions.
type OrderEventSubscriptionsSlice []*OrderEventSubscriptions
