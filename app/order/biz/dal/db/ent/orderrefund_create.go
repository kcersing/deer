// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"deer/app/order/biz/dal/mysql/ent/order"
	"deer/app/order/biz/dal/mysql/ent/orderrefund"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderRefundCreate is the builder for creating a OrderRefund entity.
type OrderRefundCreate struct {
	config
	mutation *OrderRefundMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *OrderRefundCreate) SetCreatedAt(v time.Time) *OrderRefundCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *OrderRefundCreate) SetNillableCreatedAt(v *time.Time) *OrderRefundCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *OrderRefundCreate) SetUpdatedAt(v time.Time) *OrderRefundCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *OrderRefundCreate) SetNillableUpdatedAt(v *time.Time) *OrderRefundCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDelete sets the "delete" field.
func (_c *OrderRefundCreate) SetDelete(v int64) *OrderRefundCreate {
	_c.mutation.SetDelete(v)
	return _c
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_c *OrderRefundCreate) SetNillableDelete(v *int64) *OrderRefundCreate {
	if v != nil {
		_c.SetDelete(*v)
	}
	return _c
}

// SetCreatedID sets the "created_id" field.
func (_c *OrderRefundCreate) SetCreatedID(v int64) *OrderRefundCreate {
	_c.mutation.SetCreatedID(v)
	return _c
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_c *OrderRefundCreate) SetNillableCreatedID(v *int64) *OrderRefundCreate {
	if v != nil {
		_c.SetCreatedID(*v)
	}
	return _c
}

// SetOrderID sets the "order_id" field.
func (_c *OrderRefundCreate) SetOrderID(v int64) *OrderRefundCreate {
	_c.mutation.SetOrderID(v)
	return _c
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (_c *OrderRefundCreate) SetNillableOrderID(v *int64) *OrderRefundCreate {
	if v != nil {
		_c.SetOrderID(*v)
	}
	return _c
}

// SetRefundAt sets the "refund_at" field.
func (_c *OrderRefundCreate) SetRefundAt(v time.Time) *OrderRefundCreate {
	_c.mutation.SetRefundAt(v)
	return _c
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (_c *OrderRefundCreate) SetNillableRefundAt(v *time.Time) *OrderRefundCreate {
	if v != nil {
		_c.SetRefundAt(*v)
	}
	return _c
}

// SetRefund sets the "refund" field.
func (_c *OrderRefundCreate) SetRefund(v float64) *OrderRefundCreate {
	_c.mutation.SetRefund(v)
	return _c
}

// SetNillableRefund sets the "refund" field if the given value is not nil.
func (_c *OrderRefundCreate) SetNillableRefund(v *float64) *OrderRefundCreate {
	if v != nil {
		_c.SetRefund(*v)
	}
	return _c
}

// SetRefundNature sets the "refund_nature" field.
func (_c *OrderRefundCreate) SetRefundNature(v string) *OrderRefundCreate {
	_c.mutation.SetRefundNature(v)
	return _c
}

// SetNillableRefundNature sets the "refund_nature" field if the given value is not nil.
func (_c *OrderRefundCreate) SetNillableRefundNature(v *string) *OrderRefundCreate {
	if v != nil {
		_c.SetRefundNature(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *OrderRefundCreate) SetID(v int64) *OrderRefundCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetOrder sets the "order" edge to the Order entity.
func (_c *OrderRefundCreate) SetOrder(v *Order) *OrderRefundCreate {
	return _c.SetOrderID(v.ID)
}

// Mutation returns the OrderRefundMutation object of the builder.
func (_c *OrderRefundCreate) Mutation() *OrderRefundMutation {
	return _c.mutation
}

// Save creates the OrderRefund in the database.
func (_c *OrderRefundCreate) Save(ctx context.Context) (*OrderRefund, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OrderRefundCreate) SaveX(ctx context.Context) *OrderRefund {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrderRefundCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrderRefundCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OrderRefundCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := orderrefund.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := orderrefund.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Delete(); !ok {
		v := orderrefund.DefaultDelete
		_c.mutation.SetDelete(v)
	}
	if _, ok := _c.mutation.CreatedID(); !ok {
		v := orderrefund.DefaultCreatedID
		_c.mutation.SetCreatedID(v)
	}
	if _, ok := _c.mutation.Refund(); !ok {
		v := orderrefund.DefaultRefund
		_c.mutation.SetRefund(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *OrderRefundCreate) check() error {
	return nil
}

func (_c *OrderRefundCreate) sqlSave(ctx context.Context) (*OrderRefund, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OrderRefundCreate) createSpec() (*OrderRefund, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderRefund{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(orderrefund.Table, sqlgraph.NewFieldSpec(orderrefund.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(orderrefund.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(orderrefund.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Delete(); ok {
		_spec.SetField(orderrefund.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := _c.mutation.CreatedID(); ok {
		_spec.SetField(orderrefund.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := _c.mutation.RefundAt(); ok {
		_spec.SetField(orderrefund.FieldRefundAt, field.TypeTime, value)
		_node.RefundAt = value
	}
	if value, ok := _c.mutation.Refund(); ok {
		_spec.SetField(orderrefund.FieldRefund, field.TypeFloat64, value)
		_node.Refund = value
	}
	if value, ok := _c.mutation.RefundNature(); ok {
		_spec.SetField(orderrefund.FieldRefundNature, field.TypeString, value)
		_node.RefundNature = value
	}
	if nodes := _c.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrefund.OrderTable,
			Columns: []string{orderrefund.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderRefund.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderRefundUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *OrderRefundCreate) OnConflict(opts ...sql.ConflictOption) *OrderRefundUpsertOne {
	_c.conflict = opts
	return &OrderRefundUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderRefund.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *OrderRefundCreate) OnConflictColumns(columns ...string) *OrderRefundUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &OrderRefundUpsertOne{
		create: _c,
	}
}

type (
	// OrderRefundUpsertOne is the builder for "upsert"-ing
	//  one OrderRefund node.
	OrderRefundUpsertOne struct {
		create *OrderRefundCreate
	}

	// OrderRefundUpsert is the "OnConflict" setter.
	OrderRefundUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderRefundUpsert) SetUpdatedAt(v time.Time) *OrderRefundUpsert {
	u.Set(orderrefund.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderRefundUpsert) UpdateUpdatedAt() *OrderRefundUpsert {
	u.SetExcluded(orderrefund.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderRefundUpsert) ClearUpdatedAt() *OrderRefundUpsert {
	u.SetNull(orderrefund.FieldUpdatedAt)
	return u
}

// SetDelete sets the "delete" field.
func (u *OrderRefundUpsert) SetDelete(v int64) *OrderRefundUpsert {
	u.Set(orderrefund.FieldDelete, v)
	return u
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderRefundUpsert) UpdateDelete() *OrderRefundUpsert {
	u.SetExcluded(orderrefund.FieldDelete)
	return u
}

// AddDelete adds v to the "delete" field.
func (u *OrderRefundUpsert) AddDelete(v int64) *OrderRefundUpsert {
	u.Add(orderrefund.FieldDelete, v)
	return u
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderRefundUpsert) ClearDelete() *OrderRefundUpsert {
	u.SetNull(orderrefund.FieldDelete)
	return u
}

// SetCreatedID sets the "created_id" field.
func (u *OrderRefundUpsert) SetCreatedID(v int64) *OrderRefundUpsert {
	u.Set(orderrefund.FieldCreatedID, v)
	return u
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderRefundUpsert) UpdateCreatedID() *OrderRefundUpsert {
	u.SetExcluded(orderrefund.FieldCreatedID)
	return u
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderRefundUpsert) AddCreatedID(v int64) *OrderRefundUpsert {
	u.Add(orderrefund.FieldCreatedID, v)
	return u
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderRefundUpsert) ClearCreatedID() *OrderRefundUpsert {
	u.SetNull(orderrefund.FieldCreatedID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *OrderRefundUpsert) SetOrderID(v int64) *OrderRefundUpsert {
	u.Set(orderrefund.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderRefundUpsert) UpdateOrderID() *OrderRefundUpsert {
	u.SetExcluded(orderrefund.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderRefundUpsert) ClearOrderID() *OrderRefundUpsert {
	u.SetNull(orderrefund.FieldOrderID)
	return u
}

// SetRefundAt sets the "refund_at" field.
func (u *OrderRefundUpsert) SetRefundAt(v time.Time) *OrderRefundUpsert {
	u.Set(orderrefund.FieldRefundAt, v)
	return u
}

// UpdateRefundAt sets the "refund_at" field to the value that was provided on create.
func (u *OrderRefundUpsert) UpdateRefundAt() *OrderRefundUpsert {
	u.SetExcluded(orderrefund.FieldRefundAt)
	return u
}

// ClearRefundAt clears the value of the "refund_at" field.
func (u *OrderRefundUpsert) ClearRefundAt() *OrderRefundUpsert {
	u.SetNull(orderrefund.FieldRefundAt)
	return u
}

// SetRefund sets the "refund" field.
func (u *OrderRefundUpsert) SetRefund(v float64) *OrderRefundUpsert {
	u.Set(orderrefund.FieldRefund, v)
	return u
}

// UpdateRefund sets the "refund" field to the value that was provided on create.
func (u *OrderRefundUpsert) UpdateRefund() *OrderRefundUpsert {
	u.SetExcluded(orderrefund.FieldRefund)
	return u
}

// AddRefund adds v to the "refund" field.
func (u *OrderRefundUpsert) AddRefund(v float64) *OrderRefundUpsert {
	u.Add(orderrefund.FieldRefund, v)
	return u
}

// ClearRefund clears the value of the "refund" field.
func (u *OrderRefundUpsert) ClearRefund() *OrderRefundUpsert {
	u.SetNull(orderrefund.FieldRefund)
	return u
}

// SetRefundNature sets the "refund_nature" field.
func (u *OrderRefundUpsert) SetRefundNature(v string) *OrderRefundUpsert {
	u.Set(orderrefund.FieldRefundNature, v)
	return u
}

// UpdateRefundNature sets the "refund_nature" field to the value that was provided on create.
func (u *OrderRefundUpsert) UpdateRefundNature() *OrderRefundUpsert {
	u.SetExcluded(orderrefund.FieldRefundNature)
	return u
}

// ClearRefundNature clears the value of the "refund_nature" field.
func (u *OrderRefundUpsert) ClearRefundNature() *OrderRefundUpsert {
	u.SetNull(orderrefund.FieldRefundNature)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderRefund.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderrefund.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderRefundUpsertOne) UpdateNewValues() *OrderRefundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orderrefund.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(orderrefund.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderRefund.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderRefundUpsertOne) Ignore() *OrderRefundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderRefundUpsertOne) DoNothing() *OrderRefundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderRefundCreate.OnConflict
// documentation for more info.
func (u *OrderRefundUpsertOne) Update(set func(*OrderRefundUpsert)) *OrderRefundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderRefundUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderRefundUpsertOne) SetUpdatedAt(v time.Time) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderRefundUpsertOne) UpdateUpdatedAt() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderRefundUpsertOne) ClearUpdatedAt() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDelete sets the "delete" field.
func (u *OrderRefundUpsertOne) SetDelete(v int64) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetDelete(v)
	})
}

// AddDelete adds v to the "delete" field.
func (u *OrderRefundUpsertOne) AddDelete(v int64) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.AddDelete(v)
	})
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderRefundUpsertOne) UpdateDelete() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateDelete()
	})
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderRefundUpsertOne) ClearDelete() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearDelete()
	})
}

// SetCreatedID sets the "created_id" field.
func (u *OrderRefundUpsertOne) SetCreatedID(v int64) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetCreatedID(v)
	})
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderRefundUpsertOne) AddCreatedID(v int64) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.AddCreatedID(v)
	})
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderRefundUpsertOne) UpdateCreatedID() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateCreatedID()
	})
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderRefundUpsertOne) ClearCreatedID() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearCreatedID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderRefundUpsertOne) SetOrderID(v int64) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderRefundUpsertOne) UpdateOrderID() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderRefundUpsertOne) ClearOrderID() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearOrderID()
	})
}

// SetRefundAt sets the "refund_at" field.
func (u *OrderRefundUpsertOne) SetRefundAt(v time.Time) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetRefundAt(v)
	})
}

// UpdateRefundAt sets the "refund_at" field to the value that was provided on create.
func (u *OrderRefundUpsertOne) UpdateRefundAt() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateRefundAt()
	})
}

// ClearRefundAt clears the value of the "refund_at" field.
func (u *OrderRefundUpsertOne) ClearRefundAt() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearRefundAt()
	})
}

// SetRefund sets the "refund" field.
func (u *OrderRefundUpsertOne) SetRefund(v float64) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetRefund(v)
	})
}

// AddRefund adds v to the "refund" field.
func (u *OrderRefundUpsertOne) AddRefund(v float64) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.AddRefund(v)
	})
}

// UpdateRefund sets the "refund" field to the value that was provided on create.
func (u *OrderRefundUpsertOne) UpdateRefund() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateRefund()
	})
}

// ClearRefund clears the value of the "refund" field.
func (u *OrderRefundUpsertOne) ClearRefund() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearRefund()
	})
}

// SetRefundNature sets the "refund_nature" field.
func (u *OrderRefundUpsertOne) SetRefundNature(v string) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetRefundNature(v)
	})
}

// UpdateRefundNature sets the "refund_nature" field to the value that was provided on create.
func (u *OrderRefundUpsertOne) UpdateRefundNature() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateRefundNature()
	})
}

// ClearRefundNature clears the value of the "refund_nature" field.
func (u *OrderRefundUpsertOne) ClearRefundNature() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearRefundNature()
	})
}

// Exec executes the query.
func (u *OrderRefundUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderRefundCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderRefundUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderRefundUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderRefundUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderRefundCreateBulk is the builder for creating many OrderRefund entities in bulk.
type OrderRefundCreateBulk struct {
	config
	err      error
	builders []*OrderRefundCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderRefund entities in the database.
func (_c *OrderRefundCreateBulk) Save(ctx context.Context) ([]*OrderRefund, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*OrderRefund, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderRefundMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OrderRefundCreateBulk) SaveX(ctx context.Context) []*OrderRefund {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrderRefundCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrderRefundCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderRefund.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderRefundUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *OrderRefundCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderRefundUpsertBulk {
	_c.conflict = opts
	return &OrderRefundUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderRefund.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *OrderRefundCreateBulk) OnConflictColumns(columns ...string) *OrderRefundUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &OrderRefundUpsertBulk{
		create: _c,
	}
}

// OrderRefundUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderRefund nodes.
type OrderRefundUpsertBulk struct {
	create *OrderRefundCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderRefund.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderrefund.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderRefundUpsertBulk) UpdateNewValues() *OrderRefundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orderrefund.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(orderrefund.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderRefund.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderRefundUpsertBulk) Ignore() *OrderRefundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderRefundUpsertBulk) DoNothing() *OrderRefundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderRefundCreateBulk.OnConflict
// documentation for more info.
func (u *OrderRefundUpsertBulk) Update(set func(*OrderRefundUpsert)) *OrderRefundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderRefundUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderRefundUpsertBulk) SetUpdatedAt(v time.Time) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderRefundUpsertBulk) UpdateUpdatedAt() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderRefundUpsertBulk) ClearUpdatedAt() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDelete sets the "delete" field.
func (u *OrderRefundUpsertBulk) SetDelete(v int64) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetDelete(v)
	})
}

// AddDelete adds v to the "delete" field.
func (u *OrderRefundUpsertBulk) AddDelete(v int64) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.AddDelete(v)
	})
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderRefundUpsertBulk) UpdateDelete() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateDelete()
	})
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderRefundUpsertBulk) ClearDelete() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearDelete()
	})
}

// SetCreatedID sets the "created_id" field.
func (u *OrderRefundUpsertBulk) SetCreatedID(v int64) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetCreatedID(v)
	})
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderRefundUpsertBulk) AddCreatedID(v int64) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.AddCreatedID(v)
	})
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderRefundUpsertBulk) UpdateCreatedID() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateCreatedID()
	})
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderRefundUpsertBulk) ClearCreatedID() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearCreatedID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderRefundUpsertBulk) SetOrderID(v int64) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderRefundUpsertBulk) UpdateOrderID() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderRefundUpsertBulk) ClearOrderID() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearOrderID()
	})
}

// SetRefundAt sets the "refund_at" field.
func (u *OrderRefundUpsertBulk) SetRefundAt(v time.Time) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetRefundAt(v)
	})
}

// UpdateRefundAt sets the "refund_at" field to the value that was provided on create.
func (u *OrderRefundUpsertBulk) UpdateRefundAt() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateRefundAt()
	})
}

// ClearRefundAt clears the value of the "refund_at" field.
func (u *OrderRefundUpsertBulk) ClearRefundAt() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearRefundAt()
	})
}

// SetRefund sets the "refund" field.
func (u *OrderRefundUpsertBulk) SetRefund(v float64) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetRefund(v)
	})
}

// AddRefund adds v to the "refund" field.
func (u *OrderRefundUpsertBulk) AddRefund(v float64) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.AddRefund(v)
	})
}

// UpdateRefund sets the "refund" field to the value that was provided on create.
func (u *OrderRefundUpsertBulk) UpdateRefund() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateRefund()
	})
}

// ClearRefund clears the value of the "refund" field.
func (u *OrderRefundUpsertBulk) ClearRefund() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearRefund()
	})
}

// SetRefundNature sets the "refund_nature" field.
func (u *OrderRefundUpsertBulk) SetRefundNature(v string) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetRefundNature(v)
	})
}

// UpdateRefundNature sets the "refund_nature" field to the value that was provided on create.
func (u *OrderRefundUpsertBulk) UpdateRefundNature() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateRefundNature()
	})
}

// ClearRefundNature clears the value of the "refund_nature" field.
func (u *OrderRefundUpsertBulk) ClearRefundNature() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearRefundNature()
	})
}

// Exec executes the query.
func (u *OrderRefundUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderRefundCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderRefundCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderRefundUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
