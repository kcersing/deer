// Code generated by ent, DO NOT EDIT.

package ent

import (
	"deer/app/order/biz/dal/mysql/ent/order"
	"deer/app/order/biz/dal/mysql/ent/orderstatushistory"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OrderStatusHistory is the model entity for the OrderStatusHistory schema.
type OrderStatusHistory struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除 0:未删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// 订单ID
	OrderID int64 `json:"order_id,omitempty"`
	// 旧状态
	OldStatus int64 `json:"old_status,omitempty"`
	// 新状态
	NewStatus int64 `json:"new_status,omitempty"`
	// 变更来源
	ChangeSource string `json:"change_source,omitempty"`
	// 变更原因
	ChangeReason string `json:"change_reason,omitempty"`
	// 变更时间
	ChangeAt time.Time `json:"change_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderStatusHistoryQuery when eager-loading is set.
	Edges        OrderStatusHistoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderStatusHistoryEdges holds the relations/edges for other nodes in the graph.
type OrderStatusHistoryEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderStatusHistoryEdges) OrderOrErr() (*Order, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: order.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderStatusHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderstatushistory.FieldID, orderstatushistory.FieldDelete, orderstatushistory.FieldCreatedID, orderstatushistory.FieldOrderID, orderstatushistory.FieldOldStatus, orderstatushistory.FieldNewStatus:
			values[i] = new(sql.NullInt64)
		case orderstatushistory.FieldChangeSource, orderstatushistory.FieldChangeReason:
			values[i] = new(sql.NullString)
		case orderstatushistory.FieldCreatedAt, orderstatushistory.FieldUpdatedAt, orderstatushistory.FieldChangeAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderStatusHistory fields.
func (_m *OrderStatusHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderstatushistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int64(value.Int64)
		case orderstatushistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case orderstatushistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case orderstatushistory.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				_m.Delete = value.Int64
			}
		case orderstatushistory.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				_m.CreatedID = value.Int64
			}
		case orderstatushistory.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				_m.OrderID = value.Int64
			}
		case orderstatushistory.FieldOldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field old_status", values[i])
			} else if value.Valid {
				_m.OldStatus = value.Int64
			}
		case orderstatushistory.FieldNewStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field new_status", values[i])
			} else if value.Valid {
				_m.NewStatus = value.Int64
			}
		case orderstatushistory.FieldChangeSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field change_source", values[i])
			} else if value.Valid {
				_m.ChangeSource = value.String
			}
		case orderstatushistory.FieldChangeReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field change_reason", values[i])
			} else if value.Valid {
				_m.ChangeReason = value.String
			}
		case orderstatushistory.FieldChangeAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field change_at", values[i])
			} else if value.Valid {
				_m.ChangeAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderStatusHistory.
// This includes values selected through modifiers, order, etc.
func (_m *OrderStatusHistory) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the OrderStatusHistory entity.
func (_m *OrderStatusHistory) QueryOrder() *OrderQuery {
	return NewOrderStatusHistoryClient(_m.config).QueryOrder(_m)
}

// Update returns a builder for updating this OrderStatusHistory.
// Note that you need to call OrderStatusHistory.Unwrap() before calling this method if this OrderStatusHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *OrderStatusHistory) Update() *OrderStatusHistoryUpdateOne {
	return NewOrderStatusHistoryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the OrderStatusHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *OrderStatusHistory) Unwrap() *OrderStatusHistory {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderStatusHistory is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *OrderStatusHistory) String() string {
	var builder strings.Builder
	builder.WriteString("OrderStatusHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", _m.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.OrderID))
	builder.WriteString(", ")
	builder.WriteString("old_status=")
	builder.WriteString(fmt.Sprintf("%v", _m.OldStatus))
	builder.WriteString(", ")
	builder.WriteString("new_status=")
	builder.WriteString(fmt.Sprintf("%v", _m.NewStatus))
	builder.WriteString(", ")
	builder.WriteString("change_source=")
	builder.WriteString(_m.ChangeSource)
	builder.WriteString(", ")
	builder.WriteString("change_reason=")
	builder.WriteString(_m.ChangeReason)
	builder.WriteString(", ")
	builder.WriteString("change_at=")
	builder.WriteString(_m.ChangeAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OrderStatusHistories is a parsable slice of OrderStatusHistory.
type OrderStatusHistories []*OrderStatusHistory
