// Code generated by ent, DO NOT EDIT.

package ent

import (
	"deer/app/order/biz/dal/mysql/ent/order"
	"deer/app/order/biz/dal/mysql/ent/ordersnapshots"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OrderSnapshots is the model entity for the OrderSnapshots schema.
type OrderSnapshots struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除 0:未删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// 聚合根ID
	AggregateID int64 `json:"aggregate_id,omitempty"`
	// 快照版本
	AggregateVersion int64 `json:"aggregate_version,omitempty"`
	// 快照数据
	AggregateData []byte `json:"aggregate_data,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderSnapshotsQuery when eager-loading is set.
	Edges        OrderSnapshotsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderSnapshotsEdges holds the relations/edges for other nodes in the graph.
type OrderSnapshotsEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderSnapshotsEdges) OrderOrErr() (*Order, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: order.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderSnapshots) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ordersnapshots.FieldAggregateData:
			values[i] = new([]byte)
		case ordersnapshots.FieldID, ordersnapshots.FieldDelete, ordersnapshots.FieldCreatedID, ordersnapshots.FieldAggregateID, ordersnapshots.FieldAggregateVersion:
			values[i] = new(sql.NullInt64)
		case ordersnapshots.FieldCreatedAt, ordersnapshots.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderSnapshots fields.
func (_m *OrderSnapshots) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ordersnapshots.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int64(value.Int64)
		case ordersnapshots.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case ordersnapshots.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case ordersnapshots.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				_m.Delete = value.Int64
			}
		case ordersnapshots.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				_m.CreatedID = value.Int64
			}
		case ordersnapshots.FieldAggregateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field aggregate_id", values[i])
			} else if value.Valid {
				_m.AggregateID = value.Int64
			}
		case ordersnapshots.FieldAggregateVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field aggregate_version", values[i])
			} else if value.Valid {
				_m.AggregateVersion = value.Int64
			}
		case ordersnapshots.FieldAggregateData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field aggregate_data", values[i])
			} else if value != nil {
				_m.AggregateData = *value
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderSnapshots.
// This includes values selected through modifiers, order, etc.
func (_m *OrderSnapshots) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the OrderSnapshots entity.
func (_m *OrderSnapshots) QueryOrder() *OrderQuery {
	return NewOrderSnapshotsClient(_m.config).QueryOrder(_m)
}

// Update returns a builder for updating this OrderSnapshots.
// Note that you need to call OrderSnapshots.Unwrap() before calling this method if this OrderSnapshots
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *OrderSnapshots) Update() *OrderSnapshotsUpdateOne {
	return NewOrderSnapshotsClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the OrderSnapshots entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *OrderSnapshots) Unwrap() *OrderSnapshots {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderSnapshots is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *OrderSnapshots) String() string {
	var builder strings.Builder
	builder.WriteString("OrderSnapshots(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", _m.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("aggregate_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.AggregateID))
	builder.WriteString(", ")
	builder.WriteString("aggregate_version=")
	builder.WriteString(fmt.Sprintf("%v", _m.AggregateVersion))
	builder.WriteString(", ")
	builder.WriteString("aggregate_data=")
	builder.WriteString(fmt.Sprintf("%v", _m.AggregateData))
	builder.WriteByte(')')
	return builder.String()
}

// OrderSnapshotsSlice is a parsable slice of OrderSnapshots.
type OrderSnapshotsSlice []*OrderSnapshots
