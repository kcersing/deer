// Code generated by ent, DO NOT EDIT.

package orderrefund

import (
	"deer/app/order/biz/dal/mysql/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldEQ(FieldUpdatedAt, v))
}

// Delete applies equality check predicate on the "delete" field. It's identical to DeleteEQ.
func Delete(v int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldEQ(FieldDelete, v))
}

// CreatedID applies equality check predicate on the "created_id" field. It's identical to CreatedIDEQ.
func CreatedID(v int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldEQ(FieldCreatedID, v))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldEQ(FieldOrderID, v))
}

// RefundAt applies equality check predicate on the "refund_at" field. It's identical to RefundAtEQ.
func RefundAt(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldEQ(FieldRefundAt, v))
}

// Refund applies equality check predicate on the "refund" field. It's identical to RefundEQ.
func Refund(v float64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldEQ(FieldRefund, v))
}

// RefundNature applies equality check predicate on the "refund_nature" field. It's identical to RefundNatureEQ.
func RefundNature(v string) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldEQ(FieldRefundNature, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNotNull(FieldUpdatedAt))
}

// DeleteEQ applies the EQ predicate on the "delete" field.
func DeleteEQ(v int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldEQ(FieldDelete, v))
}

// DeleteNEQ applies the NEQ predicate on the "delete" field.
func DeleteNEQ(v int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNEQ(FieldDelete, v))
}

// DeleteIn applies the In predicate on the "delete" field.
func DeleteIn(vs ...int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldIn(FieldDelete, vs...))
}

// DeleteNotIn applies the NotIn predicate on the "delete" field.
func DeleteNotIn(vs ...int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNotIn(FieldDelete, vs...))
}

// DeleteGT applies the GT predicate on the "delete" field.
func DeleteGT(v int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldGT(FieldDelete, v))
}

// DeleteGTE applies the GTE predicate on the "delete" field.
func DeleteGTE(v int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldGTE(FieldDelete, v))
}

// DeleteLT applies the LT predicate on the "delete" field.
func DeleteLT(v int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldLT(FieldDelete, v))
}

// DeleteLTE applies the LTE predicate on the "delete" field.
func DeleteLTE(v int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldLTE(FieldDelete, v))
}

// DeleteIsNil applies the IsNil predicate on the "delete" field.
func DeleteIsNil() predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldIsNull(FieldDelete))
}

// DeleteNotNil applies the NotNil predicate on the "delete" field.
func DeleteNotNil() predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNotNull(FieldDelete))
}

// CreatedIDEQ applies the EQ predicate on the "created_id" field.
func CreatedIDEQ(v int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldEQ(FieldCreatedID, v))
}

// CreatedIDNEQ applies the NEQ predicate on the "created_id" field.
func CreatedIDNEQ(v int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNEQ(FieldCreatedID, v))
}

// CreatedIDIn applies the In predicate on the "created_id" field.
func CreatedIDIn(vs ...int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldIn(FieldCreatedID, vs...))
}

// CreatedIDNotIn applies the NotIn predicate on the "created_id" field.
func CreatedIDNotIn(vs ...int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNotIn(FieldCreatedID, vs...))
}

// CreatedIDGT applies the GT predicate on the "created_id" field.
func CreatedIDGT(v int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldGT(FieldCreatedID, v))
}

// CreatedIDGTE applies the GTE predicate on the "created_id" field.
func CreatedIDGTE(v int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldGTE(FieldCreatedID, v))
}

// CreatedIDLT applies the LT predicate on the "created_id" field.
func CreatedIDLT(v int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldLT(FieldCreatedID, v))
}

// CreatedIDLTE applies the LTE predicate on the "created_id" field.
func CreatedIDLTE(v int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldLTE(FieldCreatedID, v))
}

// CreatedIDIsNil applies the IsNil predicate on the "created_id" field.
func CreatedIDIsNil() predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldIsNull(FieldCreatedID))
}

// CreatedIDNotNil applies the NotNil predicate on the "created_id" field.
func CreatedIDNotNil() predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNotNull(FieldCreatedID))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...int64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldIsNull(FieldOrderID))
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNotNull(FieldOrderID))
}

// RefundAtEQ applies the EQ predicate on the "refund_at" field.
func RefundAtEQ(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldEQ(FieldRefundAt, v))
}

// RefundAtNEQ applies the NEQ predicate on the "refund_at" field.
func RefundAtNEQ(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNEQ(FieldRefundAt, v))
}

// RefundAtIn applies the In predicate on the "refund_at" field.
func RefundAtIn(vs ...time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldIn(FieldRefundAt, vs...))
}

// RefundAtNotIn applies the NotIn predicate on the "refund_at" field.
func RefundAtNotIn(vs ...time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNotIn(FieldRefundAt, vs...))
}

// RefundAtGT applies the GT predicate on the "refund_at" field.
func RefundAtGT(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldGT(FieldRefundAt, v))
}

// RefundAtGTE applies the GTE predicate on the "refund_at" field.
func RefundAtGTE(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldGTE(FieldRefundAt, v))
}

// RefundAtLT applies the LT predicate on the "refund_at" field.
func RefundAtLT(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldLT(FieldRefundAt, v))
}

// RefundAtLTE applies the LTE predicate on the "refund_at" field.
func RefundAtLTE(v time.Time) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldLTE(FieldRefundAt, v))
}

// RefundAtIsNil applies the IsNil predicate on the "refund_at" field.
func RefundAtIsNil() predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldIsNull(FieldRefundAt))
}

// RefundAtNotNil applies the NotNil predicate on the "refund_at" field.
func RefundAtNotNil() predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNotNull(FieldRefundAt))
}

// RefundEQ applies the EQ predicate on the "refund" field.
func RefundEQ(v float64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldEQ(FieldRefund, v))
}

// RefundNEQ applies the NEQ predicate on the "refund" field.
func RefundNEQ(v float64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNEQ(FieldRefund, v))
}

// RefundIn applies the In predicate on the "refund" field.
func RefundIn(vs ...float64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldIn(FieldRefund, vs...))
}

// RefundNotIn applies the NotIn predicate on the "refund" field.
func RefundNotIn(vs ...float64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNotIn(FieldRefund, vs...))
}

// RefundGT applies the GT predicate on the "refund" field.
func RefundGT(v float64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldGT(FieldRefund, v))
}

// RefundGTE applies the GTE predicate on the "refund" field.
func RefundGTE(v float64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldGTE(FieldRefund, v))
}

// RefundLT applies the LT predicate on the "refund" field.
func RefundLT(v float64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldLT(FieldRefund, v))
}

// RefundLTE applies the LTE predicate on the "refund" field.
func RefundLTE(v float64) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldLTE(FieldRefund, v))
}

// RefundIsNil applies the IsNil predicate on the "refund" field.
func RefundIsNil() predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldIsNull(FieldRefund))
}

// RefundNotNil applies the NotNil predicate on the "refund" field.
func RefundNotNil() predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNotNull(FieldRefund))
}

// RefundNatureEQ applies the EQ predicate on the "refund_nature" field.
func RefundNatureEQ(v string) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldEQ(FieldRefundNature, v))
}

// RefundNatureNEQ applies the NEQ predicate on the "refund_nature" field.
func RefundNatureNEQ(v string) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNEQ(FieldRefundNature, v))
}

// RefundNatureIn applies the In predicate on the "refund_nature" field.
func RefundNatureIn(vs ...string) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldIn(FieldRefundNature, vs...))
}

// RefundNatureNotIn applies the NotIn predicate on the "refund_nature" field.
func RefundNatureNotIn(vs ...string) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNotIn(FieldRefundNature, vs...))
}

// RefundNatureGT applies the GT predicate on the "refund_nature" field.
func RefundNatureGT(v string) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldGT(FieldRefundNature, v))
}

// RefundNatureGTE applies the GTE predicate on the "refund_nature" field.
func RefundNatureGTE(v string) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldGTE(FieldRefundNature, v))
}

// RefundNatureLT applies the LT predicate on the "refund_nature" field.
func RefundNatureLT(v string) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldLT(FieldRefundNature, v))
}

// RefundNatureLTE applies the LTE predicate on the "refund_nature" field.
func RefundNatureLTE(v string) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldLTE(FieldRefundNature, v))
}

// RefundNatureContains applies the Contains predicate on the "refund_nature" field.
func RefundNatureContains(v string) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldContains(FieldRefundNature, v))
}

// RefundNatureHasPrefix applies the HasPrefix predicate on the "refund_nature" field.
func RefundNatureHasPrefix(v string) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldHasPrefix(FieldRefundNature, v))
}

// RefundNatureHasSuffix applies the HasSuffix predicate on the "refund_nature" field.
func RefundNatureHasSuffix(v string) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldHasSuffix(FieldRefundNature, v))
}

// RefundNatureIsNil applies the IsNil predicate on the "refund_nature" field.
func RefundNatureIsNil() predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldIsNull(FieldRefundNature))
}

// RefundNatureNotNil applies the NotNil predicate on the "refund_nature" field.
func RefundNatureNotNil() predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldNotNull(FieldRefundNature))
}

// RefundNatureEqualFold applies the EqualFold predicate on the "refund_nature" field.
func RefundNatureEqualFold(v string) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldEqualFold(FieldRefundNature, v))
}

// RefundNatureContainsFold applies the ContainsFold predicate on the "refund_nature" field.
func RefundNatureContainsFold(v string) predicate.OrderRefund {
	return predicate.OrderRefund(sql.FieldContainsFold(FieldRefundNature, v))
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.OrderRefund {
	return predicate.OrderRefund(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.Order) predicate.OrderRefund {
	return predicate.OrderRefund(func(s *sql.Selector) {
		step := newOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderRefund) predicate.OrderRefund {
	return predicate.OrderRefund(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderRefund) predicate.OrderRefund {
	return predicate.OrderRefund(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderRefund) predicate.OrderRefund {
	return predicate.OrderRefund(sql.NotPredicates(p))
}
