// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"deer/app/order/biz/dal/mysql/ent/order"
	"deer/app/order/biz/dal/mysql/ent/orderstatushistory"
	"deer/app/order/biz/dal/mysql/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderStatusHistoryUpdate is the builder for updating OrderStatusHistory entities.
type OrderStatusHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *OrderStatusHistoryMutation
}

// Where appends a list predicates to the OrderStatusHistoryUpdate builder.
func (_u *OrderStatusHistoryUpdate) Where(ps ...predicate.OrderStatusHistory) *OrderStatusHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrderStatusHistoryUpdate) SetUpdatedAt(v time.Time) *OrderStatusHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrderStatusHistoryUpdate) ClearUpdatedAt() *OrderStatusHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *OrderStatusHistoryUpdate) SetDelete(v int64) *OrderStatusHistoryUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *OrderStatusHistoryUpdate) SetNillableDelete(v *int64) *OrderStatusHistoryUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *OrderStatusHistoryUpdate) AddDelete(v int64) *OrderStatusHistoryUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *OrderStatusHistoryUpdate) ClearDelete() *OrderStatusHistoryUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *OrderStatusHistoryUpdate) SetCreatedID(v int64) *OrderStatusHistoryUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *OrderStatusHistoryUpdate) SetNillableCreatedID(v *int64) *OrderStatusHistoryUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *OrderStatusHistoryUpdate) AddCreatedID(v int64) *OrderStatusHistoryUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *OrderStatusHistoryUpdate) ClearCreatedID() *OrderStatusHistoryUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetOrderID sets the "order_id" field.
func (_u *OrderStatusHistoryUpdate) SetOrderID(v int64) *OrderStatusHistoryUpdate {
	_u.mutation.SetOrderID(v)
	return _u
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (_u *OrderStatusHistoryUpdate) SetNillableOrderID(v *int64) *OrderStatusHistoryUpdate {
	if v != nil {
		_u.SetOrderID(*v)
	}
	return _u
}

// ClearOrderID clears the value of the "order_id" field.
func (_u *OrderStatusHistoryUpdate) ClearOrderID() *OrderStatusHistoryUpdate {
	_u.mutation.ClearOrderID()
	return _u
}

// SetOldStatus sets the "old_status" field.
func (_u *OrderStatusHistoryUpdate) SetOldStatus(v int64) *OrderStatusHistoryUpdate {
	_u.mutation.ResetOldStatus()
	_u.mutation.SetOldStatus(v)
	return _u
}

// SetNillableOldStatus sets the "old_status" field if the given value is not nil.
func (_u *OrderStatusHistoryUpdate) SetNillableOldStatus(v *int64) *OrderStatusHistoryUpdate {
	if v != nil {
		_u.SetOldStatus(*v)
	}
	return _u
}

// AddOldStatus adds value to the "old_status" field.
func (_u *OrderStatusHistoryUpdate) AddOldStatus(v int64) *OrderStatusHistoryUpdate {
	_u.mutation.AddOldStatus(v)
	return _u
}

// ClearOldStatus clears the value of the "old_status" field.
func (_u *OrderStatusHistoryUpdate) ClearOldStatus() *OrderStatusHistoryUpdate {
	_u.mutation.ClearOldStatus()
	return _u
}

// SetNewStatus sets the "new_status" field.
func (_u *OrderStatusHistoryUpdate) SetNewStatus(v int64) *OrderStatusHistoryUpdate {
	_u.mutation.ResetNewStatus()
	_u.mutation.SetNewStatus(v)
	return _u
}

// SetNillableNewStatus sets the "new_status" field if the given value is not nil.
func (_u *OrderStatusHistoryUpdate) SetNillableNewStatus(v *int64) *OrderStatusHistoryUpdate {
	if v != nil {
		_u.SetNewStatus(*v)
	}
	return _u
}

// AddNewStatus adds value to the "new_status" field.
func (_u *OrderStatusHistoryUpdate) AddNewStatus(v int64) *OrderStatusHistoryUpdate {
	_u.mutation.AddNewStatus(v)
	return _u
}

// ClearNewStatus clears the value of the "new_status" field.
func (_u *OrderStatusHistoryUpdate) ClearNewStatus() *OrderStatusHistoryUpdate {
	_u.mutation.ClearNewStatus()
	return _u
}

// SetChangeSource sets the "change_source" field.
func (_u *OrderStatusHistoryUpdate) SetChangeSource(v string) *OrderStatusHistoryUpdate {
	_u.mutation.SetChangeSource(v)
	return _u
}

// SetNillableChangeSource sets the "change_source" field if the given value is not nil.
func (_u *OrderStatusHistoryUpdate) SetNillableChangeSource(v *string) *OrderStatusHistoryUpdate {
	if v != nil {
		_u.SetChangeSource(*v)
	}
	return _u
}

// ClearChangeSource clears the value of the "change_source" field.
func (_u *OrderStatusHistoryUpdate) ClearChangeSource() *OrderStatusHistoryUpdate {
	_u.mutation.ClearChangeSource()
	return _u
}

// SetChangeReason sets the "change_reason" field.
func (_u *OrderStatusHistoryUpdate) SetChangeReason(v string) *OrderStatusHistoryUpdate {
	_u.mutation.SetChangeReason(v)
	return _u
}

// SetNillableChangeReason sets the "change_reason" field if the given value is not nil.
func (_u *OrderStatusHistoryUpdate) SetNillableChangeReason(v *string) *OrderStatusHistoryUpdate {
	if v != nil {
		_u.SetChangeReason(*v)
	}
	return _u
}

// ClearChangeReason clears the value of the "change_reason" field.
func (_u *OrderStatusHistoryUpdate) ClearChangeReason() *OrderStatusHistoryUpdate {
	_u.mutation.ClearChangeReason()
	return _u
}

// SetChangeAt sets the "change_at" field.
func (_u *OrderStatusHistoryUpdate) SetChangeAt(v time.Time) *OrderStatusHistoryUpdate {
	_u.mutation.SetChangeAt(v)
	return _u
}

// SetNillableChangeAt sets the "change_at" field if the given value is not nil.
func (_u *OrderStatusHistoryUpdate) SetNillableChangeAt(v *time.Time) *OrderStatusHistoryUpdate {
	if v != nil {
		_u.SetChangeAt(*v)
	}
	return _u
}

// ClearChangeAt clears the value of the "change_at" field.
func (_u *OrderStatusHistoryUpdate) ClearChangeAt() *OrderStatusHistoryUpdate {
	_u.mutation.ClearChangeAt()
	return _u
}

// SetOrder sets the "order" edge to the Order entity.
func (_u *OrderStatusHistoryUpdate) SetOrder(v *Order) *OrderStatusHistoryUpdate {
	return _u.SetOrderID(v.ID)
}

// Mutation returns the OrderStatusHistoryMutation object of the builder.
func (_u *OrderStatusHistoryUpdate) Mutation() *OrderStatusHistoryMutation {
	return _u.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (_u *OrderStatusHistoryUpdate) ClearOrder() *OrderStatusHistoryUpdate {
	_u.mutation.ClearOrder()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OrderStatusHistoryUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrderStatusHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OrderStatusHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrderStatusHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrderStatusHistoryUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := orderstatushistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *OrderStatusHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderstatushistory.Table, orderstatushistory.Columns, sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(orderstatushistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(orderstatushistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(orderstatushistory.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(orderstatushistory.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(orderstatushistory.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(orderstatushistory.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(orderstatushistory.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(orderstatushistory.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(orderstatushistory.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.OldStatus(); ok {
		_spec.SetField(orderstatushistory.FieldOldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedOldStatus(); ok {
		_spec.AddField(orderstatushistory.FieldOldStatus, field.TypeInt64, value)
	}
	if _u.mutation.OldStatusCleared() {
		_spec.ClearField(orderstatushistory.FieldOldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.NewStatus(); ok {
		_spec.SetField(orderstatushistory.FieldNewStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedNewStatus(); ok {
		_spec.AddField(orderstatushistory.FieldNewStatus, field.TypeInt64, value)
	}
	if _u.mutation.NewStatusCleared() {
		_spec.ClearField(orderstatushistory.FieldNewStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.ChangeSource(); ok {
		_spec.SetField(orderstatushistory.FieldChangeSource, field.TypeString, value)
	}
	if _u.mutation.ChangeSourceCleared() {
		_spec.ClearField(orderstatushistory.FieldChangeSource, field.TypeString)
	}
	if value, ok := _u.mutation.ChangeReason(); ok {
		_spec.SetField(orderstatushistory.FieldChangeReason, field.TypeString, value)
	}
	if _u.mutation.ChangeReasonCleared() {
		_spec.ClearField(orderstatushistory.FieldChangeReason, field.TypeString)
	}
	if value, ok := _u.mutation.ChangeAt(); ok {
		_spec.SetField(orderstatushistory.FieldChangeAt, field.TypeTime, value)
	}
	if _u.mutation.ChangeAtCleared() {
		_spec.ClearField(orderstatushistory.FieldChangeAt, field.TypeTime)
	}
	if _u.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderstatushistory.OrderTable,
			Columns: []string{orderstatushistory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderstatushistory.OrderTable,
			Columns: []string{orderstatushistory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderstatushistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OrderStatusHistoryUpdateOne is the builder for updating a single OrderStatusHistory entity.
type OrderStatusHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderStatusHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrderStatusHistoryUpdateOne) SetUpdatedAt(v time.Time) *OrderStatusHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrderStatusHistoryUpdateOne) ClearUpdatedAt() *OrderStatusHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *OrderStatusHistoryUpdateOne) SetDelete(v int64) *OrderStatusHistoryUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *OrderStatusHistoryUpdateOne) SetNillableDelete(v *int64) *OrderStatusHistoryUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *OrderStatusHistoryUpdateOne) AddDelete(v int64) *OrderStatusHistoryUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *OrderStatusHistoryUpdateOne) ClearDelete() *OrderStatusHistoryUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *OrderStatusHistoryUpdateOne) SetCreatedID(v int64) *OrderStatusHistoryUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *OrderStatusHistoryUpdateOne) SetNillableCreatedID(v *int64) *OrderStatusHistoryUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *OrderStatusHistoryUpdateOne) AddCreatedID(v int64) *OrderStatusHistoryUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *OrderStatusHistoryUpdateOne) ClearCreatedID() *OrderStatusHistoryUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetOrderID sets the "order_id" field.
func (_u *OrderStatusHistoryUpdateOne) SetOrderID(v int64) *OrderStatusHistoryUpdateOne {
	_u.mutation.SetOrderID(v)
	return _u
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (_u *OrderStatusHistoryUpdateOne) SetNillableOrderID(v *int64) *OrderStatusHistoryUpdateOne {
	if v != nil {
		_u.SetOrderID(*v)
	}
	return _u
}

// ClearOrderID clears the value of the "order_id" field.
func (_u *OrderStatusHistoryUpdateOne) ClearOrderID() *OrderStatusHistoryUpdateOne {
	_u.mutation.ClearOrderID()
	return _u
}

// SetOldStatus sets the "old_status" field.
func (_u *OrderStatusHistoryUpdateOne) SetOldStatus(v int64) *OrderStatusHistoryUpdateOne {
	_u.mutation.ResetOldStatus()
	_u.mutation.SetOldStatus(v)
	return _u
}

// SetNillableOldStatus sets the "old_status" field if the given value is not nil.
func (_u *OrderStatusHistoryUpdateOne) SetNillableOldStatus(v *int64) *OrderStatusHistoryUpdateOne {
	if v != nil {
		_u.SetOldStatus(*v)
	}
	return _u
}

// AddOldStatus adds value to the "old_status" field.
func (_u *OrderStatusHistoryUpdateOne) AddOldStatus(v int64) *OrderStatusHistoryUpdateOne {
	_u.mutation.AddOldStatus(v)
	return _u
}

// ClearOldStatus clears the value of the "old_status" field.
func (_u *OrderStatusHistoryUpdateOne) ClearOldStatus() *OrderStatusHistoryUpdateOne {
	_u.mutation.ClearOldStatus()
	return _u
}

// SetNewStatus sets the "new_status" field.
func (_u *OrderStatusHistoryUpdateOne) SetNewStatus(v int64) *OrderStatusHistoryUpdateOne {
	_u.mutation.ResetNewStatus()
	_u.mutation.SetNewStatus(v)
	return _u
}

// SetNillableNewStatus sets the "new_status" field if the given value is not nil.
func (_u *OrderStatusHistoryUpdateOne) SetNillableNewStatus(v *int64) *OrderStatusHistoryUpdateOne {
	if v != nil {
		_u.SetNewStatus(*v)
	}
	return _u
}

// AddNewStatus adds value to the "new_status" field.
func (_u *OrderStatusHistoryUpdateOne) AddNewStatus(v int64) *OrderStatusHistoryUpdateOne {
	_u.mutation.AddNewStatus(v)
	return _u
}

// ClearNewStatus clears the value of the "new_status" field.
func (_u *OrderStatusHistoryUpdateOne) ClearNewStatus() *OrderStatusHistoryUpdateOne {
	_u.mutation.ClearNewStatus()
	return _u
}

// SetChangeSource sets the "change_source" field.
func (_u *OrderStatusHistoryUpdateOne) SetChangeSource(v string) *OrderStatusHistoryUpdateOne {
	_u.mutation.SetChangeSource(v)
	return _u
}

// SetNillableChangeSource sets the "change_source" field if the given value is not nil.
func (_u *OrderStatusHistoryUpdateOne) SetNillableChangeSource(v *string) *OrderStatusHistoryUpdateOne {
	if v != nil {
		_u.SetChangeSource(*v)
	}
	return _u
}

// ClearChangeSource clears the value of the "change_source" field.
func (_u *OrderStatusHistoryUpdateOne) ClearChangeSource() *OrderStatusHistoryUpdateOne {
	_u.mutation.ClearChangeSource()
	return _u
}

// SetChangeReason sets the "change_reason" field.
func (_u *OrderStatusHistoryUpdateOne) SetChangeReason(v string) *OrderStatusHistoryUpdateOne {
	_u.mutation.SetChangeReason(v)
	return _u
}

// SetNillableChangeReason sets the "change_reason" field if the given value is not nil.
func (_u *OrderStatusHistoryUpdateOne) SetNillableChangeReason(v *string) *OrderStatusHistoryUpdateOne {
	if v != nil {
		_u.SetChangeReason(*v)
	}
	return _u
}

// ClearChangeReason clears the value of the "change_reason" field.
func (_u *OrderStatusHistoryUpdateOne) ClearChangeReason() *OrderStatusHistoryUpdateOne {
	_u.mutation.ClearChangeReason()
	return _u
}

// SetChangeAt sets the "change_at" field.
func (_u *OrderStatusHistoryUpdateOne) SetChangeAt(v time.Time) *OrderStatusHistoryUpdateOne {
	_u.mutation.SetChangeAt(v)
	return _u
}

// SetNillableChangeAt sets the "change_at" field if the given value is not nil.
func (_u *OrderStatusHistoryUpdateOne) SetNillableChangeAt(v *time.Time) *OrderStatusHistoryUpdateOne {
	if v != nil {
		_u.SetChangeAt(*v)
	}
	return _u
}

// ClearChangeAt clears the value of the "change_at" field.
func (_u *OrderStatusHistoryUpdateOne) ClearChangeAt() *OrderStatusHistoryUpdateOne {
	_u.mutation.ClearChangeAt()
	return _u
}

// SetOrder sets the "order" edge to the Order entity.
func (_u *OrderStatusHistoryUpdateOne) SetOrder(v *Order) *OrderStatusHistoryUpdateOne {
	return _u.SetOrderID(v.ID)
}

// Mutation returns the OrderStatusHistoryMutation object of the builder.
func (_u *OrderStatusHistoryUpdateOne) Mutation() *OrderStatusHistoryMutation {
	return _u.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (_u *OrderStatusHistoryUpdateOne) ClearOrder() *OrderStatusHistoryUpdateOne {
	_u.mutation.ClearOrder()
	return _u
}

// Where appends a list predicates to the OrderStatusHistoryUpdate builder.
func (_u *OrderStatusHistoryUpdateOne) Where(ps ...predicate.OrderStatusHistory) *OrderStatusHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OrderStatusHistoryUpdateOne) Select(field string, fields ...string) *OrderStatusHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OrderStatusHistory entity.
func (_u *OrderStatusHistoryUpdateOne) Save(ctx context.Context) (*OrderStatusHistory, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrderStatusHistoryUpdateOne) SaveX(ctx context.Context) *OrderStatusHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OrderStatusHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrderStatusHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrderStatusHistoryUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := orderstatushistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *OrderStatusHistoryUpdateOne) sqlSave(ctx context.Context) (_node *OrderStatusHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderstatushistory.Table, orderstatushistory.Columns, sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderStatusHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderstatushistory.FieldID)
		for _, f := range fields {
			if !orderstatushistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderstatushistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(orderstatushistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(orderstatushistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(orderstatushistory.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(orderstatushistory.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(orderstatushistory.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(orderstatushistory.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(orderstatushistory.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(orderstatushistory.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(orderstatushistory.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.OldStatus(); ok {
		_spec.SetField(orderstatushistory.FieldOldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedOldStatus(); ok {
		_spec.AddField(orderstatushistory.FieldOldStatus, field.TypeInt64, value)
	}
	if _u.mutation.OldStatusCleared() {
		_spec.ClearField(orderstatushistory.FieldOldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.NewStatus(); ok {
		_spec.SetField(orderstatushistory.FieldNewStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedNewStatus(); ok {
		_spec.AddField(orderstatushistory.FieldNewStatus, field.TypeInt64, value)
	}
	if _u.mutation.NewStatusCleared() {
		_spec.ClearField(orderstatushistory.FieldNewStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.ChangeSource(); ok {
		_spec.SetField(orderstatushistory.FieldChangeSource, field.TypeString, value)
	}
	if _u.mutation.ChangeSourceCleared() {
		_spec.ClearField(orderstatushistory.FieldChangeSource, field.TypeString)
	}
	if value, ok := _u.mutation.ChangeReason(); ok {
		_spec.SetField(orderstatushistory.FieldChangeReason, field.TypeString, value)
	}
	if _u.mutation.ChangeReasonCleared() {
		_spec.ClearField(orderstatushistory.FieldChangeReason, field.TypeString)
	}
	if value, ok := _u.mutation.ChangeAt(); ok {
		_spec.SetField(orderstatushistory.FieldChangeAt, field.TypeTime, value)
	}
	if _u.mutation.ChangeAtCleared() {
		_spec.ClearField(orderstatushistory.FieldChangeAt, field.TypeTime)
	}
	if _u.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderstatushistory.OrderTable,
			Columns: []string{orderstatushistory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderstatushistory.OrderTable,
			Columns: []string{orderstatushistory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderStatusHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderstatushistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
