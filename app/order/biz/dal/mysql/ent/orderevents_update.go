// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"deer/app/order/biz/dal/mysql/ent/order"
	"deer/app/order/biz/dal/mysql/ent/orderevents"
	"deer/app/order/biz/dal/mysql/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderEventsUpdate is the builder for updating OrderEvents entities.
type OrderEventsUpdate struct {
	config
	hooks    []Hook
	mutation *OrderEventsMutation
}

// Where appends a list predicates to the OrderEventsUpdate builder.
func (_u *OrderEventsUpdate) Where(ps ...predicate.OrderEvents) *OrderEventsUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrderEventsUpdate) SetUpdatedAt(v time.Time) *OrderEventsUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrderEventsUpdate) ClearUpdatedAt() *OrderEventsUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *OrderEventsUpdate) SetDelete(v int64) *OrderEventsUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *OrderEventsUpdate) SetNillableDelete(v *int64) *OrderEventsUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *OrderEventsUpdate) AddDelete(v int64) *OrderEventsUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *OrderEventsUpdate) ClearDelete() *OrderEventsUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *OrderEventsUpdate) SetCreatedID(v int64) *OrderEventsUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *OrderEventsUpdate) SetNillableCreatedID(v *int64) *OrderEventsUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *OrderEventsUpdate) AddCreatedID(v int64) *OrderEventsUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *OrderEventsUpdate) ClearCreatedID() *OrderEventsUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetEventID sets the "event_id" field.
func (_u *OrderEventsUpdate) SetEventID(v string) *OrderEventsUpdate {
	_u.mutation.SetEventID(v)
	return _u
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (_u *OrderEventsUpdate) SetNillableEventID(v *string) *OrderEventsUpdate {
	if v != nil {
		_u.SetEventID(*v)
	}
	return _u
}

// ClearEventID clears the value of the "event_id" field.
func (_u *OrderEventsUpdate) ClearEventID() *OrderEventsUpdate {
	_u.mutation.ClearEventID()
	return _u
}

// SetAggregateID sets the "aggregate_id" field.
func (_u *OrderEventsUpdate) SetAggregateID(v int64) *OrderEventsUpdate {
	_u.mutation.SetAggregateID(v)
	return _u
}

// SetNillableAggregateID sets the "aggregate_id" field if the given value is not nil.
func (_u *OrderEventsUpdate) SetNillableAggregateID(v *int64) *OrderEventsUpdate {
	if v != nil {
		_u.SetAggregateID(*v)
	}
	return _u
}

// ClearAggregateID clears the value of the "aggregate_id" field.
func (_u *OrderEventsUpdate) ClearAggregateID() *OrderEventsUpdate {
	_u.mutation.ClearAggregateID()
	return _u
}

// SetAggregateType sets the "aggregate_type" field.
func (_u *OrderEventsUpdate) SetAggregateType(v string) *OrderEventsUpdate {
	_u.mutation.SetAggregateType(v)
	return _u
}

// SetNillableAggregateType sets the "aggregate_type" field if the given value is not nil.
func (_u *OrderEventsUpdate) SetNillableAggregateType(v *string) *OrderEventsUpdate {
	if v != nil {
		_u.SetAggregateType(*v)
	}
	return _u
}

// ClearAggregateType clears the value of the "aggregate_type" field.
func (_u *OrderEventsUpdate) ClearAggregateType() *OrderEventsUpdate {
	_u.mutation.ClearAggregateType()
	return _u
}

// SetEventType sets the "event_type" field.
func (_u *OrderEventsUpdate) SetEventType(v string) *OrderEventsUpdate {
	_u.mutation.SetEventType(v)
	return _u
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (_u *OrderEventsUpdate) SetNillableEventType(v *string) *OrderEventsUpdate {
	if v != nil {
		_u.SetEventType(*v)
	}
	return _u
}

// ClearEventType clears the value of the "event_type" field.
func (_u *OrderEventsUpdate) ClearEventType() *OrderEventsUpdate {
	_u.mutation.ClearEventType()
	return _u
}

// SetEventData sets the "event_data" field.
func (_u *OrderEventsUpdate) SetEventData(v []byte) *OrderEventsUpdate {
	_u.mutation.SetEventData(v)
	return _u
}

// ClearEventData clears the value of the "event_data" field.
func (_u *OrderEventsUpdate) ClearEventData() *OrderEventsUpdate {
	_u.mutation.ClearEventData()
	return _u
}

// SetEventVersion sets the "event_version" field.
func (_u *OrderEventsUpdate) SetEventVersion(v int64) *OrderEventsUpdate {
	_u.mutation.ResetEventVersion()
	_u.mutation.SetEventVersion(v)
	return _u
}

// SetNillableEventVersion sets the "event_version" field if the given value is not nil.
func (_u *OrderEventsUpdate) SetNillableEventVersion(v *int64) *OrderEventsUpdate {
	if v != nil {
		_u.SetEventVersion(*v)
	}
	return _u
}

// AddEventVersion adds value to the "event_version" field.
func (_u *OrderEventsUpdate) AddEventVersion(v int64) *OrderEventsUpdate {
	_u.mutation.AddEventVersion(v)
	return _u
}

// ClearEventVersion clears the value of the "event_version" field.
func (_u *OrderEventsUpdate) ClearEventVersion() *OrderEventsUpdate {
	_u.mutation.ClearEventVersion()
	return _u
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (_u *OrderEventsUpdate) SetOrderID(id int64) *OrderEventsUpdate {
	_u.mutation.SetOrderID(id)
	return _u
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (_u *OrderEventsUpdate) SetNillableOrderID(id *int64) *OrderEventsUpdate {
	if id != nil {
		_u = _u.SetOrderID(*id)
	}
	return _u
}

// SetOrder sets the "order" edge to the Order entity.
func (_u *OrderEventsUpdate) SetOrder(v *Order) *OrderEventsUpdate {
	return _u.SetOrderID(v.ID)
}

// Mutation returns the OrderEventsMutation object of the builder.
func (_u *OrderEventsUpdate) Mutation() *OrderEventsMutation {
	return _u.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (_u *OrderEventsUpdate) ClearOrder() *OrderEventsUpdate {
	_u.mutation.ClearOrder()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OrderEventsUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrderEventsUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OrderEventsUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrderEventsUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrderEventsUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := orderevents.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *OrderEventsUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderevents.Table, orderevents.Columns, sqlgraph.NewFieldSpec(orderevents.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(orderevents.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(orderevents.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(orderevents.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(orderevents.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(orderevents.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(orderevents.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(orderevents.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(orderevents.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(orderevents.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.EventID(); ok {
		_spec.SetField(orderevents.FieldEventID, field.TypeString, value)
	}
	if _u.mutation.EventIDCleared() {
		_spec.ClearField(orderevents.FieldEventID, field.TypeString)
	}
	if value, ok := _u.mutation.AggregateType(); ok {
		_spec.SetField(orderevents.FieldAggregateType, field.TypeString, value)
	}
	if _u.mutation.AggregateTypeCleared() {
		_spec.ClearField(orderevents.FieldAggregateType, field.TypeString)
	}
	if value, ok := _u.mutation.EventType(); ok {
		_spec.SetField(orderevents.FieldEventType, field.TypeString, value)
	}
	if _u.mutation.EventTypeCleared() {
		_spec.ClearField(orderevents.FieldEventType, field.TypeString)
	}
	if value, ok := _u.mutation.EventData(); ok {
		_spec.SetField(orderevents.FieldEventData, field.TypeBytes, value)
	}
	if _u.mutation.EventDataCleared() {
		_spec.ClearField(orderevents.FieldEventData, field.TypeBytes)
	}
	if value, ok := _u.mutation.EventVersion(); ok {
		_spec.SetField(orderevents.FieldEventVersion, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedEventVersion(); ok {
		_spec.AddField(orderevents.FieldEventVersion, field.TypeInt64, value)
	}
	if _u.mutation.EventVersionCleared() {
		_spec.ClearField(orderevents.FieldEventVersion, field.TypeInt64)
	}
	if _u.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderevents.OrderTable,
			Columns: []string{orderevents.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderevents.OrderTable,
			Columns: []string{orderevents.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderevents.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OrderEventsUpdateOne is the builder for updating a single OrderEvents entity.
type OrderEventsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderEventsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrderEventsUpdateOne) SetUpdatedAt(v time.Time) *OrderEventsUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrderEventsUpdateOne) ClearUpdatedAt() *OrderEventsUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *OrderEventsUpdateOne) SetDelete(v int64) *OrderEventsUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *OrderEventsUpdateOne) SetNillableDelete(v *int64) *OrderEventsUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *OrderEventsUpdateOne) AddDelete(v int64) *OrderEventsUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *OrderEventsUpdateOne) ClearDelete() *OrderEventsUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *OrderEventsUpdateOne) SetCreatedID(v int64) *OrderEventsUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *OrderEventsUpdateOne) SetNillableCreatedID(v *int64) *OrderEventsUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *OrderEventsUpdateOne) AddCreatedID(v int64) *OrderEventsUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *OrderEventsUpdateOne) ClearCreatedID() *OrderEventsUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetEventID sets the "event_id" field.
func (_u *OrderEventsUpdateOne) SetEventID(v string) *OrderEventsUpdateOne {
	_u.mutation.SetEventID(v)
	return _u
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (_u *OrderEventsUpdateOne) SetNillableEventID(v *string) *OrderEventsUpdateOne {
	if v != nil {
		_u.SetEventID(*v)
	}
	return _u
}

// ClearEventID clears the value of the "event_id" field.
func (_u *OrderEventsUpdateOne) ClearEventID() *OrderEventsUpdateOne {
	_u.mutation.ClearEventID()
	return _u
}

// SetAggregateID sets the "aggregate_id" field.
func (_u *OrderEventsUpdateOne) SetAggregateID(v int64) *OrderEventsUpdateOne {
	_u.mutation.SetAggregateID(v)
	return _u
}

// SetNillableAggregateID sets the "aggregate_id" field if the given value is not nil.
func (_u *OrderEventsUpdateOne) SetNillableAggregateID(v *int64) *OrderEventsUpdateOne {
	if v != nil {
		_u.SetAggregateID(*v)
	}
	return _u
}

// ClearAggregateID clears the value of the "aggregate_id" field.
func (_u *OrderEventsUpdateOne) ClearAggregateID() *OrderEventsUpdateOne {
	_u.mutation.ClearAggregateID()
	return _u
}

// SetAggregateType sets the "aggregate_type" field.
func (_u *OrderEventsUpdateOne) SetAggregateType(v string) *OrderEventsUpdateOne {
	_u.mutation.SetAggregateType(v)
	return _u
}

// SetNillableAggregateType sets the "aggregate_type" field if the given value is not nil.
func (_u *OrderEventsUpdateOne) SetNillableAggregateType(v *string) *OrderEventsUpdateOne {
	if v != nil {
		_u.SetAggregateType(*v)
	}
	return _u
}

// ClearAggregateType clears the value of the "aggregate_type" field.
func (_u *OrderEventsUpdateOne) ClearAggregateType() *OrderEventsUpdateOne {
	_u.mutation.ClearAggregateType()
	return _u
}

// SetEventType sets the "event_type" field.
func (_u *OrderEventsUpdateOne) SetEventType(v string) *OrderEventsUpdateOne {
	_u.mutation.SetEventType(v)
	return _u
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (_u *OrderEventsUpdateOne) SetNillableEventType(v *string) *OrderEventsUpdateOne {
	if v != nil {
		_u.SetEventType(*v)
	}
	return _u
}

// ClearEventType clears the value of the "event_type" field.
func (_u *OrderEventsUpdateOne) ClearEventType() *OrderEventsUpdateOne {
	_u.mutation.ClearEventType()
	return _u
}

// SetEventData sets the "event_data" field.
func (_u *OrderEventsUpdateOne) SetEventData(v []byte) *OrderEventsUpdateOne {
	_u.mutation.SetEventData(v)
	return _u
}

// ClearEventData clears the value of the "event_data" field.
func (_u *OrderEventsUpdateOne) ClearEventData() *OrderEventsUpdateOne {
	_u.mutation.ClearEventData()
	return _u
}

// SetEventVersion sets the "event_version" field.
func (_u *OrderEventsUpdateOne) SetEventVersion(v int64) *OrderEventsUpdateOne {
	_u.mutation.ResetEventVersion()
	_u.mutation.SetEventVersion(v)
	return _u
}

// SetNillableEventVersion sets the "event_version" field if the given value is not nil.
func (_u *OrderEventsUpdateOne) SetNillableEventVersion(v *int64) *OrderEventsUpdateOne {
	if v != nil {
		_u.SetEventVersion(*v)
	}
	return _u
}

// AddEventVersion adds value to the "event_version" field.
func (_u *OrderEventsUpdateOne) AddEventVersion(v int64) *OrderEventsUpdateOne {
	_u.mutation.AddEventVersion(v)
	return _u
}

// ClearEventVersion clears the value of the "event_version" field.
func (_u *OrderEventsUpdateOne) ClearEventVersion() *OrderEventsUpdateOne {
	_u.mutation.ClearEventVersion()
	return _u
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (_u *OrderEventsUpdateOne) SetOrderID(id int64) *OrderEventsUpdateOne {
	_u.mutation.SetOrderID(id)
	return _u
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (_u *OrderEventsUpdateOne) SetNillableOrderID(id *int64) *OrderEventsUpdateOne {
	if id != nil {
		_u = _u.SetOrderID(*id)
	}
	return _u
}

// SetOrder sets the "order" edge to the Order entity.
func (_u *OrderEventsUpdateOne) SetOrder(v *Order) *OrderEventsUpdateOne {
	return _u.SetOrderID(v.ID)
}

// Mutation returns the OrderEventsMutation object of the builder.
func (_u *OrderEventsUpdateOne) Mutation() *OrderEventsMutation {
	return _u.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (_u *OrderEventsUpdateOne) ClearOrder() *OrderEventsUpdateOne {
	_u.mutation.ClearOrder()
	return _u
}

// Where appends a list predicates to the OrderEventsUpdate builder.
func (_u *OrderEventsUpdateOne) Where(ps ...predicate.OrderEvents) *OrderEventsUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OrderEventsUpdateOne) Select(field string, fields ...string) *OrderEventsUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OrderEvents entity.
func (_u *OrderEventsUpdateOne) Save(ctx context.Context) (*OrderEvents, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrderEventsUpdateOne) SaveX(ctx context.Context) *OrderEvents {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OrderEventsUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrderEventsUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrderEventsUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := orderevents.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *OrderEventsUpdateOne) sqlSave(ctx context.Context) (_node *OrderEvents, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderevents.Table, orderevents.Columns, sqlgraph.NewFieldSpec(orderevents.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderEvents.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderevents.FieldID)
		for _, f := range fields {
			if !orderevents.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderevents.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(orderevents.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(orderevents.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(orderevents.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(orderevents.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(orderevents.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(orderevents.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(orderevents.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(orderevents.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(orderevents.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.EventID(); ok {
		_spec.SetField(orderevents.FieldEventID, field.TypeString, value)
	}
	if _u.mutation.EventIDCleared() {
		_spec.ClearField(orderevents.FieldEventID, field.TypeString)
	}
	if value, ok := _u.mutation.AggregateType(); ok {
		_spec.SetField(orderevents.FieldAggregateType, field.TypeString, value)
	}
	if _u.mutation.AggregateTypeCleared() {
		_spec.ClearField(orderevents.FieldAggregateType, field.TypeString)
	}
	if value, ok := _u.mutation.EventType(); ok {
		_spec.SetField(orderevents.FieldEventType, field.TypeString, value)
	}
	if _u.mutation.EventTypeCleared() {
		_spec.ClearField(orderevents.FieldEventType, field.TypeString)
	}
	if value, ok := _u.mutation.EventData(); ok {
		_spec.SetField(orderevents.FieldEventData, field.TypeBytes, value)
	}
	if _u.mutation.EventDataCleared() {
		_spec.ClearField(orderevents.FieldEventData, field.TypeBytes)
	}
	if value, ok := _u.mutation.EventVersion(); ok {
		_spec.SetField(orderevents.FieldEventVersion, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedEventVersion(); ok {
		_spec.AddField(orderevents.FieldEventVersion, field.TypeInt64, value)
	}
	if _u.mutation.EventVersionCleared() {
		_spec.ClearField(orderevents.FieldEventVersion, field.TypeInt64)
	}
	if _u.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderevents.OrderTable,
			Columns: []string{orderevents.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderevents.OrderTable,
			Columns: []string{orderevents.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderEvents{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderevents.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
