// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"deer/app/order/biz/dal/mysql/ent/ordereventsubscriptions"
	"deer/app/order/biz/dal/mysql/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderEventSubscriptionsUpdate is the builder for updating OrderEventSubscriptions entities.
type OrderEventSubscriptionsUpdate struct {
	config
	hooks    []Hook
	mutation *OrderEventSubscriptionsMutation
}

// Where appends a list predicates to the OrderEventSubscriptionsUpdate builder.
func (_u *OrderEventSubscriptionsUpdate) Where(ps ...predicate.OrderEventSubscriptions) *OrderEventSubscriptionsUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrderEventSubscriptionsUpdate) SetUpdatedAt(v time.Time) *OrderEventSubscriptionsUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrderEventSubscriptionsUpdate) ClearUpdatedAt() *OrderEventSubscriptionsUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *OrderEventSubscriptionsUpdate) SetDelete(v int64) *OrderEventSubscriptionsUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdate) SetNillableDelete(v *int64) *OrderEventSubscriptionsUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *OrderEventSubscriptionsUpdate) AddDelete(v int64) *OrderEventSubscriptionsUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *OrderEventSubscriptionsUpdate) ClearDelete() *OrderEventSubscriptionsUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *OrderEventSubscriptionsUpdate) SetCreatedID(v int64) *OrderEventSubscriptionsUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdate) SetNillableCreatedID(v *int64) *OrderEventSubscriptionsUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *OrderEventSubscriptionsUpdate) AddCreatedID(v int64) *OrderEventSubscriptionsUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *OrderEventSubscriptionsUpdate) ClearCreatedID() *OrderEventSubscriptionsUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetName sets the "name" field.
func (_u *OrderEventSubscriptionsUpdate) SetName(v string) *OrderEventSubscriptionsUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdate) SetNillableName(v *string) *OrderEventSubscriptionsUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *OrderEventSubscriptionsUpdate) ClearName() *OrderEventSubscriptionsUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetEventType sets the "event_type" field.
func (_u *OrderEventSubscriptionsUpdate) SetEventType(v string) *OrderEventSubscriptionsUpdate {
	_u.mutation.SetEventType(v)
	return _u
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdate) SetNillableEventType(v *string) *OrderEventSubscriptionsUpdate {
	if v != nil {
		_u.SetEventType(*v)
	}
	return _u
}

// ClearEventType clears the value of the "event_type" field.
func (_u *OrderEventSubscriptionsUpdate) ClearEventType() *OrderEventSubscriptionsUpdate {
	_u.mutation.ClearEventType()
	return _u
}

// SetLastProcessedID sets the "last_processed_id" field.
func (_u *OrderEventSubscriptionsUpdate) SetLastProcessedID(v string) *OrderEventSubscriptionsUpdate {
	_u.mutation.SetLastProcessedID(v)
	return _u
}

// SetNillableLastProcessedID sets the "last_processed_id" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdate) SetNillableLastProcessedID(v *string) *OrderEventSubscriptionsUpdate {
	if v != nil {
		_u.SetLastProcessedID(*v)
	}
	return _u
}

// ClearLastProcessedID clears the value of the "last_processed_id" field.
func (_u *OrderEventSubscriptionsUpdate) ClearLastProcessedID() *OrderEventSubscriptionsUpdate {
	_u.mutation.ClearLastProcessedID()
	return _u
}

// SetLastProcessedVersion sets the "last_processed_version" field.
func (_u *OrderEventSubscriptionsUpdate) SetLastProcessedVersion(v int64) *OrderEventSubscriptionsUpdate {
	_u.mutation.ResetLastProcessedVersion()
	_u.mutation.SetLastProcessedVersion(v)
	return _u
}

// SetNillableLastProcessedVersion sets the "last_processed_version" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdate) SetNillableLastProcessedVersion(v *int64) *OrderEventSubscriptionsUpdate {
	if v != nil {
		_u.SetLastProcessedVersion(*v)
	}
	return _u
}

// AddLastProcessedVersion adds value to the "last_processed_version" field.
func (_u *OrderEventSubscriptionsUpdate) AddLastProcessedVersion(v int64) *OrderEventSubscriptionsUpdate {
	_u.mutation.AddLastProcessedVersion(v)
	return _u
}

// ClearLastProcessedVersion clears the value of the "last_processed_version" field.
func (_u *OrderEventSubscriptionsUpdate) ClearLastProcessedVersion() *OrderEventSubscriptionsUpdate {
	_u.mutation.ClearLastProcessedVersion()
	return _u
}

// SetLastProcessedAt sets the "last_processed_at" field.
func (_u *OrderEventSubscriptionsUpdate) SetLastProcessedAt(v time.Time) *OrderEventSubscriptionsUpdate {
	_u.mutation.SetLastProcessedAt(v)
	return _u
}

// SetNillableLastProcessedAt sets the "last_processed_at" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdate) SetNillableLastProcessedAt(v *time.Time) *OrderEventSubscriptionsUpdate {
	if v != nil {
		_u.SetLastProcessedAt(*v)
	}
	return _u
}

// ClearLastProcessedAt clears the value of the "last_processed_at" field.
func (_u *OrderEventSubscriptionsUpdate) ClearLastProcessedAt() *OrderEventSubscriptionsUpdate {
	_u.mutation.ClearLastProcessedAt()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *OrderEventSubscriptionsUpdate) SetIsActive(v int64) *OrderEventSubscriptionsUpdate {
	_u.mutation.ResetIsActive()
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdate) SetNillableIsActive(v *int64) *OrderEventSubscriptionsUpdate {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// AddIsActive adds value to the "is_active" field.
func (_u *OrderEventSubscriptionsUpdate) AddIsActive(v int64) *OrderEventSubscriptionsUpdate {
	_u.mutation.AddIsActive(v)
	return _u
}

// ClearIsActive clears the value of the "is_active" field.
func (_u *OrderEventSubscriptionsUpdate) ClearIsActive() *OrderEventSubscriptionsUpdate {
	_u.mutation.ClearIsActive()
	return _u
}

// SetErrorCount sets the "error_count" field.
func (_u *OrderEventSubscriptionsUpdate) SetErrorCount(v int64) *OrderEventSubscriptionsUpdate {
	_u.mutation.ResetErrorCount()
	_u.mutation.SetErrorCount(v)
	return _u
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdate) SetNillableErrorCount(v *int64) *OrderEventSubscriptionsUpdate {
	if v != nil {
		_u.SetErrorCount(*v)
	}
	return _u
}

// AddErrorCount adds value to the "error_count" field.
func (_u *OrderEventSubscriptionsUpdate) AddErrorCount(v int64) *OrderEventSubscriptionsUpdate {
	_u.mutation.AddErrorCount(v)
	return _u
}

// ClearErrorCount clears the value of the "error_count" field.
func (_u *OrderEventSubscriptionsUpdate) ClearErrorCount() *OrderEventSubscriptionsUpdate {
	_u.mutation.ClearErrorCount()
	return _u
}

// SetLastError sets the "last_error" field.
func (_u *OrderEventSubscriptionsUpdate) SetLastError(v string) *OrderEventSubscriptionsUpdate {
	_u.mutation.SetLastError(v)
	return _u
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdate) SetNillableLastError(v *string) *OrderEventSubscriptionsUpdate {
	if v != nil {
		_u.SetLastError(*v)
	}
	return _u
}

// ClearLastError clears the value of the "last_error" field.
func (_u *OrderEventSubscriptionsUpdate) ClearLastError() *OrderEventSubscriptionsUpdate {
	_u.mutation.ClearLastError()
	return _u
}

// Mutation returns the OrderEventSubscriptionsMutation object of the builder.
func (_u *OrderEventSubscriptionsUpdate) Mutation() *OrderEventSubscriptionsMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OrderEventSubscriptionsUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrderEventSubscriptionsUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OrderEventSubscriptionsUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrderEventSubscriptionsUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrderEventSubscriptionsUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := ordereventsubscriptions.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *OrderEventSubscriptionsUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ordereventsubscriptions.Table, ordereventsubscriptions.Columns, sqlgraph.NewFieldSpec(ordereventsubscriptions.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(ordereventsubscriptions.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(ordereventsubscriptions.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(ordereventsubscriptions.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(ordereventsubscriptions.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(ordereventsubscriptions.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(ordereventsubscriptions.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.EventType(); ok {
		_spec.SetField(ordereventsubscriptions.FieldEventType, field.TypeString, value)
	}
	if _u.mutation.EventTypeCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldEventType, field.TypeString)
	}
	if value, ok := _u.mutation.LastProcessedID(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastProcessedID, field.TypeString, value)
	}
	if _u.mutation.LastProcessedIDCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldLastProcessedID, field.TypeString)
	}
	if value, ok := _u.mutation.LastProcessedVersion(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastProcessedVersion, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedLastProcessedVersion(); ok {
		_spec.AddField(ordereventsubscriptions.FieldLastProcessedVersion, field.TypeInt64, value)
	}
	if _u.mutation.LastProcessedVersionCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldLastProcessedVersion, field.TypeInt64)
	}
	if value, ok := _u.mutation.LastProcessedAt(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastProcessedAt, field.TypeTime, value)
	}
	if _u.mutation.LastProcessedAtCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldLastProcessedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(ordereventsubscriptions.FieldIsActive, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedIsActive(); ok {
		_spec.AddField(ordereventsubscriptions.FieldIsActive, field.TypeInt64, value)
	}
	if _u.mutation.IsActiveCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldIsActive, field.TypeInt64)
	}
	if value, ok := _u.mutation.ErrorCount(); ok {
		_spec.SetField(ordereventsubscriptions.FieldErrorCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedErrorCount(); ok {
		_spec.AddField(ordereventsubscriptions.FieldErrorCount, field.TypeInt64, value)
	}
	if _u.mutation.ErrorCountCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldErrorCount, field.TypeInt64)
	}
	if value, ok := _u.mutation.LastError(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastError, field.TypeString, value)
	}
	if _u.mutation.LastErrorCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldLastError, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordereventsubscriptions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OrderEventSubscriptionsUpdateOne is the builder for updating a single OrderEventSubscriptions entity.
type OrderEventSubscriptionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderEventSubscriptionsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrderEventSubscriptionsUpdateOne) SetUpdatedAt(v time.Time) *OrderEventSubscriptionsUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrderEventSubscriptionsUpdateOne) ClearUpdatedAt() *OrderEventSubscriptionsUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *OrderEventSubscriptionsUpdateOne) SetDelete(v int64) *OrderEventSubscriptionsUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdateOne) SetNillableDelete(v *int64) *OrderEventSubscriptionsUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *OrderEventSubscriptionsUpdateOne) AddDelete(v int64) *OrderEventSubscriptionsUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *OrderEventSubscriptionsUpdateOne) ClearDelete() *OrderEventSubscriptionsUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *OrderEventSubscriptionsUpdateOne) SetCreatedID(v int64) *OrderEventSubscriptionsUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdateOne) SetNillableCreatedID(v *int64) *OrderEventSubscriptionsUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *OrderEventSubscriptionsUpdateOne) AddCreatedID(v int64) *OrderEventSubscriptionsUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *OrderEventSubscriptionsUpdateOne) ClearCreatedID() *OrderEventSubscriptionsUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetName sets the "name" field.
func (_u *OrderEventSubscriptionsUpdateOne) SetName(v string) *OrderEventSubscriptionsUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdateOne) SetNillableName(v *string) *OrderEventSubscriptionsUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *OrderEventSubscriptionsUpdateOne) ClearName() *OrderEventSubscriptionsUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetEventType sets the "event_type" field.
func (_u *OrderEventSubscriptionsUpdateOne) SetEventType(v string) *OrderEventSubscriptionsUpdateOne {
	_u.mutation.SetEventType(v)
	return _u
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdateOne) SetNillableEventType(v *string) *OrderEventSubscriptionsUpdateOne {
	if v != nil {
		_u.SetEventType(*v)
	}
	return _u
}

// ClearEventType clears the value of the "event_type" field.
func (_u *OrderEventSubscriptionsUpdateOne) ClearEventType() *OrderEventSubscriptionsUpdateOne {
	_u.mutation.ClearEventType()
	return _u
}

// SetLastProcessedID sets the "last_processed_id" field.
func (_u *OrderEventSubscriptionsUpdateOne) SetLastProcessedID(v string) *OrderEventSubscriptionsUpdateOne {
	_u.mutation.SetLastProcessedID(v)
	return _u
}

// SetNillableLastProcessedID sets the "last_processed_id" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdateOne) SetNillableLastProcessedID(v *string) *OrderEventSubscriptionsUpdateOne {
	if v != nil {
		_u.SetLastProcessedID(*v)
	}
	return _u
}

// ClearLastProcessedID clears the value of the "last_processed_id" field.
func (_u *OrderEventSubscriptionsUpdateOne) ClearLastProcessedID() *OrderEventSubscriptionsUpdateOne {
	_u.mutation.ClearLastProcessedID()
	return _u
}

// SetLastProcessedVersion sets the "last_processed_version" field.
func (_u *OrderEventSubscriptionsUpdateOne) SetLastProcessedVersion(v int64) *OrderEventSubscriptionsUpdateOne {
	_u.mutation.ResetLastProcessedVersion()
	_u.mutation.SetLastProcessedVersion(v)
	return _u
}

// SetNillableLastProcessedVersion sets the "last_processed_version" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdateOne) SetNillableLastProcessedVersion(v *int64) *OrderEventSubscriptionsUpdateOne {
	if v != nil {
		_u.SetLastProcessedVersion(*v)
	}
	return _u
}

// AddLastProcessedVersion adds value to the "last_processed_version" field.
func (_u *OrderEventSubscriptionsUpdateOne) AddLastProcessedVersion(v int64) *OrderEventSubscriptionsUpdateOne {
	_u.mutation.AddLastProcessedVersion(v)
	return _u
}

// ClearLastProcessedVersion clears the value of the "last_processed_version" field.
func (_u *OrderEventSubscriptionsUpdateOne) ClearLastProcessedVersion() *OrderEventSubscriptionsUpdateOne {
	_u.mutation.ClearLastProcessedVersion()
	return _u
}

// SetLastProcessedAt sets the "last_processed_at" field.
func (_u *OrderEventSubscriptionsUpdateOne) SetLastProcessedAt(v time.Time) *OrderEventSubscriptionsUpdateOne {
	_u.mutation.SetLastProcessedAt(v)
	return _u
}

// SetNillableLastProcessedAt sets the "last_processed_at" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdateOne) SetNillableLastProcessedAt(v *time.Time) *OrderEventSubscriptionsUpdateOne {
	if v != nil {
		_u.SetLastProcessedAt(*v)
	}
	return _u
}

// ClearLastProcessedAt clears the value of the "last_processed_at" field.
func (_u *OrderEventSubscriptionsUpdateOne) ClearLastProcessedAt() *OrderEventSubscriptionsUpdateOne {
	_u.mutation.ClearLastProcessedAt()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *OrderEventSubscriptionsUpdateOne) SetIsActive(v int64) *OrderEventSubscriptionsUpdateOne {
	_u.mutation.ResetIsActive()
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdateOne) SetNillableIsActive(v *int64) *OrderEventSubscriptionsUpdateOne {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// AddIsActive adds value to the "is_active" field.
func (_u *OrderEventSubscriptionsUpdateOne) AddIsActive(v int64) *OrderEventSubscriptionsUpdateOne {
	_u.mutation.AddIsActive(v)
	return _u
}

// ClearIsActive clears the value of the "is_active" field.
func (_u *OrderEventSubscriptionsUpdateOne) ClearIsActive() *OrderEventSubscriptionsUpdateOne {
	_u.mutation.ClearIsActive()
	return _u
}

// SetErrorCount sets the "error_count" field.
func (_u *OrderEventSubscriptionsUpdateOne) SetErrorCount(v int64) *OrderEventSubscriptionsUpdateOne {
	_u.mutation.ResetErrorCount()
	_u.mutation.SetErrorCount(v)
	return _u
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdateOne) SetNillableErrorCount(v *int64) *OrderEventSubscriptionsUpdateOne {
	if v != nil {
		_u.SetErrorCount(*v)
	}
	return _u
}

// AddErrorCount adds value to the "error_count" field.
func (_u *OrderEventSubscriptionsUpdateOne) AddErrorCount(v int64) *OrderEventSubscriptionsUpdateOne {
	_u.mutation.AddErrorCount(v)
	return _u
}

// ClearErrorCount clears the value of the "error_count" field.
func (_u *OrderEventSubscriptionsUpdateOne) ClearErrorCount() *OrderEventSubscriptionsUpdateOne {
	_u.mutation.ClearErrorCount()
	return _u
}

// SetLastError sets the "last_error" field.
func (_u *OrderEventSubscriptionsUpdateOne) SetLastError(v string) *OrderEventSubscriptionsUpdateOne {
	_u.mutation.SetLastError(v)
	return _u
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (_u *OrderEventSubscriptionsUpdateOne) SetNillableLastError(v *string) *OrderEventSubscriptionsUpdateOne {
	if v != nil {
		_u.SetLastError(*v)
	}
	return _u
}

// ClearLastError clears the value of the "last_error" field.
func (_u *OrderEventSubscriptionsUpdateOne) ClearLastError() *OrderEventSubscriptionsUpdateOne {
	_u.mutation.ClearLastError()
	return _u
}

// Mutation returns the OrderEventSubscriptionsMutation object of the builder.
func (_u *OrderEventSubscriptionsUpdateOne) Mutation() *OrderEventSubscriptionsMutation {
	return _u.mutation
}

// Where appends a list predicates to the OrderEventSubscriptionsUpdate builder.
func (_u *OrderEventSubscriptionsUpdateOne) Where(ps ...predicate.OrderEventSubscriptions) *OrderEventSubscriptionsUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OrderEventSubscriptionsUpdateOne) Select(field string, fields ...string) *OrderEventSubscriptionsUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OrderEventSubscriptions entity.
func (_u *OrderEventSubscriptionsUpdateOne) Save(ctx context.Context) (*OrderEventSubscriptions, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrderEventSubscriptionsUpdateOne) SaveX(ctx context.Context) *OrderEventSubscriptions {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OrderEventSubscriptionsUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrderEventSubscriptionsUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrderEventSubscriptionsUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := ordereventsubscriptions.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *OrderEventSubscriptionsUpdateOne) sqlSave(ctx context.Context) (_node *OrderEventSubscriptions, err error) {
	_spec := sqlgraph.NewUpdateSpec(ordereventsubscriptions.Table, ordereventsubscriptions.Columns, sqlgraph.NewFieldSpec(ordereventsubscriptions.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderEventSubscriptions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ordereventsubscriptions.FieldID)
		for _, f := range fields {
			if !ordereventsubscriptions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ordereventsubscriptions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(ordereventsubscriptions.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(ordereventsubscriptions.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(ordereventsubscriptions.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(ordereventsubscriptions.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(ordereventsubscriptions.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(ordereventsubscriptions.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.EventType(); ok {
		_spec.SetField(ordereventsubscriptions.FieldEventType, field.TypeString, value)
	}
	if _u.mutation.EventTypeCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldEventType, field.TypeString)
	}
	if value, ok := _u.mutation.LastProcessedID(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastProcessedID, field.TypeString, value)
	}
	if _u.mutation.LastProcessedIDCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldLastProcessedID, field.TypeString)
	}
	if value, ok := _u.mutation.LastProcessedVersion(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastProcessedVersion, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedLastProcessedVersion(); ok {
		_spec.AddField(ordereventsubscriptions.FieldLastProcessedVersion, field.TypeInt64, value)
	}
	if _u.mutation.LastProcessedVersionCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldLastProcessedVersion, field.TypeInt64)
	}
	if value, ok := _u.mutation.LastProcessedAt(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastProcessedAt, field.TypeTime, value)
	}
	if _u.mutation.LastProcessedAtCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldLastProcessedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(ordereventsubscriptions.FieldIsActive, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedIsActive(); ok {
		_spec.AddField(ordereventsubscriptions.FieldIsActive, field.TypeInt64, value)
	}
	if _u.mutation.IsActiveCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldIsActive, field.TypeInt64)
	}
	if value, ok := _u.mutation.ErrorCount(); ok {
		_spec.SetField(ordereventsubscriptions.FieldErrorCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedErrorCount(); ok {
		_spec.AddField(ordereventsubscriptions.FieldErrorCount, field.TypeInt64, value)
	}
	if _u.mutation.ErrorCountCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldErrorCount, field.TypeInt64)
	}
	if value, ok := _u.mutation.LastError(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastError, field.TypeString, value)
	}
	if _u.mutation.LastErrorCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldLastError, field.TypeString)
	}
	_node = &OrderEventSubscriptions{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordereventsubscriptions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
