// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"user/biz/dal/db/ent/predicate"
	"user/biz/dal/db/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdate) SetUpdatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *UserUpdate) ClearUpdatedAt() *UserUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *UserUpdate) SetDelete(v int64) *UserUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *UserUpdate) SetNillableDelete(v *int64) *UserUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *UserUpdate) AddDelete(v int64) *UserUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *UserUpdate) ClearDelete() *UserUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *UserUpdate) SetCreatedID(v int64) *UserUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *UserUpdate) SetNillableCreatedID(v *int64) *UserUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *UserUpdate) AddCreatedID(v int64) *UserUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *UserUpdate) ClearCreatedID() *UserUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *UserUpdate) SetStatus(v int64) *UserUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *UserUpdate) SetNillableStatus(v *int64) *UserUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *UserUpdate) AddStatus(v int64) *UserUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *UserUpdate) ClearStatus() *UserUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetUsername sets the "username" field.
func (_u *UserUpdate) SetUsername(v string) *UserUpdate {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *UserUpdate) SetNillableUsername(v *string) *UserUpdate {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// SetPassword sets the "password" field.
func (_u *UserUpdate) SetPassword(v string) *UserUpdate {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePassword(v *string) *UserUpdate {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// SetAvatar sets the "avatar" field.
func (_u *UserUpdate) SetAvatar(v string) *UserUpdate {
	_u.mutation.SetAvatar(v)
	return _u
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAvatar(v *string) *UserUpdate {
	if v != nil {
		_u.SetAvatar(*v)
	}
	return _u
}

// ClearAvatar clears the value of the "avatar" field.
func (_u *UserUpdate) ClearAvatar() *UserUpdate {
	_u.mutation.ClearAvatar()
	return _u
}

// SetMobile sets the "mobile" field.
func (_u *UserUpdate) SetMobile(v string) *UserUpdate {
	_u.mutation.SetMobile(v)
	return _u
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (_u *UserUpdate) SetNillableMobile(v *string) *UserUpdate {
	if v != nil {
		_u.SetMobile(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *UserUpdate) SetName(v string) *UserUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableName(v *string) *UserUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *UserUpdate) ClearName() *UserUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetGender sets the "gender" field.
func (_u *UserUpdate) SetGender(v int64) *UserUpdate {
	_u.mutation.ResetGender()
	_u.mutation.SetGender(v)
	return _u
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (_u *UserUpdate) SetNillableGender(v *int64) *UserUpdate {
	if v != nil {
		_u.SetGender(*v)
	}
	return _u
}

// AddGender adds value to the "gender" field.
func (_u *UserUpdate) AddGender(v int64) *UserUpdate {
	_u.mutation.AddGender(v)
	return _u
}

// ClearGender clears the value of the "gender" field.
func (_u *UserUpdate) ClearGender() *UserUpdate {
	_u.mutation.ClearGender()
	return _u
}

// SetBirthday sets the "birthday" field.
func (_u *UserUpdate) SetBirthday(v time.Time) *UserUpdate {
	_u.mutation.SetBirthday(v)
	return _u
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (_u *UserUpdate) SetNillableBirthday(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetBirthday(*v)
	}
	return _u
}

// ClearBirthday clears the value of the "birthday" field.
func (_u *UserUpdate) ClearBirthday() *UserUpdate {
	_u.mutation.ClearBirthday()
	return _u
}

// SetLastAt sets the "last_at" field.
func (_u *UserUpdate) SetLastAt(v time.Time) *UserUpdate {
	_u.mutation.SetLastAt(v)
	return _u
}

// SetNillableLastAt sets the "last_at" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastAt(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetLastAt(*v)
	}
	return _u
}

// ClearLastAt clears the value of the "last_at" field.
func (_u *UserUpdate) ClearLastAt() *UserUpdate {
	_u.mutation.ClearLastAt()
	return _u
}

// SetLastIP sets the "last_ip" field.
func (_u *UserUpdate) SetLastIP(v string) *UserUpdate {
	_u.mutation.SetLastIP(v)
	return _u
}

// SetNillableLastIP sets the "last_ip" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastIP(v *string) *UserUpdate {
	if v != nil {
		_u.SetLastIP(*v)
	}
	return _u
}

// ClearLastIP clears the value of the "last_ip" field.
func (_u *UserUpdate) ClearLastIP() *UserUpdate {
	_u.mutation.ClearLastIP()
	return _u
}

// SetDetail sets the "detail" field.
func (_u *UserUpdate) SetDetail(v string) *UserUpdate {
	_u.mutation.SetDetail(v)
	return _u
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (_u *UserUpdate) SetNillableDetail(v *string) *UserUpdate {
	if v != nil {
		_u.SetDetail(*v)
	}
	return _u
}

// ClearDetail clears the value of the "detail" field.
func (_u *UserUpdate) ClearDetail() *UserUpdate {
	_u.mutation.ClearDetail()
	return _u
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(user.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(user.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(user.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(user.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(user.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(user.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(user.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(user.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if _u.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeString)
	}
	if value, ok := _u.mutation.Mobile(); ok {
		_spec.SetField(user.FieldMobile, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedGender(); ok {
		_spec.AddField(user.FieldGender, field.TypeInt64, value)
	}
	if _u.mutation.GenderCleared() {
		_spec.ClearField(user.FieldGender, field.TypeInt64)
	}
	if value, ok := _u.mutation.Birthday(); ok {
		_spec.SetField(user.FieldBirthday, field.TypeTime, value)
	}
	if _u.mutation.BirthdayCleared() {
		_spec.ClearField(user.FieldBirthday, field.TypeTime)
	}
	if value, ok := _u.mutation.LastAt(); ok {
		_spec.SetField(user.FieldLastAt, field.TypeTime, value)
	}
	if _u.mutation.LastAtCleared() {
		_spec.ClearField(user.FieldLastAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastIP(); ok {
		_spec.SetField(user.FieldLastIP, field.TypeString, value)
	}
	if _u.mutation.LastIPCleared() {
		_spec.ClearField(user.FieldLastIP, field.TypeString)
	}
	if value, ok := _u.mutation.Detail(); ok {
		_spec.SetField(user.FieldDetail, field.TypeString, value)
	}
	if _u.mutation.DetailCleared() {
		_spec.ClearField(user.FieldDetail, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdateOne) SetUpdatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *UserUpdateOne) ClearUpdatedAt() *UserUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *UserUpdateOne) SetDelete(v int64) *UserUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableDelete(v *int64) *UserUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *UserUpdateOne) AddDelete(v int64) *UserUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *UserUpdateOne) ClearDelete() *UserUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *UserUpdateOne) SetCreatedID(v int64) *UserUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableCreatedID(v *int64) *UserUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *UserUpdateOne) AddCreatedID(v int64) *UserUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *UserUpdateOne) ClearCreatedID() *UserUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *UserUpdateOne) SetStatus(v int64) *UserUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableStatus(v *int64) *UserUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *UserUpdateOne) AddStatus(v int64) *UserUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *UserUpdateOne) ClearStatus() *UserUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetUsername sets the "username" field.
func (_u *UserUpdateOne) SetUsername(v string) *UserUpdateOne {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableUsername(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// SetPassword sets the "password" field.
func (_u *UserUpdateOne) SetPassword(v string) *UserUpdateOne {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePassword(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// SetAvatar sets the "avatar" field.
func (_u *UserUpdateOne) SetAvatar(v string) *UserUpdateOne {
	_u.mutation.SetAvatar(v)
	return _u
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAvatar(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetAvatar(*v)
	}
	return _u
}

// ClearAvatar clears the value of the "avatar" field.
func (_u *UserUpdateOne) ClearAvatar() *UserUpdateOne {
	_u.mutation.ClearAvatar()
	return _u
}

// SetMobile sets the "mobile" field.
func (_u *UserUpdateOne) SetMobile(v string) *UserUpdateOne {
	_u.mutation.SetMobile(v)
	return _u
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableMobile(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetMobile(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *UserUpdateOne) SetName(v string) *UserUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *UserUpdateOne) ClearName() *UserUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetGender sets the "gender" field.
func (_u *UserUpdateOne) SetGender(v int64) *UserUpdateOne {
	_u.mutation.ResetGender()
	_u.mutation.SetGender(v)
	return _u
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableGender(v *int64) *UserUpdateOne {
	if v != nil {
		_u.SetGender(*v)
	}
	return _u
}

// AddGender adds value to the "gender" field.
func (_u *UserUpdateOne) AddGender(v int64) *UserUpdateOne {
	_u.mutation.AddGender(v)
	return _u
}

// ClearGender clears the value of the "gender" field.
func (_u *UserUpdateOne) ClearGender() *UserUpdateOne {
	_u.mutation.ClearGender()
	return _u
}

// SetBirthday sets the "birthday" field.
func (_u *UserUpdateOne) SetBirthday(v time.Time) *UserUpdateOne {
	_u.mutation.SetBirthday(v)
	return _u
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableBirthday(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetBirthday(*v)
	}
	return _u
}

// ClearBirthday clears the value of the "birthday" field.
func (_u *UserUpdateOne) ClearBirthday() *UserUpdateOne {
	_u.mutation.ClearBirthday()
	return _u
}

// SetLastAt sets the "last_at" field.
func (_u *UserUpdateOne) SetLastAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetLastAt(v)
	return _u
}

// SetNillableLastAt sets the "last_at" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastAt(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetLastAt(*v)
	}
	return _u
}

// ClearLastAt clears the value of the "last_at" field.
func (_u *UserUpdateOne) ClearLastAt() *UserUpdateOne {
	_u.mutation.ClearLastAt()
	return _u
}

// SetLastIP sets the "last_ip" field.
func (_u *UserUpdateOne) SetLastIP(v string) *UserUpdateOne {
	_u.mutation.SetLastIP(v)
	return _u
}

// SetNillableLastIP sets the "last_ip" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastIP(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetLastIP(*v)
	}
	return _u
}

// ClearLastIP clears the value of the "last_ip" field.
func (_u *UserUpdateOne) ClearLastIP() *UserUpdateOne {
	_u.mutation.ClearLastIP()
	return _u
}

// SetDetail sets the "detail" field.
func (_u *UserUpdateOne) SetDetail(v string) *UserUpdateOne {
	_u.mutation.SetDetail(v)
	return _u
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableDetail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetDetail(*v)
	}
	return _u
}

// ClearDetail clears the value of the "detail" field.
func (_u *UserUpdateOne) ClearDetail() *UserUpdateOne {
	_u.mutation.ClearDetail()
	return _u
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(user.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(user.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(user.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(user.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(user.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(user.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(user.FieldStatus, field.TypeInt64, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(user.FieldStatus, field.TypeInt64)
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if _u.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeString)
	}
	if value, ok := _u.mutation.Mobile(); ok {
		_spec.SetField(user.FieldMobile, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedGender(); ok {
		_spec.AddField(user.FieldGender, field.TypeInt64, value)
	}
	if _u.mutation.GenderCleared() {
		_spec.ClearField(user.FieldGender, field.TypeInt64)
	}
	if value, ok := _u.mutation.Birthday(); ok {
		_spec.SetField(user.FieldBirthday, field.TypeTime, value)
	}
	if _u.mutation.BirthdayCleared() {
		_spec.ClearField(user.FieldBirthday, field.TypeTime)
	}
	if value, ok := _u.mutation.LastAt(); ok {
		_spec.SetField(user.FieldLastAt, field.TypeTime, value)
	}
	if _u.mutation.LastAtCleared() {
		_spec.ClearField(user.FieldLastAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastIP(); ok {
		_spec.SetField(user.FieldLastIP, field.TypeString, value)
	}
	if _u.mutation.LastIPCleared() {
		_spec.ClearField(user.FieldLastIP, field.TypeString)
	}
	if value, ok := _u.mutation.Detail(); ok {
		_spec.SetField(user.FieldDetail, field.TypeString, value)
	}
	if _u.mutation.DetailCleared() {
		_spec.ClearField(user.FieldDetail, field.TypeString)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
