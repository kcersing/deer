// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package order

import (
	"context"
	"deer/kitex_gen/deer/base"
	"fmt"
)

type Item struct {
	ProductId int64   `thrift:"productId,1,optional" frugal:"1,optional,i64" json:"productId,omitempty"`
	Quantity  int64   `thrift:"quantity,2,optional" frugal:"2,optional,i64" json:"quantity,omitempty"`
	Price     float64 `thrift:"price,3,optional" frugal:"3,optional,double" json:"price,omitempty"`
	Name      string  `thrift:"name,4,optional" frugal:"4,optional,string" json:"name,omitempty"`
}

func NewItem() *Item {
	return &Item{

		ProductId: 0,
		Quantity:  1,
		Price:     0.0,
		Name:      "",
	}
}

func (p *Item) InitDefault() {
	p.ProductId = 0
	p.Quantity = 1
	p.Price = 0.0
	p.Name = ""
}

var Item_ProductId_DEFAULT int64 = 0

func (p *Item) GetProductId() (v int64) {
	if !p.IsSetProductId() {
		return Item_ProductId_DEFAULT
	}
	return p.ProductId
}

var Item_Quantity_DEFAULT int64 = 1

func (p *Item) GetQuantity() (v int64) {
	if !p.IsSetQuantity() {
		return Item_Quantity_DEFAULT
	}
	return p.Quantity
}

var Item_Price_DEFAULT float64 = 0.0

func (p *Item) GetPrice() (v float64) {
	if !p.IsSetPrice() {
		return Item_Price_DEFAULT
	}
	return p.Price
}

var Item_Name_DEFAULT string = ""

func (p *Item) GetName() (v string) {
	if !p.IsSetName() {
		return Item_Name_DEFAULT
	}
	return p.Name
}
func (p *Item) SetProductId(val int64) {
	p.ProductId = val
}
func (p *Item) SetQuantity(val int64) {
	p.Quantity = val
}
func (p *Item) SetPrice(val float64) {
	p.Price = val
}
func (p *Item) SetName(val string) {
	p.Name = val
}

func (p *Item) IsSetProductId() bool {
	return p.ProductId != Item_ProductId_DEFAULT
}

func (p *Item) IsSetQuantity() bool {
	return p.Quantity != Item_Quantity_DEFAULT
}

func (p *Item) IsSetPrice() bool {
	return p.Price != Item_Price_DEFAULT
}

func (p *Item) IsSetName() bool {
	return p.Name != Item_Name_DEFAULT
}

func (p *Item) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Item(%+v)", *p)
}

var fieldIDToName_Item = map[int16]string{
	1: "productId",
	2: "quantity",
	3: "price",
	4: "name",
}

type Order struct {
	MemberId     int64   `thrift:"memberId,1,optional" frugal:"1,optional,i64" json:"memberId,omitempty"`
	CreatedId    int64   `thrift:"createdId,2,optional" frugal:"2,optional,i64" json:"createdId,omitempty"`
	Items        *Item   `thrift:"items,3,optional" frugal:"3,optional,Item" json:"items,omitempty"`
	Sn           string  `thrift:"sn,4,optional" frugal:"4,optional,string" json:"sn,omitempty"`
	TotalAmount  float64 `thrift:"totalAmount,5,optional" frugal:"5,optional,double" json:"totalAmount,omitempty"`
	Status       string  `thrift:"status,6,optional" frugal:"6,optional,string" json:"status,omitempty"`
	Nature       string  `thrift:"nature,7,optional" frugal:"7,optional,string" json:"nature,omitempty"`
	CreatedAt    string  `thrift:"createdAt,8,optional" frugal:"8,optional,string" json:"createdAt,omitempty"`
	CompletionAt string  `thrift:"completionAt,9,optional" frugal:"9,optional,string" json:"completionAt,omitempty"`
	CloseAt      string  `thrift:"closeAt,10,optional" frugal:"10,optional,string" json:"closeAt,omitempty"`
	RefundAt     string  `thrift:"refundAt,11,optional" frugal:"11,optional,string" json:"refundAt,omitempty"`
	Version      string  `thrift:"version,12,optional" frugal:"12,optional,string" json:"version,omitempty"`
	UpdatedAt    string  `thrift:"updatedAt,13,optional" frugal:"13,optional,string" json:"updatedAt,omitempty"`
	Id           int64   `thrift:"id,254,optional" frugal:"254,optional,i64" json:"id,omitempty"`
}

func NewOrder() *Order {
	return &Order{

		MemberId:     0,
		CreatedId:    1,
		Items:        &Item{},
		Sn:           "",
		TotalAmount:  0.0,
		Status:       "",
		Nature:       "",
		CreatedAt:    "",
		CompletionAt: "",
		CloseAt:      "",
		RefundAt:     "",
		Version:      "",
		UpdatedAt:    "",
		Id:           0,
	}
}

func (p *Order) InitDefault() {
	p.MemberId = 0
	p.CreatedId = 1
	p.Items = &Item{}
	p.Sn = ""
	p.TotalAmount = 0.0
	p.Status = ""
	p.Nature = ""
	p.CreatedAt = ""
	p.CompletionAt = ""
	p.CloseAt = ""
	p.RefundAt = ""
	p.Version = ""
	p.UpdatedAt = ""
	p.Id = 0
}

var Order_MemberId_DEFAULT int64 = 0

func (p *Order) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return Order_MemberId_DEFAULT
	}
	return p.MemberId
}

var Order_CreatedId_DEFAULT int64 = 1

func (p *Order) GetCreatedId() (v int64) {
	if !p.IsSetCreatedId() {
		return Order_CreatedId_DEFAULT
	}
	return p.CreatedId
}

var Order_Items_DEFAULT *Item = &Item{}

func (p *Order) GetItems() (v *Item) {
	if !p.IsSetItems() {
		return Order_Items_DEFAULT
	}
	return p.Items
}

var Order_Sn_DEFAULT string = ""

func (p *Order) GetSn() (v string) {
	if !p.IsSetSn() {
		return Order_Sn_DEFAULT
	}
	return p.Sn
}

var Order_TotalAmount_DEFAULT float64 = 0.0

func (p *Order) GetTotalAmount() (v float64) {
	if !p.IsSetTotalAmount() {
		return Order_TotalAmount_DEFAULT
	}
	return p.TotalAmount
}

var Order_Status_DEFAULT string = ""

func (p *Order) GetStatus() (v string) {
	if !p.IsSetStatus() {
		return Order_Status_DEFAULT
	}
	return p.Status
}

var Order_Nature_DEFAULT string = ""

func (p *Order) GetNature() (v string) {
	if !p.IsSetNature() {
		return Order_Nature_DEFAULT
	}
	return p.Nature
}

var Order_CreatedAt_DEFAULT string = ""

func (p *Order) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return Order_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var Order_CompletionAt_DEFAULT string = ""

func (p *Order) GetCompletionAt() (v string) {
	if !p.IsSetCompletionAt() {
		return Order_CompletionAt_DEFAULT
	}
	return p.CompletionAt
}

var Order_CloseAt_DEFAULT string = ""

func (p *Order) GetCloseAt() (v string) {
	if !p.IsSetCloseAt() {
		return Order_CloseAt_DEFAULT
	}
	return p.CloseAt
}

var Order_RefundAt_DEFAULT string = ""

func (p *Order) GetRefundAt() (v string) {
	if !p.IsSetRefundAt() {
		return Order_RefundAt_DEFAULT
	}
	return p.RefundAt
}

var Order_Version_DEFAULT string = ""

func (p *Order) GetVersion() (v string) {
	if !p.IsSetVersion() {
		return Order_Version_DEFAULT
	}
	return p.Version
}

var Order_UpdatedAt_DEFAULT string = ""

func (p *Order) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return Order_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var Order_Id_DEFAULT int64 = 0

func (p *Order) GetId() (v int64) {
	if !p.IsSetId() {
		return Order_Id_DEFAULT
	}
	return p.Id
}
func (p *Order) SetMemberId(val int64) {
	p.MemberId = val
}
func (p *Order) SetCreatedId(val int64) {
	p.CreatedId = val
}
func (p *Order) SetItems(val *Item) {
	p.Items = val
}
func (p *Order) SetSn(val string) {
	p.Sn = val
}
func (p *Order) SetTotalAmount(val float64) {
	p.TotalAmount = val
}
func (p *Order) SetStatus(val string) {
	p.Status = val
}
func (p *Order) SetNature(val string) {
	p.Nature = val
}
func (p *Order) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *Order) SetCompletionAt(val string) {
	p.CompletionAt = val
}
func (p *Order) SetCloseAt(val string) {
	p.CloseAt = val
}
func (p *Order) SetRefundAt(val string) {
	p.RefundAt = val
}
func (p *Order) SetVersion(val string) {
	p.Version = val
}
func (p *Order) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *Order) SetId(val int64) {
	p.Id = val
}

func (p *Order) IsSetMemberId() bool {
	return p.MemberId != Order_MemberId_DEFAULT
}

func (p *Order) IsSetCreatedId() bool {
	return p.CreatedId != Order_CreatedId_DEFAULT
}

func (p *Order) IsSetItems() bool {
	return p.Items != nil
}

func (p *Order) IsSetSn() bool {
	return p.Sn != Order_Sn_DEFAULT
}

func (p *Order) IsSetTotalAmount() bool {
	return p.TotalAmount != Order_TotalAmount_DEFAULT
}

func (p *Order) IsSetStatus() bool {
	return p.Status != Order_Status_DEFAULT
}

func (p *Order) IsSetNature() bool {
	return p.Nature != Order_Nature_DEFAULT
}

func (p *Order) IsSetCreatedAt() bool {
	return p.CreatedAt != Order_CreatedAt_DEFAULT
}

func (p *Order) IsSetCompletionAt() bool {
	return p.CompletionAt != Order_CompletionAt_DEFAULT
}

func (p *Order) IsSetCloseAt() bool {
	return p.CloseAt != Order_CloseAt_DEFAULT
}

func (p *Order) IsSetRefundAt() bool {
	return p.RefundAt != Order_RefundAt_DEFAULT
}

func (p *Order) IsSetVersion() bool {
	return p.Version != Order_Version_DEFAULT
}

func (p *Order) IsSetUpdatedAt() bool {
	return p.UpdatedAt != Order_UpdatedAt_DEFAULT
}

func (p *Order) IsSetId() bool {
	return p.Id != Order_Id_DEFAULT
}

func (p *Order) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Order(%+v)", *p)
}

var fieldIDToName_Order = map[int16]string{
	1:   "memberId",
	2:   "createdId",
	3:   "items",
	4:   "sn",
	5:   "totalAmount",
	6:   "status",
	7:   "nature",
	8:   "createdAt",
	9:   "completionAt",
	10:  "closeAt",
	11:  "refundAt",
	12:  "version",
	13:  "updatedAt",
	254: "id",
}

type GetOrderInfoReq struct {
	Id int64   `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Sn *string `thrift:"sn,2,optional" frugal:"2,optional,string" json:"sn,omitempty"`
}

func NewGetOrderInfoReq() *GetOrderInfoReq {
	return &GetOrderInfoReq{

		Id: 0,
	}
}

func (p *GetOrderInfoReq) InitDefault() {
	p.Id = 0
}

var GetOrderInfoReq_Id_DEFAULT int64 = 0

func (p *GetOrderInfoReq) GetId() (v int64) {
	if !p.IsSetId() {
		return GetOrderInfoReq_Id_DEFAULT
	}
	return p.Id
}

var GetOrderInfoReq_Sn_DEFAULT string

func (p *GetOrderInfoReq) GetSn() (v string) {
	if !p.IsSetSn() {
		return GetOrderInfoReq_Sn_DEFAULT
	}
	return *p.Sn
}
func (p *GetOrderInfoReq) SetId(val int64) {
	p.Id = val
}
func (p *GetOrderInfoReq) SetSn(val *string) {
	p.Sn = val
}

func (p *GetOrderInfoReq) IsSetId() bool {
	return p.Id != GetOrderInfoReq_Id_DEFAULT
}

func (p *GetOrderInfoReq) IsSetSn() bool {
	return p.Sn != nil
}

func (p *GetOrderInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOrderInfoReq(%+v)", *p)
}

var fieldIDToName_GetOrderInfoReq = map[int16]string{
	1: "id",
	2: "sn",
}

type GetOrderListReq struct {
	MemberId  int64         `thrift:"memberId,1,optional" frugal:"1,optional,i64" json:"memberId,omitempty"`
	CreatedId int64         `thrift:"createdId,2,optional" frugal:"2,optional,i64" json:"createdId,omitempty"`
	Status    *string       `thrift:"status,3,optional" frugal:"3,optional,string" json:"status,omitempty"`
	Nature    string        `thrift:"nature,4,optional" frugal:"4,optional,string" json:"nature,omitempty"`
	SearchKey string        `thrift:"searchKey,5,optional" frugal:"5,optional,string" json:"searchKey,omitempty"`
	PageReq   *base.PageReq `thrift:"pageReq,254,optional" frugal:"254,optional,base.PageReq" json:"pageReq,omitempty"`
}

func NewGetOrderListReq() *GetOrderListReq {
	return &GetOrderListReq{

		MemberId:  0,
		CreatedId: 1,
		Nature:    "",
		SearchKey: "",
	}
}

func (p *GetOrderListReq) InitDefault() {
	p.MemberId = 0
	p.CreatedId = 1
	p.Nature = ""
	p.SearchKey = ""
}

var GetOrderListReq_MemberId_DEFAULT int64 = 0

func (p *GetOrderListReq) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return GetOrderListReq_MemberId_DEFAULT
	}
	return p.MemberId
}

var GetOrderListReq_CreatedId_DEFAULT int64 = 1

func (p *GetOrderListReq) GetCreatedId() (v int64) {
	if !p.IsSetCreatedId() {
		return GetOrderListReq_CreatedId_DEFAULT
	}
	return p.CreatedId
}

var GetOrderListReq_Status_DEFAULT string

func (p *GetOrderListReq) GetStatus() (v string) {
	if !p.IsSetStatus() {
		return GetOrderListReq_Status_DEFAULT
	}
	return *p.Status
}

var GetOrderListReq_Nature_DEFAULT string = ""

func (p *GetOrderListReq) GetNature() (v string) {
	if !p.IsSetNature() {
		return GetOrderListReq_Nature_DEFAULT
	}
	return p.Nature
}

var GetOrderListReq_SearchKey_DEFAULT string = ""

func (p *GetOrderListReq) GetSearchKey() (v string) {
	if !p.IsSetSearchKey() {
		return GetOrderListReq_SearchKey_DEFAULT
	}
	return p.SearchKey
}

var GetOrderListReq_PageReq_DEFAULT *base.PageReq

func (p *GetOrderListReq) GetPageReq() (v *base.PageReq) {
	if !p.IsSetPageReq() {
		return GetOrderListReq_PageReq_DEFAULT
	}
	return p.PageReq
}
func (p *GetOrderListReq) SetMemberId(val int64) {
	p.MemberId = val
}
func (p *GetOrderListReq) SetCreatedId(val int64) {
	p.CreatedId = val
}
func (p *GetOrderListReq) SetStatus(val *string) {
	p.Status = val
}
func (p *GetOrderListReq) SetNature(val string) {
	p.Nature = val
}
func (p *GetOrderListReq) SetSearchKey(val string) {
	p.SearchKey = val
}
func (p *GetOrderListReq) SetPageReq(val *base.PageReq) {
	p.PageReq = val
}

func (p *GetOrderListReq) IsSetMemberId() bool {
	return p.MemberId != GetOrderListReq_MemberId_DEFAULT
}

func (p *GetOrderListReq) IsSetCreatedId() bool {
	return p.CreatedId != GetOrderListReq_CreatedId_DEFAULT
}

func (p *GetOrderListReq) IsSetStatus() bool {
	return p.Status != nil
}

func (p *GetOrderListReq) IsSetNature() bool {
	return p.Nature != GetOrderListReq_Nature_DEFAULT
}

func (p *GetOrderListReq) IsSetSearchKey() bool {
	return p.SearchKey != GetOrderListReq_SearchKey_DEFAULT
}

func (p *GetOrderListReq) IsSetPageReq() bool {
	return p.PageReq != nil
}

func (p *GetOrderListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOrderListReq(%+v)", *p)
}

var fieldIDToName_GetOrderListReq = map[int16]string{
	1:   "memberId",
	2:   "createdId",
	3:   "status",
	4:   "nature",
	5:   "searchKey",
	254: "pageReq",
}

type GetOrderListResp struct {
	Data     []*Order       `thrift:"data,1,optional" frugal:"1,optional,list<Order>" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewGetOrderListResp() *GetOrderListResp {
	return &GetOrderListResp{}
}

func (p *GetOrderListResp) InitDefault() {
}

var GetOrderListResp_Data_DEFAULT []*Order

func (p *GetOrderListResp) GetData() (v []*Order) {
	if !p.IsSetData() {
		return GetOrderListResp_Data_DEFAULT
	}
	return p.Data
}

var GetOrderListResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetOrderListResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetOrderListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetOrderListResp) SetData(val []*Order) {
	p.Data = val
}
func (p *GetOrderListResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *GetOrderListResp) IsSetData() bool {
	return p.Data != nil
}

func (p *GetOrderListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetOrderListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOrderListResp(%+v)", *p)
}

var fieldIDToName_GetOrderListResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type RefundOrderReq struct {
	Id        int64   `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Reason    string  `thrift:"reason,2,optional" frugal:"2,optional,string" json:"reason,omitempty"`
	Amount    float64 `thrift:"amount,3,optional" frugal:"3,optional,double" json:"amount,omitempty"`
	CreatedId int64   `thrift:"createdId,4,optional" frugal:"4,optional,i64" json:"createdId,omitempty"`
}

func NewRefundOrderReq() *RefundOrderReq {
	return &RefundOrderReq{

		Id:        0,
		Reason:    "",
		Amount:    0.0,
		CreatedId: 1,
	}
}

func (p *RefundOrderReq) InitDefault() {
	p.Id = 0
	p.Reason = ""
	p.Amount = 0.0
	p.CreatedId = 1
}

var RefundOrderReq_Id_DEFAULT int64 = 0

func (p *RefundOrderReq) GetId() (v int64) {
	if !p.IsSetId() {
		return RefundOrderReq_Id_DEFAULT
	}
	return p.Id
}

var RefundOrderReq_Reason_DEFAULT string = ""

func (p *RefundOrderReq) GetReason() (v string) {
	if !p.IsSetReason() {
		return RefundOrderReq_Reason_DEFAULT
	}
	return p.Reason
}

var RefundOrderReq_Amount_DEFAULT float64 = 0.0

func (p *RefundOrderReq) GetAmount() (v float64) {
	if !p.IsSetAmount() {
		return RefundOrderReq_Amount_DEFAULT
	}
	return p.Amount
}

var RefundOrderReq_CreatedId_DEFAULT int64 = 1

func (p *RefundOrderReq) GetCreatedId() (v int64) {
	if !p.IsSetCreatedId() {
		return RefundOrderReq_CreatedId_DEFAULT
	}
	return p.CreatedId
}
func (p *RefundOrderReq) SetId(val int64) {
	p.Id = val
}
func (p *RefundOrderReq) SetReason(val string) {
	p.Reason = val
}
func (p *RefundOrderReq) SetAmount(val float64) {
	p.Amount = val
}
func (p *RefundOrderReq) SetCreatedId(val int64) {
	p.CreatedId = val
}

func (p *RefundOrderReq) IsSetId() bool {
	return p.Id != RefundOrderReq_Id_DEFAULT
}

func (p *RefundOrderReq) IsSetReason() bool {
	return p.Reason != RefundOrderReq_Reason_DEFAULT
}

func (p *RefundOrderReq) IsSetAmount() bool {
	return p.Amount != RefundOrderReq_Amount_DEFAULT
}

func (p *RefundOrderReq) IsSetCreatedId() bool {
	return p.CreatedId != RefundOrderReq_CreatedId_DEFAULT
}

func (p *RefundOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefundOrderReq(%+v)", *p)
}

var fieldIDToName_RefundOrderReq = map[int16]string{
	1: "id",
	2: "reason",
	3: "amount",
	4: "createdId",
}

type CancelledOrderReq struct {
	Id        int64  `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Reason    string `thrift:"reason,2,optional" frugal:"2,optional,string" json:"reason,omitempty"`
	CreatedId int64  `thrift:"createdId,3,optional" frugal:"3,optional,i64" json:"createdId,omitempty"`
}

func NewCancelledOrderReq() *CancelledOrderReq {
	return &CancelledOrderReq{

		Id:        0,
		Reason:    "",
		CreatedId: 1,
	}
}

func (p *CancelledOrderReq) InitDefault() {
	p.Id = 0
	p.Reason = ""
	p.CreatedId = 1
}

var CancelledOrderReq_Id_DEFAULT int64 = 0

func (p *CancelledOrderReq) GetId() (v int64) {
	if !p.IsSetId() {
		return CancelledOrderReq_Id_DEFAULT
	}
	return p.Id
}

var CancelledOrderReq_Reason_DEFAULT string = ""

func (p *CancelledOrderReq) GetReason() (v string) {
	if !p.IsSetReason() {
		return CancelledOrderReq_Reason_DEFAULT
	}
	return p.Reason
}

var CancelledOrderReq_CreatedId_DEFAULT int64 = 1

func (p *CancelledOrderReq) GetCreatedId() (v int64) {
	if !p.IsSetCreatedId() {
		return CancelledOrderReq_CreatedId_DEFAULT
	}
	return p.CreatedId
}
func (p *CancelledOrderReq) SetId(val int64) {
	p.Id = val
}
func (p *CancelledOrderReq) SetReason(val string) {
	p.Reason = val
}
func (p *CancelledOrderReq) SetCreatedId(val int64) {
	p.CreatedId = val
}

func (p *CancelledOrderReq) IsSetId() bool {
	return p.Id != CancelledOrderReq_Id_DEFAULT
}

func (p *CancelledOrderReq) IsSetReason() bool {
	return p.Reason != CancelledOrderReq_Reason_DEFAULT
}

func (p *CancelledOrderReq) IsSetCreatedId() bool {
	return p.CreatedId != CancelledOrderReq_CreatedId_DEFAULT
}

func (p *CancelledOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CancelledOrderReq(%+v)", *p)
}

var fieldIDToName_CancelledOrderReq = map[int16]string{
	1: "id",
	2: "reason",
	3: "createdId",
}

type CreateOrderResp struct {
	Order    *Order         `thrift:"order,1,optional" frugal:"1,optional,Order" json:"order,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewCreateOrderResp() *CreateOrderResp {
	return &CreateOrderResp{}
}

func (p *CreateOrderResp) InitDefault() {
}

var CreateOrderResp_Order_DEFAULT *Order

func (p *CreateOrderResp) GetOrder() (v *Order) {
	if !p.IsSetOrder() {
		return CreateOrderResp_Order_DEFAULT
	}
	return p.Order
}

var CreateOrderResp_BaseResp_DEFAULT *base.BaseResp

func (p *CreateOrderResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return CreateOrderResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateOrderResp) SetOrder(val *Order) {
	p.Order = val
}
func (p *CreateOrderResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *CreateOrderResp) IsSetOrder() bool {
	return p.Order != nil
}

func (p *CreateOrderResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateOrderResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOrderResp(%+v)", *p)
}

var fieldIDToName_CreateOrderResp = map[int16]string{
	1:   "order",
	255: "baseResp",
}

type OrderResp struct {
	Order    *Order         `thrift:"order,1,optional" frugal:"1,optional,Order" json:"order,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewOrderResp() *OrderResp {
	return &OrderResp{}
}

func (p *OrderResp) InitDefault() {
}

var OrderResp_Order_DEFAULT *Order

func (p *OrderResp) GetOrder() (v *Order) {
	if !p.IsSetOrder() {
		return OrderResp_Order_DEFAULT
	}
	return p.Order
}

var OrderResp_BaseResp_DEFAULT *base.BaseResp

func (p *OrderResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return OrderResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *OrderResp) SetOrder(val *Order) {
	p.Order = val
}
func (p *OrderResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *OrderResp) IsSetOrder() bool {
	return p.Order != nil
}

func (p *OrderResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *OrderResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderResp(%+v)", *p)
}

var fieldIDToName_OrderResp = map[int16]string{
	1:   "order",
	255: "baseResp",
}

type CreateOrderReq struct {
	MemberId    int64   `thrift:"memberId,1,optional" frugal:"1,optional,i64" json:"memberId,omitempty"`
	CreatedId   int64   `thrift:"createdId,2,optional" frugal:"2,optional,i64" json:"createdId,omitempty"`
	Items       *Item   `thrift:"items,3,optional" frugal:"3,optional,Item" json:"items,omitempty"`
	TotalAmount float64 `thrift:"totalAmount,4,optional" frugal:"4,optional,double" json:"totalAmount,omitempty"`
}

func NewCreateOrderReq() *CreateOrderReq {
	return &CreateOrderReq{

		MemberId:    0,
		CreatedId:   1,
		Items:       &Item{},
		TotalAmount: 0.0,
	}
}

func (p *CreateOrderReq) InitDefault() {
	p.MemberId = 0
	p.CreatedId = 1
	p.Items = &Item{}
	p.TotalAmount = 0.0
}

var CreateOrderReq_MemberId_DEFAULT int64 = 0

func (p *CreateOrderReq) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return CreateOrderReq_MemberId_DEFAULT
	}
	return p.MemberId
}

var CreateOrderReq_CreatedId_DEFAULT int64 = 1

func (p *CreateOrderReq) GetCreatedId() (v int64) {
	if !p.IsSetCreatedId() {
		return CreateOrderReq_CreatedId_DEFAULT
	}
	return p.CreatedId
}

var CreateOrderReq_Items_DEFAULT *Item = &Item{}

func (p *CreateOrderReq) GetItems() (v *Item) {
	if !p.IsSetItems() {
		return CreateOrderReq_Items_DEFAULT
	}
	return p.Items
}

var CreateOrderReq_TotalAmount_DEFAULT float64 = 0.0

func (p *CreateOrderReq) GetTotalAmount() (v float64) {
	if !p.IsSetTotalAmount() {
		return CreateOrderReq_TotalAmount_DEFAULT
	}
	return p.TotalAmount
}
func (p *CreateOrderReq) SetMemberId(val int64) {
	p.MemberId = val
}
func (p *CreateOrderReq) SetCreatedId(val int64) {
	p.CreatedId = val
}
func (p *CreateOrderReq) SetItems(val *Item) {
	p.Items = val
}
func (p *CreateOrderReq) SetTotalAmount(val float64) {
	p.TotalAmount = val
}

func (p *CreateOrderReq) IsSetMemberId() bool {
	return p.MemberId != CreateOrderReq_MemberId_DEFAULT
}

func (p *CreateOrderReq) IsSetCreatedId() bool {
	return p.CreatedId != CreateOrderReq_CreatedId_DEFAULT
}

func (p *CreateOrderReq) IsSetItems() bool {
	return p.Items != nil
}

func (p *CreateOrderReq) IsSetTotalAmount() bool {
	return p.TotalAmount != CreateOrderReq_TotalAmount_DEFAULT
}

func (p *CreateOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOrderReq(%+v)", *p)
}

var fieldIDToName_CreateOrderReq = map[int16]string{
	1: "memberId",
	2: "createdId",
	3: "items",
	4: "totalAmount",
}

type PaymentReq struct {
}

func NewPaymentReq() *PaymentReq {
	return &PaymentReq{}
}

func (p *PaymentReq) InitDefault() {
}

func (p *PaymentReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentReq(%+v)", *p)
}

var fieldIDToName_PaymentReq = map[int16]string{}

type OrderService interface {
	GetOrderInfo(ctx context.Context, req *GetOrderInfoReq) (r *OrderResp, err error)

	GetOrderList(ctx context.Context, req *GetOrderListReq) (r *GetOrderListResp, err error)

	DeleteOrder(ctx context.Context, req *base.IDReq) (r *base.BaseResp, err error)

	CreateOrder(ctx context.Context, req *GetOrderListReq) (r *OrderResp, err error)

	Payment(ctx context.Context, req *PaymentReq) (r *OrderResp, err error)

	CancelledOrder(ctx context.Context, req *CreateOrderReq) (r *base.BaseResp, err error)

	RefundOrder(ctx context.Context, req *RefundOrderReq) (r *base.BaseResp, err error)
}

type OrderServiceGetOrderInfoArgs struct {
	Req *GetOrderInfoReq `thrift:"req,1" frugal:"1,default,GetOrderInfoReq" json:"req"`
}

func NewOrderServiceGetOrderInfoArgs() *OrderServiceGetOrderInfoArgs {
	return &OrderServiceGetOrderInfoArgs{}
}

func (p *OrderServiceGetOrderInfoArgs) InitDefault() {
}

var OrderServiceGetOrderInfoArgs_Req_DEFAULT *GetOrderInfoReq

func (p *OrderServiceGetOrderInfoArgs) GetReq() (v *GetOrderInfoReq) {
	if !p.IsSetReq() {
		return OrderServiceGetOrderInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceGetOrderInfoArgs) SetReq(val *GetOrderInfoReq) {
	p.Req = val
}

func (p *OrderServiceGetOrderInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceGetOrderInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceGetOrderInfoArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceGetOrderInfoArgs = map[int16]string{
	1: "req",
}

type OrderServiceGetOrderInfoResult struct {
	Success *OrderResp `thrift:"success,0,optional" frugal:"0,optional,OrderResp" json:"success,omitempty"`
}

func NewOrderServiceGetOrderInfoResult() *OrderServiceGetOrderInfoResult {
	return &OrderServiceGetOrderInfoResult{}
}

func (p *OrderServiceGetOrderInfoResult) InitDefault() {
}

var OrderServiceGetOrderInfoResult_Success_DEFAULT *OrderResp

func (p *OrderServiceGetOrderInfoResult) GetSuccess() (v *OrderResp) {
	if !p.IsSetSuccess() {
		return OrderServiceGetOrderInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceGetOrderInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*OrderResp)
}

func (p *OrderServiceGetOrderInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceGetOrderInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceGetOrderInfoResult(%+v)", *p)
}

var fieldIDToName_OrderServiceGetOrderInfoResult = map[int16]string{
	0: "success",
}

type OrderServiceGetOrderListArgs struct {
	Req *GetOrderListReq `thrift:"req,1" frugal:"1,default,GetOrderListReq" json:"req"`
}

func NewOrderServiceGetOrderListArgs() *OrderServiceGetOrderListArgs {
	return &OrderServiceGetOrderListArgs{}
}

func (p *OrderServiceGetOrderListArgs) InitDefault() {
}

var OrderServiceGetOrderListArgs_Req_DEFAULT *GetOrderListReq

func (p *OrderServiceGetOrderListArgs) GetReq() (v *GetOrderListReq) {
	if !p.IsSetReq() {
		return OrderServiceGetOrderListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceGetOrderListArgs) SetReq(val *GetOrderListReq) {
	p.Req = val
}

func (p *OrderServiceGetOrderListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceGetOrderListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceGetOrderListArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceGetOrderListArgs = map[int16]string{
	1: "req",
}

type OrderServiceGetOrderListResult struct {
	Success *GetOrderListResp `thrift:"success,0,optional" frugal:"0,optional,GetOrderListResp" json:"success,omitempty"`
}

func NewOrderServiceGetOrderListResult() *OrderServiceGetOrderListResult {
	return &OrderServiceGetOrderListResult{}
}

func (p *OrderServiceGetOrderListResult) InitDefault() {
}

var OrderServiceGetOrderListResult_Success_DEFAULT *GetOrderListResp

func (p *OrderServiceGetOrderListResult) GetSuccess() (v *GetOrderListResp) {
	if !p.IsSetSuccess() {
		return OrderServiceGetOrderListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceGetOrderListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetOrderListResp)
}

func (p *OrderServiceGetOrderListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceGetOrderListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceGetOrderListResult(%+v)", *p)
}

var fieldIDToName_OrderServiceGetOrderListResult = map[int16]string{
	0: "success",
}

type OrderServiceDeleteOrderArgs struct {
	Req *base.IDReq `thrift:"req,1" frugal:"1,default,base.IDReq" json:"req"`
}

func NewOrderServiceDeleteOrderArgs() *OrderServiceDeleteOrderArgs {
	return &OrderServiceDeleteOrderArgs{}
}

func (p *OrderServiceDeleteOrderArgs) InitDefault() {
}

var OrderServiceDeleteOrderArgs_Req_DEFAULT *base.IDReq

func (p *OrderServiceDeleteOrderArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return OrderServiceDeleteOrderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceDeleteOrderArgs) SetReq(val *base.IDReq) {
	p.Req = val
}

func (p *OrderServiceDeleteOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceDeleteOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceDeleteOrderArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceDeleteOrderArgs = map[int16]string{
	1: "req",
}

type OrderServiceDeleteOrderResult struct {
	Success *base.BaseResp `thrift:"success,0,optional" frugal:"0,optional,base.BaseResp" json:"success,omitempty"`
}

func NewOrderServiceDeleteOrderResult() *OrderServiceDeleteOrderResult {
	return &OrderServiceDeleteOrderResult{}
}

func (p *OrderServiceDeleteOrderResult) InitDefault() {
}

var OrderServiceDeleteOrderResult_Success_DEFAULT *base.BaseResp

func (p *OrderServiceDeleteOrderResult) GetSuccess() (v *base.BaseResp) {
	if !p.IsSetSuccess() {
		return OrderServiceDeleteOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceDeleteOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.BaseResp)
}

func (p *OrderServiceDeleteOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceDeleteOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceDeleteOrderResult(%+v)", *p)
}

var fieldIDToName_OrderServiceDeleteOrderResult = map[int16]string{
	0: "success",
}

type OrderServiceCreateOrderArgs struct {
	Req *GetOrderListReq `thrift:"req,1" frugal:"1,default,GetOrderListReq" json:"req"`
}

func NewOrderServiceCreateOrderArgs() *OrderServiceCreateOrderArgs {
	return &OrderServiceCreateOrderArgs{}
}

func (p *OrderServiceCreateOrderArgs) InitDefault() {
}

var OrderServiceCreateOrderArgs_Req_DEFAULT *GetOrderListReq

func (p *OrderServiceCreateOrderArgs) GetReq() (v *GetOrderListReq) {
	if !p.IsSetReq() {
		return OrderServiceCreateOrderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceCreateOrderArgs) SetReq(val *GetOrderListReq) {
	p.Req = val
}

func (p *OrderServiceCreateOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceCreateOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceCreateOrderArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceCreateOrderArgs = map[int16]string{
	1: "req",
}

type OrderServiceCreateOrderResult struct {
	Success *OrderResp `thrift:"success,0,optional" frugal:"0,optional,OrderResp" json:"success,omitempty"`
}

func NewOrderServiceCreateOrderResult() *OrderServiceCreateOrderResult {
	return &OrderServiceCreateOrderResult{}
}

func (p *OrderServiceCreateOrderResult) InitDefault() {
}

var OrderServiceCreateOrderResult_Success_DEFAULT *OrderResp

func (p *OrderServiceCreateOrderResult) GetSuccess() (v *OrderResp) {
	if !p.IsSetSuccess() {
		return OrderServiceCreateOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceCreateOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*OrderResp)
}

func (p *OrderServiceCreateOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceCreateOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceCreateOrderResult(%+v)", *p)
}

var fieldIDToName_OrderServiceCreateOrderResult = map[int16]string{
	0: "success",
}

type OrderServicePaymentArgs struct {
	Req *PaymentReq `thrift:"req,1" frugal:"1,default,PaymentReq" json:"req"`
}

func NewOrderServicePaymentArgs() *OrderServicePaymentArgs {
	return &OrderServicePaymentArgs{}
}

func (p *OrderServicePaymentArgs) InitDefault() {
}

var OrderServicePaymentArgs_Req_DEFAULT *PaymentReq

func (p *OrderServicePaymentArgs) GetReq() (v *PaymentReq) {
	if !p.IsSetReq() {
		return OrderServicePaymentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServicePaymentArgs) SetReq(val *PaymentReq) {
	p.Req = val
}

func (p *OrderServicePaymentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServicePaymentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServicePaymentArgs(%+v)", *p)
}

var fieldIDToName_OrderServicePaymentArgs = map[int16]string{
	1: "req",
}

type OrderServicePaymentResult struct {
	Success *OrderResp `thrift:"success,0,optional" frugal:"0,optional,OrderResp" json:"success,omitempty"`
}

func NewOrderServicePaymentResult() *OrderServicePaymentResult {
	return &OrderServicePaymentResult{}
}

func (p *OrderServicePaymentResult) InitDefault() {
}

var OrderServicePaymentResult_Success_DEFAULT *OrderResp

func (p *OrderServicePaymentResult) GetSuccess() (v *OrderResp) {
	if !p.IsSetSuccess() {
		return OrderServicePaymentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServicePaymentResult) SetSuccess(x interface{}) {
	p.Success = x.(*OrderResp)
}

func (p *OrderServicePaymentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServicePaymentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServicePaymentResult(%+v)", *p)
}

var fieldIDToName_OrderServicePaymentResult = map[int16]string{
	0: "success",
}

type OrderServiceCancelledOrderArgs struct {
	Req *CreateOrderReq `thrift:"req,1" frugal:"1,default,CreateOrderReq" json:"req"`
}

func NewOrderServiceCancelledOrderArgs() *OrderServiceCancelledOrderArgs {
	return &OrderServiceCancelledOrderArgs{}
}

func (p *OrderServiceCancelledOrderArgs) InitDefault() {
}

var OrderServiceCancelledOrderArgs_Req_DEFAULT *CreateOrderReq

func (p *OrderServiceCancelledOrderArgs) GetReq() (v *CreateOrderReq) {
	if !p.IsSetReq() {
		return OrderServiceCancelledOrderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceCancelledOrderArgs) SetReq(val *CreateOrderReq) {
	p.Req = val
}

func (p *OrderServiceCancelledOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceCancelledOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceCancelledOrderArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceCancelledOrderArgs = map[int16]string{
	1: "req",
}

type OrderServiceCancelledOrderResult struct {
	Success *base.BaseResp `thrift:"success,0,optional" frugal:"0,optional,base.BaseResp" json:"success,omitempty"`
}

func NewOrderServiceCancelledOrderResult() *OrderServiceCancelledOrderResult {
	return &OrderServiceCancelledOrderResult{}
}

func (p *OrderServiceCancelledOrderResult) InitDefault() {
}

var OrderServiceCancelledOrderResult_Success_DEFAULT *base.BaseResp

func (p *OrderServiceCancelledOrderResult) GetSuccess() (v *base.BaseResp) {
	if !p.IsSetSuccess() {
		return OrderServiceCancelledOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceCancelledOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.BaseResp)
}

func (p *OrderServiceCancelledOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceCancelledOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceCancelledOrderResult(%+v)", *p)
}

var fieldIDToName_OrderServiceCancelledOrderResult = map[int16]string{
	0: "success",
}

type OrderServiceRefundOrderArgs struct {
	Req *RefundOrderReq `thrift:"req,1" frugal:"1,default,RefundOrderReq" json:"req"`
}

func NewOrderServiceRefundOrderArgs() *OrderServiceRefundOrderArgs {
	return &OrderServiceRefundOrderArgs{}
}

func (p *OrderServiceRefundOrderArgs) InitDefault() {
}

var OrderServiceRefundOrderArgs_Req_DEFAULT *RefundOrderReq

func (p *OrderServiceRefundOrderArgs) GetReq() (v *RefundOrderReq) {
	if !p.IsSetReq() {
		return OrderServiceRefundOrderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceRefundOrderArgs) SetReq(val *RefundOrderReq) {
	p.Req = val
}

func (p *OrderServiceRefundOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceRefundOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceRefundOrderArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceRefundOrderArgs = map[int16]string{
	1: "req",
}

type OrderServiceRefundOrderResult struct {
	Success *base.BaseResp `thrift:"success,0,optional" frugal:"0,optional,base.BaseResp" json:"success,omitempty"`
}

func NewOrderServiceRefundOrderResult() *OrderServiceRefundOrderResult {
	return &OrderServiceRefundOrderResult{}
}

func (p *OrderServiceRefundOrderResult) InitDefault() {
}

var OrderServiceRefundOrderResult_Success_DEFAULT *base.BaseResp

func (p *OrderServiceRefundOrderResult) GetSuccess() (v *base.BaseResp) {
	if !p.IsSetSuccess() {
		return OrderServiceRefundOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceRefundOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.BaseResp)
}

func (p *OrderServiceRefundOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceRefundOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceRefundOrderResult(%+v)", *p)
}

var fieldIDToName_OrderServiceRefundOrderResult = map[int16]string{
	0: "success",
}
