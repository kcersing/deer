// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers-order/biz/dal/db/mysql/ent/ordereventsubscriptions"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderEventSubscriptionsCreate is the builder for creating a OrderEventSubscriptions entity.
type OrderEventSubscriptionsCreate struct {
	config
	mutation *OrderEventSubscriptionsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *OrderEventSubscriptionsCreate) SetCreatedAt(v time.Time) *OrderEventSubscriptionsCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *OrderEventSubscriptionsCreate) SetNillableCreatedAt(v *time.Time) *OrderEventSubscriptionsCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *OrderEventSubscriptionsCreate) SetUpdatedAt(v time.Time) *OrderEventSubscriptionsCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *OrderEventSubscriptionsCreate) SetNillableUpdatedAt(v *time.Time) *OrderEventSubscriptionsCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDelete sets the "delete" field.
func (_c *OrderEventSubscriptionsCreate) SetDelete(v int64) *OrderEventSubscriptionsCreate {
	_c.mutation.SetDelete(v)
	return _c
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_c *OrderEventSubscriptionsCreate) SetNillableDelete(v *int64) *OrderEventSubscriptionsCreate {
	if v != nil {
		_c.SetDelete(*v)
	}
	return _c
}

// SetCreatedID sets the "created_id" field.
func (_c *OrderEventSubscriptionsCreate) SetCreatedID(v int64) *OrderEventSubscriptionsCreate {
	_c.mutation.SetCreatedID(v)
	return _c
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_c *OrderEventSubscriptionsCreate) SetNillableCreatedID(v *int64) *OrderEventSubscriptionsCreate {
	if v != nil {
		_c.SetCreatedID(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *OrderEventSubscriptionsCreate) SetName(v string) *OrderEventSubscriptionsCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *OrderEventSubscriptionsCreate) SetNillableName(v *string) *OrderEventSubscriptionsCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetEventType sets the "event_type" field.
func (_c *OrderEventSubscriptionsCreate) SetEventType(v string) *OrderEventSubscriptionsCreate {
	_c.mutation.SetEventType(v)
	return _c
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (_c *OrderEventSubscriptionsCreate) SetNillableEventType(v *string) *OrderEventSubscriptionsCreate {
	if v != nil {
		_c.SetEventType(*v)
	}
	return _c
}

// SetLastProcessedID sets the "last_processed_id" field.
func (_c *OrderEventSubscriptionsCreate) SetLastProcessedID(v string) *OrderEventSubscriptionsCreate {
	_c.mutation.SetLastProcessedID(v)
	return _c
}

// SetNillableLastProcessedID sets the "last_processed_id" field if the given value is not nil.
func (_c *OrderEventSubscriptionsCreate) SetNillableLastProcessedID(v *string) *OrderEventSubscriptionsCreate {
	if v != nil {
		_c.SetLastProcessedID(*v)
	}
	return _c
}

// SetLastProcessedVersion sets the "last_processed_version" field.
func (_c *OrderEventSubscriptionsCreate) SetLastProcessedVersion(v int64) *OrderEventSubscriptionsCreate {
	_c.mutation.SetLastProcessedVersion(v)
	return _c
}

// SetNillableLastProcessedVersion sets the "last_processed_version" field if the given value is not nil.
func (_c *OrderEventSubscriptionsCreate) SetNillableLastProcessedVersion(v *int64) *OrderEventSubscriptionsCreate {
	if v != nil {
		_c.SetLastProcessedVersion(*v)
	}
	return _c
}

// SetLastProcessedAt sets the "last_processed_at" field.
func (_c *OrderEventSubscriptionsCreate) SetLastProcessedAt(v time.Time) *OrderEventSubscriptionsCreate {
	_c.mutation.SetLastProcessedAt(v)
	return _c
}

// SetNillableLastProcessedAt sets the "last_processed_at" field if the given value is not nil.
func (_c *OrderEventSubscriptionsCreate) SetNillableLastProcessedAt(v *time.Time) *OrderEventSubscriptionsCreate {
	if v != nil {
		_c.SetLastProcessedAt(*v)
	}
	return _c
}

// SetIsActive sets the "is_active" field.
func (_c *OrderEventSubscriptionsCreate) SetIsActive(v int64) *OrderEventSubscriptionsCreate {
	_c.mutation.SetIsActive(v)
	return _c
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_c *OrderEventSubscriptionsCreate) SetNillableIsActive(v *int64) *OrderEventSubscriptionsCreate {
	if v != nil {
		_c.SetIsActive(*v)
	}
	return _c
}

// SetErrorCount sets the "error_count" field.
func (_c *OrderEventSubscriptionsCreate) SetErrorCount(v int64) *OrderEventSubscriptionsCreate {
	_c.mutation.SetErrorCount(v)
	return _c
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (_c *OrderEventSubscriptionsCreate) SetNillableErrorCount(v *int64) *OrderEventSubscriptionsCreate {
	if v != nil {
		_c.SetErrorCount(*v)
	}
	return _c
}

// SetLastError sets the "last_error" field.
func (_c *OrderEventSubscriptionsCreate) SetLastError(v string) *OrderEventSubscriptionsCreate {
	_c.mutation.SetLastError(v)
	return _c
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (_c *OrderEventSubscriptionsCreate) SetNillableLastError(v *string) *OrderEventSubscriptionsCreate {
	if v != nil {
		_c.SetLastError(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *OrderEventSubscriptionsCreate) SetID(v int64) *OrderEventSubscriptionsCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the OrderEventSubscriptionsMutation object of the builder.
func (_c *OrderEventSubscriptionsCreate) Mutation() *OrderEventSubscriptionsMutation {
	return _c.mutation
}

// Save creates the OrderEventSubscriptions in the database.
func (_c *OrderEventSubscriptionsCreate) Save(ctx context.Context) (*OrderEventSubscriptions, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OrderEventSubscriptionsCreate) SaveX(ctx context.Context) *OrderEventSubscriptions {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrderEventSubscriptionsCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrderEventSubscriptionsCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OrderEventSubscriptionsCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := ordereventsubscriptions.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := ordereventsubscriptions.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Delete(); !ok {
		v := ordereventsubscriptions.DefaultDelete
		_c.mutation.SetDelete(v)
	}
	if _, ok := _c.mutation.CreatedID(); !ok {
		v := ordereventsubscriptions.DefaultCreatedID
		_c.mutation.SetCreatedID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *OrderEventSubscriptionsCreate) check() error {
	return nil
}

func (_c *OrderEventSubscriptionsCreate) sqlSave(ctx context.Context) (*OrderEventSubscriptions, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OrderEventSubscriptionsCreate) createSpec() (*OrderEventSubscriptions, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderEventSubscriptions{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(ordereventsubscriptions.Table, sqlgraph.NewFieldSpec(ordereventsubscriptions.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(ordereventsubscriptions.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(ordereventsubscriptions.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Delete(); ok {
		_spec.SetField(ordereventsubscriptions.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := _c.mutation.CreatedID(); ok {
		_spec.SetField(ordereventsubscriptions.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(ordereventsubscriptions.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.EventType(); ok {
		_spec.SetField(ordereventsubscriptions.FieldEventType, field.TypeString, value)
		_node.EventType = value
	}
	if value, ok := _c.mutation.LastProcessedID(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastProcessedID, field.TypeString, value)
		_node.LastProcessedID = value
	}
	if value, ok := _c.mutation.LastProcessedVersion(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastProcessedVersion, field.TypeInt64, value)
		_node.LastProcessedVersion = value
	}
	if value, ok := _c.mutation.LastProcessedAt(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastProcessedAt, field.TypeTime, value)
		_node.LastProcessedAt = value
	}
	if value, ok := _c.mutation.IsActive(); ok {
		_spec.SetField(ordereventsubscriptions.FieldIsActive, field.TypeInt64, value)
		_node.IsActive = value
	}
	if value, ok := _c.mutation.ErrorCount(); ok {
		_spec.SetField(ordereventsubscriptions.FieldErrorCount, field.TypeInt64, value)
		_node.ErrorCount = value
	}
	if value, ok := _c.mutation.LastError(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastError, field.TypeString, value)
		_node.LastError = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderEventSubscriptions.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderEventSubscriptionsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *OrderEventSubscriptionsCreate) OnConflict(opts ...sql.ConflictOption) *OrderEventSubscriptionsUpsertOne {
	_c.conflict = opts
	return &OrderEventSubscriptionsUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderEventSubscriptions.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *OrderEventSubscriptionsCreate) OnConflictColumns(columns ...string) *OrderEventSubscriptionsUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &OrderEventSubscriptionsUpsertOne{
		create: _c,
	}
}

type (
	// OrderEventSubscriptionsUpsertOne is the builder for "upsert"-ing
	//  one OrderEventSubscriptions node.
	OrderEventSubscriptionsUpsertOne struct {
		create *OrderEventSubscriptionsCreate
	}

	// OrderEventSubscriptionsUpsert is the "OnConflict" setter.
	OrderEventSubscriptionsUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderEventSubscriptionsUpsert) SetUpdatedAt(v time.Time) *OrderEventSubscriptionsUpsert {
	u.Set(ordereventsubscriptions.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsert) UpdateUpdatedAt() *OrderEventSubscriptionsUpsert {
	u.SetExcluded(ordereventsubscriptions.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderEventSubscriptionsUpsert) ClearUpdatedAt() *OrderEventSubscriptionsUpsert {
	u.SetNull(ordereventsubscriptions.FieldUpdatedAt)
	return u
}

// SetDelete sets the "delete" field.
func (u *OrderEventSubscriptionsUpsert) SetDelete(v int64) *OrderEventSubscriptionsUpsert {
	u.Set(ordereventsubscriptions.FieldDelete, v)
	return u
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsert) UpdateDelete() *OrderEventSubscriptionsUpsert {
	u.SetExcluded(ordereventsubscriptions.FieldDelete)
	return u
}

// AddDelete adds v to the "delete" field.
func (u *OrderEventSubscriptionsUpsert) AddDelete(v int64) *OrderEventSubscriptionsUpsert {
	u.Add(ordereventsubscriptions.FieldDelete, v)
	return u
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderEventSubscriptionsUpsert) ClearDelete() *OrderEventSubscriptionsUpsert {
	u.SetNull(ordereventsubscriptions.FieldDelete)
	return u
}

// SetCreatedID sets the "created_id" field.
func (u *OrderEventSubscriptionsUpsert) SetCreatedID(v int64) *OrderEventSubscriptionsUpsert {
	u.Set(ordereventsubscriptions.FieldCreatedID, v)
	return u
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsert) UpdateCreatedID() *OrderEventSubscriptionsUpsert {
	u.SetExcluded(ordereventsubscriptions.FieldCreatedID)
	return u
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderEventSubscriptionsUpsert) AddCreatedID(v int64) *OrderEventSubscriptionsUpsert {
	u.Add(ordereventsubscriptions.FieldCreatedID, v)
	return u
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderEventSubscriptionsUpsert) ClearCreatedID() *OrderEventSubscriptionsUpsert {
	u.SetNull(ordereventsubscriptions.FieldCreatedID)
	return u
}

// SetName sets the "name" field.
func (u *OrderEventSubscriptionsUpsert) SetName(v string) *OrderEventSubscriptionsUpsert {
	u.Set(ordereventsubscriptions.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsert) UpdateName() *OrderEventSubscriptionsUpsert {
	u.SetExcluded(ordereventsubscriptions.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *OrderEventSubscriptionsUpsert) ClearName() *OrderEventSubscriptionsUpsert {
	u.SetNull(ordereventsubscriptions.FieldName)
	return u
}

// SetEventType sets the "event_type" field.
func (u *OrderEventSubscriptionsUpsert) SetEventType(v string) *OrderEventSubscriptionsUpsert {
	u.Set(ordereventsubscriptions.FieldEventType, v)
	return u
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsert) UpdateEventType() *OrderEventSubscriptionsUpsert {
	u.SetExcluded(ordereventsubscriptions.FieldEventType)
	return u
}

// ClearEventType clears the value of the "event_type" field.
func (u *OrderEventSubscriptionsUpsert) ClearEventType() *OrderEventSubscriptionsUpsert {
	u.SetNull(ordereventsubscriptions.FieldEventType)
	return u
}

// SetLastProcessedID sets the "last_processed_id" field.
func (u *OrderEventSubscriptionsUpsert) SetLastProcessedID(v string) *OrderEventSubscriptionsUpsert {
	u.Set(ordereventsubscriptions.FieldLastProcessedID, v)
	return u
}

// UpdateLastProcessedID sets the "last_processed_id" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsert) UpdateLastProcessedID() *OrderEventSubscriptionsUpsert {
	u.SetExcluded(ordereventsubscriptions.FieldLastProcessedID)
	return u
}

// ClearLastProcessedID clears the value of the "last_processed_id" field.
func (u *OrderEventSubscriptionsUpsert) ClearLastProcessedID() *OrderEventSubscriptionsUpsert {
	u.SetNull(ordereventsubscriptions.FieldLastProcessedID)
	return u
}

// SetLastProcessedVersion sets the "last_processed_version" field.
func (u *OrderEventSubscriptionsUpsert) SetLastProcessedVersion(v int64) *OrderEventSubscriptionsUpsert {
	u.Set(ordereventsubscriptions.FieldLastProcessedVersion, v)
	return u
}

// UpdateLastProcessedVersion sets the "last_processed_version" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsert) UpdateLastProcessedVersion() *OrderEventSubscriptionsUpsert {
	u.SetExcluded(ordereventsubscriptions.FieldLastProcessedVersion)
	return u
}

// AddLastProcessedVersion adds v to the "last_processed_version" field.
func (u *OrderEventSubscriptionsUpsert) AddLastProcessedVersion(v int64) *OrderEventSubscriptionsUpsert {
	u.Add(ordereventsubscriptions.FieldLastProcessedVersion, v)
	return u
}

// ClearLastProcessedVersion clears the value of the "last_processed_version" field.
func (u *OrderEventSubscriptionsUpsert) ClearLastProcessedVersion() *OrderEventSubscriptionsUpsert {
	u.SetNull(ordereventsubscriptions.FieldLastProcessedVersion)
	return u
}

// SetLastProcessedAt sets the "last_processed_at" field.
func (u *OrderEventSubscriptionsUpsert) SetLastProcessedAt(v time.Time) *OrderEventSubscriptionsUpsert {
	u.Set(ordereventsubscriptions.FieldLastProcessedAt, v)
	return u
}

// UpdateLastProcessedAt sets the "last_processed_at" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsert) UpdateLastProcessedAt() *OrderEventSubscriptionsUpsert {
	u.SetExcluded(ordereventsubscriptions.FieldLastProcessedAt)
	return u
}

// ClearLastProcessedAt clears the value of the "last_processed_at" field.
func (u *OrderEventSubscriptionsUpsert) ClearLastProcessedAt() *OrderEventSubscriptionsUpsert {
	u.SetNull(ordereventsubscriptions.FieldLastProcessedAt)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *OrderEventSubscriptionsUpsert) SetIsActive(v int64) *OrderEventSubscriptionsUpsert {
	u.Set(ordereventsubscriptions.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsert) UpdateIsActive() *OrderEventSubscriptionsUpsert {
	u.SetExcluded(ordereventsubscriptions.FieldIsActive)
	return u
}

// AddIsActive adds v to the "is_active" field.
func (u *OrderEventSubscriptionsUpsert) AddIsActive(v int64) *OrderEventSubscriptionsUpsert {
	u.Add(ordereventsubscriptions.FieldIsActive, v)
	return u
}

// ClearIsActive clears the value of the "is_active" field.
func (u *OrderEventSubscriptionsUpsert) ClearIsActive() *OrderEventSubscriptionsUpsert {
	u.SetNull(ordereventsubscriptions.FieldIsActive)
	return u
}

// SetErrorCount sets the "error_count" field.
func (u *OrderEventSubscriptionsUpsert) SetErrorCount(v int64) *OrderEventSubscriptionsUpsert {
	u.Set(ordereventsubscriptions.FieldErrorCount, v)
	return u
}

// UpdateErrorCount sets the "error_count" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsert) UpdateErrorCount() *OrderEventSubscriptionsUpsert {
	u.SetExcluded(ordereventsubscriptions.FieldErrorCount)
	return u
}

// AddErrorCount adds v to the "error_count" field.
func (u *OrderEventSubscriptionsUpsert) AddErrorCount(v int64) *OrderEventSubscriptionsUpsert {
	u.Add(ordereventsubscriptions.FieldErrorCount, v)
	return u
}

// ClearErrorCount clears the value of the "error_count" field.
func (u *OrderEventSubscriptionsUpsert) ClearErrorCount() *OrderEventSubscriptionsUpsert {
	u.SetNull(ordereventsubscriptions.FieldErrorCount)
	return u
}

// SetLastError sets the "last_error" field.
func (u *OrderEventSubscriptionsUpsert) SetLastError(v string) *OrderEventSubscriptionsUpsert {
	u.Set(ordereventsubscriptions.FieldLastError, v)
	return u
}

// UpdateLastError sets the "last_error" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsert) UpdateLastError() *OrderEventSubscriptionsUpsert {
	u.SetExcluded(ordereventsubscriptions.FieldLastError)
	return u
}

// ClearLastError clears the value of the "last_error" field.
func (u *OrderEventSubscriptionsUpsert) ClearLastError() *OrderEventSubscriptionsUpsert {
	u.SetNull(ordereventsubscriptions.FieldLastError)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderEventSubscriptions.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ordereventsubscriptions.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderEventSubscriptionsUpsertOne) UpdateNewValues() *OrderEventSubscriptionsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(ordereventsubscriptions.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(ordereventsubscriptions.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderEventSubscriptions.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderEventSubscriptionsUpsertOne) Ignore() *OrderEventSubscriptionsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderEventSubscriptionsUpsertOne) DoNothing() *OrderEventSubscriptionsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderEventSubscriptionsCreate.OnConflict
// documentation for more info.
func (u *OrderEventSubscriptionsUpsertOne) Update(set func(*OrderEventSubscriptionsUpsert)) *OrderEventSubscriptionsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderEventSubscriptionsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderEventSubscriptionsUpsertOne) SetUpdatedAt(v time.Time) *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertOne) UpdateUpdatedAt() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderEventSubscriptionsUpsertOne) ClearUpdatedAt() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDelete sets the "delete" field.
func (u *OrderEventSubscriptionsUpsertOne) SetDelete(v int64) *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetDelete(v)
	})
}

// AddDelete adds v to the "delete" field.
func (u *OrderEventSubscriptionsUpsertOne) AddDelete(v int64) *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.AddDelete(v)
	})
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertOne) UpdateDelete() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateDelete()
	})
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderEventSubscriptionsUpsertOne) ClearDelete() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearDelete()
	})
}

// SetCreatedID sets the "created_id" field.
func (u *OrderEventSubscriptionsUpsertOne) SetCreatedID(v int64) *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetCreatedID(v)
	})
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderEventSubscriptionsUpsertOne) AddCreatedID(v int64) *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.AddCreatedID(v)
	})
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertOne) UpdateCreatedID() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateCreatedID()
	})
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderEventSubscriptionsUpsertOne) ClearCreatedID() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearCreatedID()
	})
}

// SetName sets the "name" field.
func (u *OrderEventSubscriptionsUpsertOne) SetName(v string) *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertOne) UpdateName() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *OrderEventSubscriptionsUpsertOne) ClearName() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearName()
	})
}

// SetEventType sets the "event_type" field.
func (u *OrderEventSubscriptionsUpsertOne) SetEventType(v string) *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertOne) UpdateEventType() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateEventType()
	})
}

// ClearEventType clears the value of the "event_type" field.
func (u *OrderEventSubscriptionsUpsertOne) ClearEventType() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearEventType()
	})
}

// SetLastProcessedID sets the "last_processed_id" field.
func (u *OrderEventSubscriptionsUpsertOne) SetLastProcessedID(v string) *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetLastProcessedID(v)
	})
}

// UpdateLastProcessedID sets the "last_processed_id" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertOne) UpdateLastProcessedID() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateLastProcessedID()
	})
}

// ClearLastProcessedID clears the value of the "last_processed_id" field.
func (u *OrderEventSubscriptionsUpsertOne) ClearLastProcessedID() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearLastProcessedID()
	})
}

// SetLastProcessedVersion sets the "last_processed_version" field.
func (u *OrderEventSubscriptionsUpsertOne) SetLastProcessedVersion(v int64) *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetLastProcessedVersion(v)
	})
}

// AddLastProcessedVersion adds v to the "last_processed_version" field.
func (u *OrderEventSubscriptionsUpsertOne) AddLastProcessedVersion(v int64) *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.AddLastProcessedVersion(v)
	})
}

// UpdateLastProcessedVersion sets the "last_processed_version" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertOne) UpdateLastProcessedVersion() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateLastProcessedVersion()
	})
}

// ClearLastProcessedVersion clears the value of the "last_processed_version" field.
func (u *OrderEventSubscriptionsUpsertOne) ClearLastProcessedVersion() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearLastProcessedVersion()
	})
}

// SetLastProcessedAt sets the "last_processed_at" field.
func (u *OrderEventSubscriptionsUpsertOne) SetLastProcessedAt(v time.Time) *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetLastProcessedAt(v)
	})
}

// UpdateLastProcessedAt sets the "last_processed_at" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertOne) UpdateLastProcessedAt() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateLastProcessedAt()
	})
}

// ClearLastProcessedAt clears the value of the "last_processed_at" field.
func (u *OrderEventSubscriptionsUpsertOne) ClearLastProcessedAt() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearLastProcessedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *OrderEventSubscriptionsUpsertOne) SetIsActive(v int64) *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetIsActive(v)
	})
}

// AddIsActive adds v to the "is_active" field.
func (u *OrderEventSubscriptionsUpsertOne) AddIsActive(v int64) *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.AddIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertOne) UpdateIsActive() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateIsActive()
	})
}

// ClearIsActive clears the value of the "is_active" field.
func (u *OrderEventSubscriptionsUpsertOne) ClearIsActive() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearIsActive()
	})
}

// SetErrorCount sets the "error_count" field.
func (u *OrderEventSubscriptionsUpsertOne) SetErrorCount(v int64) *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetErrorCount(v)
	})
}

// AddErrorCount adds v to the "error_count" field.
func (u *OrderEventSubscriptionsUpsertOne) AddErrorCount(v int64) *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.AddErrorCount(v)
	})
}

// UpdateErrorCount sets the "error_count" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertOne) UpdateErrorCount() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateErrorCount()
	})
}

// ClearErrorCount clears the value of the "error_count" field.
func (u *OrderEventSubscriptionsUpsertOne) ClearErrorCount() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearErrorCount()
	})
}

// SetLastError sets the "last_error" field.
func (u *OrderEventSubscriptionsUpsertOne) SetLastError(v string) *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetLastError(v)
	})
}

// UpdateLastError sets the "last_error" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertOne) UpdateLastError() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateLastError()
	})
}

// ClearLastError clears the value of the "last_error" field.
func (u *OrderEventSubscriptionsUpsertOne) ClearLastError() *OrderEventSubscriptionsUpsertOne {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearLastError()
	})
}

// Exec executes the query.
func (u *OrderEventSubscriptionsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderEventSubscriptionsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderEventSubscriptionsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderEventSubscriptionsUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderEventSubscriptionsUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderEventSubscriptionsCreateBulk is the builder for creating many OrderEventSubscriptions entities in bulk.
type OrderEventSubscriptionsCreateBulk struct {
	config
	err      error
	builders []*OrderEventSubscriptionsCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderEventSubscriptions entities in the database.
func (_c *OrderEventSubscriptionsCreateBulk) Save(ctx context.Context) ([]*OrderEventSubscriptions, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*OrderEventSubscriptions, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderEventSubscriptionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OrderEventSubscriptionsCreateBulk) SaveX(ctx context.Context) []*OrderEventSubscriptions {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrderEventSubscriptionsCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrderEventSubscriptionsCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderEventSubscriptions.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderEventSubscriptionsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *OrderEventSubscriptionsCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderEventSubscriptionsUpsertBulk {
	_c.conflict = opts
	return &OrderEventSubscriptionsUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderEventSubscriptions.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *OrderEventSubscriptionsCreateBulk) OnConflictColumns(columns ...string) *OrderEventSubscriptionsUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &OrderEventSubscriptionsUpsertBulk{
		create: _c,
	}
}

// OrderEventSubscriptionsUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderEventSubscriptions nodes.
type OrderEventSubscriptionsUpsertBulk struct {
	create *OrderEventSubscriptionsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderEventSubscriptions.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ordereventsubscriptions.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderEventSubscriptionsUpsertBulk) UpdateNewValues() *OrderEventSubscriptionsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(ordereventsubscriptions.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(ordereventsubscriptions.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderEventSubscriptions.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderEventSubscriptionsUpsertBulk) Ignore() *OrderEventSubscriptionsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderEventSubscriptionsUpsertBulk) DoNothing() *OrderEventSubscriptionsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderEventSubscriptionsCreateBulk.OnConflict
// documentation for more info.
func (u *OrderEventSubscriptionsUpsertBulk) Update(set func(*OrderEventSubscriptionsUpsert)) *OrderEventSubscriptionsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderEventSubscriptionsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderEventSubscriptionsUpsertBulk) SetUpdatedAt(v time.Time) *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertBulk) UpdateUpdatedAt() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderEventSubscriptionsUpsertBulk) ClearUpdatedAt() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDelete sets the "delete" field.
func (u *OrderEventSubscriptionsUpsertBulk) SetDelete(v int64) *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetDelete(v)
	})
}

// AddDelete adds v to the "delete" field.
func (u *OrderEventSubscriptionsUpsertBulk) AddDelete(v int64) *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.AddDelete(v)
	})
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertBulk) UpdateDelete() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateDelete()
	})
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderEventSubscriptionsUpsertBulk) ClearDelete() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearDelete()
	})
}

// SetCreatedID sets the "created_id" field.
func (u *OrderEventSubscriptionsUpsertBulk) SetCreatedID(v int64) *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetCreatedID(v)
	})
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderEventSubscriptionsUpsertBulk) AddCreatedID(v int64) *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.AddCreatedID(v)
	})
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertBulk) UpdateCreatedID() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateCreatedID()
	})
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderEventSubscriptionsUpsertBulk) ClearCreatedID() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearCreatedID()
	})
}

// SetName sets the "name" field.
func (u *OrderEventSubscriptionsUpsertBulk) SetName(v string) *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertBulk) UpdateName() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *OrderEventSubscriptionsUpsertBulk) ClearName() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearName()
	})
}

// SetEventType sets the "event_type" field.
func (u *OrderEventSubscriptionsUpsertBulk) SetEventType(v string) *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertBulk) UpdateEventType() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateEventType()
	})
}

// ClearEventType clears the value of the "event_type" field.
func (u *OrderEventSubscriptionsUpsertBulk) ClearEventType() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearEventType()
	})
}

// SetLastProcessedID sets the "last_processed_id" field.
func (u *OrderEventSubscriptionsUpsertBulk) SetLastProcessedID(v string) *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetLastProcessedID(v)
	})
}

// UpdateLastProcessedID sets the "last_processed_id" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertBulk) UpdateLastProcessedID() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateLastProcessedID()
	})
}

// ClearLastProcessedID clears the value of the "last_processed_id" field.
func (u *OrderEventSubscriptionsUpsertBulk) ClearLastProcessedID() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearLastProcessedID()
	})
}

// SetLastProcessedVersion sets the "last_processed_version" field.
func (u *OrderEventSubscriptionsUpsertBulk) SetLastProcessedVersion(v int64) *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetLastProcessedVersion(v)
	})
}

// AddLastProcessedVersion adds v to the "last_processed_version" field.
func (u *OrderEventSubscriptionsUpsertBulk) AddLastProcessedVersion(v int64) *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.AddLastProcessedVersion(v)
	})
}

// UpdateLastProcessedVersion sets the "last_processed_version" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertBulk) UpdateLastProcessedVersion() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateLastProcessedVersion()
	})
}

// ClearLastProcessedVersion clears the value of the "last_processed_version" field.
func (u *OrderEventSubscriptionsUpsertBulk) ClearLastProcessedVersion() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearLastProcessedVersion()
	})
}

// SetLastProcessedAt sets the "last_processed_at" field.
func (u *OrderEventSubscriptionsUpsertBulk) SetLastProcessedAt(v time.Time) *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetLastProcessedAt(v)
	})
}

// UpdateLastProcessedAt sets the "last_processed_at" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertBulk) UpdateLastProcessedAt() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateLastProcessedAt()
	})
}

// ClearLastProcessedAt clears the value of the "last_processed_at" field.
func (u *OrderEventSubscriptionsUpsertBulk) ClearLastProcessedAt() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearLastProcessedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *OrderEventSubscriptionsUpsertBulk) SetIsActive(v int64) *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetIsActive(v)
	})
}

// AddIsActive adds v to the "is_active" field.
func (u *OrderEventSubscriptionsUpsertBulk) AddIsActive(v int64) *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.AddIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertBulk) UpdateIsActive() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateIsActive()
	})
}

// ClearIsActive clears the value of the "is_active" field.
func (u *OrderEventSubscriptionsUpsertBulk) ClearIsActive() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearIsActive()
	})
}

// SetErrorCount sets the "error_count" field.
func (u *OrderEventSubscriptionsUpsertBulk) SetErrorCount(v int64) *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetErrorCount(v)
	})
}

// AddErrorCount adds v to the "error_count" field.
func (u *OrderEventSubscriptionsUpsertBulk) AddErrorCount(v int64) *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.AddErrorCount(v)
	})
}

// UpdateErrorCount sets the "error_count" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertBulk) UpdateErrorCount() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateErrorCount()
	})
}

// ClearErrorCount clears the value of the "error_count" field.
func (u *OrderEventSubscriptionsUpsertBulk) ClearErrorCount() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearErrorCount()
	})
}

// SetLastError sets the "last_error" field.
func (u *OrderEventSubscriptionsUpsertBulk) SetLastError(v string) *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.SetLastError(v)
	})
}

// UpdateLastError sets the "last_error" field to the value that was provided on create.
func (u *OrderEventSubscriptionsUpsertBulk) UpdateLastError() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.UpdateLastError()
	})
}

// ClearLastError clears the value of the "last_error" field.
func (u *OrderEventSubscriptionsUpsertBulk) ClearLastError() *OrderEventSubscriptionsUpsertBulk {
	return u.Update(func(s *OrderEventSubscriptionsUpsert) {
		s.ClearLastError()
	})
}

// Exec executes the query.
func (u *OrderEventSubscriptionsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderEventSubscriptionsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderEventSubscriptionsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderEventSubscriptionsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
