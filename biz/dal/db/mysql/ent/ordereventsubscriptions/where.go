// Code generated by ent, DO NOT EDIT.

package ordereventsubscriptions

import (
	"kcers-order/biz/dal/db/mysql/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldUpdatedAt, v))
}

// Delete applies equality check predicate on the "delete" field. It's identical to DeleteEQ.
func Delete(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldDelete, v))
}

// CreatedID applies equality check predicate on the "created_id" field. It's identical to CreatedIDEQ.
func CreatedID(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldCreatedID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldName, v))
}

// EventType applies equality check predicate on the "event_type" field. It's identical to EventTypeEQ.
func EventType(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldEventType, v))
}

// LastProcessedID applies equality check predicate on the "last_processed_id" field. It's identical to LastProcessedIDEQ.
func LastProcessedID(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldLastProcessedID, v))
}

// LastProcessedVersion applies equality check predicate on the "last_processed_version" field. It's identical to LastProcessedVersionEQ.
func LastProcessedVersion(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldLastProcessedVersion, v))
}

// LastProcessedAt applies equality check predicate on the "last_processed_at" field. It's identical to LastProcessedAtEQ.
func LastProcessedAt(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldLastProcessedAt, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldIsActive, v))
}

// ErrorCount applies equality check predicate on the "error_count" field. It's identical to ErrorCountEQ.
func ErrorCount(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldErrorCount, v))
}

// LastError applies equality check predicate on the "last_error" field. It's identical to LastErrorEQ.
func LastError(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldLastError, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotNull(FieldUpdatedAt))
}

// DeleteEQ applies the EQ predicate on the "delete" field.
func DeleteEQ(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldDelete, v))
}

// DeleteNEQ applies the NEQ predicate on the "delete" field.
func DeleteNEQ(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNEQ(FieldDelete, v))
}

// DeleteIn applies the In predicate on the "delete" field.
func DeleteIn(vs ...int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIn(FieldDelete, vs...))
}

// DeleteNotIn applies the NotIn predicate on the "delete" field.
func DeleteNotIn(vs ...int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotIn(FieldDelete, vs...))
}

// DeleteGT applies the GT predicate on the "delete" field.
func DeleteGT(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGT(FieldDelete, v))
}

// DeleteGTE applies the GTE predicate on the "delete" field.
func DeleteGTE(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGTE(FieldDelete, v))
}

// DeleteLT applies the LT predicate on the "delete" field.
func DeleteLT(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLT(FieldDelete, v))
}

// DeleteLTE applies the LTE predicate on the "delete" field.
func DeleteLTE(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLTE(FieldDelete, v))
}

// DeleteIsNil applies the IsNil predicate on the "delete" field.
func DeleteIsNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIsNull(FieldDelete))
}

// DeleteNotNil applies the NotNil predicate on the "delete" field.
func DeleteNotNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotNull(FieldDelete))
}

// CreatedIDEQ applies the EQ predicate on the "created_id" field.
func CreatedIDEQ(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldCreatedID, v))
}

// CreatedIDNEQ applies the NEQ predicate on the "created_id" field.
func CreatedIDNEQ(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNEQ(FieldCreatedID, v))
}

// CreatedIDIn applies the In predicate on the "created_id" field.
func CreatedIDIn(vs ...int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIn(FieldCreatedID, vs...))
}

// CreatedIDNotIn applies the NotIn predicate on the "created_id" field.
func CreatedIDNotIn(vs ...int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotIn(FieldCreatedID, vs...))
}

// CreatedIDGT applies the GT predicate on the "created_id" field.
func CreatedIDGT(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGT(FieldCreatedID, v))
}

// CreatedIDGTE applies the GTE predicate on the "created_id" field.
func CreatedIDGTE(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGTE(FieldCreatedID, v))
}

// CreatedIDLT applies the LT predicate on the "created_id" field.
func CreatedIDLT(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLT(FieldCreatedID, v))
}

// CreatedIDLTE applies the LTE predicate on the "created_id" field.
func CreatedIDLTE(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLTE(FieldCreatedID, v))
}

// CreatedIDIsNil applies the IsNil predicate on the "created_id" field.
func CreatedIDIsNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIsNull(FieldCreatedID))
}

// CreatedIDNotNil applies the NotNil predicate on the "created_id" field.
func CreatedIDNotNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotNull(FieldCreatedID))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldContainsFold(FieldName, v))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotIn(FieldEventType, vs...))
}

// EventTypeGT applies the GT predicate on the "event_type" field.
func EventTypeGT(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGT(FieldEventType, v))
}

// EventTypeGTE applies the GTE predicate on the "event_type" field.
func EventTypeGTE(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGTE(FieldEventType, v))
}

// EventTypeLT applies the LT predicate on the "event_type" field.
func EventTypeLT(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLT(FieldEventType, v))
}

// EventTypeLTE applies the LTE predicate on the "event_type" field.
func EventTypeLTE(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLTE(FieldEventType, v))
}

// EventTypeContains applies the Contains predicate on the "event_type" field.
func EventTypeContains(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldContains(FieldEventType, v))
}

// EventTypeHasPrefix applies the HasPrefix predicate on the "event_type" field.
func EventTypeHasPrefix(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldHasPrefix(FieldEventType, v))
}

// EventTypeHasSuffix applies the HasSuffix predicate on the "event_type" field.
func EventTypeHasSuffix(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldHasSuffix(FieldEventType, v))
}

// EventTypeIsNil applies the IsNil predicate on the "event_type" field.
func EventTypeIsNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIsNull(FieldEventType))
}

// EventTypeNotNil applies the NotNil predicate on the "event_type" field.
func EventTypeNotNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotNull(FieldEventType))
}

// EventTypeEqualFold applies the EqualFold predicate on the "event_type" field.
func EventTypeEqualFold(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEqualFold(FieldEventType, v))
}

// EventTypeContainsFold applies the ContainsFold predicate on the "event_type" field.
func EventTypeContainsFold(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldContainsFold(FieldEventType, v))
}

// LastProcessedIDEQ applies the EQ predicate on the "last_processed_id" field.
func LastProcessedIDEQ(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldLastProcessedID, v))
}

// LastProcessedIDNEQ applies the NEQ predicate on the "last_processed_id" field.
func LastProcessedIDNEQ(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNEQ(FieldLastProcessedID, v))
}

// LastProcessedIDIn applies the In predicate on the "last_processed_id" field.
func LastProcessedIDIn(vs ...string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIn(FieldLastProcessedID, vs...))
}

// LastProcessedIDNotIn applies the NotIn predicate on the "last_processed_id" field.
func LastProcessedIDNotIn(vs ...string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotIn(FieldLastProcessedID, vs...))
}

// LastProcessedIDGT applies the GT predicate on the "last_processed_id" field.
func LastProcessedIDGT(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGT(FieldLastProcessedID, v))
}

// LastProcessedIDGTE applies the GTE predicate on the "last_processed_id" field.
func LastProcessedIDGTE(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGTE(FieldLastProcessedID, v))
}

// LastProcessedIDLT applies the LT predicate on the "last_processed_id" field.
func LastProcessedIDLT(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLT(FieldLastProcessedID, v))
}

// LastProcessedIDLTE applies the LTE predicate on the "last_processed_id" field.
func LastProcessedIDLTE(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLTE(FieldLastProcessedID, v))
}

// LastProcessedIDContains applies the Contains predicate on the "last_processed_id" field.
func LastProcessedIDContains(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldContains(FieldLastProcessedID, v))
}

// LastProcessedIDHasPrefix applies the HasPrefix predicate on the "last_processed_id" field.
func LastProcessedIDHasPrefix(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldHasPrefix(FieldLastProcessedID, v))
}

// LastProcessedIDHasSuffix applies the HasSuffix predicate on the "last_processed_id" field.
func LastProcessedIDHasSuffix(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldHasSuffix(FieldLastProcessedID, v))
}

// LastProcessedIDIsNil applies the IsNil predicate on the "last_processed_id" field.
func LastProcessedIDIsNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIsNull(FieldLastProcessedID))
}

// LastProcessedIDNotNil applies the NotNil predicate on the "last_processed_id" field.
func LastProcessedIDNotNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotNull(FieldLastProcessedID))
}

// LastProcessedIDEqualFold applies the EqualFold predicate on the "last_processed_id" field.
func LastProcessedIDEqualFold(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEqualFold(FieldLastProcessedID, v))
}

// LastProcessedIDContainsFold applies the ContainsFold predicate on the "last_processed_id" field.
func LastProcessedIDContainsFold(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldContainsFold(FieldLastProcessedID, v))
}

// LastProcessedVersionEQ applies the EQ predicate on the "last_processed_version" field.
func LastProcessedVersionEQ(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldLastProcessedVersion, v))
}

// LastProcessedVersionNEQ applies the NEQ predicate on the "last_processed_version" field.
func LastProcessedVersionNEQ(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNEQ(FieldLastProcessedVersion, v))
}

// LastProcessedVersionIn applies the In predicate on the "last_processed_version" field.
func LastProcessedVersionIn(vs ...int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIn(FieldLastProcessedVersion, vs...))
}

// LastProcessedVersionNotIn applies the NotIn predicate on the "last_processed_version" field.
func LastProcessedVersionNotIn(vs ...int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotIn(FieldLastProcessedVersion, vs...))
}

// LastProcessedVersionGT applies the GT predicate on the "last_processed_version" field.
func LastProcessedVersionGT(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGT(FieldLastProcessedVersion, v))
}

// LastProcessedVersionGTE applies the GTE predicate on the "last_processed_version" field.
func LastProcessedVersionGTE(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGTE(FieldLastProcessedVersion, v))
}

// LastProcessedVersionLT applies the LT predicate on the "last_processed_version" field.
func LastProcessedVersionLT(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLT(FieldLastProcessedVersion, v))
}

// LastProcessedVersionLTE applies the LTE predicate on the "last_processed_version" field.
func LastProcessedVersionLTE(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLTE(FieldLastProcessedVersion, v))
}

// LastProcessedVersionIsNil applies the IsNil predicate on the "last_processed_version" field.
func LastProcessedVersionIsNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIsNull(FieldLastProcessedVersion))
}

// LastProcessedVersionNotNil applies the NotNil predicate on the "last_processed_version" field.
func LastProcessedVersionNotNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotNull(FieldLastProcessedVersion))
}

// LastProcessedAtEQ applies the EQ predicate on the "last_processed_at" field.
func LastProcessedAtEQ(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldLastProcessedAt, v))
}

// LastProcessedAtNEQ applies the NEQ predicate on the "last_processed_at" field.
func LastProcessedAtNEQ(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNEQ(FieldLastProcessedAt, v))
}

// LastProcessedAtIn applies the In predicate on the "last_processed_at" field.
func LastProcessedAtIn(vs ...time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIn(FieldLastProcessedAt, vs...))
}

// LastProcessedAtNotIn applies the NotIn predicate on the "last_processed_at" field.
func LastProcessedAtNotIn(vs ...time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotIn(FieldLastProcessedAt, vs...))
}

// LastProcessedAtGT applies the GT predicate on the "last_processed_at" field.
func LastProcessedAtGT(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGT(FieldLastProcessedAt, v))
}

// LastProcessedAtGTE applies the GTE predicate on the "last_processed_at" field.
func LastProcessedAtGTE(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGTE(FieldLastProcessedAt, v))
}

// LastProcessedAtLT applies the LT predicate on the "last_processed_at" field.
func LastProcessedAtLT(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLT(FieldLastProcessedAt, v))
}

// LastProcessedAtLTE applies the LTE predicate on the "last_processed_at" field.
func LastProcessedAtLTE(v time.Time) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLTE(FieldLastProcessedAt, v))
}

// LastProcessedAtIsNil applies the IsNil predicate on the "last_processed_at" field.
func LastProcessedAtIsNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIsNull(FieldLastProcessedAt))
}

// LastProcessedAtNotNil applies the NotNil predicate on the "last_processed_at" field.
func LastProcessedAtNotNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotNull(FieldLastProcessedAt))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNEQ(FieldIsActive, v))
}

// IsActiveIn applies the In predicate on the "is_active" field.
func IsActiveIn(vs ...int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIn(FieldIsActive, vs...))
}

// IsActiveNotIn applies the NotIn predicate on the "is_active" field.
func IsActiveNotIn(vs ...int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotIn(FieldIsActive, vs...))
}

// IsActiveGT applies the GT predicate on the "is_active" field.
func IsActiveGT(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGT(FieldIsActive, v))
}

// IsActiveGTE applies the GTE predicate on the "is_active" field.
func IsActiveGTE(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGTE(FieldIsActive, v))
}

// IsActiveLT applies the LT predicate on the "is_active" field.
func IsActiveLT(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLT(FieldIsActive, v))
}

// IsActiveLTE applies the LTE predicate on the "is_active" field.
func IsActiveLTE(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLTE(FieldIsActive, v))
}

// IsActiveIsNil applies the IsNil predicate on the "is_active" field.
func IsActiveIsNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIsNull(FieldIsActive))
}

// IsActiveNotNil applies the NotNil predicate on the "is_active" field.
func IsActiveNotNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotNull(FieldIsActive))
}

// ErrorCountEQ applies the EQ predicate on the "error_count" field.
func ErrorCountEQ(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldErrorCount, v))
}

// ErrorCountNEQ applies the NEQ predicate on the "error_count" field.
func ErrorCountNEQ(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNEQ(FieldErrorCount, v))
}

// ErrorCountIn applies the In predicate on the "error_count" field.
func ErrorCountIn(vs ...int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIn(FieldErrorCount, vs...))
}

// ErrorCountNotIn applies the NotIn predicate on the "error_count" field.
func ErrorCountNotIn(vs ...int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotIn(FieldErrorCount, vs...))
}

// ErrorCountGT applies the GT predicate on the "error_count" field.
func ErrorCountGT(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGT(FieldErrorCount, v))
}

// ErrorCountGTE applies the GTE predicate on the "error_count" field.
func ErrorCountGTE(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGTE(FieldErrorCount, v))
}

// ErrorCountLT applies the LT predicate on the "error_count" field.
func ErrorCountLT(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLT(FieldErrorCount, v))
}

// ErrorCountLTE applies the LTE predicate on the "error_count" field.
func ErrorCountLTE(v int64) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLTE(FieldErrorCount, v))
}

// ErrorCountIsNil applies the IsNil predicate on the "error_count" field.
func ErrorCountIsNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIsNull(FieldErrorCount))
}

// ErrorCountNotNil applies the NotNil predicate on the "error_count" field.
func ErrorCountNotNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotNull(FieldErrorCount))
}

// LastErrorEQ applies the EQ predicate on the "last_error" field.
func LastErrorEQ(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEQ(FieldLastError, v))
}

// LastErrorNEQ applies the NEQ predicate on the "last_error" field.
func LastErrorNEQ(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNEQ(FieldLastError, v))
}

// LastErrorIn applies the In predicate on the "last_error" field.
func LastErrorIn(vs ...string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIn(FieldLastError, vs...))
}

// LastErrorNotIn applies the NotIn predicate on the "last_error" field.
func LastErrorNotIn(vs ...string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotIn(FieldLastError, vs...))
}

// LastErrorGT applies the GT predicate on the "last_error" field.
func LastErrorGT(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGT(FieldLastError, v))
}

// LastErrorGTE applies the GTE predicate on the "last_error" field.
func LastErrorGTE(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldGTE(FieldLastError, v))
}

// LastErrorLT applies the LT predicate on the "last_error" field.
func LastErrorLT(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLT(FieldLastError, v))
}

// LastErrorLTE applies the LTE predicate on the "last_error" field.
func LastErrorLTE(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldLTE(FieldLastError, v))
}

// LastErrorContains applies the Contains predicate on the "last_error" field.
func LastErrorContains(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldContains(FieldLastError, v))
}

// LastErrorHasPrefix applies the HasPrefix predicate on the "last_error" field.
func LastErrorHasPrefix(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldHasPrefix(FieldLastError, v))
}

// LastErrorHasSuffix applies the HasSuffix predicate on the "last_error" field.
func LastErrorHasSuffix(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldHasSuffix(FieldLastError, v))
}

// LastErrorIsNil applies the IsNil predicate on the "last_error" field.
func LastErrorIsNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldIsNull(FieldLastError))
}

// LastErrorNotNil applies the NotNil predicate on the "last_error" field.
func LastErrorNotNil() predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldNotNull(FieldLastError))
}

// LastErrorEqualFold applies the EqualFold predicate on the "last_error" field.
func LastErrorEqualFold(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldEqualFold(FieldLastError, v))
}

// LastErrorContainsFold applies the ContainsFold predicate on the "last_error" field.
func LastErrorContainsFold(v string) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.FieldContainsFold(FieldLastError, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderEventSubscriptions) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderEventSubscriptions) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderEventSubscriptions) predicate.OrderEventSubscriptions {
	return predicate.OrderEventSubscriptions(sql.NotPredicates(p))
}
