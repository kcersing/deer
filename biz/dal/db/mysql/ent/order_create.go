// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"kcers-order/biz/dal/db/mysql/ent/order"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (oc *OrderCreate) SetCreatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OrderCreate) SetUpdatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUpdatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetDelete sets the "delete" field.
func (oc *OrderCreate) SetDelete(i int64) *OrderCreate {
	oc.mutation.SetDelete(i)
	return oc
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDelete(i *int64) *OrderCreate {
	if i != nil {
		oc.SetDelete(*i)
	}
	return oc
}

// SetCreatedID sets the "created_id" field.
func (oc *OrderCreate) SetCreatedID(i int64) *OrderCreate {
	oc.mutation.SetCreatedID(i)
	return oc
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreatedID(i *int64) *OrderCreate {
	if i != nil {
		oc.SetCreatedID(*i)
	}
	return oc
}

// SetOrderSn sets the "order_sn" field.
func (oc *OrderCreate) SetOrderSn(s string) *OrderCreate {
	oc.mutation.SetOrderSn(s)
	return oc
}

// SetNillableOrderSn sets the "order_sn" field if the given value is not nil.
func (oc *OrderCreate) SetNillableOrderSn(s *string) *OrderCreate {
	if s != nil {
		oc.SetOrderSn(*s)
	}
	return oc
}

// SetStatus sets the "status" field.
func (oc *OrderCreate) SetStatus(i int64) *OrderCreate {
	oc.mutation.SetStatus(i)
	return oc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oc *OrderCreate) SetNillableStatus(i *int64) *OrderCreate {
	if i != nil {
		oc.SetStatus(*i)
	}
	return oc
}

// SetSource sets the "source" field.
func (oc *OrderCreate) SetSource(s string) *OrderCreate {
	oc.mutation.SetSource(s)
	return oc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (oc *OrderCreate) SetNillableSource(s *string) *OrderCreate {
	if s != nil {
		oc.SetSource(*s)
	}
	return oc
}

// SetDevice sets the "device" field.
func (oc *OrderCreate) SetDevice(s string) *OrderCreate {
	oc.mutation.SetDevice(s)
	return oc
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDevice(s *string) *OrderCreate {
	if s != nil {
		oc.SetDevice(*s)
	}
	return oc
}

// SetNature sets the "nature" field.
func (oc *OrderCreate) SetNature(i int64) *OrderCreate {
	oc.mutation.SetNature(i)
	return oc
}

// SetNillableNature sets the "nature" field if the given value is not nil.
func (oc *OrderCreate) SetNillableNature(i *int64) *OrderCreate {
	if i != nil {
		oc.SetNature(*i)
	}
	return oc
}

// SetCompletionAt sets the "completion_at" field.
func (oc *OrderCreate) SetCompletionAt(t time.Time) *OrderCreate {
	oc.mutation.SetCompletionAt(t)
	return oc
}

// SetNillableCompletionAt sets the "completion_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCompletionAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCompletionAt(*t)
	}
	return oc
}

// SetCloseAt sets the "close_at" field.
func (oc *OrderCreate) SetCloseAt(t time.Time) *OrderCreate {
	oc.mutation.SetCloseAt(t)
	return oc
}

// SetNillableCloseAt sets the "close_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCloseAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCloseAt(*t)
	}
	return oc
}

// SetRefundAt sets the "refund_at" field.
func (oc *OrderCreate) SetRefundAt(t time.Time) *OrderCreate {
	oc.mutation.SetRefundAt(t)
	return oc
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableRefundAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetRefundAt(*t)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OrderCreate) SetID(i int64) *OrderCreate {
	oc.mutation.SetID(i)
	return oc
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := order.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := order.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.Delete(); !ok {
		v := order.DefaultDelete
		oc.mutation.SetDelete(v)
	}
	if _, ok := oc.mutation.CreatedID(); !ok {
		v := order.DefaultCreatedID
		oc.mutation.SetCreatedID(v)
	}
	if _, ok := oc.mutation.Status(); !ok {
		v := order.DefaultStatus
		oc.mutation.SetStatus(v)
	}
	if _, ok := oc.mutation.Source(); !ok {
		v := order.DefaultSource
		oc.mutation.SetSource(v)
	}
	if _, ok := oc.mutation.Device(); !ok {
		v := order.DefaultDevice
		oc.mutation.SetDevice(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(order.Table, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64))
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.Delete(); ok {
		_spec.SetField(order.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := oc.mutation.CreatedID(); ok {
		_spec.SetField(order.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := oc.mutation.OrderSn(); ok {
		_spec.SetField(order.FieldOrderSn, field.TypeString, value)
		_node.OrderSn = value
	}
	if value, ok := oc.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := oc.mutation.Source(); ok {
		_spec.SetField(order.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := oc.mutation.Device(); ok {
		_spec.SetField(order.FieldDevice, field.TypeString, value)
		_node.Device = value
	}
	if value, ok := oc.mutation.Nature(); ok {
		_spec.SetField(order.FieldNature, field.TypeInt64, value)
		_node.Nature = value
	}
	if value, ok := oc.mutation.CompletionAt(); ok {
		_spec.SetField(order.FieldCompletionAt, field.TypeTime, value)
		_node.CompletionAt = value
	}
	if value, ok := oc.mutation.CloseAt(); ok {
		_spec.SetField(order.FieldCloseAt, field.TypeTime, value)
		_node.CloseAt = value
	}
	if value, ok := oc.mutation.RefundAt(); ok {
		_spec.SetField(order.FieldRefundAt, field.TypeTime, value)
		_node.RefundAt = value
	}
	return _node, _spec
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	err      error
	builders []*OrderCreate
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
