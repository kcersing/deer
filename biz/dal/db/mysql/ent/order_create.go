// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers-order/biz/dal/db/mysql/ent/order"
	"kcers-order/biz/dal/db/mysql/ent/orderevents"
	"kcers-order/biz/dal/db/mysql/ent/orderitem"
	"kcers-order/biz/dal/db/mysql/ent/ordersnapshots"
	"kcers-order/biz/dal/db/mysql/ent/orderstatushistory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (oc *OrderCreate) SetCreatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OrderCreate) SetUpdatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUpdatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetDelete sets the "delete" field.
func (oc *OrderCreate) SetDelete(i int64) *OrderCreate {
	oc.mutation.SetDelete(i)
	return oc
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDelete(i *int64) *OrderCreate {
	if i != nil {
		oc.SetDelete(*i)
	}
	return oc
}

// SetCreatedID sets the "created_id" field.
func (oc *OrderCreate) SetCreatedID(i int64) *OrderCreate {
	oc.mutation.SetCreatedID(i)
	return oc
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreatedID(i *int64) *OrderCreate {
	if i != nil {
		oc.SetCreatedID(*i)
	}
	return oc
}

// SetOrderSn sets the "order_sn" field.
func (oc *OrderCreate) SetOrderSn(s string) *OrderCreate {
	oc.mutation.SetOrderSn(s)
	return oc
}

// SetMemberID sets the "member_id" field.
func (oc *OrderCreate) SetMemberID(i int64) *OrderCreate {
	oc.mutation.SetMemberID(i)
	return oc
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableMemberID(i *int64) *OrderCreate {
	if i != nil {
		oc.SetMemberID(*i)
	}
	return oc
}

// SetStatus sets the "status" field.
func (oc *OrderCreate) SetStatus(s string) *OrderCreate {
	oc.mutation.SetStatus(s)
	return oc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oc *OrderCreate) SetNillableStatus(s *string) *OrderCreate {
	if s != nil {
		oc.SetStatus(*s)
	}
	return oc
}

// SetNature sets the "nature" field.
func (oc *OrderCreate) SetNature(i int64) *OrderCreate {
	oc.mutation.SetNature(i)
	return oc
}

// SetNillableNature sets the "nature" field if the given value is not nil.
func (oc *OrderCreate) SetNillableNature(i *int64) *OrderCreate {
	if i != nil {
		oc.SetNature(*i)
	}
	return oc
}

// SetCompletionAt sets the "completion_at" field.
func (oc *OrderCreate) SetCompletionAt(t time.Time) *OrderCreate {
	oc.mutation.SetCompletionAt(t)
	return oc
}

// SetNillableCompletionAt sets the "completion_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCompletionAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCompletionAt(*t)
	}
	return oc
}

// SetCloseAt sets the "close_at" field.
func (oc *OrderCreate) SetCloseAt(t time.Time) *OrderCreate {
	oc.mutation.SetCloseAt(t)
	return oc
}

// SetNillableCloseAt sets the "close_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCloseAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCloseAt(*t)
	}
	return oc
}

// SetRefundAt sets the "refund_at" field.
func (oc *OrderCreate) SetRefundAt(t time.Time) *OrderCreate {
	oc.mutation.SetRefundAt(t)
	return oc
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableRefundAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetRefundAt(*t)
	}
	return oc
}

// SetVersion sets the "version" field.
func (oc *OrderCreate) SetVersion(i int64) *OrderCreate {
	oc.mutation.SetVersion(i)
	return oc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (oc *OrderCreate) SetNillableVersion(i *int64) *OrderCreate {
	if i != nil {
		oc.SetVersion(*i)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OrderCreate) SetID(i int64) *OrderCreate {
	oc.mutation.SetID(i)
	return oc
}

// AddItemIDs adds the "items" edge to the OrderItem entity by IDs.
func (oc *OrderCreate) AddItemIDs(ids ...int64) *OrderCreate {
	oc.mutation.AddItemIDs(ids...)
	return oc
}

// AddItems adds the "items" edges to the OrderItem entity.
func (oc *OrderCreate) AddItems(o ...*OrderItem) *OrderCreate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddItemIDs(ids...)
}

// AddEventIDs adds the "events" edge to the OrderEvents entity by IDs.
func (oc *OrderCreate) AddEventIDs(ids ...int64) *OrderCreate {
	oc.mutation.AddEventIDs(ids...)
	return oc
}

// AddEvents adds the "events" edges to the OrderEvents entity.
func (oc *OrderCreate) AddEvents(o ...*OrderEvents) *OrderCreate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddEventIDs(ids...)
}

// AddSnapshotIDs adds the "snapshots" edge to the OrderSnapshots entity by IDs.
func (oc *OrderCreate) AddSnapshotIDs(ids ...int64) *OrderCreate {
	oc.mutation.AddSnapshotIDs(ids...)
	return oc
}

// AddSnapshots adds the "snapshots" edges to the OrderSnapshots entity.
func (oc *OrderCreate) AddSnapshots(o ...*OrderSnapshots) *OrderCreate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddSnapshotIDs(ids...)
}

// AddStatusHistoryIDs adds the "status_history" edge to the OrderStatusHistory entity by IDs.
func (oc *OrderCreate) AddStatusHistoryIDs(ids ...int64) *OrderCreate {
	oc.mutation.AddStatusHistoryIDs(ids...)
	return oc
}

// AddStatusHistory adds the "status_history" edges to the OrderStatusHistory entity.
func (oc *OrderCreate) AddStatusHistory(o ...*OrderStatusHistory) *OrderCreate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddStatusHistoryIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := order.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := order.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.Delete(); !ok {
		v := order.DefaultDelete
		oc.mutation.SetDelete(v)
	}
	if _, ok := oc.mutation.CreatedID(); !ok {
		v := order.DefaultCreatedID
		oc.mutation.SetCreatedID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.OrderSn(); !ok {
		return &ValidationError{Name: "order_sn", err: errors.New(`ent: missing required field "Order.order_sn"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(order.Table, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = oc.conflict
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.Delete(); ok {
		_spec.SetField(order.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := oc.mutation.CreatedID(); ok {
		_spec.SetField(order.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := oc.mutation.OrderSn(); ok {
		_spec.SetField(order.FieldOrderSn, field.TypeString, value)
		_node.OrderSn = value
	}
	if value, ok := oc.mutation.MemberID(); ok {
		_spec.SetField(order.FieldMemberID, field.TypeInt64, value)
		_node.MemberID = value
	}
	if value, ok := oc.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := oc.mutation.Nature(); ok {
		_spec.SetField(order.FieldNature, field.TypeInt64, value)
		_node.Nature = value
	}
	if value, ok := oc.mutation.CompletionAt(); ok {
		_spec.SetField(order.FieldCompletionAt, field.TypeTime, value)
		_node.CompletionAt = value
	}
	if value, ok := oc.mutation.CloseAt(); ok {
		_spec.SetField(order.FieldCloseAt, field.TypeTime, value)
		_node.CloseAt = value
	}
	if value, ok := oc.mutation.RefundAt(); ok {
		_spec.SetField(order.FieldRefundAt, field.TypeTime, value)
		_node.RefundAt = value
	}
	if value, ok := oc.mutation.Version(); ok {
		_spec.SetField(order.FieldVersion, field.TypeInt64, value)
		_node.Version = value
	}
	if nodes := oc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.EventsTable,
			Columns: []string{order.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderevents.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.SnapshotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SnapshotsTable,
			Columns: []string{order.SnapshotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersnapshots.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.StatusHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.StatusHistoryTable,
			Columns: []string{order.StatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (oc *OrderCreate) OnConflict(opts ...sql.ConflictOption) *OrderUpsertOne {
	oc.conflict = opts
	return &OrderUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oc *OrderCreate) OnConflictColumns(columns ...string) *OrderUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertOne{
		create: oc,
	}
}

type (
	// OrderUpsertOne is the builder for "upsert"-ing
	//  one Order node.
	OrderUpsertOne struct {
		create *OrderCreate
	}

	// OrderUpsert is the "OnConflict" setter.
	OrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUpsert) SetUpdatedAt(v time.Time) *OrderUpsert {
	u.Set(order.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateUpdatedAt() *OrderUpsert {
	u.SetExcluded(order.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderUpsert) ClearUpdatedAt() *OrderUpsert {
	u.SetNull(order.FieldUpdatedAt)
	return u
}

// SetDelete sets the "delete" field.
func (u *OrderUpsert) SetDelete(v int64) *OrderUpsert {
	u.Set(order.FieldDelete, v)
	return u
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderUpsert) UpdateDelete() *OrderUpsert {
	u.SetExcluded(order.FieldDelete)
	return u
}

// AddDelete adds v to the "delete" field.
func (u *OrderUpsert) AddDelete(v int64) *OrderUpsert {
	u.Add(order.FieldDelete, v)
	return u
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderUpsert) ClearDelete() *OrderUpsert {
	u.SetNull(order.FieldDelete)
	return u
}

// SetCreatedID sets the "created_id" field.
func (u *OrderUpsert) SetCreatedID(v int64) *OrderUpsert {
	u.Set(order.FieldCreatedID, v)
	return u
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCreatedID() *OrderUpsert {
	u.SetExcluded(order.FieldCreatedID)
	return u
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderUpsert) AddCreatedID(v int64) *OrderUpsert {
	u.Add(order.FieldCreatedID, v)
	return u
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderUpsert) ClearCreatedID() *OrderUpsert {
	u.SetNull(order.FieldCreatedID)
	return u
}

// SetOrderSn sets the "order_sn" field.
func (u *OrderUpsert) SetOrderSn(v string) *OrderUpsert {
	u.Set(order.FieldOrderSn, v)
	return u
}

// UpdateOrderSn sets the "order_sn" field to the value that was provided on create.
func (u *OrderUpsert) UpdateOrderSn() *OrderUpsert {
	u.SetExcluded(order.FieldOrderSn)
	return u
}

// SetMemberID sets the "member_id" field.
func (u *OrderUpsert) SetMemberID(v int64) *OrderUpsert {
	u.Set(order.FieldMemberID, v)
	return u
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateMemberID() *OrderUpsert {
	u.SetExcluded(order.FieldMemberID)
	return u
}

// AddMemberID adds v to the "member_id" field.
func (u *OrderUpsert) AddMemberID(v int64) *OrderUpsert {
	u.Add(order.FieldMemberID, v)
	return u
}

// ClearMemberID clears the value of the "member_id" field.
func (u *OrderUpsert) ClearMemberID() *OrderUpsert {
	u.SetNull(order.FieldMemberID)
	return u
}

// SetStatus sets the "status" field.
func (u *OrderUpsert) SetStatus(v string) *OrderUpsert {
	u.Set(order.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsert) UpdateStatus() *OrderUpsert {
	u.SetExcluded(order.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *OrderUpsert) ClearStatus() *OrderUpsert {
	u.SetNull(order.FieldStatus)
	return u
}

// SetNature sets the "nature" field.
func (u *OrderUpsert) SetNature(v int64) *OrderUpsert {
	u.Set(order.FieldNature, v)
	return u
}

// UpdateNature sets the "nature" field to the value that was provided on create.
func (u *OrderUpsert) UpdateNature() *OrderUpsert {
	u.SetExcluded(order.FieldNature)
	return u
}

// AddNature adds v to the "nature" field.
func (u *OrderUpsert) AddNature(v int64) *OrderUpsert {
	u.Add(order.FieldNature, v)
	return u
}

// ClearNature clears the value of the "nature" field.
func (u *OrderUpsert) ClearNature() *OrderUpsert {
	u.SetNull(order.FieldNature)
	return u
}

// SetCompletionAt sets the "completion_at" field.
func (u *OrderUpsert) SetCompletionAt(v time.Time) *OrderUpsert {
	u.Set(order.FieldCompletionAt, v)
	return u
}

// UpdateCompletionAt sets the "completion_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCompletionAt() *OrderUpsert {
	u.SetExcluded(order.FieldCompletionAt)
	return u
}

// ClearCompletionAt clears the value of the "completion_at" field.
func (u *OrderUpsert) ClearCompletionAt() *OrderUpsert {
	u.SetNull(order.FieldCompletionAt)
	return u
}

// SetCloseAt sets the "close_at" field.
func (u *OrderUpsert) SetCloseAt(v time.Time) *OrderUpsert {
	u.Set(order.FieldCloseAt, v)
	return u
}

// UpdateCloseAt sets the "close_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCloseAt() *OrderUpsert {
	u.SetExcluded(order.FieldCloseAt)
	return u
}

// ClearCloseAt clears the value of the "close_at" field.
func (u *OrderUpsert) ClearCloseAt() *OrderUpsert {
	u.SetNull(order.FieldCloseAt)
	return u
}

// SetRefundAt sets the "refund_at" field.
func (u *OrderUpsert) SetRefundAt(v time.Time) *OrderUpsert {
	u.Set(order.FieldRefundAt, v)
	return u
}

// UpdateRefundAt sets the "refund_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateRefundAt() *OrderUpsert {
	u.SetExcluded(order.FieldRefundAt)
	return u
}

// ClearRefundAt clears the value of the "refund_at" field.
func (u *OrderUpsert) ClearRefundAt() *OrderUpsert {
	u.SetNull(order.FieldRefundAt)
	return u
}

// SetVersion sets the "version" field.
func (u *OrderUpsert) SetVersion(v int64) *OrderUpsert {
	u.Set(order.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *OrderUpsert) UpdateVersion() *OrderUpsert {
	u.SetExcluded(order.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *OrderUpsert) AddVersion(v int64) *OrderUpsert {
	u.Add(order.FieldVersion, v)
	return u
}

// ClearVersion clears the value of the "version" field.
func (u *OrderUpsert) ClearVersion() *OrderUpsert {
	u.SetNull(order.FieldVersion)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(order.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderUpsertOne) UpdateNewValues() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(order.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(order.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderUpsertOne) Ignore() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertOne) DoNothing() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreate.OnConflict
// documentation for more info.
func (u *OrderUpsertOne) Update(set func(*OrderUpsert)) *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUpsertOne) SetUpdatedAt(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateUpdatedAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderUpsertOne) ClearUpdatedAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDelete sets the "delete" field.
func (u *OrderUpsertOne) SetDelete(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetDelete(v)
	})
}

// AddDelete adds v to the "delete" field.
func (u *OrderUpsertOne) AddDelete(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddDelete(v)
	})
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateDelete() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateDelete()
	})
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderUpsertOne) ClearDelete() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearDelete()
	})
}

// SetCreatedID sets the "created_id" field.
func (u *OrderUpsertOne) SetCreatedID(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCreatedID(v)
	})
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderUpsertOne) AddCreatedID(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddCreatedID(v)
	})
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCreatedID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCreatedID()
	})
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderUpsertOne) ClearCreatedID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCreatedID()
	})
}

// SetOrderSn sets the "order_sn" field.
func (u *OrderUpsertOne) SetOrderSn(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetOrderSn(v)
	})
}

// UpdateOrderSn sets the "order_sn" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateOrderSn() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateOrderSn()
	})
}

// SetMemberID sets the "member_id" field.
func (u *OrderUpsertOne) SetMemberID(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetMemberID(v)
	})
}

// AddMemberID adds v to the "member_id" field.
func (u *OrderUpsertOne) AddMemberID(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateMemberID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateMemberID()
	})
}

// ClearMemberID clears the value of the "member_id" field.
func (u *OrderUpsertOne) ClearMemberID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearMemberID()
	})
}

// SetStatus sets the "status" field.
func (u *OrderUpsertOne) SetStatus(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateStatus() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *OrderUpsertOne) ClearStatus() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearStatus()
	})
}

// SetNature sets the "nature" field.
func (u *OrderUpsertOne) SetNature(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetNature(v)
	})
}

// AddNature adds v to the "nature" field.
func (u *OrderUpsertOne) AddNature(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddNature(v)
	})
}

// UpdateNature sets the "nature" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateNature() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateNature()
	})
}

// ClearNature clears the value of the "nature" field.
func (u *OrderUpsertOne) ClearNature() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearNature()
	})
}

// SetCompletionAt sets the "completion_at" field.
func (u *OrderUpsertOne) SetCompletionAt(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCompletionAt(v)
	})
}

// UpdateCompletionAt sets the "completion_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCompletionAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCompletionAt()
	})
}

// ClearCompletionAt clears the value of the "completion_at" field.
func (u *OrderUpsertOne) ClearCompletionAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCompletionAt()
	})
}

// SetCloseAt sets the "close_at" field.
func (u *OrderUpsertOne) SetCloseAt(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCloseAt(v)
	})
}

// UpdateCloseAt sets the "close_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCloseAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCloseAt()
	})
}

// ClearCloseAt clears the value of the "close_at" field.
func (u *OrderUpsertOne) ClearCloseAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCloseAt()
	})
}

// SetRefundAt sets the "refund_at" field.
func (u *OrderUpsertOne) SetRefundAt(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetRefundAt(v)
	})
}

// UpdateRefundAt sets the "refund_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateRefundAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRefundAt()
	})
}

// ClearRefundAt clears the value of the "refund_at" field.
func (u *OrderUpsertOne) ClearRefundAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearRefundAt()
	})
}

// SetVersion sets the "version" field.
func (u *OrderUpsertOne) SetVersion(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *OrderUpsertOne) AddVersion(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateVersion() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateVersion()
	})
}

// ClearVersion clears the value of the "version" field.
func (u *OrderUpsertOne) ClearVersion() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearVersion()
	})
}

// Exec executes the query.
func (u *OrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	err      error
	builders []*OrderCreate
	conflict []sql.ConflictOption
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ocb *OrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderUpsertBulk {
	ocb.conflict = opts
	return &OrderUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ocb *OrderCreateBulk) OnConflictColumns(columns ...string) *OrderUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertBulk{
		create: ocb,
	}
}

// OrderUpsertBulk is the builder for "upsert"-ing
// a bulk of Order nodes.
type OrderUpsertBulk struct {
	create *OrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(order.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderUpsertBulk) UpdateNewValues() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(order.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(order.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderUpsertBulk) Ignore() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertBulk) DoNothing() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreateBulk.OnConflict
// documentation for more info.
func (u *OrderUpsertBulk) Update(set func(*OrderUpsert)) *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUpsertBulk) SetUpdatedAt(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateUpdatedAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderUpsertBulk) ClearUpdatedAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDelete sets the "delete" field.
func (u *OrderUpsertBulk) SetDelete(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetDelete(v)
	})
}

// AddDelete adds v to the "delete" field.
func (u *OrderUpsertBulk) AddDelete(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddDelete(v)
	})
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateDelete() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateDelete()
	})
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderUpsertBulk) ClearDelete() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearDelete()
	})
}

// SetCreatedID sets the "created_id" field.
func (u *OrderUpsertBulk) SetCreatedID(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCreatedID(v)
	})
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderUpsertBulk) AddCreatedID(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddCreatedID(v)
	})
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCreatedID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCreatedID()
	})
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderUpsertBulk) ClearCreatedID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCreatedID()
	})
}

// SetOrderSn sets the "order_sn" field.
func (u *OrderUpsertBulk) SetOrderSn(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetOrderSn(v)
	})
}

// UpdateOrderSn sets the "order_sn" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateOrderSn() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateOrderSn()
	})
}

// SetMemberID sets the "member_id" field.
func (u *OrderUpsertBulk) SetMemberID(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetMemberID(v)
	})
}

// AddMemberID adds v to the "member_id" field.
func (u *OrderUpsertBulk) AddMemberID(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateMemberID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateMemberID()
	})
}

// ClearMemberID clears the value of the "member_id" field.
func (u *OrderUpsertBulk) ClearMemberID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearMemberID()
	})
}

// SetStatus sets the "status" field.
func (u *OrderUpsertBulk) SetStatus(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateStatus() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *OrderUpsertBulk) ClearStatus() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearStatus()
	})
}

// SetNature sets the "nature" field.
func (u *OrderUpsertBulk) SetNature(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetNature(v)
	})
}

// AddNature adds v to the "nature" field.
func (u *OrderUpsertBulk) AddNature(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddNature(v)
	})
}

// UpdateNature sets the "nature" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateNature() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateNature()
	})
}

// ClearNature clears the value of the "nature" field.
func (u *OrderUpsertBulk) ClearNature() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearNature()
	})
}

// SetCompletionAt sets the "completion_at" field.
func (u *OrderUpsertBulk) SetCompletionAt(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCompletionAt(v)
	})
}

// UpdateCompletionAt sets the "completion_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCompletionAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCompletionAt()
	})
}

// ClearCompletionAt clears the value of the "completion_at" field.
func (u *OrderUpsertBulk) ClearCompletionAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCompletionAt()
	})
}

// SetCloseAt sets the "close_at" field.
func (u *OrderUpsertBulk) SetCloseAt(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCloseAt(v)
	})
}

// UpdateCloseAt sets the "close_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCloseAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCloseAt()
	})
}

// ClearCloseAt clears the value of the "close_at" field.
func (u *OrderUpsertBulk) ClearCloseAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCloseAt()
	})
}

// SetRefundAt sets the "refund_at" field.
func (u *OrderUpsertBulk) SetRefundAt(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetRefundAt(v)
	})
}

// UpdateRefundAt sets the "refund_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateRefundAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRefundAt()
	})
}

// ClearRefundAt clears the value of the "refund_at" field.
func (u *OrderUpsertBulk) ClearRefundAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearRefundAt()
	})
}

// SetVersion sets the "version" field.
func (u *OrderUpsertBulk) SetVersion(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *OrderUpsertBulk) AddVersion(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateVersion() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateVersion()
	})
}

// ClearVersion clears the value of the "version" field.
func (u *OrderUpsertBulk) ClearVersion() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearVersion()
	})
}

// Exec executes the query.
func (u *OrderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
