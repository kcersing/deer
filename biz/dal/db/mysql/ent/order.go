// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"deer/biz/dal/db/mysql/ent/order"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除 0:未删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// 订单编号
	OrderSn string `json:"order_sn,omitempty"`
	// 会员id
	MemberID int64 `json:"member_id,omitempty"`
	// 状态
	Status string `json:"status,omitempty"`
	// 业务类型
	Nature int64 `json:"nature,omitempty"`
	// 订单完成时间
	CompletionAt time.Time `json:"completion_at,omitempty"`
	// 订单关闭时间
	CloseAt time.Time `json:"close_at,omitempty"`
	// 订单退费时间
	RefundAt time.Time `json:"refund_at,omitempty"`
	// 乐观锁版本号
	Version int64 `json:"version,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderQuery when eager-loading is set.
	Edges        OrderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderEdges holds the relations/edges for other nodes in the graph.
type OrderEdges struct {
	// Items holds the value of the items edge.
	Items []*OrderItem `json:"items,omitempty"`
	// Events holds the value of the events edge.
	Events []*OrderEvents `json:"events,omitempty"`
	// Snapshots holds the value of the snapshots edge.
	Snapshots []*OrderSnapshots `json:"snapshots,omitempty"`
	// StatusHistory holds the value of the status_history edge.
	StatusHistory []*OrderStatusHistory `json:"status_history,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) ItemsOrErr() ([]*OrderItem, error) {
	if e.loadedTypes[0] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) EventsOrErr() ([]*OrderEvents, error) {
	if e.loadedTypes[1] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// SnapshotsOrErr returns the Snapshots value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) SnapshotsOrErr() ([]*OrderSnapshots, error) {
	if e.loadedTypes[2] {
		return e.Snapshots, nil
	}
	return nil, &NotLoadedError{edge: "snapshots"}
}

// StatusHistoryOrErr returns the StatusHistory value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) StatusHistoryOrErr() ([]*OrderStatusHistory, error) {
	if e.loadedTypes[3] {
		return e.StatusHistory, nil
	}
	return nil, &NotLoadedError{edge: "status_history"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldID, order.FieldDelete, order.FieldCreatedID, order.FieldMemberID, order.FieldNature, order.FieldVersion:
			values[i] = new(sql.NullInt64)
		case order.FieldOrderSn, order.FieldStatus:
			values[i] = new(sql.NullString)
		case order.FieldCreatedAt, order.FieldUpdatedAt, order.FieldCompletionAt, order.FieldCloseAt, order.FieldRefundAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (_m *Order) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int64(value.Int64)
		case order.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case order.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case order.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				_m.Delete = value.Int64
			}
		case order.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				_m.CreatedID = value.Int64
			}
		case order.FieldOrderSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_sn", values[i])
			} else if value.Valid {
				_m.OrderSn = value.String
			}
		case order.FieldMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_id", values[i])
			} else if value.Valid {
				_m.MemberID = value.Int64
			}
		case order.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = value.String
			}
		case order.FieldNature:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nature", values[i])
			} else if value.Valid {
				_m.Nature = value.Int64
			}
		case order.FieldCompletionAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completion_at", values[i])
			} else if value.Valid {
				_m.CompletionAt = value.Time
			}
		case order.FieldCloseAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field close_at", values[i])
			} else if value.Valid {
				_m.CloseAt = value.Time
			}
		case order.FieldRefundAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field refund_at", values[i])
			} else if value.Valid {
				_m.RefundAt = value.Time
			}
		case order.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				_m.Version = value.Int64
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Order.
// This includes values selected through modifiers, order, etc.
func (_m *Order) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryItems queries the "items" edge of the Order entity.
func (_m *Order) QueryItems() *OrderItemQuery {
	return NewOrderClient(_m.config).QueryItems(_m)
}

// QueryEvents queries the "events" edge of the Order entity.
func (_m *Order) QueryEvents() *OrderEventsQuery {
	return NewOrderClient(_m.config).QueryEvents(_m)
}

// QuerySnapshots queries the "snapshots" edge of the Order entity.
func (_m *Order) QuerySnapshots() *OrderSnapshotsQuery {
	return NewOrderClient(_m.config).QuerySnapshots(_m)
}

// QueryStatusHistory queries the "status_history" edge of the Order entity.
func (_m *Order) QueryStatusHistory() *OrderStatusHistoryQuery {
	return NewOrderClient(_m.config).QueryStatusHistory(_m)
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Order) Update() *OrderUpdateOne {
	return NewOrderClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Order) Unwrap() *Order {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", _m.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("order_sn=")
	builder.WriteString(_m.OrderSn)
	builder.WriteString(", ")
	builder.WriteString("member_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.MemberID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(_m.Status)
	builder.WriteString(", ")
	builder.WriteString("nature=")
	builder.WriteString(fmt.Sprintf("%v", _m.Nature))
	builder.WriteString(", ")
	builder.WriteString("completion_at=")
	builder.WriteString(_m.CompletionAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("close_at=")
	builder.WriteString(_m.CloseAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("refund_at=")
	builder.WriteString(_m.RefundAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", _m.Version))
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order
