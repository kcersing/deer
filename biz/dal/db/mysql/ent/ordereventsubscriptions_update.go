// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers-order/biz/dal/db/mysql/ent/ordereventsubscriptions"
	"kcers-order/biz/dal/db/mysql/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderEventSubscriptionsUpdate is the builder for updating OrderEventSubscriptions entities.
type OrderEventSubscriptionsUpdate struct {
	config
	hooks    []Hook
	mutation *OrderEventSubscriptionsMutation
}

// Where appends a list predicates to the OrderEventSubscriptionsUpdate builder.
func (oesu *OrderEventSubscriptionsUpdate) Where(ps ...predicate.OrderEventSubscriptions) *OrderEventSubscriptionsUpdate {
	oesu.mutation.Where(ps...)
	return oesu
}

// SetUpdatedAt sets the "updated_at" field.
func (oesu *OrderEventSubscriptionsUpdate) SetUpdatedAt(t time.Time) *OrderEventSubscriptionsUpdate {
	oesu.mutation.SetUpdatedAt(t)
	return oesu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oesu *OrderEventSubscriptionsUpdate) ClearUpdatedAt() *OrderEventSubscriptionsUpdate {
	oesu.mutation.ClearUpdatedAt()
	return oesu
}

// SetDelete sets the "delete" field.
func (oesu *OrderEventSubscriptionsUpdate) SetDelete(i int64) *OrderEventSubscriptionsUpdate {
	oesu.mutation.ResetDelete()
	oesu.mutation.SetDelete(i)
	return oesu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (oesu *OrderEventSubscriptionsUpdate) SetNillableDelete(i *int64) *OrderEventSubscriptionsUpdate {
	if i != nil {
		oesu.SetDelete(*i)
	}
	return oesu
}

// AddDelete adds i to the "delete" field.
func (oesu *OrderEventSubscriptionsUpdate) AddDelete(i int64) *OrderEventSubscriptionsUpdate {
	oesu.mutation.AddDelete(i)
	return oesu
}

// ClearDelete clears the value of the "delete" field.
func (oesu *OrderEventSubscriptionsUpdate) ClearDelete() *OrderEventSubscriptionsUpdate {
	oesu.mutation.ClearDelete()
	return oesu
}

// SetCreatedID sets the "created_id" field.
func (oesu *OrderEventSubscriptionsUpdate) SetCreatedID(i int64) *OrderEventSubscriptionsUpdate {
	oesu.mutation.ResetCreatedID()
	oesu.mutation.SetCreatedID(i)
	return oesu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (oesu *OrderEventSubscriptionsUpdate) SetNillableCreatedID(i *int64) *OrderEventSubscriptionsUpdate {
	if i != nil {
		oesu.SetCreatedID(*i)
	}
	return oesu
}

// AddCreatedID adds i to the "created_id" field.
func (oesu *OrderEventSubscriptionsUpdate) AddCreatedID(i int64) *OrderEventSubscriptionsUpdate {
	oesu.mutation.AddCreatedID(i)
	return oesu
}

// ClearCreatedID clears the value of the "created_id" field.
func (oesu *OrderEventSubscriptionsUpdate) ClearCreatedID() *OrderEventSubscriptionsUpdate {
	oesu.mutation.ClearCreatedID()
	return oesu
}

// SetName sets the "name" field.
func (oesu *OrderEventSubscriptionsUpdate) SetName(s string) *OrderEventSubscriptionsUpdate {
	oesu.mutation.SetName(s)
	return oesu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (oesu *OrderEventSubscriptionsUpdate) SetNillableName(s *string) *OrderEventSubscriptionsUpdate {
	if s != nil {
		oesu.SetName(*s)
	}
	return oesu
}

// ClearName clears the value of the "name" field.
func (oesu *OrderEventSubscriptionsUpdate) ClearName() *OrderEventSubscriptionsUpdate {
	oesu.mutation.ClearName()
	return oesu
}

// SetEventType sets the "event_type" field.
func (oesu *OrderEventSubscriptionsUpdate) SetEventType(s string) *OrderEventSubscriptionsUpdate {
	oesu.mutation.SetEventType(s)
	return oesu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (oesu *OrderEventSubscriptionsUpdate) SetNillableEventType(s *string) *OrderEventSubscriptionsUpdate {
	if s != nil {
		oesu.SetEventType(*s)
	}
	return oesu
}

// ClearEventType clears the value of the "event_type" field.
func (oesu *OrderEventSubscriptionsUpdate) ClearEventType() *OrderEventSubscriptionsUpdate {
	oesu.mutation.ClearEventType()
	return oesu
}

// SetLastProcessedID sets the "last_processed_id" field.
func (oesu *OrderEventSubscriptionsUpdate) SetLastProcessedID(s string) *OrderEventSubscriptionsUpdate {
	oesu.mutation.SetLastProcessedID(s)
	return oesu
}

// SetNillableLastProcessedID sets the "last_processed_id" field if the given value is not nil.
func (oesu *OrderEventSubscriptionsUpdate) SetNillableLastProcessedID(s *string) *OrderEventSubscriptionsUpdate {
	if s != nil {
		oesu.SetLastProcessedID(*s)
	}
	return oesu
}

// ClearLastProcessedID clears the value of the "last_processed_id" field.
func (oesu *OrderEventSubscriptionsUpdate) ClearLastProcessedID() *OrderEventSubscriptionsUpdate {
	oesu.mutation.ClearLastProcessedID()
	return oesu
}

// SetLastProcessedVersion sets the "last_processed_version" field.
func (oesu *OrderEventSubscriptionsUpdate) SetLastProcessedVersion(i int64) *OrderEventSubscriptionsUpdate {
	oesu.mutation.ResetLastProcessedVersion()
	oesu.mutation.SetLastProcessedVersion(i)
	return oesu
}

// SetNillableLastProcessedVersion sets the "last_processed_version" field if the given value is not nil.
func (oesu *OrderEventSubscriptionsUpdate) SetNillableLastProcessedVersion(i *int64) *OrderEventSubscriptionsUpdate {
	if i != nil {
		oesu.SetLastProcessedVersion(*i)
	}
	return oesu
}

// AddLastProcessedVersion adds i to the "last_processed_version" field.
func (oesu *OrderEventSubscriptionsUpdate) AddLastProcessedVersion(i int64) *OrderEventSubscriptionsUpdate {
	oesu.mutation.AddLastProcessedVersion(i)
	return oesu
}

// ClearLastProcessedVersion clears the value of the "last_processed_version" field.
func (oesu *OrderEventSubscriptionsUpdate) ClearLastProcessedVersion() *OrderEventSubscriptionsUpdate {
	oesu.mutation.ClearLastProcessedVersion()
	return oesu
}

// SetLastProcessedAt sets the "last_processed_at" field.
func (oesu *OrderEventSubscriptionsUpdate) SetLastProcessedAt(t time.Time) *OrderEventSubscriptionsUpdate {
	oesu.mutation.SetLastProcessedAt(t)
	return oesu
}

// SetNillableLastProcessedAt sets the "last_processed_at" field if the given value is not nil.
func (oesu *OrderEventSubscriptionsUpdate) SetNillableLastProcessedAt(t *time.Time) *OrderEventSubscriptionsUpdate {
	if t != nil {
		oesu.SetLastProcessedAt(*t)
	}
	return oesu
}

// ClearLastProcessedAt clears the value of the "last_processed_at" field.
func (oesu *OrderEventSubscriptionsUpdate) ClearLastProcessedAt() *OrderEventSubscriptionsUpdate {
	oesu.mutation.ClearLastProcessedAt()
	return oesu
}

// SetIsActive sets the "is_active" field.
func (oesu *OrderEventSubscriptionsUpdate) SetIsActive(i int64) *OrderEventSubscriptionsUpdate {
	oesu.mutation.ResetIsActive()
	oesu.mutation.SetIsActive(i)
	return oesu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (oesu *OrderEventSubscriptionsUpdate) SetNillableIsActive(i *int64) *OrderEventSubscriptionsUpdate {
	if i != nil {
		oesu.SetIsActive(*i)
	}
	return oesu
}

// AddIsActive adds i to the "is_active" field.
func (oesu *OrderEventSubscriptionsUpdate) AddIsActive(i int64) *OrderEventSubscriptionsUpdate {
	oesu.mutation.AddIsActive(i)
	return oesu
}

// ClearIsActive clears the value of the "is_active" field.
func (oesu *OrderEventSubscriptionsUpdate) ClearIsActive() *OrderEventSubscriptionsUpdate {
	oesu.mutation.ClearIsActive()
	return oesu
}

// SetErrorCount sets the "error_count" field.
func (oesu *OrderEventSubscriptionsUpdate) SetErrorCount(i int64) *OrderEventSubscriptionsUpdate {
	oesu.mutation.ResetErrorCount()
	oesu.mutation.SetErrorCount(i)
	return oesu
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (oesu *OrderEventSubscriptionsUpdate) SetNillableErrorCount(i *int64) *OrderEventSubscriptionsUpdate {
	if i != nil {
		oesu.SetErrorCount(*i)
	}
	return oesu
}

// AddErrorCount adds i to the "error_count" field.
func (oesu *OrderEventSubscriptionsUpdate) AddErrorCount(i int64) *OrderEventSubscriptionsUpdate {
	oesu.mutation.AddErrorCount(i)
	return oesu
}

// ClearErrorCount clears the value of the "error_count" field.
func (oesu *OrderEventSubscriptionsUpdate) ClearErrorCount() *OrderEventSubscriptionsUpdate {
	oesu.mutation.ClearErrorCount()
	return oesu
}

// SetLastError sets the "last_error" field.
func (oesu *OrderEventSubscriptionsUpdate) SetLastError(s string) *OrderEventSubscriptionsUpdate {
	oesu.mutation.SetLastError(s)
	return oesu
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (oesu *OrderEventSubscriptionsUpdate) SetNillableLastError(s *string) *OrderEventSubscriptionsUpdate {
	if s != nil {
		oesu.SetLastError(*s)
	}
	return oesu
}

// ClearLastError clears the value of the "last_error" field.
func (oesu *OrderEventSubscriptionsUpdate) ClearLastError() *OrderEventSubscriptionsUpdate {
	oesu.mutation.ClearLastError()
	return oesu
}

// Mutation returns the OrderEventSubscriptionsMutation object of the builder.
func (oesu *OrderEventSubscriptionsUpdate) Mutation() *OrderEventSubscriptionsMutation {
	return oesu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oesu *OrderEventSubscriptionsUpdate) Save(ctx context.Context) (int, error) {
	oesu.defaults()
	return withHooks(ctx, oesu.sqlSave, oesu.mutation, oesu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oesu *OrderEventSubscriptionsUpdate) SaveX(ctx context.Context) int {
	affected, err := oesu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oesu *OrderEventSubscriptionsUpdate) Exec(ctx context.Context) error {
	_, err := oesu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oesu *OrderEventSubscriptionsUpdate) ExecX(ctx context.Context) {
	if err := oesu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oesu *OrderEventSubscriptionsUpdate) defaults() {
	if _, ok := oesu.mutation.UpdatedAt(); !ok && !oesu.mutation.UpdatedAtCleared() {
		v := ordereventsubscriptions.UpdateDefaultUpdatedAt()
		oesu.mutation.SetUpdatedAt(v)
	}
}

func (oesu *OrderEventSubscriptionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ordereventsubscriptions.Table, ordereventsubscriptions.Columns, sqlgraph.NewFieldSpec(ordereventsubscriptions.FieldID, field.TypeInt64))
	if ps := oesu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if oesu.mutation.CreatedAtCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := oesu.mutation.UpdatedAt(); ok {
		_spec.SetField(ordereventsubscriptions.FieldUpdatedAt, field.TypeTime, value)
	}
	if oesu.mutation.UpdatedAtCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := oesu.mutation.Delete(); ok {
		_spec.SetField(ordereventsubscriptions.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := oesu.mutation.AddedDelete(); ok {
		_spec.AddField(ordereventsubscriptions.FieldDelete, field.TypeInt64, value)
	}
	if oesu.mutation.DeleteCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldDelete, field.TypeInt64)
	}
	if value, ok := oesu.mutation.CreatedID(); ok {
		_spec.SetField(ordereventsubscriptions.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := oesu.mutation.AddedCreatedID(); ok {
		_spec.AddField(ordereventsubscriptions.FieldCreatedID, field.TypeInt64, value)
	}
	if oesu.mutation.CreatedIDCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := oesu.mutation.Name(); ok {
		_spec.SetField(ordereventsubscriptions.FieldName, field.TypeString, value)
	}
	if oesu.mutation.NameCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldName, field.TypeString)
	}
	if value, ok := oesu.mutation.EventType(); ok {
		_spec.SetField(ordereventsubscriptions.FieldEventType, field.TypeString, value)
	}
	if oesu.mutation.EventTypeCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldEventType, field.TypeString)
	}
	if value, ok := oesu.mutation.LastProcessedID(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastProcessedID, field.TypeString, value)
	}
	if oesu.mutation.LastProcessedIDCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldLastProcessedID, field.TypeString)
	}
	if value, ok := oesu.mutation.LastProcessedVersion(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastProcessedVersion, field.TypeInt64, value)
	}
	if value, ok := oesu.mutation.AddedLastProcessedVersion(); ok {
		_spec.AddField(ordereventsubscriptions.FieldLastProcessedVersion, field.TypeInt64, value)
	}
	if oesu.mutation.LastProcessedVersionCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldLastProcessedVersion, field.TypeInt64)
	}
	if value, ok := oesu.mutation.LastProcessedAt(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastProcessedAt, field.TypeTime, value)
	}
	if oesu.mutation.LastProcessedAtCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldLastProcessedAt, field.TypeTime)
	}
	if value, ok := oesu.mutation.IsActive(); ok {
		_spec.SetField(ordereventsubscriptions.FieldIsActive, field.TypeInt64, value)
	}
	if value, ok := oesu.mutation.AddedIsActive(); ok {
		_spec.AddField(ordereventsubscriptions.FieldIsActive, field.TypeInt64, value)
	}
	if oesu.mutation.IsActiveCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldIsActive, field.TypeInt64)
	}
	if value, ok := oesu.mutation.ErrorCount(); ok {
		_spec.SetField(ordereventsubscriptions.FieldErrorCount, field.TypeInt64, value)
	}
	if value, ok := oesu.mutation.AddedErrorCount(); ok {
		_spec.AddField(ordereventsubscriptions.FieldErrorCount, field.TypeInt64, value)
	}
	if oesu.mutation.ErrorCountCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldErrorCount, field.TypeInt64)
	}
	if value, ok := oesu.mutation.LastError(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastError, field.TypeString, value)
	}
	if oesu.mutation.LastErrorCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldLastError, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oesu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordereventsubscriptions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oesu.mutation.done = true
	return n, nil
}

// OrderEventSubscriptionsUpdateOne is the builder for updating a single OrderEventSubscriptions entity.
type OrderEventSubscriptionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderEventSubscriptionsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetUpdatedAt(t time.Time) *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.SetUpdatedAt(t)
	return oesuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) ClearUpdatedAt() *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.ClearUpdatedAt()
	return oesuo
}

// SetDelete sets the "delete" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetDelete(i int64) *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.ResetDelete()
	oesuo.mutation.SetDelete(i)
	return oesuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetNillableDelete(i *int64) *OrderEventSubscriptionsUpdateOne {
	if i != nil {
		oesuo.SetDelete(*i)
	}
	return oesuo
}

// AddDelete adds i to the "delete" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) AddDelete(i int64) *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.AddDelete(i)
	return oesuo
}

// ClearDelete clears the value of the "delete" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) ClearDelete() *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.ClearDelete()
	return oesuo
}

// SetCreatedID sets the "created_id" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetCreatedID(i int64) *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.ResetCreatedID()
	oesuo.mutation.SetCreatedID(i)
	return oesuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetNillableCreatedID(i *int64) *OrderEventSubscriptionsUpdateOne {
	if i != nil {
		oesuo.SetCreatedID(*i)
	}
	return oesuo
}

// AddCreatedID adds i to the "created_id" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) AddCreatedID(i int64) *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.AddCreatedID(i)
	return oesuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) ClearCreatedID() *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.ClearCreatedID()
	return oesuo
}

// SetName sets the "name" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetName(s string) *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.SetName(s)
	return oesuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetNillableName(s *string) *OrderEventSubscriptionsUpdateOne {
	if s != nil {
		oesuo.SetName(*s)
	}
	return oesuo
}

// ClearName clears the value of the "name" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) ClearName() *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.ClearName()
	return oesuo
}

// SetEventType sets the "event_type" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetEventType(s string) *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.SetEventType(s)
	return oesuo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetNillableEventType(s *string) *OrderEventSubscriptionsUpdateOne {
	if s != nil {
		oesuo.SetEventType(*s)
	}
	return oesuo
}

// ClearEventType clears the value of the "event_type" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) ClearEventType() *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.ClearEventType()
	return oesuo
}

// SetLastProcessedID sets the "last_processed_id" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetLastProcessedID(s string) *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.SetLastProcessedID(s)
	return oesuo
}

// SetNillableLastProcessedID sets the "last_processed_id" field if the given value is not nil.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetNillableLastProcessedID(s *string) *OrderEventSubscriptionsUpdateOne {
	if s != nil {
		oesuo.SetLastProcessedID(*s)
	}
	return oesuo
}

// ClearLastProcessedID clears the value of the "last_processed_id" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) ClearLastProcessedID() *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.ClearLastProcessedID()
	return oesuo
}

// SetLastProcessedVersion sets the "last_processed_version" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetLastProcessedVersion(i int64) *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.ResetLastProcessedVersion()
	oesuo.mutation.SetLastProcessedVersion(i)
	return oesuo
}

// SetNillableLastProcessedVersion sets the "last_processed_version" field if the given value is not nil.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetNillableLastProcessedVersion(i *int64) *OrderEventSubscriptionsUpdateOne {
	if i != nil {
		oesuo.SetLastProcessedVersion(*i)
	}
	return oesuo
}

// AddLastProcessedVersion adds i to the "last_processed_version" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) AddLastProcessedVersion(i int64) *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.AddLastProcessedVersion(i)
	return oesuo
}

// ClearLastProcessedVersion clears the value of the "last_processed_version" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) ClearLastProcessedVersion() *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.ClearLastProcessedVersion()
	return oesuo
}

// SetLastProcessedAt sets the "last_processed_at" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetLastProcessedAt(t time.Time) *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.SetLastProcessedAt(t)
	return oesuo
}

// SetNillableLastProcessedAt sets the "last_processed_at" field if the given value is not nil.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetNillableLastProcessedAt(t *time.Time) *OrderEventSubscriptionsUpdateOne {
	if t != nil {
		oesuo.SetLastProcessedAt(*t)
	}
	return oesuo
}

// ClearLastProcessedAt clears the value of the "last_processed_at" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) ClearLastProcessedAt() *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.ClearLastProcessedAt()
	return oesuo
}

// SetIsActive sets the "is_active" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetIsActive(i int64) *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.ResetIsActive()
	oesuo.mutation.SetIsActive(i)
	return oesuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetNillableIsActive(i *int64) *OrderEventSubscriptionsUpdateOne {
	if i != nil {
		oesuo.SetIsActive(*i)
	}
	return oesuo
}

// AddIsActive adds i to the "is_active" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) AddIsActive(i int64) *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.AddIsActive(i)
	return oesuo
}

// ClearIsActive clears the value of the "is_active" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) ClearIsActive() *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.ClearIsActive()
	return oesuo
}

// SetErrorCount sets the "error_count" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetErrorCount(i int64) *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.ResetErrorCount()
	oesuo.mutation.SetErrorCount(i)
	return oesuo
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetNillableErrorCount(i *int64) *OrderEventSubscriptionsUpdateOne {
	if i != nil {
		oesuo.SetErrorCount(*i)
	}
	return oesuo
}

// AddErrorCount adds i to the "error_count" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) AddErrorCount(i int64) *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.AddErrorCount(i)
	return oesuo
}

// ClearErrorCount clears the value of the "error_count" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) ClearErrorCount() *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.ClearErrorCount()
	return oesuo
}

// SetLastError sets the "last_error" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetLastError(s string) *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.SetLastError(s)
	return oesuo
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (oesuo *OrderEventSubscriptionsUpdateOne) SetNillableLastError(s *string) *OrderEventSubscriptionsUpdateOne {
	if s != nil {
		oesuo.SetLastError(*s)
	}
	return oesuo
}

// ClearLastError clears the value of the "last_error" field.
func (oesuo *OrderEventSubscriptionsUpdateOne) ClearLastError() *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.ClearLastError()
	return oesuo
}

// Mutation returns the OrderEventSubscriptionsMutation object of the builder.
func (oesuo *OrderEventSubscriptionsUpdateOne) Mutation() *OrderEventSubscriptionsMutation {
	return oesuo.mutation
}

// Where appends a list predicates to the OrderEventSubscriptionsUpdate builder.
func (oesuo *OrderEventSubscriptionsUpdateOne) Where(ps ...predicate.OrderEventSubscriptions) *OrderEventSubscriptionsUpdateOne {
	oesuo.mutation.Where(ps...)
	return oesuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oesuo *OrderEventSubscriptionsUpdateOne) Select(field string, fields ...string) *OrderEventSubscriptionsUpdateOne {
	oesuo.fields = append([]string{field}, fields...)
	return oesuo
}

// Save executes the query and returns the updated OrderEventSubscriptions entity.
func (oesuo *OrderEventSubscriptionsUpdateOne) Save(ctx context.Context) (*OrderEventSubscriptions, error) {
	oesuo.defaults()
	return withHooks(ctx, oesuo.sqlSave, oesuo.mutation, oesuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oesuo *OrderEventSubscriptionsUpdateOne) SaveX(ctx context.Context) *OrderEventSubscriptions {
	node, err := oesuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oesuo *OrderEventSubscriptionsUpdateOne) Exec(ctx context.Context) error {
	_, err := oesuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oesuo *OrderEventSubscriptionsUpdateOne) ExecX(ctx context.Context) {
	if err := oesuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oesuo *OrderEventSubscriptionsUpdateOne) defaults() {
	if _, ok := oesuo.mutation.UpdatedAt(); !ok && !oesuo.mutation.UpdatedAtCleared() {
		v := ordereventsubscriptions.UpdateDefaultUpdatedAt()
		oesuo.mutation.SetUpdatedAt(v)
	}
}

func (oesuo *OrderEventSubscriptionsUpdateOne) sqlSave(ctx context.Context) (_node *OrderEventSubscriptions, err error) {
	_spec := sqlgraph.NewUpdateSpec(ordereventsubscriptions.Table, ordereventsubscriptions.Columns, sqlgraph.NewFieldSpec(ordereventsubscriptions.FieldID, field.TypeInt64))
	id, ok := oesuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderEventSubscriptions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oesuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ordereventsubscriptions.FieldID)
		for _, f := range fields {
			if !ordereventsubscriptions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ordereventsubscriptions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oesuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if oesuo.mutation.CreatedAtCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := oesuo.mutation.UpdatedAt(); ok {
		_spec.SetField(ordereventsubscriptions.FieldUpdatedAt, field.TypeTime, value)
	}
	if oesuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := oesuo.mutation.Delete(); ok {
		_spec.SetField(ordereventsubscriptions.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := oesuo.mutation.AddedDelete(); ok {
		_spec.AddField(ordereventsubscriptions.FieldDelete, field.TypeInt64, value)
	}
	if oesuo.mutation.DeleteCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldDelete, field.TypeInt64)
	}
	if value, ok := oesuo.mutation.CreatedID(); ok {
		_spec.SetField(ordereventsubscriptions.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := oesuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(ordereventsubscriptions.FieldCreatedID, field.TypeInt64, value)
	}
	if oesuo.mutation.CreatedIDCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := oesuo.mutation.Name(); ok {
		_spec.SetField(ordereventsubscriptions.FieldName, field.TypeString, value)
	}
	if oesuo.mutation.NameCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldName, field.TypeString)
	}
	if value, ok := oesuo.mutation.EventType(); ok {
		_spec.SetField(ordereventsubscriptions.FieldEventType, field.TypeString, value)
	}
	if oesuo.mutation.EventTypeCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldEventType, field.TypeString)
	}
	if value, ok := oesuo.mutation.LastProcessedID(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastProcessedID, field.TypeString, value)
	}
	if oesuo.mutation.LastProcessedIDCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldLastProcessedID, field.TypeString)
	}
	if value, ok := oesuo.mutation.LastProcessedVersion(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastProcessedVersion, field.TypeInt64, value)
	}
	if value, ok := oesuo.mutation.AddedLastProcessedVersion(); ok {
		_spec.AddField(ordereventsubscriptions.FieldLastProcessedVersion, field.TypeInt64, value)
	}
	if oesuo.mutation.LastProcessedVersionCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldLastProcessedVersion, field.TypeInt64)
	}
	if value, ok := oesuo.mutation.LastProcessedAt(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastProcessedAt, field.TypeTime, value)
	}
	if oesuo.mutation.LastProcessedAtCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldLastProcessedAt, field.TypeTime)
	}
	if value, ok := oesuo.mutation.IsActive(); ok {
		_spec.SetField(ordereventsubscriptions.FieldIsActive, field.TypeInt64, value)
	}
	if value, ok := oesuo.mutation.AddedIsActive(); ok {
		_spec.AddField(ordereventsubscriptions.FieldIsActive, field.TypeInt64, value)
	}
	if oesuo.mutation.IsActiveCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldIsActive, field.TypeInt64)
	}
	if value, ok := oesuo.mutation.ErrorCount(); ok {
		_spec.SetField(ordereventsubscriptions.FieldErrorCount, field.TypeInt64, value)
	}
	if value, ok := oesuo.mutation.AddedErrorCount(); ok {
		_spec.AddField(ordereventsubscriptions.FieldErrorCount, field.TypeInt64, value)
	}
	if oesuo.mutation.ErrorCountCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldErrorCount, field.TypeInt64)
	}
	if value, ok := oesuo.mutation.LastError(); ok {
		_spec.SetField(ordereventsubscriptions.FieldLastError, field.TypeString, value)
	}
	if oesuo.mutation.LastErrorCleared() {
		_spec.ClearField(ordereventsubscriptions.FieldLastError, field.TypeString)
	}
	_node = &OrderEventSubscriptions{config: oesuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oesuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordereventsubscriptions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oesuo.mutation.done = true
	return _node, nil
}
