// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers-order/biz/dal/db/mysql/ent/order"
	"kcers-order/biz/dal/db/mysql/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks     []Hook
	mutation  *OrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ou *OrderUpdate) ClearUpdatedAt() *OrderUpdate {
	ou.mutation.ClearUpdatedAt()
	return ou
}

// SetDelete sets the "delete" field.
func (ou *OrderUpdate) SetDelete(i int64) *OrderUpdate {
	ou.mutation.ResetDelete()
	ou.mutation.SetDelete(i)
	return ou
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDelete(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetDelete(*i)
	}
	return ou
}

// AddDelete adds i to the "delete" field.
func (ou *OrderUpdate) AddDelete(i int64) *OrderUpdate {
	ou.mutation.AddDelete(i)
	return ou
}

// ClearDelete clears the value of the "delete" field.
func (ou *OrderUpdate) ClearDelete() *OrderUpdate {
	ou.mutation.ClearDelete()
	return ou
}

// SetCreatedID sets the "created_id" field.
func (ou *OrderUpdate) SetCreatedID(i int64) *OrderUpdate {
	ou.mutation.ResetCreatedID()
	ou.mutation.SetCreatedID(i)
	return ou
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCreatedID(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetCreatedID(*i)
	}
	return ou
}

// AddCreatedID adds i to the "created_id" field.
func (ou *OrderUpdate) AddCreatedID(i int64) *OrderUpdate {
	ou.mutation.AddCreatedID(i)
	return ou
}

// ClearCreatedID clears the value of the "created_id" field.
func (ou *OrderUpdate) ClearCreatedID() *OrderUpdate {
	ou.mutation.ClearCreatedID()
	return ou
}

// SetOrderSn sets the "order_sn" field.
func (ou *OrderUpdate) SetOrderSn(s string) *OrderUpdate {
	ou.mutation.SetOrderSn(s)
	return ou
}

// SetNillableOrderSn sets the "order_sn" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderSn(s *string) *OrderUpdate {
	if s != nil {
		ou.SetOrderSn(*s)
	}
	return ou
}

// ClearOrderSn clears the value of the "order_sn" field.
func (ou *OrderUpdate) ClearOrderSn() *OrderUpdate {
	ou.mutation.ClearOrderSn()
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(i int64) *OrderUpdate {
	ou.mutation.ResetStatus()
	ou.mutation.SetStatus(i)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStatus(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetStatus(*i)
	}
	return ou
}

// AddStatus adds i to the "status" field.
func (ou *OrderUpdate) AddStatus(i int64) *OrderUpdate {
	ou.mutation.AddStatus(i)
	return ou
}

// ClearStatus clears the value of the "status" field.
func (ou *OrderUpdate) ClearStatus() *OrderUpdate {
	ou.mutation.ClearStatus()
	return ou
}

// SetSource sets the "source" field.
func (ou *OrderUpdate) SetSource(s string) *OrderUpdate {
	ou.mutation.SetSource(s)
	return ou
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableSource(s *string) *OrderUpdate {
	if s != nil {
		ou.SetSource(*s)
	}
	return ou
}

// ClearSource clears the value of the "source" field.
func (ou *OrderUpdate) ClearSource() *OrderUpdate {
	ou.mutation.ClearSource()
	return ou
}

// SetDevice sets the "device" field.
func (ou *OrderUpdate) SetDevice(s string) *OrderUpdate {
	ou.mutation.SetDevice(s)
	return ou
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDevice(s *string) *OrderUpdate {
	if s != nil {
		ou.SetDevice(*s)
	}
	return ou
}

// ClearDevice clears the value of the "device" field.
func (ou *OrderUpdate) ClearDevice() *OrderUpdate {
	ou.mutation.ClearDevice()
	return ou
}

// SetNature sets the "nature" field.
func (ou *OrderUpdate) SetNature(i int64) *OrderUpdate {
	ou.mutation.ResetNature()
	ou.mutation.SetNature(i)
	return ou
}

// SetNillableNature sets the "nature" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableNature(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetNature(*i)
	}
	return ou
}

// AddNature adds i to the "nature" field.
func (ou *OrderUpdate) AddNature(i int64) *OrderUpdate {
	ou.mutation.AddNature(i)
	return ou
}

// ClearNature clears the value of the "nature" field.
func (ou *OrderUpdate) ClearNature() *OrderUpdate {
	ou.mutation.ClearNature()
	return ou
}

// SetCompletionAt sets the "completion_at" field.
func (ou *OrderUpdate) SetCompletionAt(t time.Time) *OrderUpdate {
	ou.mutation.SetCompletionAt(t)
	return ou
}

// SetNillableCompletionAt sets the "completion_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCompletionAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetCompletionAt(*t)
	}
	return ou
}

// ClearCompletionAt clears the value of the "completion_at" field.
func (ou *OrderUpdate) ClearCompletionAt() *OrderUpdate {
	ou.mutation.ClearCompletionAt()
	return ou
}

// SetCloseAt sets the "close_at" field.
func (ou *OrderUpdate) SetCloseAt(t time.Time) *OrderUpdate {
	ou.mutation.SetCloseAt(t)
	return ou
}

// SetNillableCloseAt sets the "close_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCloseAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetCloseAt(*t)
	}
	return ou
}

// ClearCloseAt clears the value of the "close_at" field.
func (ou *OrderUpdate) ClearCloseAt() *OrderUpdate {
	ou.mutation.ClearCloseAt()
	return ou
}

// SetRefundAt sets the "refund_at" field.
func (ou *OrderUpdate) SetRefundAt(t time.Time) *OrderUpdate {
	ou.mutation.SetRefundAt(t)
	return ou
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableRefundAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetRefundAt(*t)
	}
	return ou
}

// ClearRefundAt clears the value of the "refund_at" field.
func (ou *OrderUpdate) ClearRefundAt() *OrderUpdate {
	ou.mutation.ClearRefundAt()
	return ou
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok && !ou.mutation.UpdatedAtCleared() {
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ou *OrderUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderUpdate {
	ou.modifiers = append(ou.modifiers, modifiers...)
	return ou
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ou.mutation.CreatedAtCleared() {
		_spec.ClearField(order.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if ou.mutation.UpdatedAtCleared() {
		_spec.ClearField(order.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.Delete(); ok {
		_spec.SetField(order.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedDelete(); ok {
		_spec.AddField(order.FieldDelete, field.TypeInt64, value)
	}
	if ou.mutation.DeleteCleared() {
		_spec.ClearField(order.FieldDelete, field.TypeInt64)
	}
	if value, ok := ou.mutation.CreatedID(); ok {
		_spec.SetField(order.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedCreatedID(); ok {
		_spec.AddField(order.FieldCreatedID, field.TypeInt64, value)
	}
	if ou.mutation.CreatedIDCleared() {
		_spec.ClearField(order.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := ou.mutation.OrderSn(); ok {
		_spec.SetField(order.FieldOrderSn, field.TypeString, value)
	}
	if ou.mutation.OrderSnCleared() {
		_spec.ClearField(order.FieldOrderSn, field.TypeString)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedStatus(); ok {
		_spec.AddField(order.FieldStatus, field.TypeInt64, value)
	}
	if ou.mutation.StatusCleared() {
		_spec.ClearField(order.FieldStatus, field.TypeInt64)
	}
	if value, ok := ou.mutation.Source(); ok {
		_spec.SetField(order.FieldSource, field.TypeString, value)
	}
	if ou.mutation.SourceCleared() {
		_spec.ClearField(order.FieldSource, field.TypeString)
	}
	if value, ok := ou.mutation.Device(); ok {
		_spec.SetField(order.FieldDevice, field.TypeString, value)
	}
	if ou.mutation.DeviceCleared() {
		_spec.ClearField(order.FieldDevice, field.TypeString)
	}
	if value, ok := ou.mutation.Nature(); ok {
		_spec.SetField(order.FieldNature, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedNature(); ok {
		_spec.AddField(order.FieldNature, field.TypeInt64, value)
	}
	if ou.mutation.NatureCleared() {
		_spec.ClearField(order.FieldNature, field.TypeInt64)
	}
	if value, ok := ou.mutation.CompletionAt(); ok {
		_spec.SetField(order.FieldCompletionAt, field.TypeTime, value)
	}
	if ou.mutation.CompletionAtCleared() {
		_spec.ClearField(order.FieldCompletionAt, field.TypeTime)
	}
	if value, ok := ou.mutation.CloseAt(); ok {
		_spec.SetField(order.FieldCloseAt, field.TypeTime, value)
	}
	if ou.mutation.CloseAtCleared() {
		_spec.ClearField(order.FieldCloseAt, field.TypeTime)
	}
	if value, ok := ou.mutation.RefundAt(); ok {
		_spec.SetField(order.FieldRefundAt, field.TypeTime, value)
	}
	if ou.mutation.RefundAtCleared() {
		_spec.ClearField(order.FieldRefundAt, field.TypeTime)
	}
	_spec.AddModifiers(ou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ouo *OrderUpdateOne) ClearUpdatedAt() *OrderUpdateOne {
	ouo.mutation.ClearUpdatedAt()
	return ouo
}

// SetDelete sets the "delete" field.
func (ouo *OrderUpdateOne) SetDelete(i int64) *OrderUpdateOne {
	ouo.mutation.ResetDelete()
	ouo.mutation.SetDelete(i)
	return ouo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDelete(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetDelete(*i)
	}
	return ouo
}

// AddDelete adds i to the "delete" field.
func (ouo *OrderUpdateOne) AddDelete(i int64) *OrderUpdateOne {
	ouo.mutation.AddDelete(i)
	return ouo
}

// ClearDelete clears the value of the "delete" field.
func (ouo *OrderUpdateOne) ClearDelete() *OrderUpdateOne {
	ouo.mutation.ClearDelete()
	return ouo
}

// SetCreatedID sets the "created_id" field.
func (ouo *OrderUpdateOne) SetCreatedID(i int64) *OrderUpdateOne {
	ouo.mutation.ResetCreatedID()
	ouo.mutation.SetCreatedID(i)
	return ouo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCreatedID(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetCreatedID(*i)
	}
	return ouo
}

// AddCreatedID adds i to the "created_id" field.
func (ouo *OrderUpdateOne) AddCreatedID(i int64) *OrderUpdateOne {
	ouo.mutation.AddCreatedID(i)
	return ouo
}

// ClearCreatedID clears the value of the "created_id" field.
func (ouo *OrderUpdateOne) ClearCreatedID() *OrderUpdateOne {
	ouo.mutation.ClearCreatedID()
	return ouo
}

// SetOrderSn sets the "order_sn" field.
func (ouo *OrderUpdateOne) SetOrderSn(s string) *OrderUpdateOne {
	ouo.mutation.SetOrderSn(s)
	return ouo
}

// SetNillableOrderSn sets the "order_sn" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderSn(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetOrderSn(*s)
	}
	return ouo
}

// ClearOrderSn clears the value of the "order_sn" field.
func (ouo *OrderUpdateOne) ClearOrderSn() *OrderUpdateOne {
	ouo.mutation.ClearOrderSn()
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(i int64) *OrderUpdateOne {
	ouo.mutation.ResetStatus()
	ouo.mutation.SetStatus(i)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStatus(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetStatus(*i)
	}
	return ouo
}

// AddStatus adds i to the "status" field.
func (ouo *OrderUpdateOne) AddStatus(i int64) *OrderUpdateOne {
	ouo.mutation.AddStatus(i)
	return ouo
}

// ClearStatus clears the value of the "status" field.
func (ouo *OrderUpdateOne) ClearStatus() *OrderUpdateOne {
	ouo.mutation.ClearStatus()
	return ouo
}

// SetSource sets the "source" field.
func (ouo *OrderUpdateOne) SetSource(s string) *OrderUpdateOne {
	ouo.mutation.SetSource(s)
	return ouo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableSource(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetSource(*s)
	}
	return ouo
}

// ClearSource clears the value of the "source" field.
func (ouo *OrderUpdateOne) ClearSource() *OrderUpdateOne {
	ouo.mutation.ClearSource()
	return ouo
}

// SetDevice sets the "device" field.
func (ouo *OrderUpdateOne) SetDevice(s string) *OrderUpdateOne {
	ouo.mutation.SetDevice(s)
	return ouo
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDevice(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetDevice(*s)
	}
	return ouo
}

// ClearDevice clears the value of the "device" field.
func (ouo *OrderUpdateOne) ClearDevice() *OrderUpdateOne {
	ouo.mutation.ClearDevice()
	return ouo
}

// SetNature sets the "nature" field.
func (ouo *OrderUpdateOne) SetNature(i int64) *OrderUpdateOne {
	ouo.mutation.ResetNature()
	ouo.mutation.SetNature(i)
	return ouo
}

// SetNillableNature sets the "nature" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableNature(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetNature(*i)
	}
	return ouo
}

// AddNature adds i to the "nature" field.
func (ouo *OrderUpdateOne) AddNature(i int64) *OrderUpdateOne {
	ouo.mutation.AddNature(i)
	return ouo
}

// ClearNature clears the value of the "nature" field.
func (ouo *OrderUpdateOne) ClearNature() *OrderUpdateOne {
	ouo.mutation.ClearNature()
	return ouo
}

// SetCompletionAt sets the "completion_at" field.
func (ouo *OrderUpdateOne) SetCompletionAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetCompletionAt(t)
	return ouo
}

// SetNillableCompletionAt sets the "completion_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCompletionAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetCompletionAt(*t)
	}
	return ouo
}

// ClearCompletionAt clears the value of the "completion_at" field.
func (ouo *OrderUpdateOne) ClearCompletionAt() *OrderUpdateOne {
	ouo.mutation.ClearCompletionAt()
	return ouo
}

// SetCloseAt sets the "close_at" field.
func (ouo *OrderUpdateOne) SetCloseAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetCloseAt(t)
	return ouo
}

// SetNillableCloseAt sets the "close_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCloseAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetCloseAt(*t)
	}
	return ouo
}

// ClearCloseAt clears the value of the "close_at" field.
func (ouo *OrderUpdateOne) ClearCloseAt() *OrderUpdateOne {
	ouo.mutation.ClearCloseAt()
	return ouo
}

// SetRefundAt sets the "refund_at" field.
func (ouo *OrderUpdateOne) SetRefundAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetRefundAt(t)
	return ouo
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableRefundAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetRefundAt(*t)
	}
	return ouo
}

// ClearRefundAt clears the value of the "refund_at" field.
func (ouo *OrderUpdateOne) ClearRefundAt() *OrderUpdateOne {
	ouo.mutation.ClearRefundAt()
	return ouo
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok && !ouo.mutation.UpdatedAtCleared() {
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ouo *OrderUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderUpdateOne {
	ouo.modifiers = append(ouo.modifiers, modifiers...)
	return ouo
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ouo.mutation.CreatedAtCleared() {
		_spec.ClearField(order.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if ouo.mutation.UpdatedAtCleared() {
		_spec.ClearField(order.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.Delete(); ok {
		_spec.SetField(order.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedDelete(); ok {
		_spec.AddField(order.FieldDelete, field.TypeInt64, value)
	}
	if ouo.mutation.DeleteCleared() {
		_spec.ClearField(order.FieldDelete, field.TypeInt64)
	}
	if value, ok := ouo.mutation.CreatedID(); ok {
		_spec.SetField(order.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedCreatedID(); ok {
		_spec.AddField(order.FieldCreatedID, field.TypeInt64, value)
	}
	if ouo.mutation.CreatedIDCleared() {
		_spec.ClearField(order.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := ouo.mutation.OrderSn(); ok {
		_spec.SetField(order.FieldOrderSn, field.TypeString, value)
	}
	if ouo.mutation.OrderSnCleared() {
		_spec.ClearField(order.FieldOrderSn, field.TypeString)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedStatus(); ok {
		_spec.AddField(order.FieldStatus, field.TypeInt64, value)
	}
	if ouo.mutation.StatusCleared() {
		_spec.ClearField(order.FieldStatus, field.TypeInt64)
	}
	if value, ok := ouo.mutation.Source(); ok {
		_spec.SetField(order.FieldSource, field.TypeString, value)
	}
	if ouo.mutation.SourceCleared() {
		_spec.ClearField(order.FieldSource, field.TypeString)
	}
	if value, ok := ouo.mutation.Device(); ok {
		_spec.SetField(order.FieldDevice, field.TypeString, value)
	}
	if ouo.mutation.DeviceCleared() {
		_spec.ClearField(order.FieldDevice, field.TypeString)
	}
	if value, ok := ouo.mutation.Nature(); ok {
		_spec.SetField(order.FieldNature, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedNature(); ok {
		_spec.AddField(order.FieldNature, field.TypeInt64, value)
	}
	if ouo.mutation.NatureCleared() {
		_spec.ClearField(order.FieldNature, field.TypeInt64)
	}
	if value, ok := ouo.mutation.CompletionAt(); ok {
		_spec.SetField(order.FieldCompletionAt, field.TypeTime, value)
	}
	if ouo.mutation.CompletionAtCleared() {
		_spec.ClearField(order.FieldCompletionAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.CloseAt(); ok {
		_spec.SetField(order.FieldCloseAt, field.TypeTime, value)
	}
	if ouo.mutation.CloseAtCleared() {
		_spec.ClearField(order.FieldCloseAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.RefundAt(); ok {
		_spec.SetField(order.FieldRefundAt, field.TypeTime, value)
	}
	if ouo.mutation.RefundAtCleared() {
		_spec.ClearField(order.FieldRefundAt, field.TypeTime)
	}
	_spec.AddModifiers(ouo.modifiers...)
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
