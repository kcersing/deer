// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers-order/biz/dal/db/mysql/ent/order"
	"kcers-order/biz/dal/db/mysql/ent/orderevents"
	"kcers-order/biz/dal/db/mysql/ent/orderitem"
	"kcers-order/biz/dal/db/mysql/ent/ordersnapshots"
	"kcers-order/biz/dal/db/mysql/ent/orderstatushistory"
	"kcers-order/biz/dal/db/mysql/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ou *OrderUpdate) ClearUpdatedAt() *OrderUpdate {
	ou.mutation.ClearUpdatedAt()
	return ou
}

// SetDelete sets the "delete" field.
func (ou *OrderUpdate) SetDelete(i int64) *OrderUpdate {
	ou.mutation.ResetDelete()
	ou.mutation.SetDelete(i)
	return ou
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDelete(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetDelete(*i)
	}
	return ou
}

// AddDelete adds i to the "delete" field.
func (ou *OrderUpdate) AddDelete(i int64) *OrderUpdate {
	ou.mutation.AddDelete(i)
	return ou
}

// ClearDelete clears the value of the "delete" field.
func (ou *OrderUpdate) ClearDelete() *OrderUpdate {
	ou.mutation.ClearDelete()
	return ou
}

// SetCreatedID sets the "created_id" field.
func (ou *OrderUpdate) SetCreatedID(i int64) *OrderUpdate {
	ou.mutation.ResetCreatedID()
	ou.mutation.SetCreatedID(i)
	return ou
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCreatedID(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetCreatedID(*i)
	}
	return ou
}

// AddCreatedID adds i to the "created_id" field.
func (ou *OrderUpdate) AddCreatedID(i int64) *OrderUpdate {
	ou.mutation.AddCreatedID(i)
	return ou
}

// ClearCreatedID clears the value of the "created_id" field.
func (ou *OrderUpdate) ClearCreatedID() *OrderUpdate {
	ou.mutation.ClearCreatedID()
	return ou
}

// SetOrderSn sets the "order_sn" field.
func (ou *OrderUpdate) SetOrderSn(s string) *OrderUpdate {
	ou.mutation.SetOrderSn(s)
	return ou
}

// SetNillableOrderSn sets the "order_sn" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderSn(s *string) *OrderUpdate {
	if s != nil {
		ou.SetOrderSn(*s)
	}
	return ou
}

// ClearOrderSn clears the value of the "order_sn" field.
func (ou *OrderUpdate) ClearOrderSn() *OrderUpdate {
	ou.mutation.ClearOrderSn()
	return ou
}

// SetMemberID sets the "member_id" field.
func (ou *OrderUpdate) SetMemberID(i int64) *OrderUpdate {
	ou.mutation.ResetMemberID()
	ou.mutation.SetMemberID(i)
	return ou
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableMemberID(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetMemberID(*i)
	}
	return ou
}

// AddMemberID adds i to the "member_id" field.
func (ou *OrderUpdate) AddMemberID(i int64) *OrderUpdate {
	ou.mutation.AddMemberID(i)
	return ou
}

// ClearMemberID clears the value of the "member_id" field.
func (ou *OrderUpdate) ClearMemberID() *OrderUpdate {
	ou.mutation.ClearMemberID()
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(s string) *OrderUpdate {
	ou.mutation.SetStatus(s)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStatus(s *string) *OrderUpdate {
	if s != nil {
		ou.SetStatus(*s)
	}
	return ou
}

// ClearStatus clears the value of the "status" field.
func (ou *OrderUpdate) ClearStatus() *OrderUpdate {
	ou.mutation.ClearStatus()
	return ou
}

// SetNature sets the "nature" field.
func (ou *OrderUpdate) SetNature(i int64) *OrderUpdate {
	ou.mutation.ResetNature()
	ou.mutation.SetNature(i)
	return ou
}

// SetNillableNature sets the "nature" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableNature(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetNature(*i)
	}
	return ou
}

// AddNature adds i to the "nature" field.
func (ou *OrderUpdate) AddNature(i int64) *OrderUpdate {
	ou.mutation.AddNature(i)
	return ou
}

// ClearNature clears the value of the "nature" field.
func (ou *OrderUpdate) ClearNature() *OrderUpdate {
	ou.mutation.ClearNature()
	return ou
}

// SetCompletionAt sets the "completion_at" field.
func (ou *OrderUpdate) SetCompletionAt(t time.Time) *OrderUpdate {
	ou.mutation.SetCompletionAt(t)
	return ou
}

// SetNillableCompletionAt sets the "completion_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCompletionAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetCompletionAt(*t)
	}
	return ou
}

// ClearCompletionAt clears the value of the "completion_at" field.
func (ou *OrderUpdate) ClearCompletionAt() *OrderUpdate {
	ou.mutation.ClearCompletionAt()
	return ou
}

// SetCloseAt sets the "close_at" field.
func (ou *OrderUpdate) SetCloseAt(t time.Time) *OrderUpdate {
	ou.mutation.SetCloseAt(t)
	return ou
}

// SetNillableCloseAt sets the "close_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCloseAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetCloseAt(*t)
	}
	return ou
}

// ClearCloseAt clears the value of the "close_at" field.
func (ou *OrderUpdate) ClearCloseAt() *OrderUpdate {
	ou.mutation.ClearCloseAt()
	return ou
}

// SetRefundAt sets the "refund_at" field.
func (ou *OrderUpdate) SetRefundAt(t time.Time) *OrderUpdate {
	ou.mutation.SetRefundAt(t)
	return ou
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableRefundAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetRefundAt(*t)
	}
	return ou
}

// ClearRefundAt clears the value of the "refund_at" field.
func (ou *OrderUpdate) ClearRefundAt() *OrderUpdate {
	ou.mutation.ClearRefundAt()
	return ou
}

// SetVersion sets the "version " field.
func (ou *OrderUpdate) SetVersion(i int64) *OrderUpdate {
	ou.mutation.ResetVersion()
	ou.mutation.SetVersion(i)
	return ou
}

// SetNillableVersion sets the "version " field if the given value is not nil.
func (ou *OrderUpdate) SetNillableVersion(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetVersion(*i)
	}
	return ou
}

// AddVersion adds i to the "version " field.
func (ou *OrderUpdate) AddVersion(i int64) *OrderUpdate {
	ou.mutation.AddVersion(i)
	return ou
}

// ClearVersion clears the value of the "version " field.
func (ou *OrderUpdate) ClearVersion() *OrderUpdate {
	ou.mutation.ClearVersion()
	return ou
}

// AddItemIDs adds the "items" edge to the OrderItem entity by IDs.
func (ou *OrderUpdate) AddItemIDs(ids ...int64) *OrderUpdate {
	ou.mutation.AddItemIDs(ids...)
	return ou
}

// AddItems adds the "items" edges to the OrderItem entity.
func (ou *OrderUpdate) AddItems(o ...*OrderItem) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddItemIDs(ids...)
}

// AddEventIDs adds the "events" edge to the OrderEvents entity by IDs.
func (ou *OrderUpdate) AddEventIDs(ids ...int64) *OrderUpdate {
	ou.mutation.AddEventIDs(ids...)
	return ou
}

// AddEvents adds the "events" edges to the OrderEvents entity.
func (ou *OrderUpdate) AddEvents(o ...*OrderEvents) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddEventIDs(ids...)
}

// AddSnapshotIDs adds the "snapshots" edge to the OrderSnapshots entity by IDs.
func (ou *OrderUpdate) AddSnapshotIDs(ids ...int64) *OrderUpdate {
	ou.mutation.AddSnapshotIDs(ids...)
	return ou
}

// AddSnapshots adds the "snapshots" edges to the OrderSnapshots entity.
func (ou *OrderUpdate) AddSnapshots(o ...*OrderSnapshots) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddSnapshotIDs(ids...)
}

// AddStatusHistoryIDs adds the "status_history" edge to the OrderStatusHistory entity by IDs.
func (ou *OrderUpdate) AddStatusHistoryIDs(ids ...int64) *OrderUpdate {
	ou.mutation.AddStatusHistoryIDs(ids...)
	return ou
}

// AddStatusHistory adds the "status_history" edges to the OrderStatusHistory entity.
func (ou *OrderUpdate) AddStatusHistory(o ...*OrderStatusHistory) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddStatusHistoryIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearItems clears all "items" edges to the OrderItem entity.
func (ou *OrderUpdate) ClearItems() *OrderUpdate {
	ou.mutation.ClearItems()
	return ou
}

// RemoveItemIDs removes the "items" edge to OrderItem entities by IDs.
func (ou *OrderUpdate) RemoveItemIDs(ids ...int64) *OrderUpdate {
	ou.mutation.RemoveItemIDs(ids...)
	return ou
}

// RemoveItems removes "items" edges to OrderItem entities.
func (ou *OrderUpdate) RemoveItems(o ...*OrderItem) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveItemIDs(ids...)
}

// ClearEvents clears all "events" edges to the OrderEvents entity.
func (ou *OrderUpdate) ClearEvents() *OrderUpdate {
	ou.mutation.ClearEvents()
	return ou
}

// RemoveEventIDs removes the "events" edge to OrderEvents entities by IDs.
func (ou *OrderUpdate) RemoveEventIDs(ids ...int64) *OrderUpdate {
	ou.mutation.RemoveEventIDs(ids...)
	return ou
}

// RemoveEvents removes "events" edges to OrderEvents entities.
func (ou *OrderUpdate) RemoveEvents(o ...*OrderEvents) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveEventIDs(ids...)
}

// ClearSnapshots clears all "snapshots" edges to the OrderSnapshots entity.
func (ou *OrderUpdate) ClearSnapshots() *OrderUpdate {
	ou.mutation.ClearSnapshots()
	return ou
}

// RemoveSnapshotIDs removes the "snapshots" edge to OrderSnapshots entities by IDs.
func (ou *OrderUpdate) RemoveSnapshotIDs(ids ...int64) *OrderUpdate {
	ou.mutation.RemoveSnapshotIDs(ids...)
	return ou
}

// RemoveSnapshots removes "snapshots" edges to OrderSnapshots entities.
func (ou *OrderUpdate) RemoveSnapshots(o ...*OrderSnapshots) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveSnapshotIDs(ids...)
}

// ClearStatusHistory clears all "status_history" edges to the OrderStatusHistory entity.
func (ou *OrderUpdate) ClearStatusHistory() *OrderUpdate {
	ou.mutation.ClearStatusHistory()
	return ou
}

// RemoveStatusHistoryIDs removes the "status_history" edge to OrderStatusHistory entities by IDs.
func (ou *OrderUpdate) RemoveStatusHistoryIDs(ids ...int64) *OrderUpdate {
	ou.mutation.RemoveStatusHistoryIDs(ids...)
	return ou
}

// RemoveStatusHistory removes "status_history" edges to OrderStatusHistory entities.
func (ou *OrderUpdate) RemoveStatusHistory(o ...*OrderStatusHistory) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveStatusHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok && !ou.mutation.UpdatedAtCleared() {
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ou.mutation.CreatedAtCleared() {
		_spec.ClearField(order.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if ou.mutation.UpdatedAtCleared() {
		_spec.ClearField(order.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.Delete(); ok {
		_spec.SetField(order.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedDelete(); ok {
		_spec.AddField(order.FieldDelete, field.TypeInt64, value)
	}
	if ou.mutation.DeleteCleared() {
		_spec.ClearField(order.FieldDelete, field.TypeInt64)
	}
	if value, ok := ou.mutation.CreatedID(); ok {
		_spec.SetField(order.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedCreatedID(); ok {
		_spec.AddField(order.FieldCreatedID, field.TypeInt64, value)
	}
	if ou.mutation.CreatedIDCleared() {
		_spec.ClearField(order.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := ou.mutation.OrderSn(); ok {
		_spec.SetField(order.FieldOrderSn, field.TypeString, value)
	}
	if ou.mutation.OrderSnCleared() {
		_spec.ClearField(order.FieldOrderSn, field.TypeString)
	}
	if value, ok := ou.mutation.MemberID(); ok {
		_spec.SetField(order.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedMemberID(); ok {
		_spec.AddField(order.FieldMemberID, field.TypeInt64, value)
	}
	if ou.mutation.MemberIDCleared() {
		_spec.ClearField(order.FieldMemberID, field.TypeInt64)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeString, value)
	}
	if ou.mutation.StatusCleared() {
		_spec.ClearField(order.FieldStatus, field.TypeString)
	}
	if value, ok := ou.mutation.Nature(); ok {
		_spec.SetField(order.FieldNature, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedNature(); ok {
		_spec.AddField(order.FieldNature, field.TypeInt64, value)
	}
	if ou.mutation.NatureCleared() {
		_spec.ClearField(order.FieldNature, field.TypeInt64)
	}
	if value, ok := ou.mutation.CompletionAt(); ok {
		_spec.SetField(order.FieldCompletionAt, field.TypeTime, value)
	}
	if ou.mutation.CompletionAtCleared() {
		_spec.ClearField(order.FieldCompletionAt, field.TypeTime)
	}
	if value, ok := ou.mutation.CloseAt(); ok {
		_spec.SetField(order.FieldCloseAt, field.TypeTime, value)
	}
	if ou.mutation.CloseAtCleared() {
		_spec.ClearField(order.FieldCloseAt, field.TypeTime)
	}
	if value, ok := ou.mutation.RefundAt(); ok {
		_spec.SetField(order.FieldRefundAt, field.TypeTime, value)
	}
	if ou.mutation.RefundAtCleared() {
		_spec.ClearField(order.FieldRefundAt, field.TypeTime)
	}
	if value, ok := ou.mutation.Version(); ok {
		_spec.SetField(order.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedVersion(); ok {
		_spec.AddField(order.FieldVersion, field.TypeInt64, value)
	}
	if ou.mutation.VersionCleared() {
		_spec.ClearField(order.FieldVersion, field.TypeInt64)
	}
	if ou.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedItemsIDs(); len(nodes) > 0 && !ou.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.EventsTable,
			Columns: []string{order.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderevents.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedEventsIDs(); len(nodes) > 0 && !ou.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.EventsTable,
			Columns: []string{order.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderevents.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.EventsTable,
			Columns: []string{order.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderevents.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.SnapshotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SnapshotsTable,
			Columns: []string{order.SnapshotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersnapshots.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedSnapshotsIDs(); len(nodes) > 0 && !ou.mutation.SnapshotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SnapshotsTable,
			Columns: []string{order.SnapshotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersnapshots.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.SnapshotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SnapshotsTable,
			Columns: []string{order.SnapshotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersnapshots.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.StatusHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.StatusHistoryTable,
			Columns: []string{order.StatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedStatusHistoryIDs(); len(nodes) > 0 && !ou.mutation.StatusHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.StatusHistoryTable,
			Columns: []string{order.StatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.StatusHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.StatusHistoryTable,
			Columns: []string{order.StatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ouo *OrderUpdateOne) ClearUpdatedAt() *OrderUpdateOne {
	ouo.mutation.ClearUpdatedAt()
	return ouo
}

// SetDelete sets the "delete" field.
func (ouo *OrderUpdateOne) SetDelete(i int64) *OrderUpdateOne {
	ouo.mutation.ResetDelete()
	ouo.mutation.SetDelete(i)
	return ouo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDelete(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetDelete(*i)
	}
	return ouo
}

// AddDelete adds i to the "delete" field.
func (ouo *OrderUpdateOne) AddDelete(i int64) *OrderUpdateOne {
	ouo.mutation.AddDelete(i)
	return ouo
}

// ClearDelete clears the value of the "delete" field.
func (ouo *OrderUpdateOne) ClearDelete() *OrderUpdateOne {
	ouo.mutation.ClearDelete()
	return ouo
}

// SetCreatedID sets the "created_id" field.
func (ouo *OrderUpdateOne) SetCreatedID(i int64) *OrderUpdateOne {
	ouo.mutation.ResetCreatedID()
	ouo.mutation.SetCreatedID(i)
	return ouo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCreatedID(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetCreatedID(*i)
	}
	return ouo
}

// AddCreatedID adds i to the "created_id" field.
func (ouo *OrderUpdateOne) AddCreatedID(i int64) *OrderUpdateOne {
	ouo.mutation.AddCreatedID(i)
	return ouo
}

// ClearCreatedID clears the value of the "created_id" field.
func (ouo *OrderUpdateOne) ClearCreatedID() *OrderUpdateOne {
	ouo.mutation.ClearCreatedID()
	return ouo
}

// SetOrderSn sets the "order_sn" field.
func (ouo *OrderUpdateOne) SetOrderSn(s string) *OrderUpdateOne {
	ouo.mutation.SetOrderSn(s)
	return ouo
}

// SetNillableOrderSn sets the "order_sn" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderSn(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetOrderSn(*s)
	}
	return ouo
}

// ClearOrderSn clears the value of the "order_sn" field.
func (ouo *OrderUpdateOne) ClearOrderSn() *OrderUpdateOne {
	ouo.mutation.ClearOrderSn()
	return ouo
}

// SetMemberID sets the "member_id" field.
func (ouo *OrderUpdateOne) SetMemberID(i int64) *OrderUpdateOne {
	ouo.mutation.ResetMemberID()
	ouo.mutation.SetMemberID(i)
	return ouo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableMemberID(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetMemberID(*i)
	}
	return ouo
}

// AddMemberID adds i to the "member_id" field.
func (ouo *OrderUpdateOne) AddMemberID(i int64) *OrderUpdateOne {
	ouo.mutation.AddMemberID(i)
	return ouo
}

// ClearMemberID clears the value of the "member_id" field.
func (ouo *OrderUpdateOne) ClearMemberID() *OrderUpdateOne {
	ouo.mutation.ClearMemberID()
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(s string) *OrderUpdateOne {
	ouo.mutation.SetStatus(s)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStatus(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetStatus(*s)
	}
	return ouo
}

// ClearStatus clears the value of the "status" field.
func (ouo *OrderUpdateOne) ClearStatus() *OrderUpdateOne {
	ouo.mutation.ClearStatus()
	return ouo
}

// SetNature sets the "nature" field.
func (ouo *OrderUpdateOne) SetNature(i int64) *OrderUpdateOne {
	ouo.mutation.ResetNature()
	ouo.mutation.SetNature(i)
	return ouo
}

// SetNillableNature sets the "nature" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableNature(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetNature(*i)
	}
	return ouo
}

// AddNature adds i to the "nature" field.
func (ouo *OrderUpdateOne) AddNature(i int64) *OrderUpdateOne {
	ouo.mutation.AddNature(i)
	return ouo
}

// ClearNature clears the value of the "nature" field.
func (ouo *OrderUpdateOne) ClearNature() *OrderUpdateOne {
	ouo.mutation.ClearNature()
	return ouo
}

// SetCompletionAt sets the "completion_at" field.
func (ouo *OrderUpdateOne) SetCompletionAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetCompletionAt(t)
	return ouo
}

// SetNillableCompletionAt sets the "completion_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCompletionAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetCompletionAt(*t)
	}
	return ouo
}

// ClearCompletionAt clears the value of the "completion_at" field.
func (ouo *OrderUpdateOne) ClearCompletionAt() *OrderUpdateOne {
	ouo.mutation.ClearCompletionAt()
	return ouo
}

// SetCloseAt sets the "close_at" field.
func (ouo *OrderUpdateOne) SetCloseAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetCloseAt(t)
	return ouo
}

// SetNillableCloseAt sets the "close_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCloseAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetCloseAt(*t)
	}
	return ouo
}

// ClearCloseAt clears the value of the "close_at" field.
func (ouo *OrderUpdateOne) ClearCloseAt() *OrderUpdateOne {
	ouo.mutation.ClearCloseAt()
	return ouo
}

// SetRefundAt sets the "refund_at" field.
func (ouo *OrderUpdateOne) SetRefundAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetRefundAt(t)
	return ouo
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableRefundAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetRefundAt(*t)
	}
	return ouo
}

// ClearRefundAt clears the value of the "refund_at" field.
func (ouo *OrderUpdateOne) ClearRefundAt() *OrderUpdateOne {
	ouo.mutation.ClearRefundAt()
	return ouo
}

// SetVersion sets the "version " field.
func (ouo *OrderUpdateOne) SetVersion(i int64) *OrderUpdateOne {
	ouo.mutation.ResetVersion()
	ouo.mutation.SetVersion(i)
	return ouo
}

// SetNillableVersion sets the "version " field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableVersion(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetVersion(*i)
	}
	return ouo
}

// AddVersion adds i to the "version " field.
func (ouo *OrderUpdateOne) AddVersion(i int64) *OrderUpdateOne {
	ouo.mutation.AddVersion(i)
	return ouo
}

// ClearVersion clears the value of the "version " field.
func (ouo *OrderUpdateOne) ClearVersion() *OrderUpdateOne {
	ouo.mutation.ClearVersion()
	return ouo
}

// AddItemIDs adds the "items" edge to the OrderItem entity by IDs.
func (ouo *OrderUpdateOne) AddItemIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.AddItemIDs(ids...)
	return ouo
}

// AddItems adds the "items" edges to the OrderItem entity.
func (ouo *OrderUpdateOne) AddItems(o ...*OrderItem) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddItemIDs(ids...)
}

// AddEventIDs adds the "events" edge to the OrderEvents entity by IDs.
func (ouo *OrderUpdateOne) AddEventIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.AddEventIDs(ids...)
	return ouo
}

// AddEvents adds the "events" edges to the OrderEvents entity.
func (ouo *OrderUpdateOne) AddEvents(o ...*OrderEvents) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddEventIDs(ids...)
}

// AddSnapshotIDs adds the "snapshots" edge to the OrderSnapshots entity by IDs.
func (ouo *OrderUpdateOne) AddSnapshotIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.AddSnapshotIDs(ids...)
	return ouo
}

// AddSnapshots adds the "snapshots" edges to the OrderSnapshots entity.
func (ouo *OrderUpdateOne) AddSnapshots(o ...*OrderSnapshots) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddSnapshotIDs(ids...)
}

// AddStatusHistoryIDs adds the "status_history" edge to the OrderStatusHistory entity by IDs.
func (ouo *OrderUpdateOne) AddStatusHistoryIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.AddStatusHistoryIDs(ids...)
	return ouo
}

// AddStatusHistory adds the "status_history" edges to the OrderStatusHistory entity.
func (ouo *OrderUpdateOne) AddStatusHistory(o ...*OrderStatusHistory) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddStatusHistoryIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearItems clears all "items" edges to the OrderItem entity.
func (ouo *OrderUpdateOne) ClearItems() *OrderUpdateOne {
	ouo.mutation.ClearItems()
	return ouo
}

// RemoveItemIDs removes the "items" edge to OrderItem entities by IDs.
func (ouo *OrderUpdateOne) RemoveItemIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.RemoveItemIDs(ids...)
	return ouo
}

// RemoveItems removes "items" edges to OrderItem entities.
func (ouo *OrderUpdateOne) RemoveItems(o ...*OrderItem) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveItemIDs(ids...)
}

// ClearEvents clears all "events" edges to the OrderEvents entity.
func (ouo *OrderUpdateOne) ClearEvents() *OrderUpdateOne {
	ouo.mutation.ClearEvents()
	return ouo
}

// RemoveEventIDs removes the "events" edge to OrderEvents entities by IDs.
func (ouo *OrderUpdateOne) RemoveEventIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.RemoveEventIDs(ids...)
	return ouo
}

// RemoveEvents removes "events" edges to OrderEvents entities.
func (ouo *OrderUpdateOne) RemoveEvents(o ...*OrderEvents) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveEventIDs(ids...)
}

// ClearSnapshots clears all "snapshots" edges to the OrderSnapshots entity.
func (ouo *OrderUpdateOne) ClearSnapshots() *OrderUpdateOne {
	ouo.mutation.ClearSnapshots()
	return ouo
}

// RemoveSnapshotIDs removes the "snapshots" edge to OrderSnapshots entities by IDs.
func (ouo *OrderUpdateOne) RemoveSnapshotIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.RemoveSnapshotIDs(ids...)
	return ouo
}

// RemoveSnapshots removes "snapshots" edges to OrderSnapshots entities.
func (ouo *OrderUpdateOne) RemoveSnapshots(o ...*OrderSnapshots) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveSnapshotIDs(ids...)
}

// ClearStatusHistory clears all "status_history" edges to the OrderStatusHistory entity.
func (ouo *OrderUpdateOne) ClearStatusHistory() *OrderUpdateOne {
	ouo.mutation.ClearStatusHistory()
	return ouo
}

// RemoveStatusHistoryIDs removes the "status_history" edge to OrderStatusHistory entities by IDs.
func (ouo *OrderUpdateOne) RemoveStatusHistoryIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.RemoveStatusHistoryIDs(ids...)
	return ouo
}

// RemoveStatusHistory removes "status_history" edges to OrderStatusHistory entities.
func (ouo *OrderUpdateOne) RemoveStatusHistory(o ...*OrderStatusHistory) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveStatusHistoryIDs(ids...)
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok && !ouo.mutation.UpdatedAtCleared() {
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ouo.mutation.CreatedAtCleared() {
		_spec.ClearField(order.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if ouo.mutation.UpdatedAtCleared() {
		_spec.ClearField(order.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.Delete(); ok {
		_spec.SetField(order.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedDelete(); ok {
		_spec.AddField(order.FieldDelete, field.TypeInt64, value)
	}
	if ouo.mutation.DeleteCleared() {
		_spec.ClearField(order.FieldDelete, field.TypeInt64)
	}
	if value, ok := ouo.mutation.CreatedID(); ok {
		_spec.SetField(order.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedCreatedID(); ok {
		_spec.AddField(order.FieldCreatedID, field.TypeInt64, value)
	}
	if ouo.mutation.CreatedIDCleared() {
		_spec.ClearField(order.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := ouo.mutation.OrderSn(); ok {
		_spec.SetField(order.FieldOrderSn, field.TypeString, value)
	}
	if ouo.mutation.OrderSnCleared() {
		_spec.ClearField(order.FieldOrderSn, field.TypeString)
	}
	if value, ok := ouo.mutation.MemberID(); ok {
		_spec.SetField(order.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedMemberID(); ok {
		_spec.AddField(order.FieldMemberID, field.TypeInt64, value)
	}
	if ouo.mutation.MemberIDCleared() {
		_spec.ClearField(order.FieldMemberID, field.TypeInt64)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeString, value)
	}
	if ouo.mutation.StatusCleared() {
		_spec.ClearField(order.FieldStatus, field.TypeString)
	}
	if value, ok := ouo.mutation.Nature(); ok {
		_spec.SetField(order.FieldNature, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedNature(); ok {
		_spec.AddField(order.FieldNature, field.TypeInt64, value)
	}
	if ouo.mutation.NatureCleared() {
		_spec.ClearField(order.FieldNature, field.TypeInt64)
	}
	if value, ok := ouo.mutation.CompletionAt(); ok {
		_spec.SetField(order.FieldCompletionAt, field.TypeTime, value)
	}
	if ouo.mutation.CompletionAtCleared() {
		_spec.ClearField(order.FieldCompletionAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.CloseAt(); ok {
		_spec.SetField(order.FieldCloseAt, field.TypeTime, value)
	}
	if ouo.mutation.CloseAtCleared() {
		_spec.ClearField(order.FieldCloseAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.RefundAt(); ok {
		_spec.SetField(order.FieldRefundAt, field.TypeTime, value)
	}
	if ouo.mutation.RefundAtCleared() {
		_spec.ClearField(order.FieldRefundAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.Version(); ok {
		_spec.SetField(order.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedVersion(); ok {
		_spec.AddField(order.FieldVersion, field.TypeInt64, value)
	}
	if ouo.mutation.VersionCleared() {
		_spec.ClearField(order.FieldVersion, field.TypeInt64)
	}
	if ouo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !ouo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.EventsTable,
			Columns: []string{order.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderevents.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !ouo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.EventsTable,
			Columns: []string{order.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderevents.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.EventsTable,
			Columns: []string{order.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderevents.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.SnapshotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SnapshotsTable,
			Columns: []string{order.SnapshotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersnapshots.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedSnapshotsIDs(); len(nodes) > 0 && !ouo.mutation.SnapshotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SnapshotsTable,
			Columns: []string{order.SnapshotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersnapshots.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.SnapshotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SnapshotsTable,
			Columns: []string{order.SnapshotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersnapshots.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.StatusHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.StatusHistoryTable,
			Columns: []string{order.StatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedStatusHistoryIDs(); len(nodes) > 0 && !ouo.mutation.StatusHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.StatusHistoryTable,
			Columns: []string{order.StatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.StatusHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.StatusHistoryTable,
			Columns: []string{order.StatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
