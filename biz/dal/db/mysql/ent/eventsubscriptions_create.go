// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"kcers-order/biz/dal/db/mysql/ent/eventsubscriptions"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventSubscriptionsCreate is the builder for creating a EventSubscriptions entity.
type EventSubscriptionsCreate struct {
	config
	mutation *EventSubscriptionsMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (esc *EventSubscriptionsCreate) SetCreatedAt(t time.Time) *EventSubscriptionsCreate {
	esc.mutation.SetCreatedAt(t)
	return esc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (esc *EventSubscriptionsCreate) SetNillableCreatedAt(t *time.Time) *EventSubscriptionsCreate {
	if t != nil {
		esc.SetCreatedAt(*t)
	}
	return esc
}

// SetUpdatedAt sets the "updated_at" field.
func (esc *EventSubscriptionsCreate) SetUpdatedAt(t time.Time) *EventSubscriptionsCreate {
	esc.mutation.SetUpdatedAt(t)
	return esc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (esc *EventSubscriptionsCreate) SetNillableUpdatedAt(t *time.Time) *EventSubscriptionsCreate {
	if t != nil {
		esc.SetUpdatedAt(*t)
	}
	return esc
}

// SetDelete sets the "delete" field.
func (esc *EventSubscriptionsCreate) SetDelete(i int64) *EventSubscriptionsCreate {
	esc.mutation.SetDelete(i)
	return esc
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (esc *EventSubscriptionsCreate) SetNillableDelete(i *int64) *EventSubscriptionsCreate {
	if i != nil {
		esc.SetDelete(*i)
	}
	return esc
}

// SetCreatedID sets the "created_id" field.
func (esc *EventSubscriptionsCreate) SetCreatedID(i int64) *EventSubscriptionsCreate {
	esc.mutation.SetCreatedID(i)
	return esc
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (esc *EventSubscriptionsCreate) SetNillableCreatedID(i *int64) *EventSubscriptionsCreate {
	if i != nil {
		esc.SetCreatedID(*i)
	}
	return esc
}

// SetName sets the "name" field.
func (esc *EventSubscriptionsCreate) SetName(s string) *EventSubscriptionsCreate {
	esc.mutation.SetName(s)
	return esc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (esc *EventSubscriptionsCreate) SetNillableName(s *string) *EventSubscriptionsCreate {
	if s != nil {
		esc.SetName(*s)
	}
	return esc
}

// SetEventType sets the "event_type" field.
func (esc *EventSubscriptionsCreate) SetEventType(s string) *EventSubscriptionsCreate {
	esc.mutation.SetEventType(s)
	return esc
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (esc *EventSubscriptionsCreate) SetNillableEventType(s *string) *EventSubscriptionsCreate {
	if s != nil {
		esc.SetEventType(*s)
	}
	return esc
}

// SetLastProcessedID sets the "last_processed_id" field.
func (esc *EventSubscriptionsCreate) SetLastProcessedID(s string) *EventSubscriptionsCreate {
	esc.mutation.SetLastProcessedID(s)
	return esc
}

// SetNillableLastProcessedID sets the "last_processed_id" field if the given value is not nil.
func (esc *EventSubscriptionsCreate) SetNillableLastProcessedID(s *string) *EventSubscriptionsCreate {
	if s != nil {
		esc.SetLastProcessedID(*s)
	}
	return esc
}

// SetLastProcessedVersion sets the "last_processed_version" field.
func (esc *EventSubscriptionsCreate) SetLastProcessedVersion(s string) *EventSubscriptionsCreate {
	esc.mutation.SetLastProcessedVersion(s)
	return esc
}

// SetNillableLastProcessedVersion sets the "last_processed_version" field if the given value is not nil.
func (esc *EventSubscriptionsCreate) SetNillableLastProcessedVersion(s *string) *EventSubscriptionsCreate {
	if s != nil {
		esc.SetLastProcessedVersion(*s)
	}
	return esc
}

// SetLastProcessedAt sets the "last_processed_at" field.
func (esc *EventSubscriptionsCreate) SetLastProcessedAt(s string) *EventSubscriptionsCreate {
	esc.mutation.SetLastProcessedAt(s)
	return esc
}

// SetNillableLastProcessedAt sets the "last_processed_at" field if the given value is not nil.
func (esc *EventSubscriptionsCreate) SetNillableLastProcessedAt(s *string) *EventSubscriptionsCreate {
	if s != nil {
		esc.SetLastProcessedAt(*s)
	}
	return esc
}

// SetIsActive sets the "is_active" field.
func (esc *EventSubscriptionsCreate) SetIsActive(i int64) *EventSubscriptionsCreate {
	esc.mutation.SetIsActive(i)
	return esc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (esc *EventSubscriptionsCreate) SetNillableIsActive(i *int64) *EventSubscriptionsCreate {
	if i != nil {
		esc.SetIsActive(*i)
	}
	return esc
}

// SetErrorCount sets the "error_count" field.
func (esc *EventSubscriptionsCreate) SetErrorCount(s string) *EventSubscriptionsCreate {
	esc.mutation.SetErrorCount(s)
	return esc
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (esc *EventSubscriptionsCreate) SetNillableErrorCount(s *string) *EventSubscriptionsCreate {
	if s != nil {
		esc.SetErrorCount(*s)
	}
	return esc
}

// SetLastError sets the "last_error" field.
func (esc *EventSubscriptionsCreate) SetLastError(s string) *EventSubscriptionsCreate {
	esc.mutation.SetLastError(s)
	return esc
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (esc *EventSubscriptionsCreate) SetNillableLastError(s *string) *EventSubscriptionsCreate {
	if s != nil {
		esc.SetLastError(*s)
	}
	return esc
}

// SetID sets the "id" field.
func (esc *EventSubscriptionsCreate) SetID(i int64) *EventSubscriptionsCreate {
	esc.mutation.SetID(i)
	return esc
}

// Mutation returns the EventSubscriptionsMutation object of the builder.
func (esc *EventSubscriptionsCreate) Mutation() *EventSubscriptionsMutation {
	return esc.mutation
}

// Save creates the EventSubscriptions in the database.
func (esc *EventSubscriptionsCreate) Save(ctx context.Context) (*EventSubscriptions, error) {
	esc.defaults()
	return withHooks(ctx, esc.sqlSave, esc.mutation, esc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (esc *EventSubscriptionsCreate) SaveX(ctx context.Context) *EventSubscriptions {
	v, err := esc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (esc *EventSubscriptionsCreate) Exec(ctx context.Context) error {
	_, err := esc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esc *EventSubscriptionsCreate) ExecX(ctx context.Context) {
	if err := esc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esc *EventSubscriptionsCreate) defaults() {
	if _, ok := esc.mutation.CreatedAt(); !ok {
		v := eventsubscriptions.DefaultCreatedAt()
		esc.mutation.SetCreatedAt(v)
	}
	if _, ok := esc.mutation.UpdatedAt(); !ok {
		v := eventsubscriptions.DefaultUpdatedAt()
		esc.mutation.SetUpdatedAt(v)
	}
	if _, ok := esc.mutation.Delete(); !ok {
		v := eventsubscriptions.DefaultDelete
		esc.mutation.SetDelete(v)
	}
	if _, ok := esc.mutation.CreatedID(); !ok {
		v := eventsubscriptions.DefaultCreatedID
		esc.mutation.SetCreatedID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esc *EventSubscriptionsCreate) check() error {
	return nil
}

func (esc *EventSubscriptionsCreate) sqlSave(ctx context.Context) (*EventSubscriptions, error) {
	if err := esc.check(); err != nil {
		return nil, err
	}
	_node, _spec := esc.createSpec()
	if err := sqlgraph.CreateNode(ctx, esc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	esc.mutation.id = &_node.ID
	esc.mutation.done = true
	return _node, nil
}

func (esc *EventSubscriptionsCreate) createSpec() (*EventSubscriptions, *sqlgraph.CreateSpec) {
	var (
		_node = &EventSubscriptions{config: esc.config}
		_spec = sqlgraph.NewCreateSpec(eventsubscriptions.Table, sqlgraph.NewFieldSpec(eventsubscriptions.FieldID, field.TypeInt64))
	)
	if id, ok := esc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := esc.mutation.CreatedAt(); ok {
		_spec.SetField(eventsubscriptions.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := esc.mutation.UpdatedAt(); ok {
		_spec.SetField(eventsubscriptions.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := esc.mutation.Delete(); ok {
		_spec.SetField(eventsubscriptions.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := esc.mutation.CreatedID(); ok {
		_spec.SetField(eventsubscriptions.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := esc.mutation.Name(); ok {
		_spec.SetField(eventsubscriptions.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := esc.mutation.EventType(); ok {
		_spec.SetField(eventsubscriptions.FieldEventType, field.TypeString, value)
		_node.EventType = value
	}
	if value, ok := esc.mutation.LastProcessedID(); ok {
		_spec.SetField(eventsubscriptions.FieldLastProcessedID, field.TypeString, value)
		_node.LastProcessedID = value
	}
	if value, ok := esc.mutation.LastProcessedVersion(); ok {
		_spec.SetField(eventsubscriptions.FieldLastProcessedVersion, field.TypeString, value)
		_node.LastProcessedVersion = value
	}
	if value, ok := esc.mutation.LastProcessedAt(); ok {
		_spec.SetField(eventsubscriptions.FieldLastProcessedAt, field.TypeString, value)
		_node.LastProcessedAt = value
	}
	if value, ok := esc.mutation.IsActive(); ok {
		_spec.SetField(eventsubscriptions.FieldIsActive, field.TypeInt64, value)
		_node.IsActive = value
	}
	if value, ok := esc.mutation.ErrorCount(); ok {
		_spec.SetField(eventsubscriptions.FieldErrorCount, field.TypeString, value)
		_node.ErrorCount = value
	}
	if value, ok := esc.mutation.LastError(); ok {
		_spec.SetField(eventsubscriptions.FieldLastError, field.TypeString, value)
		_node.LastError = value
	}
	return _node, _spec
}

// EventSubscriptionsCreateBulk is the builder for creating many EventSubscriptions entities in bulk.
type EventSubscriptionsCreateBulk struct {
	config
	err      error
	builders []*EventSubscriptionsCreate
}

// Save creates the EventSubscriptions entities in the database.
func (escb *EventSubscriptionsCreateBulk) Save(ctx context.Context) ([]*EventSubscriptions, error) {
	if escb.err != nil {
		return nil, escb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(escb.builders))
	nodes := make([]*EventSubscriptions, len(escb.builders))
	mutators := make([]Mutator, len(escb.builders))
	for i := range escb.builders {
		func(i int, root context.Context) {
			builder := escb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventSubscriptionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, escb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, escb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, escb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (escb *EventSubscriptionsCreateBulk) SaveX(ctx context.Context) []*EventSubscriptions {
	v, err := escb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (escb *EventSubscriptionsCreateBulk) Exec(ctx context.Context) error {
	_, err := escb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (escb *EventSubscriptionsCreateBulk) ExecX(ctx context.Context) {
	if err := escb.Exec(ctx); err != nil {
		panic(err)
	}
}
