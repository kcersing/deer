// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers-order/biz/dal/db/mysql/ent/eventsubscriptions"
	"kcers-order/biz/dal/db/mysql/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventSubscriptionsUpdate is the builder for updating EventSubscriptions entities.
type EventSubscriptionsUpdate struct {
	config
	hooks    []Hook
	mutation *EventSubscriptionsMutation
}

// Where appends a list predicates to the EventSubscriptionsUpdate builder.
func (esu *EventSubscriptionsUpdate) Where(ps ...predicate.EventSubscriptions) *EventSubscriptionsUpdate {
	esu.mutation.Where(ps...)
	return esu
}

// SetUpdatedAt sets the "updated_at" field.
func (esu *EventSubscriptionsUpdate) SetUpdatedAt(t time.Time) *EventSubscriptionsUpdate {
	esu.mutation.SetUpdatedAt(t)
	return esu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (esu *EventSubscriptionsUpdate) ClearUpdatedAt() *EventSubscriptionsUpdate {
	esu.mutation.ClearUpdatedAt()
	return esu
}

// SetDelete sets the "delete" field.
func (esu *EventSubscriptionsUpdate) SetDelete(i int64) *EventSubscriptionsUpdate {
	esu.mutation.ResetDelete()
	esu.mutation.SetDelete(i)
	return esu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (esu *EventSubscriptionsUpdate) SetNillableDelete(i *int64) *EventSubscriptionsUpdate {
	if i != nil {
		esu.SetDelete(*i)
	}
	return esu
}

// AddDelete adds i to the "delete" field.
func (esu *EventSubscriptionsUpdate) AddDelete(i int64) *EventSubscriptionsUpdate {
	esu.mutation.AddDelete(i)
	return esu
}

// ClearDelete clears the value of the "delete" field.
func (esu *EventSubscriptionsUpdate) ClearDelete() *EventSubscriptionsUpdate {
	esu.mutation.ClearDelete()
	return esu
}

// SetCreatedID sets the "created_id" field.
func (esu *EventSubscriptionsUpdate) SetCreatedID(i int64) *EventSubscriptionsUpdate {
	esu.mutation.ResetCreatedID()
	esu.mutation.SetCreatedID(i)
	return esu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (esu *EventSubscriptionsUpdate) SetNillableCreatedID(i *int64) *EventSubscriptionsUpdate {
	if i != nil {
		esu.SetCreatedID(*i)
	}
	return esu
}

// AddCreatedID adds i to the "created_id" field.
func (esu *EventSubscriptionsUpdate) AddCreatedID(i int64) *EventSubscriptionsUpdate {
	esu.mutation.AddCreatedID(i)
	return esu
}

// ClearCreatedID clears the value of the "created_id" field.
func (esu *EventSubscriptionsUpdate) ClearCreatedID() *EventSubscriptionsUpdate {
	esu.mutation.ClearCreatedID()
	return esu
}

// SetName sets the "name" field.
func (esu *EventSubscriptionsUpdate) SetName(s string) *EventSubscriptionsUpdate {
	esu.mutation.SetName(s)
	return esu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (esu *EventSubscriptionsUpdate) SetNillableName(s *string) *EventSubscriptionsUpdate {
	if s != nil {
		esu.SetName(*s)
	}
	return esu
}

// ClearName clears the value of the "name" field.
func (esu *EventSubscriptionsUpdate) ClearName() *EventSubscriptionsUpdate {
	esu.mutation.ClearName()
	return esu
}

// SetEventType sets the "event_type" field.
func (esu *EventSubscriptionsUpdate) SetEventType(s string) *EventSubscriptionsUpdate {
	esu.mutation.SetEventType(s)
	return esu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (esu *EventSubscriptionsUpdate) SetNillableEventType(s *string) *EventSubscriptionsUpdate {
	if s != nil {
		esu.SetEventType(*s)
	}
	return esu
}

// ClearEventType clears the value of the "event_type" field.
func (esu *EventSubscriptionsUpdate) ClearEventType() *EventSubscriptionsUpdate {
	esu.mutation.ClearEventType()
	return esu
}

// SetLastProcessedID sets the "last_processed_id" field.
func (esu *EventSubscriptionsUpdate) SetLastProcessedID(s string) *EventSubscriptionsUpdate {
	esu.mutation.SetLastProcessedID(s)
	return esu
}

// SetNillableLastProcessedID sets the "last_processed_id" field if the given value is not nil.
func (esu *EventSubscriptionsUpdate) SetNillableLastProcessedID(s *string) *EventSubscriptionsUpdate {
	if s != nil {
		esu.SetLastProcessedID(*s)
	}
	return esu
}

// ClearLastProcessedID clears the value of the "last_processed_id" field.
func (esu *EventSubscriptionsUpdate) ClearLastProcessedID() *EventSubscriptionsUpdate {
	esu.mutation.ClearLastProcessedID()
	return esu
}

// SetLastProcessedVersion sets the "last_processed_version" field.
func (esu *EventSubscriptionsUpdate) SetLastProcessedVersion(i int64) *EventSubscriptionsUpdate {
	esu.mutation.ResetLastProcessedVersion()
	esu.mutation.SetLastProcessedVersion(i)
	return esu
}

// SetNillableLastProcessedVersion sets the "last_processed_version" field if the given value is not nil.
func (esu *EventSubscriptionsUpdate) SetNillableLastProcessedVersion(i *int64) *EventSubscriptionsUpdate {
	if i != nil {
		esu.SetLastProcessedVersion(*i)
	}
	return esu
}

// AddLastProcessedVersion adds i to the "last_processed_version" field.
func (esu *EventSubscriptionsUpdate) AddLastProcessedVersion(i int64) *EventSubscriptionsUpdate {
	esu.mutation.AddLastProcessedVersion(i)
	return esu
}

// ClearLastProcessedVersion clears the value of the "last_processed_version" field.
func (esu *EventSubscriptionsUpdate) ClearLastProcessedVersion() *EventSubscriptionsUpdate {
	esu.mutation.ClearLastProcessedVersion()
	return esu
}

// SetLastProcessedAt sets the "last_processed_at" field.
func (esu *EventSubscriptionsUpdate) SetLastProcessedAt(t time.Time) *EventSubscriptionsUpdate {
	esu.mutation.SetLastProcessedAt(t)
	return esu
}

// SetNillableLastProcessedAt sets the "last_processed_at" field if the given value is not nil.
func (esu *EventSubscriptionsUpdate) SetNillableLastProcessedAt(t *time.Time) *EventSubscriptionsUpdate {
	if t != nil {
		esu.SetLastProcessedAt(*t)
	}
	return esu
}

// ClearLastProcessedAt clears the value of the "last_processed_at" field.
func (esu *EventSubscriptionsUpdate) ClearLastProcessedAt() *EventSubscriptionsUpdate {
	esu.mutation.ClearLastProcessedAt()
	return esu
}

// SetIsActive sets the "is_active" field.
func (esu *EventSubscriptionsUpdate) SetIsActive(i int64) *EventSubscriptionsUpdate {
	esu.mutation.ResetIsActive()
	esu.mutation.SetIsActive(i)
	return esu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (esu *EventSubscriptionsUpdate) SetNillableIsActive(i *int64) *EventSubscriptionsUpdate {
	if i != nil {
		esu.SetIsActive(*i)
	}
	return esu
}

// AddIsActive adds i to the "is_active" field.
func (esu *EventSubscriptionsUpdate) AddIsActive(i int64) *EventSubscriptionsUpdate {
	esu.mutation.AddIsActive(i)
	return esu
}

// ClearIsActive clears the value of the "is_active" field.
func (esu *EventSubscriptionsUpdate) ClearIsActive() *EventSubscriptionsUpdate {
	esu.mutation.ClearIsActive()
	return esu
}

// SetErrorCount sets the "error_count" field.
func (esu *EventSubscriptionsUpdate) SetErrorCount(i int64) *EventSubscriptionsUpdate {
	esu.mutation.ResetErrorCount()
	esu.mutation.SetErrorCount(i)
	return esu
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (esu *EventSubscriptionsUpdate) SetNillableErrorCount(i *int64) *EventSubscriptionsUpdate {
	if i != nil {
		esu.SetErrorCount(*i)
	}
	return esu
}

// AddErrorCount adds i to the "error_count" field.
func (esu *EventSubscriptionsUpdate) AddErrorCount(i int64) *EventSubscriptionsUpdate {
	esu.mutation.AddErrorCount(i)
	return esu
}

// ClearErrorCount clears the value of the "error_count" field.
func (esu *EventSubscriptionsUpdate) ClearErrorCount() *EventSubscriptionsUpdate {
	esu.mutation.ClearErrorCount()
	return esu
}

// SetLastError sets the "last_error" field.
func (esu *EventSubscriptionsUpdate) SetLastError(s string) *EventSubscriptionsUpdate {
	esu.mutation.SetLastError(s)
	return esu
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (esu *EventSubscriptionsUpdate) SetNillableLastError(s *string) *EventSubscriptionsUpdate {
	if s != nil {
		esu.SetLastError(*s)
	}
	return esu
}

// ClearLastError clears the value of the "last_error" field.
func (esu *EventSubscriptionsUpdate) ClearLastError() *EventSubscriptionsUpdate {
	esu.mutation.ClearLastError()
	return esu
}

// Mutation returns the EventSubscriptionsMutation object of the builder.
func (esu *EventSubscriptionsUpdate) Mutation() *EventSubscriptionsMutation {
	return esu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (esu *EventSubscriptionsUpdate) Save(ctx context.Context) (int, error) {
	esu.defaults()
	return withHooks(ctx, esu.sqlSave, esu.mutation, esu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (esu *EventSubscriptionsUpdate) SaveX(ctx context.Context) int {
	affected, err := esu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (esu *EventSubscriptionsUpdate) Exec(ctx context.Context) error {
	_, err := esu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esu *EventSubscriptionsUpdate) ExecX(ctx context.Context) {
	if err := esu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esu *EventSubscriptionsUpdate) defaults() {
	if _, ok := esu.mutation.UpdatedAt(); !ok && !esu.mutation.UpdatedAtCleared() {
		v := eventsubscriptions.UpdateDefaultUpdatedAt()
		esu.mutation.SetUpdatedAt(v)
	}
}

func (esu *EventSubscriptionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(eventsubscriptions.Table, eventsubscriptions.Columns, sqlgraph.NewFieldSpec(eventsubscriptions.FieldID, field.TypeInt64))
	if ps := esu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if esu.mutation.CreatedAtCleared() {
		_spec.ClearField(eventsubscriptions.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := esu.mutation.UpdatedAt(); ok {
		_spec.SetField(eventsubscriptions.FieldUpdatedAt, field.TypeTime, value)
	}
	if esu.mutation.UpdatedAtCleared() {
		_spec.ClearField(eventsubscriptions.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := esu.mutation.Delete(); ok {
		_spec.SetField(eventsubscriptions.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := esu.mutation.AddedDelete(); ok {
		_spec.AddField(eventsubscriptions.FieldDelete, field.TypeInt64, value)
	}
	if esu.mutation.DeleteCleared() {
		_spec.ClearField(eventsubscriptions.FieldDelete, field.TypeInt64)
	}
	if value, ok := esu.mutation.CreatedID(); ok {
		_spec.SetField(eventsubscriptions.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := esu.mutation.AddedCreatedID(); ok {
		_spec.AddField(eventsubscriptions.FieldCreatedID, field.TypeInt64, value)
	}
	if esu.mutation.CreatedIDCleared() {
		_spec.ClearField(eventsubscriptions.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := esu.mutation.Name(); ok {
		_spec.SetField(eventsubscriptions.FieldName, field.TypeString, value)
	}
	if esu.mutation.NameCleared() {
		_spec.ClearField(eventsubscriptions.FieldName, field.TypeString)
	}
	if value, ok := esu.mutation.EventType(); ok {
		_spec.SetField(eventsubscriptions.FieldEventType, field.TypeString, value)
	}
	if esu.mutation.EventTypeCleared() {
		_spec.ClearField(eventsubscriptions.FieldEventType, field.TypeString)
	}
	if value, ok := esu.mutation.LastProcessedID(); ok {
		_spec.SetField(eventsubscriptions.FieldLastProcessedID, field.TypeString, value)
	}
	if esu.mutation.LastProcessedIDCleared() {
		_spec.ClearField(eventsubscriptions.FieldLastProcessedID, field.TypeString)
	}
	if value, ok := esu.mutation.LastProcessedVersion(); ok {
		_spec.SetField(eventsubscriptions.FieldLastProcessedVersion, field.TypeInt64, value)
	}
	if value, ok := esu.mutation.AddedLastProcessedVersion(); ok {
		_spec.AddField(eventsubscriptions.FieldLastProcessedVersion, field.TypeInt64, value)
	}
	if esu.mutation.LastProcessedVersionCleared() {
		_spec.ClearField(eventsubscriptions.FieldLastProcessedVersion, field.TypeInt64)
	}
	if value, ok := esu.mutation.LastProcessedAt(); ok {
		_spec.SetField(eventsubscriptions.FieldLastProcessedAt, field.TypeTime, value)
	}
	if esu.mutation.LastProcessedAtCleared() {
		_spec.ClearField(eventsubscriptions.FieldLastProcessedAt, field.TypeTime)
	}
	if value, ok := esu.mutation.IsActive(); ok {
		_spec.SetField(eventsubscriptions.FieldIsActive, field.TypeInt64, value)
	}
	if value, ok := esu.mutation.AddedIsActive(); ok {
		_spec.AddField(eventsubscriptions.FieldIsActive, field.TypeInt64, value)
	}
	if esu.mutation.IsActiveCleared() {
		_spec.ClearField(eventsubscriptions.FieldIsActive, field.TypeInt64)
	}
	if value, ok := esu.mutation.ErrorCount(); ok {
		_spec.SetField(eventsubscriptions.FieldErrorCount, field.TypeInt64, value)
	}
	if value, ok := esu.mutation.AddedErrorCount(); ok {
		_spec.AddField(eventsubscriptions.FieldErrorCount, field.TypeInt64, value)
	}
	if esu.mutation.ErrorCountCleared() {
		_spec.ClearField(eventsubscriptions.FieldErrorCount, field.TypeInt64)
	}
	if value, ok := esu.mutation.LastError(); ok {
		_spec.SetField(eventsubscriptions.FieldLastError, field.TypeString, value)
	}
	if esu.mutation.LastErrorCleared() {
		_spec.ClearField(eventsubscriptions.FieldLastError, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, esu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventsubscriptions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	esu.mutation.done = true
	return n, nil
}

// EventSubscriptionsUpdateOne is the builder for updating a single EventSubscriptions entity.
type EventSubscriptionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventSubscriptionsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (esuo *EventSubscriptionsUpdateOne) SetUpdatedAt(t time.Time) *EventSubscriptionsUpdateOne {
	esuo.mutation.SetUpdatedAt(t)
	return esuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (esuo *EventSubscriptionsUpdateOne) ClearUpdatedAt() *EventSubscriptionsUpdateOne {
	esuo.mutation.ClearUpdatedAt()
	return esuo
}

// SetDelete sets the "delete" field.
func (esuo *EventSubscriptionsUpdateOne) SetDelete(i int64) *EventSubscriptionsUpdateOne {
	esuo.mutation.ResetDelete()
	esuo.mutation.SetDelete(i)
	return esuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (esuo *EventSubscriptionsUpdateOne) SetNillableDelete(i *int64) *EventSubscriptionsUpdateOne {
	if i != nil {
		esuo.SetDelete(*i)
	}
	return esuo
}

// AddDelete adds i to the "delete" field.
func (esuo *EventSubscriptionsUpdateOne) AddDelete(i int64) *EventSubscriptionsUpdateOne {
	esuo.mutation.AddDelete(i)
	return esuo
}

// ClearDelete clears the value of the "delete" field.
func (esuo *EventSubscriptionsUpdateOne) ClearDelete() *EventSubscriptionsUpdateOne {
	esuo.mutation.ClearDelete()
	return esuo
}

// SetCreatedID sets the "created_id" field.
func (esuo *EventSubscriptionsUpdateOne) SetCreatedID(i int64) *EventSubscriptionsUpdateOne {
	esuo.mutation.ResetCreatedID()
	esuo.mutation.SetCreatedID(i)
	return esuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (esuo *EventSubscriptionsUpdateOne) SetNillableCreatedID(i *int64) *EventSubscriptionsUpdateOne {
	if i != nil {
		esuo.SetCreatedID(*i)
	}
	return esuo
}

// AddCreatedID adds i to the "created_id" field.
func (esuo *EventSubscriptionsUpdateOne) AddCreatedID(i int64) *EventSubscriptionsUpdateOne {
	esuo.mutation.AddCreatedID(i)
	return esuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (esuo *EventSubscriptionsUpdateOne) ClearCreatedID() *EventSubscriptionsUpdateOne {
	esuo.mutation.ClearCreatedID()
	return esuo
}

// SetName sets the "name" field.
func (esuo *EventSubscriptionsUpdateOne) SetName(s string) *EventSubscriptionsUpdateOne {
	esuo.mutation.SetName(s)
	return esuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (esuo *EventSubscriptionsUpdateOne) SetNillableName(s *string) *EventSubscriptionsUpdateOne {
	if s != nil {
		esuo.SetName(*s)
	}
	return esuo
}

// ClearName clears the value of the "name" field.
func (esuo *EventSubscriptionsUpdateOne) ClearName() *EventSubscriptionsUpdateOne {
	esuo.mutation.ClearName()
	return esuo
}

// SetEventType sets the "event_type" field.
func (esuo *EventSubscriptionsUpdateOne) SetEventType(s string) *EventSubscriptionsUpdateOne {
	esuo.mutation.SetEventType(s)
	return esuo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (esuo *EventSubscriptionsUpdateOne) SetNillableEventType(s *string) *EventSubscriptionsUpdateOne {
	if s != nil {
		esuo.SetEventType(*s)
	}
	return esuo
}

// ClearEventType clears the value of the "event_type" field.
func (esuo *EventSubscriptionsUpdateOne) ClearEventType() *EventSubscriptionsUpdateOne {
	esuo.mutation.ClearEventType()
	return esuo
}

// SetLastProcessedID sets the "last_processed_id" field.
func (esuo *EventSubscriptionsUpdateOne) SetLastProcessedID(s string) *EventSubscriptionsUpdateOne {
	esuo.mutation.SetLastProcessedID(s)
	return esuo
}

// SetNillableLastProcessedID sets the "last_processed_id" field if the given value is not nil.
func (esuo *EventSubscriptionsUpdateOne) SetNillableLastProcessedID(s *string) *EventSubscriptionsUpdateOne {
	if s != nil {
		esuo.SetLastProcessedID(*s)
	}
	return esuo
}

// ClearLastProcessedID clears the value of the "last_processed_id" field.
func (esuo *EventSubscriptionsUpdateOne) ClearLastProcessedID() *EventSubscriptionsUpdateOne {
	esuo.mutation.ClearLastProcessedID()
	return esuo
}

// SetLastProcessedVersion sets the "last_processed_version" field.
func (esuo *EventSubscriptionsUpdateOne) SetLastProcessedVersion(i int64) *EventSubscriptionsUpdateOne {
	esuo.mutation.ResetLastProcessedVersion()
	esuo.mutation.SetLastProcessedVersion(i)
	return esuo
}

// SetNillableLastProcessedVersion sets the "last_processed_version" field if the given value is not nil.
func (esuo *EventSubscriptionsUpdateOne) SetNillableLastProcessedVersion(i *int64) *EventSubscriptionsUpdateOne {
	if i != nil {
		esuo.SetLastProcessedVersion(*i)
	}
	return esuo
}

// AddLastProcessedVersion adds i to the "last_processed_version" field.
func (esuo *EventSubscriptionsUpdateOne) AddLastProcessedVersion(i int64) *EventSubscriptionsUpdateOne {
	esuo.mutation.AddLastProcessedVersion(i)
	return esuo
}

// ClearLastProcessedVersion clears the value of the "last_processed_version" field.
func (esuo *EventSubscriptionsUpdateOne) ClearLastProcessedVersion() *EventSubscriptionsUpdateOne {
	esuo.mutation.ClearLastProcessedVersion()
	return esuo
}

// SetLastProcessedAt sets the "last_processed_at" field.
func (esuo *EventSubscriptionsUpdateOne) SetLastProcessedAt(t time.Time) *EventSubscriptionsUpdateOne {
	esuo.mutation.SetLastProcessedAt(t)
	return esuo
}

// SetNillableLastProcessedAt sets the "last_processed_at" field if the given value is not nil.
func (esuo *EventSubscriptionsUpdateOne) SetNillableLastProcessedAt(t *time.Time) *EventSubscriptionsUpdateOne {
	if t != nil {
		esuo.SetLastProcessedAt(*t)
	}
	return esuo
}

// ClearLastProcessedAt clears the value of the "last_processed_at" field.
func (esuo *EventSubscriptionsUpdateOne) ClearLastProcessedAt() *EventSubscriptionsUpdateOne {
	esuo.mutation.ClearLastProcessedAt()
	return esuo
}

// SetIsActive sets the "is_active" field.
func (esuo *EventSubscriptionsUpdateOne) SetIsActive(i int64) *EventSubscriptionsUpdateOne {
	esuo.mutation.ResetIsActive()
	esuo.mutation.SetIsActive(i)
	return esuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (esuo *EventSubscriptionsUpdateOne) SetNillableIsActive(i *int64) *EventSubscriptionsUpdateOne {
	if i != nil {
		esuo.SetIsActive(*i)
	}
	return esuo
}

// AddIsActive adds i to the "is_active" field.
func (esuo *EventSubscriptionsUpdateOne) AddIsActive(i int64) *EventSubscriptionsUpdateOne {
	esuo.mutation.AddIsActive(i)
	return esuo
}

// ClearIsActive clears the value of the "is_active" field.
func (esuo *EventSubscriptionsUpdateOne) ClearIsActive() *EventSubscriptionsUpdateOne {
	esuo.mutation.ClearIsActive()
	return esuo
}

// SetErrorCount sets the "error_count" field.
func (esuo *EventSubscriptionsUpdateOne) SetErrorCount(i int64) *EventSubscriptionsUpdateOne {
	esuo.mutation.ResetErrorCount()
	esuo.mutation.SetErrorCount(i)
	return esuo
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (esuo *EventSubscriptionsUpdateOne) SetNillableErrorCount(i *int64) *EventSubscriptionsUpdateOne {
	if i != nil {
		esuo.SetErrorCount(*i)
	}
	return esuo
}

// AddErrorCount adds i to the "error_count" field.
func (esuo *EventSubscriptionsUpdateOne) AddErrorCount(i int64) *EventSubscriptionsUpdateOne {
	esuo.mutation.AddErrorCount(i)
	return esuo
}

// ClearErrorCount clears the value of the "error_count" field.
func (esuo *EventSubscriptionsUpdateOne) ClearErrorCount() *EventSubscriptionsUpdateOne {
	esuo.mutation.ClearErrorCount()
	return esuo
}

// SetLastError sets the "last_error" field.
func (esuo *EventSubscriptionsUpdateOne) SetLastError(s string) *EventSubscriptionsUpdateOne {
	esuo.mutation.SetLastError(s)
	return esuo
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (esuo *EventSubscriptionsUpdateOne) SetNillableLastError(s *string) *EventSubscriptionsUpdateOne {
	if s != nil {
		esuo.SetLastError(*s)
	}
	return esuo
}

// ClearLastError clears the value of the "last_error" field.
func (esuo *EventSubscriptionsUpdateOne) ClearLastError() *EventSubscriptionsUpdateOne {
	esuo.mutation.ClearLastError()
	return esuo
}

// Mutation returns the EventSubscriptionsMutation object of the builder.
func (esuo *EventSubscriptionsUpdateOne) Mutation() *EventSubscriptionsMutation {
	return esuo.mutation
}

// Where appends a list predicates to the EventSubscriptionsUpdate builder.
func (esuo *EventSubscriptionsUpdateOne) Where(ps ...predicate.EventSubscriptions) *EventSubscriptionsUpdateOne {
	esuo.mutation.Where(ps...)
	return esuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (esuo *EventSubscriptionsUpdateOne) Select(field string, fields ...string) *EventSubscriptionsUpdateOne {
	esuo.fields = append([]string{field}, fields...)
	return esuo
}

// Save executes the query and returns the updated EventSubscriptions entity.
func (esuo *EventSubscriptionsUpdateOne) Save(ctx context.Context) (*EventSubscriptions, error) {
	esuo.defaults()
	return withHooks(ctx, esuo.sqlSave, esuo.mutation, esuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (esuo *EventSubscriptionsUpdateOne) SaveX(ctx context.Context) *EventSubscriptions {
	node, err := esuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (esuo *EventSubscriptionsUpdateOne) Exec(ctx context.Context) error {
	_, err := esuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esuo *EventSubscriptionsUpdateOne) ExecX(ctx context.Context) {
	if err := esuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esuo *EventSubscriptionsUpdateOne) defaults() {
	if _, ok := esuo.mutation.UpdatedAt(); !ok && !esuo.mutation.UpdatedAtCleared() {
		v := eventsubscriptions.UpdateDefaultUpdatedAt()
		esuo.mutation.SetUpdatedAt(v)
	}
}

func (esuo *EventSubscriptionsUpdateOne) sqlSave(ctx context.Context) (_node *EventSubscriptions, err error) {
	_spec := sqlgraph.NewUpdateSpec(eventsubscriptions.Table, eventsubscriptions.Columns, sqlgraph.NewFieldSpec(eventsubscriptions.FieldID, field.TypeInt64))
	id, ok := esuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EventSubscriptions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := esuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventsubscriptions.FieldID)
		for _, f := range fields {
			if !eventsubscriptions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eventsubscriptions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := esuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if esuo.mutation.CreatedAtCleared() {
		_spec.ClearField(eventsubscriptions.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := esuo.mutation.UpdatedAt(); ok {
		_spec.SetField(eventsubscriptions.FieldUpdatedAt, field.TypeTime, value)
	}
	if esuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(eventsubscriptions.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := esuo.mutation.Delete(); ok {
		_spec.SetField(eventsubscriptions.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := esuo.mutation.AddedDelete(); ok {
		_spec.AddField(eventsubscriptions.FieldDelete, field.TypeInt64, value)
	}
	if esuo.mutation.DeleteCleared() {
		_spec.ClearField(eventsubscriptions.FieldDelete, field.TypeInt64)
	}
	if value, ok := esuo.mutation.CreatedID(); ok {
		_spec.SetField(eventsubscriptions.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := esuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(eventsubscriptions.FieldCreatedID, field.TypeInt64, value)
	}
	if esuo.mutation.CreatedIDCleared() {
		_spec.ClearField(eventsubscriptions.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := esuo.mutation.Name(); ok {
		_spec.SetField(eventsubscriptions.FieldName, field.TypeString, value)
	}
	if esuo.mutation.NameCleared() {
		_spec.ClearField(eventsubscriptions.FieldName, field.TypeString)
	}
	if value, ok := esuo.mutation.EventType(); ok {
		_spec.SetField(eventsubscriptions.FieldEventType, field.TypeString, value)
	}
	if esuo.mutation.EventTypeCleared() {
		_spec.ClearField(eventsubscriptions.FieldEventType, field.TypeString)
	}
	if value, ok := esuo.mutation.LastProcessedID(); ok {
		_spec.SetField(eventsubscriptions.FieldLastProcessedID, field.TypeString, value)
	}
	if esuo.mutation.LastProcessedIDCleared() {
		_spec.ClearField(eventsubscriptions.FieldLastProcessedID, field.TypeString)
	}
	if value, ok := esuo.mutation.LastProcessedVersion(); ok {
		_spec.SetField(eventsubscriptions.FieldLastProcessedVersion, field.TypeInt64, value)
	}
	if value, ok := esuo.mutation.AddedLastProcessedVersion(); ok {
		_spec.AddField(eventsubscriptions.FieldLastProcessedVersion, field.TypeInt64, value)
	}
	if esuo.mutation.LastProcessedVersionCleared() {
		_spec.ClearField(eventsubscriptions.FieldLastProcessedVersion, field.TypeInt64)
	}
	if value, ok := esuo.mutation.LastProcessedAt(); ok {
		_spec.SetField(eventsubscriptions.FieldLastProcessedAt, field.TypeTime, value)
	}
	if esuo.mutation.LastProcessedAtCleared() {
		_spec.ClearField(eventsubscriptions.FieldLastProcessedAt, field.TypeTime)
	}
	if value, ok := esuo.mutation.IsActive(); ok {
		_spec.SetField(eventsubscriptions.FieldIsActive, field.TypeInt64, value)
	}
	if value, ok := esuo.mutation.AddedIsActive(); ok {
		_spec.AddField(eventsubscriptions.FieldIsActive, field.TypeInt64, value)
	}
	if esuo.mutation.IsActiveCleared() {
		_spec.ClearField(eventsubscriptions.FieldIsActive, field.TypeInt64)
	}
	if value, ok := esuo.mutation.ErrorCount(); ok {
		_spec.SetField(eventsubscriptions.FieldErrorCount, field.TypeInt64, value)
	}
	if value, ok := esuo.mutation.AddedErrorCount(); ok {
		_spec.AddField(eventsubscriptions.FieldErrorCount, field.TypeInt64, value)
	}
	if esuo.mutation.ErrorCountCleared() {
		_spec.ClearField(eventsubscriptions.FieldErrorCount, field.TypeInt64)
	}
	if value, ok := esuo.mutation.LastError(); ok {
		_spec.SetField(eventsubscriptions.FieldLastError, field.TypeString, value)
	}
	if esuo.mutation.LastErrorCleared() {
		_spec.ClearField(eventsubscriptions.FieldLastError, field.TypeString)
	}
	_node = &EventSubscriptions{config: esuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, esuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventsubscriptions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	esuo.mutation.done = true
	return _node, nil
}
