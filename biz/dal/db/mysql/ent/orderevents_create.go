// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"kcers-order/biz/dal/db/mysql/ent/order"
	"kcers-order/biz/dal/db/mysql/ent/orderevents"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderEventsCreate is the builder for creating a OrderEvents entity.
type OrderEventsCreate struct {
	config
	mutation *OrderEventsMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (oec *OrderEventsCreate) SetCreatedAt(t time.Time) *OrderEventsCreate {
	oec.mutation.SetCreatedAt(t)
	return oec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oec *OrderEventsCreate) SetNillableCreatedAt(t *time.Time) *OrderEventsCreate {
	if t != nil {
		oec.SetCreatedAt(*t)
	}
	return oec
}

// SetUpdatedAt sets the "updated_at" field.
func (oec *OrderEventsCreate) SetUpdatedAt(t time.Time) *OrderEventsCreate {
	oec.mutation.SetUpdatedAt(t)
	return oec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oec *OrderEventsCreate) SetNillableUpdatedAt(t *time.Time) *OrderEventsCreate {
	if t != nil {
		oec.SetUpdatedAt(*t)
	}
	return oec
}

// SetDelete sets the "delete" field.
func (oec *OrderEventsCreate) SetDelete(i int64) *OrderEventsCreate {
	oec.mutation.SetDelete(i)
	return oec
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (oec *OrderEventsCreate) SetNillableDelete(i *int64) *OrderEventsCreate {
	if i != nil {
		oec.SetDelete(*i)
	}
	return oec
}

// SetCreatedID sets the "created_id" field.
func (oec *OrderEventsCreate) SetCreatedID(i int64) *OrderEventsCreate {
	oec.mutation.SetCreatedID(i)
	return oec
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (oec *OrderEventsCreate) SetNillableCreatedID(i *int64) *OrderEventsCreate {
	if i != nil {
		oec.SetCreatedID(*i)
	}
	return oec
}

// SetEventID sets the "event_id" field.
func (oec *OrderEventsCreate) SetEventID(i int64) *OrderEventsCreate {
	oec.mutation.SetEventID(i)
	return oec
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (oec *OrderEventsCreate) SetNillableEventID(i *int64) *OrderEventsCreate {
	if i != nil {
		oec.SetEventID(*i)
	}
	return oec
}

// SetAggregateID sets the "aggregate_id" field.
func (oec *OrderEventsCreate) SetAggregateID(i int64) *OrderEventsCreate {
	oec.mutation.SetAggregateID(i)
	return oec
}

// SetNillableAggregateID sets the "aggregate_id" field if the given value is not nil.
func (oec *OrderEventsCreate) SetNillableAggregateID(i *int64) *OrderEventsCreate {
	if i != nil {
		oec.SetAggregateID(*i)
	}
	return oec
}

// SetAggregateType sets the "aggregate_type" field.
func (oec *OrderEventsCreate) SetAggregateType(s string) *OrderEventsCreate {
	oec.mutation.SetAggregateType(s)
	return oec
}

// SetNillableAggregateType sets the "aggregate_type" field if the given value is not nil.
func (oec *OrderEventsCreate) SetNillableAggregateType(s *string) *OrderEventsCreate {
	if s != nil {
		oec.SetAggregateType(*s)
	}
	return oec
}

// SetEventType sets the "event_type" field.
func (oec *OrderEventsCreate) SetEventType(s string) *OrderEventsCreate {
	oec.mutation.SetEventType(s)
	return oec
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (oec *OrderEventsCreate) SetNillableEventType(s *string) *OrderEventsCreate {
	if s != nil {
		oec.SetEventType(*s)
	}
	return oec
}

// SetEventData sets the "event_data" field.
func (oec *OrderEventsCreate) SetEventData(s string) *OrderEventsCreate {
	oec.mutation.SetEventData(s)
	return oec
}

// SetNillableEventData sets the "event_data" field if the given value is not nil.
func (oec *OrderEventsCreate) SetNillableEventData(s *string) *OrderEventsCreate {
	if s != nil {
		oec.SetEventData(*s)
	}
	return oec
}

// SetEventVersion sets the "event_version" field.
func (oec *OrderEventsCreate) SetEventVersion(i int64) *OrderEventsCreate {
	oec.mutation.SetEventVersion(i)
	return oec
}

// SetNillableEventVersion sets the "event_version" field if the given value is not nil.
func (oec *OrderEventsCreate) SetNillableEventVersion(i *int64) *OrderEventsCreate {
	if i != nil {
		oec.SetEventVersion(*i)
	}
	return oec
}

// SetID sets the "id" field.
func (oec *OrderEventsCreate) SetID(i int64) *OrderEventsCreate {
	oec.mutation.SetID(i)
	return oec
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (oec *OrderEventsCreate) SetOrderID(id int64) *OrderEventsCreate {
	oec.mutation.SetOrderID(id)
	return oec
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (oec *OrderEventsCreate) SetNillableOrderID(id *int64) *OrderEventsCreate {
	if id != nil {
		oec = oec.SetOrderID(*id)
	}
	return oec
}

// SetOrder sets the "order" edge to the Order entity.
func (oec *OrderEventsCreate) SetOrder(o *Order) *OrderEventsCreate {
	return oec.SetOrderID(o.ID)
}

// Mutation returns the OrderEventsMutation object of the builder.
func (oec *OrderEventsCreate) Mutation() *OrderEventsMutation {
	return oec.mutation
}

// Save creates the OrderEvents in the database.
func (oec *OrderEventsCreate) Save(ctx context.Context) (*OrderEvents, error) {
	oec.defaults()
	return withHooks(ctx, oec.sqlSave, oec.mutation, oec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oec *OrderEventsCreate) SaveX(ctx context.Context) *OrderEvents {
	v, err := oec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oec *OrderEventsCreate) Exec(ctx context.Context) error {
	_, err := oec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oec *OrderEventsCreate) ExecX(ctx context.Context) {
	if err := oec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oec *OrderEventsCreate) defaults() {
	if _, ok := oec.mutation.CreatedAt(); !ok {
		v := orderevents.DefaultCreatedAt()
		oec.mutation.SetCreatedAt(v)
	}
	if _, ok := oec.mutation.UpdatedAt(); !ok {
		v := orderevents.DefaultUpdatedAt()
		oec.mutation.SetUpdatedAt(v)
	}
	if _, ok := oec.mutation.Delete(); !ok {
		v := orderevents.DefaultDelete
		oec.mutation.SetDelete(v)
	}
	if _, ok := oec.mutation.CreatedID(); !ok {
		v := orderevents.DefaultCreatedID
		oec.mutation.SetCreatedID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oec *OrderEventsCreate) check() error {
	return nil
}

func (oec *OrderEventsCreate) sqlSave(ctx context.Context) (*OrderEvents, error) {
	if err := oec.check(); err != nil {
		return nil, err
	}
	_node, _spec := oec.createSpec()
	if err := sqlgraph.CreateNode(ctx, oec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	oec.mutation.id = &_node.ID
	oec.mutation.done = true
	return _node, nil
}

func (oec *OrderEventsCreate) createSpec() (*OrderEvents, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderEvents{config: oec.config}
		_spec = sqlgraph.NewCreateSpec(orderevents.Table, sqlgraph.NewFieldSpec(orderevents.FieldID, field.TypeInt64))
	)
	if id, ok := oec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oec.mutation.CreatedAt(); ok {
		_spec.SetField(orderevents.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oec.mutation.UpdatedAt(); ok {
		_spec.SetField(orderevents.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oec.mutation.Delete(); ok {
		_spec.SetField(orderevents.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := oec.mutation.CreatedID(); ok {
		_spec.SetField(orderevents.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := oec.mutation.EventID(); ok {
		_spec.SetField(orderevents.FieldEventID, field.TypeInt64, value)
		_node.EventID = value
	}
	if value, ok := oec.mutation.AggregateType(); ok {
		_spec.SetField(orderevents.FieldAggregateType, field.TypeString, value)
		_node.AggregateType = value
	}
	if value, ok := oec.mutation.EventType(); ok {
		_spec.SetField(orderevents.FieldEventType, field.TypeString, value)
		_node.EventType = value
	}
	if value, ok := oec.mutation.EventData(); ok {
		_spec.SetField(orderevents.FieldEventData, field.TypeString, value)
		_node.EventData = value
	}
	if value, ok := oec.mutation.EventVersion(); ok {
		_spec.SetField(orderevents.FieldEventVersion, field.TypeInt64, value)
		_node.EventVersion = value
	}
	if nodes := oec.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderevents.OrderTable,
			Columns: []string{orderevents.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AggregateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderEventsCreateBulk is the builder for creating many OrderEvents entities in bulk.
type OrderEventsCreateBulk struct {
	config
	err      error
	builders []*OrderEventsCreate
}

// Save creates the OrderEvents entities in the database.
func (oecb *OrderEventsCreateBulk) Save(ctx context.Context) ([]*OrderEvents, error) {
	if oecb.err != nil {
		return nil, oecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oecb.builders))
	nodes := make([]*OrderEvents, len(oecb.builders))
	mutators := make([]Mutator, len(oecb.builders))
	for i := range oecb.builders {
		func(i int, root context.Context) {
			builder := oecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderEventsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oecb *OrderEventsCreateBulk) SaveX(ctx context.Context) []*OrderEvents {
	v, err := oecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oecb *OrderEventsCreateBulk) Exec(ctx context.Context) error {
	_, err := oecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oecb *OrderEventsCreateBulk) ExecX(ctx context.Context) {
	if err := oecb.Exec(ctx); err != nil {
		panic(err)
	}
}
