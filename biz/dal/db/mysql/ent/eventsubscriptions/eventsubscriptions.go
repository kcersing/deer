// Code generated by ent, DO NOT EDIT.

package eventsubscriptions

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the eventsubscriptions type in the database.
	Label = "event_subscriptions"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDelete holds the string denoting the delete field in the database.
	FieldDelete = "delete"
	// FieldCreatedID holds the string denoting the created_id field in the database.
	FieldCreatedID = "created_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEventType holds the string denoting the event_type field in the database.
	FieldEventType = "event_type"
	// FieldLastProcessedID holds the string denoting the last_processed_id field in the database.
	FieldLastProcessedID = "last_processed_id"
	// FieldLastProcessedVersion holds the string denoting the last_processed_version field in the database.
	FieldLastProcessedVersion = "last_processed_version"
	// FieldLastProcessedAt holds the string denoting the last_processed_at field in the database.
	FieldLastProcessedAt = "last_processed_at"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldErrorCount holds the string denoting the error_count field in the database.
	FieldErrorCount = "error_count"
	// FieldLastError holds the string denoting the last_error field in the database.
	FieldLastError = "last_error"
	// Table holds the table name of the eventsubscriptions in the database.
	Table = "event_subscriptions"
)

// Columns holds all SQL columns for eventsubscriptions fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDelete,
	FieldCreatedID,
	FieldName,
	FieldEventType,
	FieldLastProcessedID,
	FieldLastProcessedVersion,
	FieldLastProcessedAt,
	FieldIsActive,
	FieldErrorCount,
	FieldLastError,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDelete holds the default value on creation for the "delete" field.
	DefaultDelete int64
	// DefaultCreatedID holds the default value on creation for the "created_id" field.
	DefaultCreatedID int64
)

// OrderOption defines the ordering options for the EventSubscriptions queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDelete orders the results by the delete field.
func ByDelete(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDelete, opts...).ToFunc()
}

// ByCreatedID orders the results by the created_id field.
func ByCreatedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEventType orders the results by the event_type field.
func ByEventType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventType, opts...).ToFunc()
}

// ByLastProcessedID orders the results by the last_processed_id field.
func ByLastProcessedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastProcessedID, opts...).ToFunc()
}

// ByLastProcessedVersion orders the results by the last_processed_version field.
func ByLastProcessedVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastProcessedVersion, opts...).ToFunc()
}

// ByLastProcessedAt orders the results by the last_processed_at field.
func ByLastProcessedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastProcessedAt, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByErrorCount orders the results by the error_count field.
func ByErrorCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorCount, opts...).ToFunc()
}

// ByLastError orders the results by the last_error field.
func ByLastError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastError, opts...).ToFunc()
}
