// Code generated by ent, DO NOT EDIT.

package orderstatushistory

import (
	"kcers-order/biz/dal/db/mysql/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// Delete applies equality check predicate on the "delete" field. It's identical to DeleteEQ.
func Delete(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldDelete, v))
}

// CreatedID applies equality check predicate on the "created_id" field. It's identical to CreatedIDEQ.
func CreatedID(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldCreatedID, v))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldOrderID, v))
}

// OldStatus applies equality check predicate on the "old_status" field. It's identical to OldStatusEQ.
func OldStatus(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldOldStatus, v))
}

// NewStatus applies equality check predicate on the "new_status" field. It's identical to NewStatusEQ.
func NewStatus(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldNewStatus, v))
}

// ChangeSource applies equality check predicate on the "change_source" field. It's identical to ChangeSourceEQ.
func ChangeSource(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldChangeSource, v))
}

// ChangeReason applies equality check predicate on the "change_reason" field. It's identical to ChangeReasonEQ.
func ChangeReason(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldChangeReason, v))
}

// ChangeAt applies equality check predicate on the "change_at" field. It's identical to ChangeAtEQ.
func ChangeAt(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldChangeAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotNull(FieldUpdatedAt))
}

// DeleteEQ applies the EQ predicate on the "delete" field.
func DeleteEQ(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldDelete, v))
}

// DeleteNEQ applies the NEQ predicate on the "delete" field.
func DeleteNEQ(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNEQ(FieldDelete, v))
}

// DeleteIn applies the In predicate on the "delete" field.
func DeleteIn(vs ...int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIn(FieldDelete, vs...))
}

// DeleteNotIn applies the NotIn predicate on the "delete" field.
func DeleteNotIn(vs ...int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotIn(FieldDelete, vs...))
}

// DeleteGT applies the GT predicate on the "delete" field.
func DeleteGT(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGT(FieldDelete, v))
}

// DeleteGTE applies the GTE predicate on the "delete" field.
func DeleteGTE(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGTE(FieldDelete, v))
}

// DeleteLT applies the LT predicate on the "delete" field.
func DeleteLT(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLT(FieldDelete, v))
}

// DeleteLTE applies the LTE predicate on the "delete" field.
func DeleteLTE(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLTE(FieldDelete, v))
}

// DeleteIsNil applies the IsNil predicate on the "delete" field.
func DeleteIsNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIsNull(FieldDelete))
}

// DeleteNotNil applies the NotNil predicate on the "delete" field.
func DeleteNotNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotNull(FieldDelete))
}

// CreatedIDEQ applies the EQ predicate on the "created_id" field.
func CreatedIDEQ(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldCreatedID, v))
}

// CreatedIDNEQ applies the NEQ predicate on the "created_id" field.
func CreatedIDNEQ(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNEQ(FieldCreatedID, v))
}

// CreatedIDIn applies the In predicate on the "created_id" field.
func CreatedIDIn(vs ...int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIn(FieldCreatedID, vs...))
}

// CreatedIDNotIn applies the NotIn predicate on the "created_id" field.
func CreatedIDNotIn(vs ...int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotIn(FieldCreatedID, vs...))
}

// CreatedIDGT applies the GT predicate on the "created_id" field.
func CreatedIDGT(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGT(FieldCreatedID, v))
}

// CreatedIDGTE applies the GTE predicate on the "created_id" field.
func CreatedIDGTE(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGTE(FieldCreatedID, v))
}

// CreatedIDLT applies the LT predicate on the "created_id" field.
func CreatedIDLT(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLT(FieldCreatedID, v))
}

// CreatedIDLTE applies the LTE predicate on the "created_id" field.
func CreatedIDLTE(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLTE(FieldCreatedID, v))
}

// CreatedIDIsNil applies the IsNil predicate on the "created_id" field.
func CreatedIDIsNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIsNull(FieldCreatedID))
}

// CreatedIDNotNil applies the NotNil predicate on the "created_id" field.
func CreatedIDNotNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotNull(FieldCreatedID))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIsNull(FieldOrderID))
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotNull(FieldOrderID))
}

// OldStatusEQ applies the EQ predicate on the "old_status" field.
func OldStatusEQ(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldOldStatus, v))
}

// OldStatusNEQ applies the NEQ predicate on the "old_status" field.
func OldStatusNEQ(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNEQ(FieldOldStatus, v))
}

// OldStatusIn applies the In predicate on the "old_status" field.
func OldStatusIn(vs ...int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIn(FieldOldStatus, vs...))
}

// OldStatusNotIn applies the NotIn predicate on the "old_status" field.
func OldStatusNotIn(vs ...int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotIn(FieldOldStatus, vs...))
}

// OldStatusGT applies the GT predicate on the "old_status" field.
func OldStatusGT(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGT(FieldOldStatus, v))
}

// OldStatusGTE applies the GTE predicate on the "old_status" field.
func OldStatusGTE(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGTE(FieldOldStatus, v))
}

// OldStatusLT applies the LT predicate on the "old_status" field.
func OldStatusLT(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLT(FieldOldStatus, v))
}

// OldStatusLTE applies the LTE predicate on the "old_status" field.
func OldStatusLTE(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLTE(FieldOldStatus, v))
}

// OldStatusIsNil applies the IsNil predicate on the "old_status" field.
func OldStatusIsNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIsNull(FieldOldStatus))
}

// OldStatusNotNil applies the NotNil predicate on the "old_status" field.
func OldStatusNotNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotNull(FieldOldStatus))
}

// NewStatusEQ applies the EQ predicate on the "new_status" field.
func NewStatusEQ(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldNewStatus, v))
}

// NewStatusNEQ applies the NEQ predicate on the "new_status" field.
func NewStatusNEQ(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNEQ(FieldNewStatus, v))
}

// NewStatusIn applies the In predicate on the "new_status" field.
func NewStatusIn(vs ...int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIn(FieldNewStatus, vs...))
}

// NewStatusNotIn applies the NotIn predicate on the "new_status" field.
func NewStatusNotIn(vs ...int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotIn(FieldNewStatus, vs...))
}

// NewStatusGT applies the GT predicate on the "new_status" field.
func NewStatusGT(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGT(FieldNewStatus, v))
}

// NewStatusGTE applies the GTE predicate on the "new_status" field.
func NewStatusGTE(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGTE(FieldNewStatus, v))
}

// NewStatusLT applies the LT predicate on the "new_status" field.
func NewStatusLT(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLT(FieldNewStatus, v))
}

// NewStatusLTE applies the LTE predicate on the "new_status" field.
func NewStatusLTE(v int64) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLTE(FieldNewStatus, v))
}

// NewStatusIsNil applies the IsNil predicate on the "new_status" field.
func NewStatusIsNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIsNull(FieldNewStatus))
}

// NewStatusNotNil applies the NotNil predicate on the "new_status" field.
func NewStatusNotNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotNull(FieldNewStatus))
}

// ChangeSourceEQ applies the EQ predicate on the "change_source" field.
func ChangeSourceEQ(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldChangeSource, v))
}

// ChangeSourceNEQ applies the NEQ predicate on the "change_source" field.
func ChangeSourceNEQ(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNEQ(FieldChangeSource, v))
}

// ChangeSourceIn applies the In predicate on the "change_source" field.
func ChangeSourceIn(vs ...string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIn(FieldChangeSource, vs...))
}

// ChangeSourceNotIn applies the NotIn predicate on the "change_source" field.
func ChangeSourceNotIn(vs ...string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotIn(FieldChangeSource, vs...))
}

// ChangeSourceGT applies the GT predicate on the "change_source" field.
func ChangeSourceGT(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGT(FieldChangeSource, v))
}

// ChangeSourceGTE applies the GTE predicate on the "change_source" field.
func ChangeSourceGTE(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGTE(FieldChangeSource, v))
}

// ChangeSourceLT applies the LT predicate on the "change_source" field.
func ChangeSourceLT(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLT(FieldChangeSource, v))
}

// ChangeSourceLTE applies the LTE predicate on the "change_source" field.
func ChangeSourceLTE(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLTE(FieldChangeSource, v))
}

// ChangeSourceContains applies the Contains predicate on the "change_source" field.
func ChangeSourceContains(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldContains(FieldChangeSource, v))
}

// ChangeSourceHasPrefix applies the HasPrefix predicate on the "change_source" field.
func ChangeSourceHasPrefix(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldHasPrefix(FieldChangeSource, v))
}

// ChangeSourceHasSuffix applies the HasSuffix predicate on the "change_source" field.
func ChangeSourceHasSuffix(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldHasSuffix(FieldChangeSource, v))
}

// ChangeSourceIsNil applies the IsNil predicate on the "change_source" field.
func ChangeSourceIsNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIsNull(FieldChangeSource))
}

// ChangeSourceNotNil applies the NotNil predicate on the "change_source" field.
func ChangeSourceNotNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotNull(FieldChangeSource))
}

// ChangeSourceEqualFold applies the EqualFold predicate on the "change_source" field.
func ChangeSourceEqualFold(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEqualFold(FieldChangeSource, v))
}

// ChangeSourceContainsFold applies the ContainsFold predicate on the "change_source" field.
func ChangeSourceContainsFold(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldContainsFold(FieldChangeSource, v))
}

// ChangeReasonEQ applies the EQ predicate on the "change_reason" field.
func ChangeReasonEQ(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldChangeReason, v))
}

// ChangeReasonNEQ applies the NEQ predicate on the "change_reason" field.
func ChangeReasonNEQ(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNEQ(FieldChangeReason, v))
}

// ChangeReasonIn applies the In predicate on the "change_reason" field.
func ChangeReasonIn(vs ...string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIn(FieldChangeReason, vs...))
}

// ChangeReasonNotIn applies the NotIn predicate on the "change_reason" field.
func ChangeReasonNotIn(vs ...string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotIn(FieldChangeReason, vs...))
}

// ChangeReasonGT applies the GT predicate on the "change_reason" field.
func ChangeReasonGT(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGT(FieldChangeReason, v))
}

// ChangeReasonGTE applies the GTE predicate on the "change_reason" field.
func ChangeReasonGTE(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGTE(FieldChangeReason, v))
}

// ChangeReasonLT applies the LT predicate on the "change_reason" field.
func ChangeReasonLT(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLT(FieldChangeReason, v))
}

// ChangeReasonLTE applies the LTE predicate on the "change_reason" field.
func ChangeReasonLTE(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLTE(FieldChangeReason, v))
}

// ChangeReasonContains applies the Contains predicate on the "change_reason" field.
func ChangeReasonContains(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldContains(FieldChangeReason, v))
}

// ChangeReasonHasPrefix applies the HasPrefix predicate on the "change_reason" field.
func ChangeReasonHasPrefix(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldHasPrefix(FieldChangeReason, v))
}

// ChangeReasonHasSuffix applies the HasSuffix predicate on the "change_reason" field.
func ChangeReasonHasSuffix(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldHasSuffix(FieldChangeReason, v))
}

// ChangeReasonIsNil applies the IsNil predicate on the "change_reason" field.
func ChangeReasonIsNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIsNull(FieldChangeReason))
}

// ChangeReasonNotNil applies the NotNil predicate on the "change_reason" field.
func ChangeReasonNotNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotNull(FieldChangeReason))
}

// ChangeReasonEqualFold applies the EqualFold predicate on the "change_reason" field.
func ChangeReasonEqualFold(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEqualFold(FieldChangeReason, v))
}

// ChangeReasonContainsFold applies the ContainsFold predicate on the "change_reason" field.
func ChangeReasonContainsFold(v string) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldContainsFold(FieldChangeReason, v))
}

// ChangeAtEQ applies the EQ predicate on the "change_at" field.
func ChangeAtEQ(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldEQ(FieldChangeAt, v))
}

// ChangeAtNEQ applies the NEQ predicate on the "change_at" field.
func ChangeAtNEQ(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNEQ(FieldChangeAt, v))
}

// ChangeAtIn applies the In predicate on the "change_at" field.
func ChangeAtIn(vs ...time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIn(FieldChangeAt, vs...))
}

// ChangeAtNotIn applies the NotIn predicate on the "change_at" field.
func ChangeAtNotIn(vs ...time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotIn(FieldChangeAt, vs...))
}

// ChangeAtGT applies the GT predicate on the "change_at" field.
func ChangeAtGT(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGT(FieldChangeAt, v))
}

// ChangeAtGTE applies the GTE predicate on the "change_at" field.
func ChangeAtGTE(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldGTE(FieldChangeAt, v))
}

// ChangeAtLT applies the LT predicate on the "change_at" field.
func ChangeAtLT(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLT(FieldChangeAt, v))
}

// ChangeAtLTE applies the LTE predicate on the "change_at" field.
func ChangeAtLTE(v time.Time) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldLTE(FieldChangeAt, v))
}

// ChangeAtIsNil applies the IsNil predicate on the "change_at" field.
func ChangeAtIsNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldIsNull(FieldChangeAt))
}

// ChangeAtNotNil applies the NotNil predicate on the "change_at" field.
func ChangeAtNotNil() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.FieldNotNull(FieldChangeAt))
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.Order) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(func(s *sql.Selector) {
		step := newOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderStatusHistory) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderStatusHistory) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderStatusHistory) predicate.OrderStatusHistory {
	return predicate.OrderStatusHistory(sql.NotPredicates(p))
}
