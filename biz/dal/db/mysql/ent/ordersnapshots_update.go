// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kcers-order/biz/dal/db/mysql/ent/order"
	"kcers-order/biz/dal/db/mysql/ent/ordersnapshots"
	"kcers-order/biz/dal/db/mysql/ent/predicate"
	"kcers-order/biz/infras/aggregate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderSnapshotsUpdate is the builder for updating OrderSnapshots entities.
type OrderSnapshotsUpdate struct {
	config
	hooks    []Hook
	mutation *OrderSnapshotsMutation
}

// Where appends a list predicates to the OrderSnapshotsUpdate builder.
func (osu *OrderSnapshotsUpdate) Where(ps ...predicate.OrderSnapshots) *OrderSnapshotsUpdate {
	osu.mutation.Where(ps...)
	return osu
}

// SetUpdatedAt sets the "updated_at" field.
func (osu *OrderSnapshotsUpdate) SetUpdatedAt(t time.Time) *OrderSnapshotsUpdate {
	osu.mutation.SetUpdatedAt(t)
	return osu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (osu *OrderSnapshotsUpdate) ClearUpdatedAt() *OrderSnapshotsUpdate {
	osu.mutation.ClearUpdatedAt()
	return osu
}

// SetDelete sets the "delete" field.
func (osu *OrderSnapshotsUpdate) SetDelete(i int64) *OrderSnapshotsUpdate {
	osu.mutation.ResetDelete()
	osu.mutation.SetDelete(i)
	return osu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (osu *OrderSnapshotsUpdate) SetNillableDelete(i *int64) *OrderSnapshotsUpdate {
	if i != nil {
		osu.SetDelete(*i)
	}
	return osu
}

// AddDelete adds i to the "delete" field.
func (osu *OrderSnapshotsUpdate) AddDelete(i int64) *OrderSnapshotsUpdate {
	osu.mutation.AddDelete(i)
	return osu
}

// ClearDelete clears the value of the "delete" field.
func (osu *OrderSnapshotsUpdate) ClearDelete() *OrderSnapshotsUpdate {
	osu.mutation.ClearDelete()
	return osu
}

// SetCreatedID sets the "created_id" field.
func (osu *OrderSnapshotsUpdate) SetCreatedID(i int64) *OrderSnapshotsUpdate {
	osu.mutation.ResetCreatedID()
	osu.mutation.SetCreatedID(i)
	return osu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (osu *OrderSnapshotsUpdate) SetNillableCreatedID(i *int64) *OrderSnapshotsUpdate {
	if i != nil {
		osu.SetCreatedID(*i)
	}
	return osu
}

// AddCreatedID adds i to the "created_id" field.
func (osu *OrderSnapshotsUpdate) AddCreatedID(i int64) *OrderSnapshotsUpdate {
	osu.mutation.AddCreatedID(i)
	return osu
}

// ClearCreatedID clears the value of the "created_id" field.
func (osu *OrderSnapshotsUpdate) ClearCreatedID() *OrderSnapshotsUpdate {
	osu.mutation.ClearCreatedID()
	return osu
}

// SetAggregateID sets the "aggregate_id" field.
func (osu *OrderSnapshotsUpdate) SetAggregateID(i int64) *OrderSnapshotsUpdate {
	osu.mutation.SetAggregateID(i)
	return osu
}

// SetNillableAggregateID sets the "aggregate_id" field if the given value is not nil.
func (osu *OrderSnapshotsUpdate) SetNillableAggregateID(i *int64) *OrderSnapshotsUpdate {
	if i != nil {
		osu.SetAggregateID(*i)
	}
	return osu
}

// ClearAggregateID clears the value of the "aggregate_id" field.
func (osu *OrderSnapshotsUpdate) ClearAggregateID() *OrderSnapshotsUpdate {
	osu.mutation.ClearAggregateID()
	return osu
}

// SetAggregateVersion sets the "aggregate_version" field.
func (osu *OrderSnapshotsUpdate) SetAggregateVersion(i int64) *OrderSnapshotsUpdate {
	osu.mutation.ResetAggregateVersion()
	osu.mutation.SetAggregateVersion(i)
	return osu
}

// SetNillableAggregateVersion sets the "aggregate_version" field if the given value is not nil.
func (osu *OrderSnapshotsUpdate) SetNillableAggregateVersion(i *int64) *OrderSnapshotsUpdate {
	if i != nil {
		osu.SetAggregateVersion(*i)
	}
	return osu
}

// AddAggregateVersion adds i to the "aggregate_version" field.
func (osu *OrderSnapshotsUpdate) AddAggregateVersion(i int64) *OrderSnapshotsUpdate {
	osu.mutation.AddAggregateVersion(i)
	return osu
}

// ClearAggregateVersion clears the value of the "aggregate_version" field.
func (osu *OrderSnapshotsUpdate) ClearAggregateVersion() *OrderSnapshotsUpdate {
	osu.mutation.ClearAggregateVersion()
	return osu
}

// SetAggregateData sets the "aggregate_data" field.
func (osu *OrderSnapshotsUpdate) SetAggregateData(a *aggregate.Order) *OrderSnapshotsUpdate {
	osu.mutation.SetAggregateData(a)
	return osu
}

// ClearAggregateData clears the value of the "aggregate_data" field.
func (osu *OrderSnapshotsUpdate) ClearAggregateData() *OrderSnapshotsUpdate {
	osu.mutation.ClearAggregateData()
	return osu
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (osu *OrderSnapshotsUpdate) SetOrderID(id int64) *OrderSnapshotsUpdate {
	osu.mutation.SetOrderID(id)
	return osu
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (osu *OrderSnapshotsUpdate) SetNillableOrderID(id *int64) *OrderSnapshotsUpdate {
	if id != nil {
		osu = osu.SetOrderID(*id)
	}
	return osu
}

// SetOrder sets the "order" edge to the Order entity.
func (osu *OrderSnapshotsUpdate) SetOrder(o *Order) *OrderSnapshotsUpdate {
	return osu.SetOrderID(o.ID)
}

// Mutation returns the OrderSnapshotsMutation object of the builder.
func (osu *OrderSnapshotsUpdate) Mutation() *OrderSnapshotsMutation {
	return osu.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (osu *OrderSnapshotsUpdate) ClearOrder() *OrderSnapshotsUpdate {
	osu.mutation.ClearOrder()
	return osu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osu *OrderSnapshotsUpdate) Save(ctx context.Context) (int, error) {
	osu.defaults()
	return withHooks(ctx, osu.sqlSave, osu.mutation, osu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osu *OrderSnapshotsUpdate) SaveX(ctx context.Context) int {
	affected, err := osu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osu *OrderSnapshotsUpdate) Exec(ctx context.Context) error {
	_, err := osu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osu *OrderSnapshotsUpdate) ExecX(ctx context.Context) {
	if err := osu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osu *OrderSnapshotsUpdate) defaults() {
	if _, ok := osu.mutation.UpdatedAt(); !ok && !osu.mutation.UpdatedAtCleared() {
		v := ordersnapshots.UpdateDefaultUpdatedAt()
		osu.mutation.SetUpdatedAt(v)
	}
}

func (osu *OrderSnapshotsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ordersnapshots.Table, ordersnapshots.Columns, sqlgraph.NewFieldSpec(ordersnapshots.FieldID, field.TypeInt64))
	if ps := osu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if osu.mutation.CreatedAtCleared() {
		_spec.ClearField(ordersnapshots.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := osu.mutation.UpdatedAt(); ok {
		_spec.SetField(ordersnapshots.FieldUpdatedAt, field.TypeTime, value)
	}
	if osu.mutation.UpdatedAtCleared() {
		_spec.ClearField(ordersnapshots.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := osu.mutation.Delete(); ok {
		_spec.SetField(ordersnapshots.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := osu.mutation.AddedDelete(); ok {
		_spec.AddField(ordersnapshots.FieldDelete, field.TypeInt64, value)
	}
	if osu.mutation.DeleteCleared() {
		_spec.ClearField(ordersnapshots.FieldDelete, field.TypeInt64)
	}
	if value, ok := osu.mutation.CreatedID(); ok {
		_spec.SetField(ordersnapshots.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := osu.mutation.AddedCreatedID(); ok {
		_spec.AddField(ordersnapshots.FieldCreatedID, field.TypeInt64, value)
	}
	if osu.mutation.CreatedIDCleared() {
		_spec.ClearField(ordersnapshots.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := osu.mutation.AggregateVersion(); ok {
		_spec.SetField(ordersnapshots.FieldAggregateVersion, field.TypeInt64, value)
	}
	if value, ok := osu.mutation.AddedAggregateVersion(); ok {
		_spec.AddField(ordersnapshots.FieldAggregateVersion, field.TypeInt64, value)
	}
	if osu.mutation.AggregateVersionCleared() {
		_spec.ClearField(ordersnapshots.FieldAggregateVersion, field.TypeInt64)
	}
	if value, ok := osu.mutation.AggregateData(); ok {
		_spec.SetField(ordersnapshots.FieldAggregateData, field.TypeJSON, value)
	}
	if osu.mutation.AggregateDataCleared() {
		_spec.ClearField(ordersnapshots.FieldAggregateData, field.TypeJSON)
	}
	if osu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordersnapshots.OrderTable,
			Columns: []string{ordersnapshots.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordersnapshots.OrderTable,
			Columns: []string{ordersnapshots.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, osu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordersnapshots.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	osu.mutation.done = true
	return n, nil
}

// OrderSnapshotsUpdateOne is the builder for updating a single OrderSnapshots entity.
type OrderSnapshotsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderSnapshotsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (osuo *OrderSnapshotsUpdateOne) SetUpdatedAt(t time.Time) *OrderSnapshotsUpdateOne {
	osuo.mutation.SetUpdatedAt(t)
	return osuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (osuo *OrderSnapshotsUpdateOne) ClearUpdatedAt() *OrderSnapshotsUpdateOne {
	osuo.mutation.ClearUpdatedAt()
	return osuo
}

// SetDelete sets the "delete" field.
func (osuo *OrderSnapshotsUpdateOne) SetDelete(i int64) *OrderSnapshotsUpdateOne {
	osuo.mutation.ResetDelete()
	osuo.mutation.SetDelete(i)
	return osuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (osuo *OrderSnapshotsUpdateOne) SetNillableDelete(i *int64) *OrderSnapshotsUpdateOne {
	if i != nil {
		osuo.SetDelete(*i)
	}
	return osuo
}

// AddDelete adds i to the "delete" field.
func (osuo *OrderSnapshotsUpdateOne) AddDelete(i int64) *OrderSnapshotsUpdateOne {
	osuo.mutation.AddDelete(i)
	return osuo
}

// ClearDelete clears the value of the "delete" field.
func (osuo *OrderSnapshotsUpdateOne) ClearDelete() *OrderSnapshotsUpdateOne {
	osuo.mutation.ClearDelete()
	return osuo
}

// SetCreatedID sets the "created_id" field.
func (osuo *OrderSnapshotsUpdateOne) SetCreatedID(i int64) *OrderSnapshotsUpdateOne {
	osuo.mutation.ResetCreatedID()
	osuo.mutation.SetCreatedID(i)
	return osuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (osuo *OrderSnapshotsUpdateOne) SetNillableCreatedID(i *int64) *OrderSnapshotsUpdateOne {
	if i != nil {
		osuo.SetCreatedID(*i)
	}
	return osuo
}

// AddCreatedID adds i to the "created_id" field.
func (osuo *OrderSnapshotsUpdateOne) AddCreatedID(i int64) *OrderSnapshotsUpdateOne {
	osuo.mutation.AddCreatedID(i)
	return osuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (osuo *OrderSnapshotsUpdateOne) ClearCreatedID() *OrderSnapshotsUpdateOne {
	osuo.mutation.ClearCreatedID()
	return osuo
}

// SetAggregateID sets the "aggregate_id" field.
func (osuo *OrderSnapshotsUpdateOne) SetAggregateID(i int64) *OrderSnapshotsUpdateOne {
	osuo.mutation.SetAggregateID(i)
	return osuo
}

// SetNillableAggregateID sets the "aggregate_id" field if the given value is not nil.
func (osuo *OrderSnapshotsUpdateOne) SetNillableAggregateID(i *int64) *OrderSnapshotsUpdateOne {
	if i != nil {
		osuo.SetAggregateID(*i)
	}
	return osuo
}

// ClearAggregateID clears the value of the "aggregate_id" field.
func (osuo *OrderSnapshotsUpdateOne) ClearAggregateID() *OrderSnapshotsUpdateOne {
	osuo.mutation.ClearAggregateID()
	return osuo
}

// SetAggregateVersion sets the "aggregate_version" field.
func (osuo *OrderSnapshotsUpdateOne) SetAggregateVersion(i int64) *OrderSnapshotsUpdateOne {
	osuo.mutation.ResetAggregateVersion()
	osuo.mutation.SetAggregateVersion(i)
	return osuo
}

// SetNillableAggregateVersion sets the "aggregate_version" field if the given value is not nil.
func (osuo *OrderSnapshotsUpdateOne) SetNillableAggregateVersion(i *int64) *OrderSnapshotsUpdateOne {
	if i != nil {
		osuo.SetAggregateVersion(*i)
	}
	return osuo
}

// AddAggregateVersion adds i to the "aggregate_version" field.
func (osuo *OrderSnapshotsUpdateOne) AddAggregateVersion(i int64) *OrderSnapshotsUpdateOne {
	osuo.mutation.AddAggregateVersion(i)
	return osuo
}

// ClearAggregateVersion clears the value of the "aggregate_version" field.
func (osuo *OrderSnapshotsUpdateOne) ClearAggregateVersion() *OrderSnapshotsUpdateOne {
	osuo.mutation.ClearAggregateVersion()
	return osuo
}

// SetAggregateData sets the "aggregate_data" field.
func (osuo *OrderSnapshotsUpdateOne) SetAggregateData(a *aggregate.Order) *OrderSnapshotsUpdateOne {
	osuo.mutation.SetAggregateData(a)
	return osuo
}

// ClearAggregateData clears the value of the "aggregate_data" field.
func (osuo *OrderSnapshotsUpdateOne) ClearAggregateData() *OrderSnapshotsUpdateOne {
	osuo.mutation.ClearAggregateData()
	return osuo
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (osuo *OrderSnapshotsUpdateOne) SetOrderID(id int64) *OrderSnapshotsUpdateOne {
	osuo.mutation.SetOrderID(id)
	return osuo
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (osuo *OrderSnapshotsUpdateOne) SetNillableOrderID(id *int64) *OrderSnapshotsUpdateOne {
	if id != nil {
		osuo = osuo.SetOrderID(*id)
	}
	return osuo
}

// SetOrder sets the "order" edge to the Order entity.
func (osuo *OrderSnapshotsUpdateOne) SetOrder(o *Order) *OrderSnapshotsUpdateOne {
	return osuo.SetOrderID(o.ID)
}

// Mutation returns the OrderSnapshotsMutation object of the builder.
func (osuo *OrderSnapshotsUpdateOne) Mutation() *OrderSnapshotsMutation {
	return osuo.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (osuo *OrderSnapshotsUpdateOne) ClearOrder() *OrderSnapshotsUpdateOne {
	osuo.mutation.ClearOrder()
	return osuo
}

// Where appends a list predicates to the OrderSnapshotsUpdate builder.
func (osuo *OrderSnapshotsUpdateOne) Where(ps ...predicate.OrderSnapshots) *OrderSnapshotsUpdateOne {
	osuo.mutation.Where(ps...)
	return osuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (osuo *OrderSnapshotsUpdateOne) Select(field string, fields ...string) *OrderSnapshotsUpdateOne {
	osuo.fields = append([]string{field}, fields...)
	return osuo
}

// Save executes the query and returns the updated OrderSnapshots entity.
func (osuo *OrderSnapshotsUpdateOne) Save(ctx context.Context) (*OrderSnapshots, error) {
	osuo.defaults()
	return withHooks(ctx, osuo.sqlSave, osuo.mutation, osuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osuo *OrderSnapshotsUpdateOne) SaveX(ctx context.Context) *OrderSnapshots {
	node, err := osuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osuo *OrderSnapshotsUpdateOne) Exec(ctx context.Context) error {
	_, err := osuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osuo *OrderSnapshotsUpdateOne) ExecX(ctx context.Context) {
	if err := osuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osuo *OrderSnapshotsUpdateOne) defaults() {
	if _, ok := osuo.mutation.UpdatedAt(); !ok && !osuo.mutation.UpdatedAtCleared() {
		v := ordersnapshots.UpdateDefaultUpdatedAt()
		osuo.mutation.SetUpdatedAt(v)
	}
}

func (osuo *OrderSnapshotsUpdateOne) sqlSave(ctx context.Context) (_node *OrderSnapshots, err error) {
	_spec := sqlgraph.NewUpdateSpec(ordersnapshots.Table, ordersnapshots.Columns, sqlgraph.NewFieldSpec(ordersnapshots.FieldID, field.TypeInt64))
	id, ok := osuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderSnapshots.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := osuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ordersnapshots.FieldID)
		for _, f := range fields {
			if !ordersnapshots.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ordersnapshots.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := osuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if osuo.mutation.CreatedAtCleared() {
		_spec.ClearField(ordersnapshots.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := osuo.mutation.UpdatedAt(); ok {
		_spec.SetField(ordersnapshots.FieldUpdatedAt, field.TypeTime, value)
	}
	if osuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(ordersnapshots.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := osuo.mutation.Delete(); ok {
		_spec.SetField(ordersnapshots.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := osuo.mutation.AddedDelete(); ok {
		_spec.AddField(ordersnapshots.FieldDelete, field.TypeInt64, value)
	}
	if osuo.mutation.DeleteCleared() {
		_spec.ClearField(ordersnapshots.FieldDelete, field.TypeInt64)
	}
	if value, ok := osuo.mutation.CreatedID(); ok {
		_spec.SetField(ordersnapshots.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := osuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(ordersnapshots.FieldCreatedID, field.TypeInt64, value)
	}
	if osuo.mutation.CreatedIDCleared() {
		_spec.ClearField(ordersnapshots.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := osuo.mutation.AggregateVersion(); ok {
		_spec.SetField(ordersnapshots.FieldAggregateVersion, field.TypeInt64, value)
	}
	if value, ok := osuo.mutation.AddedAggregateVersion(); ok {
		_spec.AddField(ordersnapshots.FieldAggregateVersion, field.TypeInt64, value)
	}
	if osuo.mutation.AggregateVersionCleared() {
		_spec.ClearField(ordersnapshots.FieldAggregateVersion, field.TypeInt64)
	}
	if value, ok := osuo.mutation.AggregateData(); ok {
		_spec.SetField(ordersnapshots.FieldAggregateData, field.TypeJSON, value)
	}
	if osuo.mutation.AggregateDataCleared() {
		_spec.ClearField(ordersnapshots.FieldAggregateData, field.TypeJSON)
	}
	if osuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordersnapshots.OrderTable,
			Columns: []string{ordersnapshots.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordersnapshots.OrderTable,
			Columns: []string{ordersnapshots.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderSnapshots{config: osuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordersnapshots.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	osuo.mutation.done = true
	return _node, nil
}
