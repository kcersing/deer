// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"deer/biz/dal/db/mysql/ent/order"
	"deer/biz/dal/db/mysql/ent/ordersnapshots"
	"deer/biz/dal/db/mysql/ent/predicate"
	"deer/biz/infras/order/aggregate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderSnapshotsUpdate is the builder for updating OrderSnapshots entities.
type OrderSnapshotsUpdate struct {
	config
	hooks    []Hook
	mutation *OrderSnapshotsMutation
}

// Where appends a list predicates to the OrderSnapshotsUpdate builder.
func (_u *OrderSnapshotsUpdate) Where(ps ...predicate.OrderSnapshots) *OrderSnapshotsUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrderSnapshotsUpdate) SetUpdatedAt(v time.Time) *OrderSnapshotsUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrderSnapshotsUpdate) ClearUpdatedAt() *OrderSnapshotsUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *OrderSnapshotsUpdate) SetDelete(v int64) *OrderSnapshotsUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *OrderSnapshotsUpdate) SetNillableDelete(v *int64) *OrderSnapshotsUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *OrderSnapshotsUpdate) AddDelete(v int64) *OrderSnapshotsUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *OrderSnapshotsUpdate) ClearDelete() *OrderSnapshotsUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *OrderSnapshotsUpdate) SetCreatedID(v int64) *OrderSnapshotsUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *OrderSnapshotsUpdate) SetNillableCreatedID(v *int64) *OrderSnapshotsUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *OrderSnapshotsUpdate) AddCreatedID(v int64) *OrderSnapshotsUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *OrderSnapshotsUpdate) ClearCreatedID() *OrderSnapshotsUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetAggregateID sets the "aggregate_id" field.
func (_u *OrderSnapshotsUpdate) SetAggregateID(v int64) *OrderSnapshotsUpdate {
	_u.mutation.SetAggregateID(v)
	return _u
}

// SetNillableAggregateID sets the "aggregate_id" field if the given value is not nil.
func (_u *OrderSnapshotsUpdate) SetNillableAggregateID(v *int64) *OrderSnapshotsUpdate {
	if v != nil {
		_u.SetAggregateID(*v)
	}
	return _u
}

// ClearAggregateID clears the value of the "aggregate_id" field.
func (_u *OrderSnapshotsUpdate) ClearAggregateID() *OrderSnapshotsUpdate {
	_u.mutation.ClearAggregateID()
	return _u
}

// SetAggregateVersion sets the "aggregate_version" field.
func (_u *OrderSnapshotsUpdate) SetAggregateVersion(v int64) *OrderSnapshotsUpdate {
	_u.mutation.ResetAggregateVersion()
	_u.mutation.SetAggregateVersion(v)
	return _u
}

// SetNillableAggregateVersion sets the "aggregate_version" field if the given value is not nil.
func (_u *OrderSnapshotsUpdate) SetNillableAggregateVersion(v *int64) *OrderSnapshotsUpdate {
	if v != nil {
		_u.SetAggregateVersion(*v)
	}
	return _u
}

// AddAggregateVersion adds value to the "aggregate_version" field.
func (_u *OrderSnapshotsUpdate) AddAggregateVersion(v int64) *OrderSnapshotsUpdate {
	_u.mutation.AddAggregateVersion(v)
	return _u
}

// ClearAggregateVersion clears the value of the "aggregate_version" field.
func (_u *OrderSnapshotsUpdate) ClearAggregateVersion() *OrderSnapshotsUpdate {
	_u.mutation.ClearAggregateVersion()
	return _u
}

// SetAggregateData sets the "aggregate_data" field.
func (_u *OrderSnapshotsUpdate) SetAggregateData(v *aggregate.Order) *OrderSnapshotsUpdate {
	_u.mutation.SetAggregateData(v)
	return _u
}

// ClearAggregateData clears the value of the "aggregate_data" field.
func (_u *OrderSnapshotsUpdate) ClearAggregateData() *OrderSnapshotsUpdate {
	_u.mutation.ClearAggregateData()
	return _u
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (_u *OrderSnapshotsUpdate) SetOrderID(id int64) *OrderSnapshotsUpdate {
	_u.mutation.SetOrderID(id)
	return _u
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (_u *OrderSnapshotsUpdate) SetNillableOrderID(id *int64) *OrderSnapshotsUpdate {
	if id != nil {
		_u = _u.SetOrderID(*id)
	}
	return _u
}

// SetOrder sets the "order" edge to the Order entity.
func (_u *OrderSnapshotsUpdate) SetOrder(v *Order) *OrderSnapshotsUpdate {
	return _u.SetOrderID(v.ID)
}

// Mutation returns the OrderSnapshotsMutation object of the builder.
func (_u *OrderSnapshotsUpdate) Mutation() *OrderSnapshotsMutation {
	return _u.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (_u *OrderSnapshotsUpdate) ClearOrder() *OrderSnapshotsUpdate {
	_u.mutation.ClearOrder()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OrderSnapshotsUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrderSnapshotsUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OrderSnapshotsUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrderSnapshotsUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrderSnapshotsUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := ordersnapshots.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *OrderSnapshotsUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ordersnapshots.Table, ordersnapshots.Columns, sqlgraph.NewFieldSpec(ordersnapshots.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(ordersnapshots.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(ordersnapshots.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(ordersnapshots.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(ordersnapshots.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(ordersnapshots.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(ordersnapshots.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(ordersnapshots.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(ordersnapshots.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(ordersnapshots.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.AggregateVersion(); ok {
		_spec.SetField(ordersnapshots.FieldAggregateVersion, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedAggregateVersion(); ok {
		_spec.AddField(ordersnapshots.FieldAggregateVersion, field.TypeInt64, value)
	}
	if _u.mutation.AggregateVersionCleared() {
		_spec.ClearField(ordersnapshots.FieldAggregateVersion, field.TypeInt64)
	}
	if value, ok := _u.mutation.AggregateData(); ok {
		_spec.SetField(ordersnapshots.FieldAggregateData, field.TypeJSON, value)
	}
	if _u.mutation.AggregateDataCleared() {
		_spec.ClearField(ordersnapshots.FieldAggregateData, field.TypeJSON)
	}
	if _u.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordersnapshots.OrderTable,
			Columns: []string{ordersnapshots.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordersnapshots.OrderTable,
			Columns: []string{ordersnapshots.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordersnapshots.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OrderSnapshotsUpdateOne is the builder for updating a single OrderSnapshots entity.
type OrderSnapshotsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderSnapshotsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrderSnapshotsUpdateOne) SetUpdatedAt(v time.Time) *OrderSnapshotsUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrderSnapshotsUpdateOne) ClearUpdatedAt() *OrderSnapshotsUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *OrderSnapshotsUpdateOne) SetDelete(v int64) *OrderSnapshotsUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *OrderSnapshotsUpdateOne) SetNillableDelete(v *int64) *OrderSnapshotsUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *OrderSnapshotsUpdateOne) AddDelete(v int64) *OrderSnapshotsUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *OrderSnapshotsUpdateOne) ClearDelete() *OrderSnapshotsUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *OrderSnapshotsUpdateOne) SetCreatedID(v int64) *OrderSnapshotsUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *OrderSnapshotsUpdateOne) SetNillableCreatedID(v *int64) *OrderSnapshotsUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *OrderSnapshotsUpdateOne) AddCreatedID(v int64) *OrderSnapshotsUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *OrderSnapshotsUpdateOne) ClearCreatedID() *OrderSnapshotsUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetAggregateID sets the "aggregate_id" field.
func (_u *OrderSnapshotsUpdateOne) SetAggregateID(v int64) *OrderSnapshotsUpdateOne {
	_u.mutation.SetAggregateID(v)
	return _u
}

// SetNillableAggregateID sets the "aggregate_id" field if the given value is not nil.
func (_u *OrderSnapshotsUpdateOne) SetNillableAggregateID(v *int64) *OrderSnapshotsUpdateOne {
	if v != nil {
		_u.SetAggregateID(*v)
	}
	return _u
}

// ClearAggregateID clears the value of the "aggregate_id" field.
func (_u *OrderSnapshotsUpdateOne) ClearAggregateID() *OrderSnapshotsUpdateOne {
	_u.mutation.ClearAggregateID()
	return _u
}

// SetAggregateVersion sets the "aggregate_version" field.
func (_u *OrderSnapshotsUpdateOne) SetAggregateVersion(v int64) *OrderSnapshotsUpdateOne {
	_u.mutation.ResetAggregateVersion()
	_u.mutation.SetAggregateVersion(v)
	return _u
}

// SetNillableAggregateVersion sets the "aggregate_version" field if the given value is not nil.
func (_u *OrderSnapshotsUpdateOne) SetNillableAggregateVersion(v *int64) *OrderSnapshotsUpdateOne {
	if v != nil {
		_u.SetAggregateVersion(*v)
	}
	return _u
}

// AddAggregateVersion adds value to the "aggregate_version" field.
func (_u *OrderSnapshotsUpdateOne) AddAggregateVersion(v int64) *OrderSnapshotsUpdateOne {
	_u.mutation.AddAggregateVersion(v)
	return _u
}

// ClearAggregateVersion clears the value of the "aggregate_version" field.
func (_u *OrderSnapshotsUpdateOne) ClearAggregateVersion() *OrderSnapshotsUpdateOne {
	_u.mutation.ClearAggregateVersion()
	return _u
}

// SetAggregateData sets the "aggregate_data" field.
func (_u *OrderSnapshotsUpdateOne) SetAggregateData(v *aggregate.Order) *OrderSnapshotsUpdateOne {
	_u.mutation.SetAggregateData(v)
	return _u
}

// ClearAggregateData clears the value of the "aggregate_data" field.
func (_u *OrderSnapshotsUpdateOne) ClearAggregateData() *OrderSnapshotsUpdateOne {
	_u.mutation.ClearAggregateData()
	return _u
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (_u *OrderSnapshotsUpdateOne) SetOrderID(id int64) *OrderSnapshotsUpdateOne {
	_u.mutation.SetOrderID(id)
	return _u
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (_u *OrderSnapshotsUpdateOne) SetNillableOrderID(id *int64) *OrderSnapshotsUpdateOne {
	if id != nil {
		_u = _u.SetOrderID(*id)
	}
	return _u
}

// SetOrder sets the "order" edge to the Order entity.
func (_u *OrderSnapshotsUpdateOne) SetOrder(v *Order) *OrderSnapshotsUpdateOne {
	return _u.SetOrderID(v.ID)
}

// Mutation returns the OrderSnapshotsMutation object of the builder.
func (_u *OrderSnapshotsUpdateOne) Mutation() *OrderSnapshotsMutation {
	return _u.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (_u *OrderSnapshotsUpdateOne) ClearOrder() *OrderSnapshotsUpdateOne {
	_u.mutation.ClearOrder()
	return _u
}

// Where appends a list predicates to the OrderSnapshotsUpdate builder.
func (_u *OrderSnapshotsUpdateOne) Where(ps ...predicate.OrderSnapshots) *OrderSnapshotsUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OrderSnapshotsUpdateOne) Select(field string, fields ...string) *OrderSnapshotsUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OrderSnapshots entity.
func (_u *OrderSnapshotsUpdateOne) Save(ctx context.Context) (*OrderSnapshots, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrderSnapshotsUpdateOne) SaveX(ctx context.Context) *OrderSnapshots {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OrderSnapshotsUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrderSnapshotsUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrderSnapshotsUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := ordersnapshots.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *OrderSnapshotsUpdateOne) sqlSave(ctx context.Context) (_node *OrderSnapshots, err error) {
	_spec := sqlgraph.NewUpdateSpec(ordersnapshots.Table, ordersnapshots.Columns, sqlgraph.NewFieldSpec(ordersnapshots.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderSnapshots.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ordersnapshots.FieldID)
		for _, f := range fields {
			if !ordersnapshots.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ordersnapshots.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(ordersnapshots.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(ordersnapshots.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(ordersnapshots.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(ordersnapshots.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(ordersnapshots.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(ordersnapshots.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(ordersnapshots.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(ordersnapshots.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(ordersnapshots.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.AggregateVersion(); ok {
		_spec.SetField(ordersnapshots.FieldAggregateVersion, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedAggregateVersion(); ok {
		_spec.AddField(ordersnapshots.FieldAggregateVersion, field.TypeInt64, value)
	}
	if _u.mutation.AggregateVersionCleared() {
		_spec.ClearField(ordersnapshots.FieldAggregateVersion, field.TypeInt64)
	}
	if value, ok := _u.mutation.AggregateData(); ok {
		_spec.SetField(ordersnapshots.FieldAggregateData, field.TypeJSON, value)
	}
	if _u.mutation.AggregateDataCleared() {
		_spec.ClearField(ordersnapshots.FieldAggregateData, field.TypeJSON)
	}
	if _u.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordersnapshots.OrderTable,
			Columns: []string{ordersnapshots.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordersnapshots.OrderTable,
			Columns: []string{ordersnapshots.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderSnapshots{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordersnapshots.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
