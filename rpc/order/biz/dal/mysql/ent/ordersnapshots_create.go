// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"deer/rpc/order/biz/dal/mysql/ent/order"
	"deer/rpc/order/biz/dal/mysql/ent/ordersnapshots"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderSnapshotsCreate is the builder for creating a OrderSnapshots entity.
type OrderSnapshotsCreate struct {
	config
	mutation *OrderSnapshotsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *OrderSnapshotsCreate) SetCreatedAt(v time.Time) *OrderSnapshotsCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *OrderSnapshotsCreate) SetNillableCreatedAt(v *time.Time) *OrderSnapshotsCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *OrderSnapshotsCreate) SetUpdatedAt(v time.Time) *OrderSnapshotsCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *OrderSnapshotsCreate) SetNillableUpdatedAt(v *time.Time) *OrderSnapshotsCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDelete sets the "delete" field.
func (_c *OrderSnapshotsCreate) SetDelete(v int64) *OrderSnapshotsCreate {
	_c.mutation.SetDelete(v)
	return _c
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_c *OrderSnapshotsCreate) SetNillableDelete(v *int64) *OrderSnapshotsCreate {
	if v != nil {
		_c.SetDelete(*v)
	}
	return _c
}

// SetCreatedID sets the "created_id" field.
func (_c *OrderSnapshotsCreate) SetCreatedID(v int64) *OrderSnapshotsCreate {
	_c.mutation.SetCreatedID(v)
	return _c
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_c *OrderSnapshotsCreate) SetNillableCreatedID(v *int64) *OrderSnapshotsCreate {
	if v != nil {
		_c.SetCreatedID(*v)
	}
	return _c
}

// SetAggregateID sets the "aggregate_id" field.
func (_c *OrderSnapshotsCreate) SetAggregateID(v int64) *OrderSnapshotsCreate {
	_c.mutation.SetAggregateID(v)
	return _c
}

// SetNillableAggregateID sets the "aggregate_id" field if the given value is not nil.
func (_c *OrderSnapshotsCreate) SetNillableAggregateID(v *int64) *OrderSnapshotsCreate {
	if v != nil {
		_c.SetAggregateID(*v)
	}
	return _c
}

// SetAggregateVersion sets the "aggregate_version" field.
func (_c *OrderSnapshotsCreate) SetAggregateVersion(v int64) *OrderSnapshotsCreate {
	_c.mutation.SetAggregateVersion(v)
	return _c
}

// SetNillableAggregateVersion sets the "aggregate_version" field if the given value is not nil.
func (_c *OrderSnapshotsCreate) SetNillableAggregateVersion(v *int64) *OrderSnapshotsCreate {
	if v != nil {
		_c.SetAggregateVersion(*v)
	}
	return _c
}

// SetAggregateData sets the "aggregate_data" field.
func (_c *OrderSnapshotsCreate) SetAggregateData(v []byte) *OrderSnapshotsCreate {
	_c.mutation.SetAggregateData(v)
	return _c
}

// SetID sets the "id" field.
func (_c *OrderSnapshotsCreate) SetID(v int64) *OrderSnapshotsCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (_c *OrderSnapshotsCreate) SetOrderID(id int64) *OrderSnapshotsCreate {
	_c.mutation.SetOrderID(id)
	return _c
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (_c *OrderSnapshotsCreate) SetNillableOrderID(id *int64) *OrderSnapshotsCreate {
	if id != nil {
		_c = _c.SetOrderID(*id)
	}
	return _c
}

// SetOrder sets the "order" edge to the Order entity.
func (_c *OrderSnapshotsCreate) SetOrder(v *Order) *OrderSnapshotsCreate {
	return _c.SetOrderID(v.ID)
}

// Mutation returns the OrderSnapshotsMutation object of the builder.
func (_c *OrderSnapshotsCreate) Mutation() *OrderSnapshotsMutation {
	return _c.mutation
}

// Save creates the OrderSnapshots in the database.
func (_c *OrderSnapshotsCreate) Save(ctx context.Context) (*OrderSnapshots, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OrderSnapshotsCreate) SaveX(ctx context.Context) *OrderSnapshots {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrderSnapshotsCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrderSnapshotsCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OrderSnapshotsCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := ordersnapshots.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := ordersnapshots.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Delete(); !ok {
		v := ordersnapshots.DefaultDelete
		_c.mutation.SetDelete(v)
	}
	if _, ok := _c.mutation.CreatedID(); !ok {
		v := ordersnapshots.DefaultCreatedID
		_c.mutation.SetCreatedID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *OrderSnapshotsCreate) check() error {
	return nil
}

func (_c *OrderSnapshotsCreate) sqlSave(ctx context.Context) (*OrderSnapshots, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OrderSnapshotsCreate) createSpec() (*OrderSnapshots, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderSnapshots{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(ordersnapshots.Table, sqlgraph.NewFieldSpec(ordersnapshots.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(ordersnapshots.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(ordersnapshots.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Delete(); ok {
		_spec.SetField(ordersnapshots.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := _c.mutation.CreatedID(); ok {
		_spec.SetField(ordersnapshots.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := _c.mutation.AggregateVersion(); ok {
		_spec.SetField(ordersnapshots.FieldAggregateVersion, field.TypeInt64, value)
		_node.AggregateVersion = value
	}
	if value, ok := _c.mutation.AggregateData(); ok {
		_spec.SetField(ordersnapshots.FieldAggregateData, field.TypeBytes, value)
		_node.AggregateData = value
	}
	if nodes := _c.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordersnapshots.OrderTable,
			Columns: []string{ordersnapshots.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AggregateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderSnapshots.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderSnapshotsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *OrderSnapshotsCreate) OnConflict(opts ...sql.ConflictOption) *OrderSnapshotsUpsertOne {
	_c.conflict = opts
	return &OrderSnapshotsUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderSnapshots.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *OrderSnapshotsCreate) OnConflictColumns(columns ...string) *OrderSnapshotsUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &OrderSnapshotsUpsertOne{
		create: _c,
	}
}

type (
	// OrderSnapshotsUpsertOne is the builder for "upsert"-ing
	//  one OrderSnapshots node.
	OrderSnapshotsUpsertOne struct {
		create *OrderSnapshotsCreate
	}

	// OrderSnapshotsUpsert is the "OnConflict" setter.
	OrderSnapshotsUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderSnapshotsUpsert) SetUpdatedAt(v time.Time) *OrderSnapshotsUpsert {
	u.Set(ordersnapshots.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderSnapshotsUpsert) UpdateUpdatedAt() *OrderSnapshotsUpsert {
	u.SetExcluded(ordersnapshots.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderSnapshotsUpsert) ClearUpdatedAt() *OrderSnapshotsUpsert {
	u.SetNull(ordersnapshots.FieldUpdatedAt)
	return u
}

// SetDelete sets the "delete" field.
func (u *OrderSnapshotsUpsert) SetDelete(v int64) *OrderSnapshotsUpsert {
	u.Set(ordersnapshots.FieldDelete, v)
	return u
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderSnapshotsUpsert) UpdateDelete() *OrderSnapshotsUpsert {
	u.SetExcluded(ordersnapshots.FieldDelete)
	return u
}

// AddDelete adds v to the "delete" field.
func (u *OrderSnapshotsUpsert) AddDelete(v int64) *OrderSnapshotsUpsert {
	u.Add(ordersnapshots.FieldDelete, v)
	return u
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderSnapshotsUpsert) ClearDelete() *OrderSnapshotsUpsert {
	u.SetNull(ordersnapshots.FieldDelete)
	return u
}

// SetCreatedID sets the "created_id" field.
func (u *OrderSnapshotsUpsert) SetCreatedID(v int64) *OrderSnapshotsUpsert {
	u.Set(ordersnapshots.FieldCreatedID, v)
	return u
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderSnapshotsUpsert) UpdateCreatedID() *OrderSnapshotsUpsert {
	u.SetExcluded(ordersnapshots.FieldCreatedID)
	return u
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderSnapshotsUpsert) AddCreatedID(v int64) *OrderSnapshotsUpsert {
	u.Add(ordersnapshots.FieldCreatedID, v)
	return u
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderSnapshotsUpsert) ClearCreatedID() *OrderSnapshotsUpsert {
	u.SetNull(ordersnapshots.FieldCreatedID)
	return u
}

// SetAggregateID sets the "aggregate_id" field.
func (u *OrderSnapshotsUpsert) SetAggregateID(v int64) *OrderSnapshotsUpsert {
	u.Set(ordersnapshots.FieldAggregateID, v)
	return u
}

// UpdateAggregateID sets the "aggregate_id" field to the value that was provided on create.
func (u *OrderSnapshotsUpsert) UpdateAggregateID() *OrderSnapshotsUpsert {
	u.SetExcluded(ordersnapshots.FieldAggregateID)
	return u
}

// ClearAggregateID clears the value of the "aggregate_id" field.
func (u *OrderSnapshotsUpsert) ClearAggregateID() *OrderSnapshotsUpsert {
	u.SetNull(ordersnapshots.FieldAggregateID)
	return u
}

// SetAggregateVersion sets the "aggregate_version" field.
func (u *OrderSnapshotsUpsert) SetAggregateVersion(v int64) *OrderSnapshotsUpsert {
	u.Set(ordersnapshots.FieldAggregateVersion, v)
	return u
}

// UpdateAggregateVersion sets the "aggregate_version" field to the value that was provided on create.
func (u *OrderSnapshotsUpsert) UpdateAggregateVersion() *OrderSnapshotsUpsert {
	u.SetExcluded(ordersnapshots.FieldAggregateVersion)
	return u
}

// AddAggregateVersion adds v to the "aggregate_version" field.
func (u *OrderSnapshotsUpsert) AddAggregateVersion(v int64) *OrderSnapshotsUpsert {
	u.Add(ordersnapshots.FieldAggregateVersion, v)
	return u
}

// ClearAggregateVersion clears the value of the "aggregate_version" field.
func (u *OrderSnapshotsUpsert) ClearAggregateVersion() *OrderSnapshotsUpsert {
	u.SetNull(ordersnapshots.FieldAggregateVersion)
	return u
}

// SetAggregateData sets the "aggregate_data" field.
func (u *OrderSnapshotsUpsert) SetAggregateData(v []byte) *OrderSnapshotsUpsert {
	u.Set(ordersnapshots.FieldAggregateData, v)
	return u
}

// UpdateAggregateData sets the "aggregate_data" field to the value that was provided on create.
func (u *OrderSnapshotsUpsert) UpdateAggregateData() *OrderSnapshotsUpsert {
	u.SetExcluded(ordersnapshots.FieldAggregateData)
	return u
}

// ClearAggregateData clears the value of the "aggregate_data" field.
func (u *OrderSnapshotsUpsert) ClearAggregateData() *OrderSnapshotsUpsert {
	u.SetNull(ordersnapshots.FieldAggregateData)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderSnapshots.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ordersnapshots.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderSnapshotsUpsertOne) UpdateNewValues() *OrderSnapshotsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(ordersnapshots.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(ordersnapshots.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderSnapshots.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderSnapshotsUpsertOne) Ignore() *OrderSnapshotsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderSnapshotsUpsertOne) DoNothing() *OrderSnapshotsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderSnapshotsCreate.OnConflict
// documentation for more info.
func (u *OrderSnapshotsUpsertOne) Update(set func(*OrderSnapshotsUpsert)) *OrderSnapshotsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderSnapshotsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderSnapshotsUpsertOne) SetUpdatedAt(v time.Time) *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderSnapshotsUpsertOne) UpdateUpdatedAt() *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderSnapshotsUpsertOne) ClearUpdatedAt() *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDelete sets the "delete" field.
func (u *OrderSnapshotsUpsertOne) SetDelete(v int64) *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.SetDelete(v)
	})
}

// AddDelete adds v to the "delete" field.
func (u *OrderSnapshotsUpsertOne) AddDelete(v int64) *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.AddDelete(v)
	})
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderSnapshotsUpsertOne) UpdateDelete() *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.UpdateDelete()
	})
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderSnapshotsUpsertOne) ClearDelete() *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.ClearDelete()
	})
}

// SetCreatedID sets the "created_id" field.
func (u *OrderSnapshotsUpsertOne) SetCreatedID(v int64) *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.SetCreatedID(v)
	})
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderSnapshotsUpsertOne) AddCreatedID(v int64) *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.AddCreatedID(v)
	})
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderSnapshotsUpsertOne) UpdateCreatedID() *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.UpdateCreatedID()
	})
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderSnapshotsUpsertOne) ClearCreatedID() *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.ClearCreatedID()
	})
}

// SetAggregateID sets the "aggregate_id" field.
func (u *OrderSnapshotsUpsertOne) SetAggregateID(v int64) *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.SetAggregateID(v)
	})
}

// UpdateAggregateID sets the "aggregate_id" field to the value that was provided on create.
func (u *OrderSnapshotsUpsertOne) UpdateAggregateID() *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.UpdateAggregateID()
	})
}

// ClearAggregateID clears the value of the "aggregate_id" field.
func (u *OrderSnapshotsUpsertOne) ClearAggregateID() *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.ClearAggregateID()
	})
}

// SetAggregateVersion sets the "aggregate_version" field.
func (u *OrderSnapshotsUpsertOne) SetAggregateVersion(v int64) *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.SetAggregateVersion(v)
	})
}

// AddAggregateVersion adds v to the "aggregate_version" field.
func (u *OrderSnapshotsUpsertOne) AddAggregateVersion(v int64) *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.AddAggregateVersion(v)
	})
}

// UpdateAggregateVersion sets the "aggregate_version" field to the value that was provided on create.
func (u *OrderSnapshotsUpsertOne) UpdateAggregateVersion() *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.UpdateAggregateVersion()
	})
}

// ClearAggregateVersion clears the value of the "aggregate_version" field.
func (u *OrderSnapshotsUpsertOne) ClearAggregateVersion() *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.ClearAggregateVersion()
	})
}

// SetAggregateData sets the "aggregate_data" field.
func (u *OrderSnapshotsUpsertOne) SetAggregateData(v []byte) *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.SetAggregateData(v)
	})
}

// UpdateAggregateData sets the "aggregate_data" field to the value that was provided on create.
func (u *OrderSnapshotsUpsertOne) UpdateAggregateData() *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.UpdateAggregateData()
	})
}

// ClearAggregateData clears the value of the "aggregate_data" field.
func (u *OrderSnapshotsUpsertOne) ClearAggregateData() *OrderSnapshotsUpsertOne {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.ClearAggregateData()
	})
}

// Exec executes the query.
func (u *OrderSnapshotsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderSnapshotsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderSnapshotsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderSnapshotsUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderSnapshotsUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderSnapshotsCreateBulk is the builder for creating many OrderSnapshots entities in bulk.
type OrderSnapshotsCreateBulk struct {
	config
	err      error
	builders []*OrderSnapshotsCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderSnapshots entities in the database.
func (_c *OrderSnapshotsCreateBulk) Save(ctx context.Context) ([]*OrderSnapshots, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*OrderSnapshots, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderSnapshotsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OrderSnapshotsCreateBulk) SaveX(ctx context.Context) []*OrderSnapshots {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrderSnapshotsCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrderSnapshotsCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderSnapshots.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderSnapshotsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *OrderSnapshotsCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderSnapshotsUpsertBulk {
	_c.conflict = opts
	return &OrderSnapshotsUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderSnapshots.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *OrderSnapshotsCreateBulk) OnConflictColumns(columns ...string) *OrderSnapshotsUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &OrderSnapshotsUpsertBulk{
		create: _c,
	}
}

// OrderSnapshotsUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderSnapshots nodes.
type OrderSnapshotsUpsertBulk struct {
	create *OrderSnapshotsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderSnapshots.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ordersnapshots.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderSnapshotsUpsertBulk) UpdateNewValues() *OrderSnapshotsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(ordersnapshots.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(ordersnapshots.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderSnapshots.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderSnapshotsUpsertBulk) Ignore() *OrderSnapshotsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderSnapshotsUpsertBulk) DoNothing() *OrderSnapshotsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderSnapshotsCreateBulk.OnConflict
// documentation for more info.
func (u *OrderSnapshotsUpsertBulk) Update(set func(*OrderSnapshotsUpsert)) *OrderSnapshotsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderSnapshotsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderSnapshotsUpsertBulk) SetUpdatedAt(v time.Time) *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderSnapshotsUpsertBulk) UpdateUpdatedAt() *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderSnapshotsUpsertBulk) ClearUpdatedAt() *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDelete sets the "delete" field.
func (u *OrderSnapshotsUpsertBulk) SetDelete(v int64) *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.SetDelete(v)
	})
}

// AddDelete adds v to the "delete" field.
func (u *OrderSnapshotsUpsertBulk) AddDelete(v int64) *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.AddDelete(v)
	})
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderSnapshotsUpsertBulk) UpdateDelete() *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.UpdateDelete()
	})
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderSnapshotsUpsertBulk) ClearDelete() *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.ClearDelete()
	})
}

// SetCreatedID sets the "created_id" field.
func (u *OrderSnapshotsUpsertBulk) SetCreatedID(v int64) *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.SetCreatedID(v)
	})
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderSnapshotsUpsertBulk) AddCreatedID(v int64) *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.AddCreatedID(v)
	})
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderSnapshotsUpsertBulk) UpdateCreatedID() *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.UpdateCreatedID()
	})
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderSnapshotsUpsertBulk) ClearCreatedID() *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.ClearCreatedID()
	})
}

// SetAggregateID sets the "aggregate_id" field.
func (u *OrderSnapshotsUpsertBulk) SetAggregateID(v int64) *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.SetAggregateID(v)
	})
}

// UpdateAggregateID sets the "aggregate_id" field to the value that was provided on create.
func (u *OrderSnapshotsUpsertBulk) UpdateAggregateID() *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.UpdateAggregateID()
	})
}

// ClearAggregateID clears the value of the "aggregate_id" field.
func (u *OrderSnapshotsUpsertBulk) ClearAggregateID() *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.ClearAggregateID()
	})
}

// SetAggregateVersion sets the "aggregate_version" field.
func (u *OrderSnapshotsUpsertBulk) SetAggregateVersion(v int64) *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.SetAggregateVersion(v)
	})
}

// AddAggregateVersion adds v to the "aggregate_version" field.
func (u *OrderSnapshotsUpsertBulk) AddAggregateVersion(v int64) *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.AddAggregateVersion(v)
	})
}

// UpdateAggregateVersion sets the "aggregate_version" field to the value that was provided on create.
func (u *OrderSnapshotsUpsertBulk) UpdateAggregateVersion() *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.UpdateAggregateVersion()
	})
}

// ClearAggregateVersion clears the value of the "aggregate_version" field.
func (u *OrderSnapshotsUpsertBulk) ClearAggregateVersion() *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.ClearAggregateVersion()
	})
}

// SetAggregateData sets the "aggregate_data" field.
func (u *OrderSnapshotsUpsertBulk) SetAggregateData(v []byte) *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.SetAggregateData(v)
	})
}

// UpdateAggregateData sets the "aggregate_data" field to the value that was provided on create.
func (u *OrderSnapshotsUpsertBulk) UpdateAggregateData() *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.UpdateAggregateData()
	})
}

// ClearAggregateData clears the value of the "aggregate_data" field.
func (u *OrderSnapshotsUpsertBulk) ClearAggregateData() *OrderSnapshotsUpsertBulk {
	return u.Update(func(s *OrderSnapshotsUpsert) {
		s.ClearAggregateData()
	})
}

// Exec executes the query.
func (u *OrderSnapshotsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderSnapshotsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderSnapshotsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderSnapshotsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
