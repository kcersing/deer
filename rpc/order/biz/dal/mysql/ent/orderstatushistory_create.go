// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"deer/rpc/order/biz/dal/mysql/ent/order"
	"deer/rpc/order/biz/dal/mysql/ent/orderstatushistory"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderStatusHistoryCreate is the builder for creating a OrderStatusHistory entity.
type OrderStatusHistoryCreate struct {
	config
	mutation *OrderStatusHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *OrderStatusHistoryCreate) SetCreatedAt(v time.Time) *OrderStatusHistoryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *OrderStatusHistoryCreate) SetNillableCreatedAt(v *time.Time) *OrderStatusHistoryCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *OrderStatusHistoryCreate) SetUpdatedAt(v time.Time) *OrderStatusHistoryCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *OrderStatusHistoryCreate) SetNillableUpdatedAt(v *time.Time) *OrderStatusHistoryCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDelete sets the "delete" field.
func (_c *OrderStatusHistoryCreate) SetDelete(v int64) *OrderStatusHistoryCreate {
	_c.mutation.SetDelete(v)
	return _c
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_c *OrderStatusHistoryCreate) SetNillableDelete(v *int64) *OrderStatusHistoryCreate {
	if v != nil {
		_c.SetDelete(*v)
	}
	return _c
}

// SetCreatedID sets the "created_id" field.
func (_c *OrderStatusHistoryCreate) SetCreatedID(v int64) *OrderStatusHistoryCreate {
	_c.mutation.SetCreatedID(v)
	return _c
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_c *OrderStatusHistoryCreate) SetNillableCreatedID(v *int64) *OrderStatusHistoryCreate {
	if v != nil {
		_c.SetCreatedID(*v)
	}
	return _c
}

// SetOrderID sets the "order_id" field.
func (_c *OrderStatusHistoryCreate) SetOrderID(v int64) *OrderStatusHistoryCreate {
	_c.mutation.SetOrderID(v)
	return _c
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (_c *OrderStatusHistoryCreate) SetNillableOrderID(v *int64) *OrderStatusHistoryCreate {
	if v != nil {
		_c.SetOrderID(*v)
	}
	return _c
}

// SetOldStatus sets the "old_status" field.
func (_c *OrderStatusHistoryCreate) SetOldStatus(v int64) *OrderStatusHistoryCreate {
	_c.mutation.SetOldStatus(v)
	return _c
}

// SetNillableOldStatus sets the "old_status" field if the given value is not nil.
func (_c *OrderStatusHistoryCreate) SetNillableOldStatus(v *int64) *OrderStatusHistoryCreate {
	if v != nil {
		_c.SetOldStatus(*v)
	}
	return _c
}

// SetNewStatus sets the "new_status" field.
func (_c *OrderStatusHistoryCreate) SetNewStatus(v int64) *OrderStatusHistoryCreate {
	_c.mutation.SetNewStatus(v)
	return _c
}

// SetNillableNewStatus sets the "new_status" field if the given value is not nil.
func (_c *OrderStatusHistoryCreate) SetNillableNewStatus(v *int64) *OrderStatusHistoryCreate {
	if v != nil {
		_c.SetNewStatus(*v)
	}
	return _c
}

// SetChangeSource sets the "change_source" field.
func (_c *OrderStatusHistoryCreate) SetChangeSource(v string) *OrderStatusHistoryCreate {
	_c.mutation.SetChangeSource(v)
	return _c
}

// SetNillableChangeSource sets the "change_source" field if the given value is not nil.
func (_c *OrderStatusHistoryCreate) SetNillableChangeSource(v *string) *OrderStatusHistoryCreate {
	if v != nil {
		_c.SetChangeSource(*v)
	}
	return _c
}

// SetChangeReason sets the "change_reason" field.
func (_c *OrderStatusHistoryCreate) SetChangeReason(v string) *OrderStatusHistoryCreate {
	_c.mutation.SetChangeReason(v)
	return _c
}

// SetNillableChangeReason sets the "change_reason" field if the given value is not nil.
func (_c *OrderStatusHistoryCreate) SetNillableChangeReason(v *string) *OrderStatusHistoryCreate {
	if v != nil {
		_c.SetChangeReason(*v)
	}
	return _c
}

// SetChangeAt sets the "change_at" field.
func (_c *OrderStatusHistoryCreate) SetChangeAt(v time.Time) *OrderStatusHistoryCreate {
	_c.mutation.SetChangeAt(v)
	return _c
}

// SetNillableChangeAt sets the "change_at" field if the given value is not nil.
func (_c *OrderStatusHistoryCreate) SetNillableChangeAt(v *time.Time) *OrderStatusHistoryCreate {
	if v != nil {
		_c.SetChangeAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *OrderStatusHistoryCreate) SetID(v int64) *OrderStatusHistoryCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetOrder sets the "order" edge to the Order entity.
func (_c *OrderStatusHistoryCreate) SetOrder(v *Order) *OrderStatusHistoryCreate {
	return _c.SetOrderID(v.ID)
}

// Mutation returns the OrderStatusHistoryMutation object of the builder.
func (_c *OrderStatusHistoryCreate) Mutation() *OrderStatusHistoryMutation {
	return _c.mutation
}

// Save creates the OrderStatusHistory in the database.
func (_c *OrderStatusHistoryCreate) Save(ctx context.Context) (*OrderStatusHistory, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OrderStatusHistoryCreate) SaveX(ctx context.Context) *OrderStatusHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrderStatusHistoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrderStatusHistoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OrderStatusHistoryCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := orderstatushistory.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := orderstatushistory.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Delete(); !ok {
		v := orderstatushistory.DefaultDelete
		_c.mutation.SetDelete(v)
	}
	if _, ok := _c.mutation.CreatedID(); !ok {
		v := orderstatushistory.DefaultCreatedID
		_c.mutation.SetCreatedID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *OrderStatusHistoryCreate) check() error {
	return nil
}

func (_c *OrderStatusHistoryCreate) sqlSave(ctx context.Context) (*OrderStatusHistory, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OrderStatusHistoryCreate) createSpec() (*OrderStatusHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderStatusHistory{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(orderstatushistory.Table, sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(orderstatushistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(orderstatushistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Delete(); ok {
		_spec.SetField(orderstatushistory.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := _c.mutation.CreatedID(); ok {
		_spec.SetField(orderstatushistory.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := _c.mutation.OldStatus(); ok {
		_spec.SetField(orderstatushistory.FieldOldStatus, field.TypeInt64, value)
		_node.OldStatus = value
	}
	if value, ok := _c.mutation.NewStatus(); ok {
		_spec.SetField(orderstatushistory.FieldNewStatus, field.TypeInt64, value)
		_node.NewStatus = value
	}
	if value, ok := _c.mutation.ChangeSource(); ok {
		_spec.SetField(orderstatushistory.FieldChangeSource, field.TypeString, value)
		_node.ChangeSource = value
	}
	if value, ok := _c.mutation.ChangeReason(); ok {
		_spec.SetField(orderstatushistory.FieldChangeReason, field.TypeString, value)
		_node.ChangeReason = value
	}
	if value, ok := _c.mutation.ChangeAt(); ok {
		_spec.SetField(orderstatushistory.FieldChangeAt, field.TypeTime, value)
		_node.ChangeAt = value
	}
	if nodes := _c.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderstatushistory.OrderTable,
			Columns: []string{orderstatushistory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderStatusHistory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderStatusHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *OrderStatusHistoryCreate) OnConflict(opts ...sql.ConflictOption) *OrderStatusHistoryUpsertOne {
	_c.conflict = opts
	return &OrderStatusHistoryUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderStatusHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *OrderStatusHistoryCreate) OnConflictColumns(columns ...string) *OrderStatusHistoryUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &OrderStatusHistoryUpsertOne{
		create: _c,
	}
}

type (
	// OrderStatusHistoryUpsertOne is the builder for "upsert"-ing
	//  one OrderStatusHistory node.
	OrderStatusHistoryUpsertOne struct {
		create *OrderStatusHistoryCreate
	}

	// OrderStatusHistoryUpsert is the "OnConflict" setter.
	OrderStatusHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderStatusHistoryUpsert) SetUpdatedAt(v time.Time) *OrderStatusHistoryUpsert {
	u.Set(orderstatushistory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsert) UpdateUpdatedAt() *OrderStatusHistoryUpsert {
	u.SetExcluded(orderstatushistory.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderStatusHistoryUpsert) ClearUpdatedAt() *OrderStatusHistoryUpsert {
	u.SetNull(orderstatushistory.FieldUpdatedAt)
	return u
}

// SetDelete sets the "delete" field.
func (u *OrderStatusHistoryUpsert) SetDelete(v int64) *OrderStatusHistoryUpsert {
	u.Set(orderstatushistory.FieldDelete, v)
	return u
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsert) UpdateDelete() *OrderStatusHistoryUpsert {
	u.SetExcluded(orderstatushistory.FieldDelete)
	return u
}

// AddDelete adds v to the "delete" field.
func (u *OrderStatusHistoryUpsert) AddDelete(v int64) *OrderStatusHistoryUpsert {
	u.Add(orderstatushistory.FieldDelete, v)
	return u
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderStatusHistoryUpsert) ClearDelete() *OrderStatusHistoryUpsert {
	u.SetNull(orderstatushistory.FieldDelete)
	return u
}

// SetCreatedID sets the "created_id" field.
func (u *OrderStatusHistoryUpsert) SetCreatedID(v int64) *OrderStatusHistoryUpsert {
	u.Set(orderstatushistory.FieldCreatedID, v)
	return u
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsert) UpdateCreatedID() *OrderStatusHistoryUpsert {
	u.SetExcluded(orderstatushistory.FieldCreatedID)
	return u
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderStatusHistoryUpsert) AddCreatedID(v int64) *OrderStatusHistoryUpsert {
	u.Add(orderstatushistory.FieldCreatedID, v)
	return u
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderStatusHistoryUpsert) ClearCreatedID() *OrderStatusHistoryUpsert {
	u.SetNull(orderstatushistory.FieldCreatedID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *OrderStatusHistoryUpsert) SetOrderID(v int64) *OrderStatusHistoryUpsert {
	u.Set(orderstatushistory.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsert) UpdateOrderID() *OrderStatusHistoryUpsert {
	u.SetExcluded(orderstatushistory.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderStatusHistoryUpsert) ClearOrderID() *OrderStatusHistoryUpsert {
	u.SetNull(orderstatushistory.FieldOrderID)
	return u
}

// SetOldStatus sets the "old_status" field.
func (u *OrderStatusHistoryUpsert) SetOldStatus(v int64) *OrderStatusHistoryUpsert {
	u.Set(orderstatushistory.FieldOldStatus, v)
	return u
}

// UpdateOldStatus sets the "old_status" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsert) UpdateOldStatus() *OrderStatusHistoryUpsert {
	u.SetExcluded(orderstatushistory.FieldOldStatus)
	return u
}

// AddOldStatus adds v to the "old_status" field.
func (u *OrderStatusHistoryUpsert) AddOldStatus(v int64) *OrderStatusHistoryUpsert {
	u.Add(orderstatushistory.FieldOldStatus, v)
	return u
}

// ClearOldStatus clears the value of the "old_status" field.
func (u *OrderStatusHistoryUpsert) ClearOldStatus() *OrderStatusHistoryUpsert {
	u.SetNull(orderstatushistory.FieldOldStatus)
	return u
}

// SetNewStatus sets the "new_status" field.
func (u *OrderStatusHistoryUpsert) SetNewStatus(v int64) *OrderStatusHistoryUpsert {
	u.Set(orderstatushistory.FieldNewStatus, v)
	return u
}

// UpdateNewStatus sets the "new_status" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsert) UpdateNewStatus() *OrderStatusHistoryUpsert {
	u.SetExcluded(orderstatushistory.FieldNewStatus)
	return u
}

// AddNewStatus adds v to the "new_status" field.
func (u *OrderStatusHistoryUpsert) AddNewStatus(v int64) *OrderStatusHistoryUpsert {
	u.Add(orderstatushistory.FieldNewStatus, v)
	return u
}

// ClearNewStatus clears the value of the "new_status" field.
func (u *OrderStatusHistoryUpsert) ClearNewStatus() *OrderStatusHistoryUpsert {
	u.SetNull(orderstatushistory.FieldNewStatus)
	return u
}

// SetChangeSource sets the "change_source" field.
func (u *OrderStatusHistoryUpsert) SetChangeSource(v string) *OrderStatusHistoryUpsert {
	u.Set(orderstatushistory.FieldChangeSource, v)
	return u
}

// UpdateChangeSource sets the "change_source" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsert) UpdateChangeSource() *OrderStatusHistoryUpsert {
	u.SetExcluded(orderstatushistory.FieldChangeSource)
	return u
}

// ClearChangeSource clears the value of the "change_source" field.
func (u *OrderStatusHistoryUpsert) ClearChangeSource() *OrderStatusHistoryUpsert {
	u.SetNull(orderstatushistory.FieldChangeSource)
	return u
}

// SetChangeReason sets the "change_reason" field.
func (u *OrderStatusHistoryUpsert) SetChangeReason(v string) *OrderStatusHistoryUpsert {
	u.Set(orderstatushistory.FieldChangeReason, v)
	return u
}

// UpdateChangeReason sets the "change_reason" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsert) UpdateChangeReason() *OrderStatusHistoryUpsert {
	u.SetExcluded(orderstatushistory.FieldChangeReason)
	return u
}

// ClearChangeReason clears the value of the "change_reason" field.
func (u *OrderStatusHistoryUpsert) ClearChangeReason() *OrderStatusHistoryUpsert {
	u.SetNull(orderstatushistory.FieldChangeReason)
	return u
}

// SetChangeAt sets the "change_at" field.
func (u *OrderStatusHistoryUpsert) SetChangeAt(v time.Time) *OrderStatusHistoryUpsert {
	u.Set(orderstatushistory.FieldChangeAt, v)
	return u
}

// UpdateChangeAt sets the "change_at" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsert) UpdateChangeAt() *OrderStatusHistoryUpsert {
	u.SetExcluded(orderstatushistory.FieldChangeAt)
	return u
}

// ClearChangeAt clears the value of the "change_at" field.
func (u *OrderStatusHistoryUpsert) ClearChangeAt() *OrderStatusHistoryUpsert {
	u.SetNull(orderstatushistory.FieldChangeAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderStatusHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderstatushistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderStatusHistoryUpsertOne) UpdateNewValues() *OrderStatusHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orderstatushistory.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(orderstatushistory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderStatusHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderStatusHistoryUpsertOne) Ignore() *OrderStatusHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderStatusHistoryUpsertOne) DoNothing() *OrderStatusHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderStatusHistoryCreate.OnConflict
// documentation for more info.
func (u *OrderStatusHistoryUpsertOne) Update(set func(*OrderStatusHistoryUpsert)) *OrderStatusHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderStatusHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderStatusHistoryUpsertOne) SetUpdatedAt(v time.Time) *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsertOne) UpdateUpdatedAt() *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderStatusHistoryUpsertOne) ClearUpdatedAt() *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDelete sets the "delete" field.
func (u *OrderStatusHistoryUpsertOne) SetDelete(v int64) *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.SetDelete(v)
	})
}

// AddDelete adds v to the "delete" field.
func (u *OrderStatusHistoryUpsertOne) AddDelete(v int64) *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.AddDelete(v)
	})
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsertOne) UpdateDelete() *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.UpdateDelete()
	})
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderStatusHistoryUpsertOne) ClearDelete() *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.ClearDelete()
	})
}

// SetCreatedID sets the "created_id" field.
func (u *OrderStatusHistoryUpsertOne) SetCreatedID(v int64) *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.SetCreatedID(v)
	})
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderStatusHistoryUpsertOne) AddCreatedID(v int64) *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.AddCreatedID(v)
	})
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsertOne) UpdateCreatedID() *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.UpdateCreatedID()
	})
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderStatusHistoryUpsertOne) ClearCreatedID() *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.ClearCreatedID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderStatusHistoryUpsertOne) SetOrderID(v int64) *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsertOne) UpdateOrderID() *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderStatusHistoryUpsertOne) ClearOrderID() *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.ClearOrderID()
	})
}

// SetOldStatus sets the "old_status" field.
func (u *OrderStatusHistoryUpsertOne) SetOldStatus(v int64) *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.SetOldStatus(v)
	})
}

// AddOldStatus adds v to the "old_status" field.
func (u *OrderStatusHistoryUpsertOne) AddOldStatus(v int64) *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.AddOldStatus(v)
	})
}

// UpdateOldStatus sets the "old_status" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsertOne) UpdateOldStatus() *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.UpdateOldStatus()
	})
}

// ClearOldStatus clears the value of the "old_status" field.
func (u *OrderStatusHistoryUpsertOne) ClearOldStatus() *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.ClearOldStatus()
	})
}

// SetNewStatus sets the "new_status" field.
func (u *OrderStatusHistoryUpsertOne) SetNewStatus(v int64) *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.SetNewStatus(v)
	})
}

// AddNewStatus adds v to the "new_status" field.
func (u *OrderStatusHistoryUpsertOne) AddNewStatus(v int64) *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.AddNewStatus(v)
	})
}

// UpdateNewStatus sets the "new_status" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsertOne) UpdateNewStatus() *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.UpdateNewStatus()
	})
}

// ClearNewStatus clears the value of the "new_status" field.
func (u *OrderStatusHistoryUpsertOne) ClearNewStatus() *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.ClearNewStatus()
	})
}

// SetChangeSource sets the "change_source" field.
func (u *OrderStatusHistoryUpsertOne) SetChangeSource(v string) *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.SetChangeSource(v)
	})
}

// UpdateChangeSource sets the "change_source" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsertOne) UpdateChangeSource() *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.UpdateChangeSource()
	})
}

// ClearChangeSource clears the value of the "change_source" field.
func (u *OrderStatusHistoryUpsertOne) ClearChangeSource() *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.ClearChangeSource()
	})
}

// SetChangeReason sets the "change_reason" field.
func (u *OrderStatusHistoryUpsertOne) SetChangeReason(v string) *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.SetChangeReason(v)
	})
}

// UpdateChangeReason sets the "change_reason" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsertOne) UpdateChangeReason() *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.UpdateChangeReason()
	})
}

// ClearChangeReason clears the value of the "change_reason" field.
func (u *OrderStatusHistoryUpsertOne) ClearChangeReason() *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.ClearChangeReason()
	})
}

// SetChangeAt sets the "change_at" field.
func (u *OrderStatusHistoryUpsertOne) SetChangeAt(v time.Time) *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.SetChangeAt(v)
	})
}

// UpdateChangeAt sets the "change_at" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsertOne) UpdateChangeAt() *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.UpdateChangeAt()
	})
}

// ClearChangeAt clears the value of the "change_at" field.
func (u *OrderStatusHistoryUpsertOne) ClearChangeAt() *OrderStatusHistoryUpsertOne {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.ClearChangeAt()
	})
}

// Exec executes the query.
func (u *OrderStatusHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderStatusHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderStatusHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderStatusHistoryUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderStatusHistoryUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderStatusHistoryCreateBulk is the builder for creating many OrderStatusHistory entities in bulk.
type OrderStatusHistoryCreateBulk struct {
	config
	err      error
	builders []*OrderStatusHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderStatusHistory entities in the database.
func (_c *OrderStatusHistoryCreateBulk) Save(ctx context.Context) ([]*OrderStatusHistory, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*OrderStatusHistory, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderStatusHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OrderStatusHistoryCreateBulk) SaveX(ctx context.Context) []*OrderStatusHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrderStatusHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrderStatusHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderStatusHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderStatusHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *OrderStatusHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderStatusHistoryUpsertBulk {
	_c.conflict = opts
	return &OrderStatusHistoryUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderStatusHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *OrderStatusHistoryCreateBulk) OnConflictColumns(columns ...string) *OrderStatusHistoryUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &OrderStatusHistoryUpsertBulk{
		create: _c,
	}
}

// OrderStatusHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderStatusHistory nodes.
type OrderStatusHistoryUpsertBulk struct {
	create *OrderStatusHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderStatusHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderstatushistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderStatusHistoryUpsertBulk) UpdateNewValues() *OrderStatusHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orderstatushistory.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(orderstatushistory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderStatusHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderStatusHistoryUpsertBulk) Ignore() *OrderStatusHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderStatusHistoryUpsertBulk) DoNothing() *OrderStatusHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderStatusHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *OrderStatusHistoryUpsertBulk) Update(set func(*OrderStatusHistoryUpsert)) *OrderStatusHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderStatusHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderStatusHistoryUpsertBulk) SetUpdatedAt(v time.Time) *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsertBulk) UpdateUpdatedAt() *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderStatusHistoryUpsertBulk) ClearUpdatedAt() *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDelete sets the "delete" field.
func (u *OrderStatusHistoryUpsertBulk) SetDelete(v int64) *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.SetDelete(v)
	})
}

// AddDelete adds v to the "delete" field.
func (u *OrderStatusHistoryUpsertBulk) AddDelete(v int64) *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.AddDelete(v)
	})
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsertBulk) UpdateDelete() *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.UpdateDelete()
	})
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderStatusHistoryUpsertBulk) ClearDelete() *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.ClearDelete()
	})
}

// SetCreatedID sets the "created_id" field.
func (u *OrderStatusHistoryUpsertBulk) SetCreatedID(v int64) *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.SetCreatedID(v)
	})
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderStatusHistoryUpsertBulk) AddCreatedID(v int64) *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.AddCreatedID(v)
	})
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsertBulk) UpdateCreatedID() *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.UpdateCreatedID()
	})
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderStatusHistoryUpsertBulk) ClearCreatedID() *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.ClearCreatedID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderStatusHistoryUpsertBulk) SetOrderID(v int64) *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsertBulk) UpdateOrderID() *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderStatusHistoryUpsertBulk) ClearOrderID() *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.ClearOrderID()
	})
}

// SetOldStatus sets the "old_status" field.
func (u *OrderStatusHistoryUpsertBulk) SetOldStatus(v int64) *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.SetOldStatus(v)
	})
}

// AddOldStatus adds v to the "old_status" field.
func (u *OrderStatusHistoryUpsertBulk) AddOldStatus(v int64) *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.AddOldStatus(v)
	})
}

// UpdateOldStatus sets the "old_status" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsertBulk) UpdateOldStatus() *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.UpdateOldStatus()
	})
}

// ClearOldStatus clears the value of the "old_status" field.
func (u *OrderStatusHistoryUpsertBulk) ClearOldStatus() *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.ClearOldStatus()
	})
}

// SetNewStatus sets the "new_status" field.
func (u *OrderStatusHistoryUpsertBulk) SetNewStatus(v int64) *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.SetNewStatus(v)
	})
}

// AddNewStatus adds v to the "new_status" field.
func (u *OrderStatusHistoryUpsertBulk) AddNewStatus(v int64) *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.AddNewStatus(v)
	})
}

// UpdateNewStatus sets the "new_status" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsertBulk) UpdateNewStatus() *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.UpdateNewStatus()
	})
}

// ClearNewStatus clears the value of the "new_status" field.
func (u *OrderStatusHistoryUpsertBulk) ClearNewStatus() *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.ClearNewStatus()
	})
}

// SetChangeSource sets the "change_source" field.
func (u *OrderStatusHistoryUpsertBulk) SetChangeSource(v string) *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.SetChangeSource(v)
	})
}

// UpdateChangeSource sets the "change_source" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsertBulk) UpdateChangeSource() *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.UpdateChangeSource()
	})
}

// ClearChangeSource clears the value of the "change_source" field.
func (u *OrderStatusHistoryUpsertBulk) ClearChangeSource() *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.ClearChangeSource()
	})
}

// SetChangeReason sets the "change_reason" field.
func (u *OrderStatusHistoryUpsertBulk) SetChangeReason(v string) *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.SetChangeReason(v)
	})
}

// UpdateChangeReason sets the "change_reason" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsertBulk) UpdateChangeReason() *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.UpdateChangeReason()
	})
}

// ClearChangeReason clears the value of the "change_reason" field.
func (u *OrderStatusHistoryUpsertBulk) ClearChangeReason() *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.ClearChangeReason()
	})
}

// SetChangeAt sets the "change_at" field.
func (u *OrderStatusHistoryUpsertBulk) SetChangeAt(v time.Time) *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.SetChangeAt(v)
	})
}

// UpdateChangeAt sets the "change_at" field to the value that was provided on create.
func (u *OrderStatusHistoryUpsertBulk) UpdateChangeAt() *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.UpdateChangeAt()
	})
}

// ClearChangeAt clears the value of the "change_at" field.
func (u *OrderStatusHistoryUpsertBulk) ClearChangeAt() *OrderStatusHistoryUpsertBulk {
	return u.Update(func(s *OrderStatusHistoryUpsert) {
		s.ClearChangeAt()
	})
}

// Exec executes the query.
func (u *OrderStatusHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderStatusHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderStatusHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderStatusHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
