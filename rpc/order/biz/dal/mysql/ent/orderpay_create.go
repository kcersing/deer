// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"deer/rpc/order/biz/dal/mysql/ent/order"
	"deer/rpc/order/biz/dal/mysql/ent/orderpay"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderPayCreate is the builder for creating a OrderPay entity.
type OrderPayCreate struct {
	config
	mutation *OrderPayMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *OrderPayCreate) SetCreatedAt(v time.Time) *OrderPayCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *OrderPayCreate) SetNillableCreatedAt(v *time.Time) *OrderPayCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *OrderPayCreate) SetUpdatedAt(v time.Time) *OrderPayCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *OrderPayCreate) SetNillableUpdatedAt(v *time.Time) *OrderPayCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDelete sets the "delete" field.
func (_c *OrderPayCreate) SetDelete(v int64) *OrderPayCreate {
	_c.mutation.SetDelete(v)
	return _c
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_c *OrderPayCreate) SetNillableDelete(v *int64) *OrderPayCreate {
	if v != nil {
		_c.SetDelete(*v)
	}
	return _c
}

// SetCreatedID sets the "created_id" field.
func (_c *OrderPayCreate) SetCreatedID(v int64) *OrderPayCreate {
	_c.mutation.SetCreatedID(v)
	return _c
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_c *OrderPayCreate) SetNillableCreatedID(v *int64) *OrderPayCreate {
	if v != nil {
		_c.SetCreatedID(*v)
	}
	return _c
}

// SetOrderID sets the "order_id" field.
func (_c *OrderPayCreate) SetOrderID(v int64) *OrderPayCreate {
	_c.mutation.SetOrderID(v)
	return _c
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (_c *OrderPayCreate) SetNillableOrderID(v *int64) *OrderPayCreate {
	if v != nil {
		_c.SetOrderID(*v)
	}
	return _c
}

// SetRemission sets the "remission" field.
func (_c *OrderPayCreate) SetRemission(v float64) *OrderPayCreate {
	_c.mutation.SetRemission(v)
	return _c
}

// SetNillableRemission sets the "remission" field if the given value is not nil.
func (_c *OrderPayCreate) SetNillableRemission(v *float64) *OrderPayCreate {
	if v != nil {
		_c.SetRemission(*v)
	}
	return _c
}

// SetPay sets the "pay" field.
func (_c *OrderPayCreate) SetPay(v float64) *OrderPayCreate {
	_c.mutation.SetPay(v)
	return _c
}

// SetNillablePay sets the "pay" field if the given value is not nil.
func (_c *OrderPayCreate) SetNillablePay(v *float64) *OrderPayCreate {
	if v != nil {
		_c.SetPay(*v)
	}
	return _c
}

// SetNote sets the "note" field.
func (_c *OrderPayCreate) SetNote(v string) *OrderPayCreate {
	_c.mutation.SetNote(v)
	return _c
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (_c *OrderPayCreate) SetNillableNote(v *string) *OrderPayCreate {
	if v != nil {
		_c.SetNote(*v)
	}
	return _c
}

// SetPayAt sets the "pay_at" field.
func (_c *OrderPayCreate) SetPayAt(v time.Time) *OrderPayCreate {
	_c.mutation.SetPayAt(v)
	return _c
}

// SetNillablePayAt sets the "pay_at" field if the given value is not nil.
func (_c *OrderPayCreate) SetNillablePayAt(v *time.Time) *OrderPayCreate {
	if v != nil {
		_c.SetPayAt(*v)
	}
	return _c
}

// SetPayWay sets the "pay_way" field.
func (_c *OrderPayCreate) SetPayWay(v string) *OrderPayCreate {
	_c.mutation.SetPayWay(v)
	return _c
}

// SetNillablePayWay sets the "pay_way" field if the given value is not nil.
func (_c *OrderPayCreate) SetNillablePayWay(v *string) *OrderPayCreate {
	if v != nil {
		_c.SetPayWay(*v)
	}
	return _c
}

// SetPaySn sets the "pay_sn" field.
func (_c *OrderPayCreate) SetPaySn(v string) *OrderPayCreate {
	_c.mutation.SetPaySn(v)
	return _c
}

// SetNillablePaySn sets the "pay_sn" field if the given value is not nil.
func (_c *OrderPayCreate) SetNillablePaySn(v *string) *OrderPayCreate {
	if v != nil {
		_c.SetPaySn(*v)
	}
	return _c
}

// SetPrepayID sets the "prepay_id" field.
func (_c *OrderPayCreate) SetPrepayID(v string) *OrderPayCreate {
	_c.mutation.SetPrepayID(v)
	return _c
}

// SetNillablePrepayID sets the "prepay_id" field if the given value is not nil.
func (_c *OrderPayCreate) SetNillablePrepayID(v *string) *OrderPayCreate {
	if v != nil {
		_c.SetPrepayID(*v)
	}
	return _c
}

// SetPayExtra sets the "pay_extra" field.
func (_c *OrderPayCreate) SetPayExtra(v []uint8) *OrderPayCreate {
	_c.mutation.SetPayExtra(v)
	return _c
}

// SetID sets the "id" field.
func (_c *OrderPayCreate) SetID(v int64) *OrderPayCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetOrder sets the "order" edge to the Order entity.
func (_c *OrderPayCreate) SetOrder(v *Order) *OrderPayCreate {
	return _c.SetOrderID(v.ID)
}

// Mutation returns the OrderPayMutation object of the builder.
func (_c *OrderPayCreate) Mutation() *OrderPayMutation {
	return _c.mutation
}

// Save creates the OrderPay in the database.
func (_c *OrderPayCreate) Save(ctx context.Context) (*OrderPay, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OrderPayCreate) SaveX(ctx context.Context) *OrderPay {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrderPayCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrderPayCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OrderPayCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := orderpay.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := orderpay.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Delete(); !ok {
		v := orderpay.DefaultDelete
		_c.mutation.SetDelete(v)
	}
	if _, ok := _c.mutation.CreatedID(); !ok {
		v := orderpay.DefaultCreatedID
		_c.mutation.SetCreatedID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *OrderPayCreate) check() error {
	return nil
}

func (_c *OrderPayCreate) sqlSave(ctx context.Context) (*OrderPay, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OrderPayCreate) createSpec() (*OrderPay, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderPay{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(orderpay.Table, sqlgraph.NewFieldSpec(orderpay.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(orderpay.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(orderpay.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Delete(); ok {
		_spec.SetField(orderpay.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := _c.mutation.CreatedID(); ok {
		_spec.SetField(orderpay.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := _c.mutation.Remission(); ok {
		_spec.SetField(orderpay.FieldRemission, field.TypeFloat64, value)
		_node.Remission = value
	}
	if value, ok := _c.mutation.Pay(); ok {
		_spec.SetField(orderpay.FieldPay, field.TypeFloat64, value)
		_node.Pay = value
	}
	if value, ok := _c.mutation.Note(); ok {
		_spec.SetField(orderpay.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if value, ok := _c.mutation.PayAt(); ok {
		_spec.SetField(orderpay.FieldPayAt, field.TypeTime, value)
		_node.PayAt = value
	}
	if value, ok := _c.mutation.PayWay(); ok {
		_spec.SetField(orderpay.FieldPayWay, field.TypeString, value)
		_node.PayWay = value
	}
	if value, ok := _c.mutation.PaySn(); ok {
		_spec.SetField(orderpay.FieldPaySn, field.TypeString, value)
		_node.PaySn = value
	}
	if value, ok := _c.mutation.PrepayID(); ok {
		_spec.SetField(orderpay.FieldPrepayID, field.TypeString, value)
		_node.PrepayID = value
	}
	if value, ok := _c.mutation.PayExtra(); ok {
		_spec.SetField(orderpay.FieldPayExtra, field.TypeJSON, value)
		_node.PayExtra = value
	}
	if nodes := _c.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpay.OrderTable,
			Columns: []string{orderpay.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderPay.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderPayUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *OrderPayCreate) OnConflict(opts ...sql.ConflictOption) *OrderPayUpsertOne {
	_c.conflict = opts
	return &OrderPayUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderPay.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *OrderPayCreate) OnConflictColumns(columns ...string) *OrderPayUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &OrderPayUpsertOne{
		create: _c,
	}
}

type (
	// OrderPayUpsertOne is the builder for "upsert"-ing
	//  one OrderPay node.
	OrderPayUpsertOne struct {
		create *OrderPayCreate
	}

	// OrderPayUpsert is the "OnConflict" setter.
	OrderPayUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderPayUpsert) SetUpdatedAt(v time.Time) *OrderPayUpsert {
	u.Set(orderpay.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderPayUpsert) UpdateUpdatedAt() *OrderPayUpsert {
	u.SetExcluded(orderpay.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderPayUpsert) ClearUpdatedAt() *OrderPayUpsert {
	u.SetNull(orderpay.FieldUpdatedAt)
	return u
}

// SetDelete sets the "delete" field.
func (u *OrderPayUpsert) SetDelete(v int64) *OrderPayUpsert {
	u.Set(orderpay.FieldDelete, v)
	return u
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderPayUpsert) UpdateDelete() *OrderPayUpsert {
	u.SetExcluded(orderpay.FieldDelete)
	return u
}

// AddDelete adds v to the "delete" field.
func (u *OrderPayUpsert) AddDelete(v int64) *OrderPayUpsert {
	u.Add(orderpay.FieldDelete, v)
	return u
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderPayUpsert) ClearDelete() *OrderPayUpsert {
	u.SetNull(orderpay.FieldDelete)
	return u
}

// SetCreatedID sets the "created_id" field.
func (u *OrderPayUpsert) SetCreatedID(v int64) *OrderPayUpsert {
	u.Set(orderpay.FieldCreatedID, v)
	return u
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderPayUpsert) UpdateCreatedID() *OrderPayUpsert {
	u.SetExcluded(orderpay.FieldCreatedID)
	return u
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderPayUpsert) AddCreatedID(v int64) *OrderPayUpsert {
	u.Add(orderpay.FieldCreatedID, v)
	return u
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderPayUpsert) ClearCreatedID() *OrderPayUpsert {
	u.SetNull(orderpay.FieldCreatedID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *OrderPayUpsert) SetOrderID(v int64) *OrderPayUpsert {
	u.Set(orderpay.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderPayUpsert) UpdateOrderID() *OrderPayUpsert {
	u.SetExcluded(orderpay.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderPayUpsert) ClearOrderID() *OrderPayUpsert {
	u.SetNull(orderpay.FieldOrderID)
	return u
}

// SetRemission sets the "remission" field.
func (u *OrderPayUpsert) SetRemission(v float64) *OrderPayUpsert {
	u.Set(orderpay.FieldRemission, v)
	return u
}

// UpdateRemission sets the "remission" field to the value that was provided on create.
func (u *OrderPayUpsert) UpdateRemission() *OrderPayUpsert {
	u.SetExcluded(orderpay.FieldRemission)
	return u
}

// AddRemission adds v to the "remission" field.
func (u *OrderPayUpsert) AddRemission(v float64) *OrderPayUpsert {
	u.Add(orderpay.FieldRemission, v)
	return u
}

// ClearRemission clears the value of the "remission" field.
func (u *OrderPayUpsert) ClearRemission() *OrderPayUpsert {
	u.SetNull(orderpay.FieldRemission)
	return u
}

// SetPay sets the "pay" field.
func (u *OrderPayUpsert) SetPay(v float64) *OrderPayUpsert {
	u.Set(orderpay.FieldPay, v)
	return u
}

// UpdatePay sets the "pay" field to the value that was provided on create.
func (u *OrderPayUpsert) UpdatePay() *OrderPayUpsert {
	u.SetExcluded(orderpay.FieldPay)
	return u
}

// AddPay adds v to the "pay" field.
func (u *OrderPayUpsert) AddPay(v float64) *OrderPayUpsert {
	u.Add(orderpay.FieldPay, v)
	return u
}

// ClearPay clears the value of the "pay" field.
func (u *OrderPayUpsert) ClearPay() *OrderPayUpsert {
	u.SetNull(orderpay.FieldPay)
	return u
}

// SetNote sets the "note" field.
func (u *OrderPayUpsert) SetNote(v string) *OrderPayUpsert {
	u.Set(orderpay.FieldNote, v)
	return u
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *OrderPayUpsert) UpdateNote() *OrderPayUpsert {
	u.SetExcluded(orderpay.FieldNote)
	return u
}

// ClearNote clears the value of the "note" field.
func (u *OrderPayUpsert) ClearNote() *OrderPayUpsert {
	u.SetNull(orderpay.FieldNote)
	return u
}

// SetPayAt sets the "pay_at" field.
func (u *OrderPayUpsert) SetPayAt(v time.Time) *OrderPayUpsert {
	u.Set(orderpay.FieldPayAt, v)
	return u
}

// UpdatePayAt sets the "pay_at" field to the value that was provided on create.
func (u *OrderPayUpsert) UpdatePayAt() *OrderPayUpsert {
	u.SetExcluded(orderpay.FieldPayAt)
	return u
}

// ClearPayAt clears the value of the "pay_at" field.
func (u *OrderPayUpsert) ClearPayAt() *OrderPayUpsert {
	u.SetNull(orderpay.FieldPayAt)
	return u
}

// SetPayWay sets the "pay_way" field.
func (u *OrderPayUpsert) SetPayWay(v string) *OrderPayUpsert {
	u.Set(orderpay.FieldPayWay, v)
	return u
}

// UpdatePayWay sets the "pay_way" field to the value that was provided on create.
func (u *OrderPayUpsert) UpdatePayWay() *OrderPayUpsert {
	u.SetExcluded(orderpay.FieldPayWay)
	return u
}

// ClearPayWay clears the value of the "pay_way" field.
func (u *OrderPayUpsert) ClearPayWay() *OrderPayUpsert {
	u.SetNull(orderpay.FieldPayWay)
	return u
}

// SetPaySn sets the "pay_sn" field.
func (u *OrderPayUpsert) SetPaySn(v string) *OrderPayUpsert {
	u.Set(orderpay.FieldPaySn, v)
	return u
}

// UpdatePaySn sets the "pay_sn" field to the value that was provided on create.
func (u *OrderPayUpsert) UpdatePaySn() *OrderPayUpsert {
	u.SetExcluded(orderpay.FieldPaySn)
	return u
}

// ClearPaySn clears the value of the "pay_sn" field.
func (u *OrderPayUpsert) ClearPaySn() *OrderPayUpsert {
	u.SetNull(orderpay.FieldPaySn)
	return u
}

// SetPrepayID sets the "prepay_id" field.
func (u *OrderPayUpsert) SetPrepayID(v string) *OrderPayUpsert {
	u.Set(orderpay.FieldPrepayID, v)
	return u
}

// UpdatePrepayID sets the "prepay_id" field to the value that was provided on create.
func (u *OrderPayUpsert) UpdatePrepayID() *OrderPayUpsert {
	u.SetExcluded(orderpay.FieldPrepayID)
	return u
}

// ClearPrepayID clears the value of the "prepay_id" field.
func (u *OrderPayUpsert) ClearPrepayID() *OrderPayUpsert {
	u.SetNull(orderpay.FieldPrepayID)
	return u
}

// SetPayExtra sets the "pay_extra" field.
func (u *OrderPayUpsert) SetPayExtra(v []uint8) *OrderPayUpsert {
	u.Set(orderpay.FieldPayExtra, v)
	return u
}

// UpdatePayExtra sets the "pay_extra" field to the value that was provided on create.
func (u *OrderPayUpsert) UpdatePayExtra() *OrderPayUpsert {
	u.SetExcluded(orderpay.FieldPayExtra)
	return u
}

// ClearPayExtra clears the value of the "pay_extra" field.
func (u *OrderPayUpsert) ClearPayExtra() *OrderPayUpsert {
	u.SetNull(orderpay.FieldPayExtra)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderPay.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderpay.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderPayUpsertOne) UpdateNewValues() *OrderPayUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orderpay.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(orderpay.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderPay.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderPayUpsertOne) Ignore() *OrderPayUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderPayUpsertOne) DoNothing() *OrderPayUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderPayCreate.OnConflict
// documentation for more info.
func (u *OrderPayUpsertOne) Update(set func(*OrderPayUpsert)) *OrderPayUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderPayUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderPayUpsertOne) SetUpdatedAt(v time.Time) *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderPayUpsertOne) UpdateUpdatedAt() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderPayUpsertOne) ClearUpdatedAt() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDelete sets the "delete" field.
func (u *OrderPayUpsertOne) SetDelete(v int64) *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetDelete(v)
	})
}

// AddDelete adds v to the "delete" field.
func (u *OrderPayUpsertOne) AddDelete(v int64) *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.AddDelete(v)
	})
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderPayUpsertOne) UpdateDelete() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdateDelete()
	})
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderPayUpsertOne) ClearDelete() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearDelete()
	})
}

// SetCreatedID sets the "created_id" field.
func (u *OrderPayUpsertOne) SetCreatedID(v int64) *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetCreatedID(v)
	})
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderPayUpsertOne) AddCreatedID(v int64) *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.AddCreatedID(v)
	})
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderPayUpsertOne) UpdateCreatedID() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdateCreatedID()
	})
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderPayUpsertOne) ClearCreatedID() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearCreatedID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderPayUpsertOne) SetOrderID(v int64) *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderPayUpsertOne) UpdateOrderID() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderPayUpsertOne) ClearOrderID() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearOrderID()
	})
}

// SetRemission sets the "remission" field.
func (u *OrderPayUpsertOne) SetRemission(v float64) *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetRemission(v)
	})
}

// AddRemission adds v to the "remission" field.
func (u *OrderPayUpsertOne) AddRemission(v float64) *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.AddRemission(v)
	})
}

// UpdateRemission sets the "remission" field to the value that was provided on create.
func (u *OrderPayUpsertOne) UpdateRemission() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdateRemission()
	})
}

// ClearRemission clears the value of the "remission" field.
func (u *OrderPayUpsertOne) ClearRemission() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearRemission()
	})
}

// SetPay sets the "pay" field.
func (u *OrderPayUpsertOne) SetPay(v float64) *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetPay(v)
	})
}

// AddPay adds v to the "pay" field.
func (u *OrderPayUpsertOne) AddPay(v float64) *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.AddPay(v)
	})
}

// UpdatePay sets the "pay" field to the value that was provided on create.
func (u *OrderPayUpsertOne) UpdatePay() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdatePay()
	})
}

// ClearPay clears the value of the "pay" field.
func (u *OrderPayUpsertOne) ClearPay() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearPay()
	})
}

// SetNote sets the "note" field.
func (u *OrderPayUpsertOne) SetNote(v string) *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *OrderPayUpsertOne) UpdateNote() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdateNote()
	})
}

// ClearNote clears the value of the "note" field.
func (u *OrderPayUpsertOne) ClearNote() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearNote()
	})
}

// SetPayAt sets the "pay_at" field.
func (u *OrderPayUpsertOne) SetPayAt(v time.Time) *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetPayAt(v)
	})
}

// UpdatePayAt sets the "pay_at" field to the value that was provided on create.
func (u *OrderPayUpsertOne) UpdatePayAt() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdatePayAt()
	})
}

// ClearPayAt clears the value of the "pay_at" field.
func (u *OrderPayUpsertOne) ClearPayAt() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearPayAt()
	})
}

// SetPayWay sets the "pay_way" field.
func (u *OrderPayUpsertOne) SetPayWay(v string) *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetPayWay(v)
	})
}

// UpdatePayWay sets the "pay_way" field to the value that was provided on create.
func (u *OrderPayUpsertOne) UpdatePayWay() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdatePayWay()
	})
}

// ClearPayWay clears the value of the "pay_way" field.
func (u *OrderPayUpsertOne) ClearPayWay() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearPayWay()
	})
}

// SetPaySn sets the "pay_sn" field.
func (u *OrderPayUpsertOne) SetPaySn(v string) *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetPaySn(v)
	})
}

// UpdatePaySn sets the "pay_sn" field to the value that was provided on create.
func (u *OrderPayUpsertOne) UpdatePaySn() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdatePaySn()
	})
}

// ClearPaySn clears the value of the "pay_sn" field.
func (u *OrderPayUpsertOne) ClearPaySn() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearPaySn()
	})
}

// SetPrepayID sets the "prepay_id" field.
func (u *OrderPayUpsertOne) SetPrepayID(v string) *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetPrepayID(v)
	})
}

// UpdatePrepayID sets the "prepay_id" field to the value that was provided on create.
func (u *OrderPayUpsertOne) UpdatePrepayID() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdatePrepayID()
	})
}

// ClearPrepayID clears the value of the "prepay_id" field.
func (u *OrderPayUpsertOne) ClearPrepayID() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearPrepayID()
	})
}

// SetPayExtra sets the "pay_extra" field.
func (u *OrderPayUpsertOne) SetPayExtra(v []uint8) *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetPayExtra(v)
	})
}

// UpdatePayExtra sets the "pay_extra" field to the value that was provided on create.
func (u *OrderPayUpsertOne) UpdatePayExtra() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdatePayExtra()
	})
}

// ClearPayExtra clears the value of the "pay_extra" field.
func (u *OrderPayUpsertOne) ClearPayExtra() *OrderPayUpsertOne {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearPayExtra()
	})
}

// Exec executes the query.
func (u *OrderPayUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderPayCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderPayUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderPayUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderPayUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderPayCreateBulk is the builder for creating many OrderPay entities in bulk.
type OrderPayCreateBulk struct {
	config
	err      error
	builders []*OrderPayCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderPay entities in the database.
func (_c *OrderPayCreateBulk) Save(ctx context.Context) ([]*OrderPay, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*OrderPay, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderPayMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OrderPayCreateBulk) SaveX(ctx context.Context) []*OrderPay {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrderPayCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrderPayCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderPay.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderPayUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *OrderPayCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderPayUpsertBulk {
	_c.conflict = opts
	return &OrderPayUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderPay.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *OrderPayCreateBulk) OnConflictColumns(columns ...string) *OrderPayUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &OrderPayUpsertBulk{
		create: _c,
	}
}

// OrderPayUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderPay nodes.
type OrderPayUpsertBulk struct {
	create *OrderPayCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderPay.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderpay.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderPayUpsertBulk) UpdateNewValues() *OrderPayUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orderpay.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(orderpay.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderPay.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderPayUpsertBulk) Ignore() *OrderPayUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderPayUpsertBulk) DoNothing() *OrderPayUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderPayCreateBulk.OnConflict
// documentation for more info.
func (u *OrderPayUpsertBulk) Update(set func(*OrderPayUpsert)) *OrderPayUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderPayUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderPayUpsertBulk) SetUpdatedAt(v time.Time) *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderPayUpsertBulk) UpdateUpdatedAt() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderPayUpsertBulk) ClearUpdatedAt() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDelete sets the "delete" field.
func (u *OrderPayUpsertBulk) SetDelete(v int64) *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetDelete(v)
	})
}

// AddDelete adds v to the "delete" field.
func (u *OrderPayUpsertBulk) AddDelete(v int64) *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.AddDelete(v)
	})
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderPayUpsertBulk) UpdateDelete() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdateDelete()
	})
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderPayUpsertBulk) ClearDelete() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearDelete()
	})
}

// SetCreatedID sets the "created_id" field.
func (u *OrderPayUpsertBulk) SetCreatedID(v int64) *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetCreatedID(v)
	})
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderPayUpsertBulk) AddCreatedID(v int64) *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.AddCreatedID(v)
	})
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderPayUpsertBulk) UpdateCreatedID() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdateCreatedID()
	})
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderPayUpsertBulk) ClearCreatedID() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearCreatedID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderPayUpsertBulk) SetOrderID(v int64) *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderPayUpsertBulk) UpdateOrderID() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderPayUpsertBulk) ClearOrderID() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearOrderID()
	})
}

// SetRemission sets the "remission" field.
func (u *OrderPayUpsertBulk) SetRemission(v float64) *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetRemission(v)
	})
}

// AddRemission adds v to the "remission" field.
func (u *OrderPayUpsertBulk) AddRemission(v float64) *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.AddRemission(v)
	})
}

// UpdateRemission sets the "remission" field to the value that was provided on create.
func (u *OrderPayUpsertBulk) UpdateRemission() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdateRemission()
	})
}

// ClearRemission clears the value of the "remission" field.
func (u *OrderPayUpsertBulk) ClearRemission() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearRemission()
	})
}

// SetPay sets the "pay" field.
func (u *OrderPayUpsertBulk) SetPay(v float64) *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetPay(v)
	})
}

// AddPay adds v to the "pay" field.
func (u *OrderPayUpsertBulk) AddPay(v float64) *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.AddPay(v)
	})
}

// UpdatePay sets the "pay" field to the value that was provided on create.
func (u *OrderPayUpsertBulk) UpdatePay() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdatePay()
	})
}

// ClearPay clears the value of the "pay" field.
func (u *OrderPayUpsertBulk) ClearPay() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearPay()
	})
}

// SetNote sets the "note" field.
func (u *OrderPayUpsertBulk) SetNote(v string) *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *OrderPayUpsertBulk) UpdateNote() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdateNote()
	})
}

// ClearNote clears the value of the "note" field.
func (u *OrderPayUpsertBulk) ClearNote() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearNote()
	})
}

// SetPayAt sets the "pay_at" field.
func (u *OrderPayUpsertBulk) SetPayAt(v time.Time) *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetPayAt(v)
	})
}

// UpdatePayAt sets the "pay_at" field to the value that was provided on create.
func (u *OrderPayUpsertBulk) UpdatePayAt() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdatePayAt()
	})
}

// ClearPayAt clears the value of the "pay_at" field.
func (u *OrderPayUpsertBulk) ClearPayAt() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearPayAt()
	})
}

// SetPayWay sets the "pay_way" field.
func (u *OrderPayUpsertBulk) SetPayWay(v string) *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetPayWay(v)
	})
}

// UpdatePayWay sets the "pay_way" field to the value that was provided on create.
func (u *OrderPayUpsertBulk) UpdatePayWay() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdatePayWay()
	})
}

// ClearPayWay clears the value of the "pay_way" field.
func (u *OrderPayUpsertBulk) ClearPayWay() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearPayWay()
	})
}

// SetPaySn sets the "pay_sn" field.
func (u *OrderPayUpsertBulk) SetPaySn(v string) *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetPaySn(v)
	})
}

// UpdatePaySn sets the "pay_sn" field to the value that was provided on create.
func (u *OrderPayUpsertBulk) UpdatePaySn() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdatePaySn()
	})
}

// ClearPaySn clears the value of the "pay_sn" field.
func (u *OrderPayUpsertBulk) ClearPaySn() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearPaySn()
	})
}

// SetPrepayID sets the "prepay_id" field.
func (u *OrderPayUpsertBulk) SetPrepayID(v string) *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetPrepayID(v)
	})
}

// UpdatePrepayID sets the "prepay_id" field to the value that was provided on create.
func (u *OrderPayUpsertBulk) UpdatePrepayID() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdatePrepayID()
	})
}

// ClearPrepayID clears the value of the "prepay_id" field.
func (u *OrderPayUpsertBulk) ClearPrepayID() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearPrepayID()
	})
}

// SetPayExtra sets the "pay_extra" field.
func (u *OrderPayUpsertBulk) SetPayExtra(v []uint8) *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.SetPayExtra(v)
	})
}

// UpdatePayExtra sets the "pay_extra" field to the value that was provided on create.
func (u *OrderPayUpsertBulk) UpdatePayExtra() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.UpdatePayExtra()
	})
}

// ClearPayExtra clears the value of the "pay_extra" field.
func (u *OrderPayUpsertBulk) ClearPayExtra() *OrderPayUpsertBulk {
	return u.Update(func(s *OrderPayUpsert) {
		s.ClearPayExtra()
	})
}

// Exec executes the query.
func (u *OrderPayUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderPayCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderPayCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderPayUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
