// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"deer/rpc/order/biz/dal/mysql/ent/order"
	"deer/rpc/order/biz/dal/mysql/ent/orderevents"
	"deer/rpc/order/biz/dal/mysql/ent/orderitem"
	"deer/rpc/order/biz/dal/mysql/ent/orderpay"
	"deer/rpc/order/biz/dal/mysql/ent/ordersnapshots"
	"deer/rpc/order/biz/dal/mysql/ent/orderstatushistory"
	"deer/rpc/order/biz/dal/mysql/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (_u *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrderUpdate) SetUpdatedAt(v time.Time) *OrderUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrderUpdate) ClearUpdatedAt() *OrderUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *OrderUpdate) SetDelete(v int64) *OrderUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableDelete(v *int64) *OrderUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *OrderUpdate) AddDelete(v int64) *OrderUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *OrderUpdate) ClearDelete() *OrderUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *OrderUpdate) SetCreatedID(v int64) *OrderUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableCreatedID(v *int64) *OrderUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *OrderUpdate) AddCreatedID(v int64) *OrderUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *OrderUpdate) ClearCreatedID() *OrderUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetSn sets the "sn" field.
func (_u *OrderUpdate) SetSn(v string) *OrderUpdate {
	_u.mutation.SetSn(v)
	return _u
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableSn(v *string) *OrderUpdate {
	if v != nil {
		_u.SetSn(*v)
	}
	return _u
}

// SetMemberID sets the "member_id" field.
func (_u *OrderUpdate) SetMemberID(v int64) *OrderUpdate {
	_u.mutation.ResetMemberID()
	_u.mutation.SetMemberID(v)
	return _u
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableMemberID(v *int64) *OrderUpdate {
	if v != nil {
		_u.SetMemberID(*v)
	}
	return _u
}

// AddMemberID adds value to the "member_id" field.
func (_u *OrderUpdate) AddMemberID(v int64) *OrderUpdate {
	_u.mutation.AddMemberID(v)
	return _u
}

// ClearMemberID clears the value of the "member_id" field.
func (_u *OrderUpdate) ClearMemberID() *OrderUpdate {
	_u.mutation.ClearMemberID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *OrderUpdate) SetStatus(v order.Status) *OrderUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableStatus(v *order.Status) *OrderUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *OrderUpdate) ClearStatus() *OrderUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetNature sets the "nature" field.
func (_u *OrderUpdate) SetNature(v int64) *OrderUpdate {
	_u.mutation.ResetNature()
	_u.mutation.SetNature(v)
	return _u
}

// SetNillableNature sets the "nature" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableNature(v *int64) *OrderUpdate {
	if v != nil {
		_u.SetNature(*v)
	}
	return _u
}

// AddNature adds value to the "nature" field.
func (_u *OrderUpdate) AddNature(v int64) *OrderUpdate {
	_u.mutation.AddNature(v)
	return _u
}

// ClearNature clears the value of the "nature" field.
func (_u *OrderUpdate) ClearNature() *OrderUpdate {
	_u.mutation.ClearNature()
	return _u
}

// SetCompletionAt sets the "completion_at" field.
func (_u *OrderUpdate) SetCompletionAt(v time.Time) *OrderUpdate {
	_u.mutation.SetCompletionAt(v)
	return _u
}

// SetNillableCompletionAt sets the "completion_at" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableCompletionAt(v *time.Time) *OrderUpdate {
	if v != nil {
		_u.SetCompletionAt(*v)
	}
	return _u
}

// ClearCompletionAt clears the value of the "completion_at" field.
func (_u *OrderUpdate) ClearCompletionAt() *OrderUpdate {
	_u.mutation.ClearCompletionAt()
	return _u
}

// SetCloseAt sets the "close_at" field.
func (_u *OrderUpdate) SetCloseAt(v time.Time) *OrderUpdate {
	_u.mutation.SetCloseAt(v)
	return _u
}

// SetNillableCloseAt sets the "close_at" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableCloseAt(v *time.Time) *OrderUpdate {
	if v != nil {
		_u.SetCloseAt(*v)
	}
	return _u
}

// ClearCloseAt clears the value of the "close_at" field.
func (_u *OrderUpdate) ClearCloseAt() *OrderUpdate {
	_u.mutation.ClearCloseAt()
	return _u
}

// SetRefundAt sets the "refund_at" field.
func (_u *OrderUpdate) SetRefundAt(v time.Time) *OrderUpdate {
	_u.mutation.SetRefundAt(v)
	return _u
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableRefundAt(v *time.Time) *OrderUpdate {
	if v != nil {
		_u.SetRefundAt(*v)
	}
	return _u
}

// ClearRefundAt clears the value of the "refund_at" field.
func (_u *OrderUpdate) ClearRefundAt() *OrderUpdate {
	_u.mutation.ClearRefundAt()
	return _u
}

// SetVersion sets the "version" field.
func (_u *OrderUpdate) SetVersion(v int64) *OrderUpdate {
	_u.mutation.ResetVersion()
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableVersion(v *int64) *OrderUpdate {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// AddVersion adds value to the "version" field.
func (_u *OrderUpdate) AddVersion(v int64) *OrderUpdate {
	_u.mutation.AddVersion(v)
	return _u
}

// ClearVersion clears the value of the "version" field.
func (_u *OrderUpdate) ClearVersion() *OrderUpdate {
	_u.mutation.ClearVersion()
	return _u
}

// SetTotalAmount sets the "total_amount" field.
func (_u *OrderUpdate) SetTotalAmount(v float64) *OrderUpdate {
	_u.mutation.ResetTotalAmount()
	_u.mutation.SetTotalAmount(v)
	return _u
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableTotalAmount(v *float64) *OrderUpdate {
	if v != nil {
		_u.SetTotalAmount(*v)
	}
	return _u
}

// AddTotalAmount adds value to the "total_amount" field.
func (_u *OrderUpdate) AddTotalAmount(v float64) *OrderUpdate {
	_u.mutation.AddTotalAmount(v)
	return _u
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (_u *OrderUpdate) ClearTotalAmount() *OrderUpdate {
	_u.mutation.ClearTotalAmount()
	return _u
}

// SetActual sets the "actual" field.
func (_u *OrderUpdate) SetActual(v float64) *OrderUpdate {
	_u.mutation.ResetActual()
	_u.mutation.SetActual(v)
	return _u
}

// SetNillableActual sets the "actual" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableActual(v *float64) *OrderUpdate {
	if v != nil {
		_u.SetActual(*v)
	}
	return _u
}

// AddActual adds value to the "actual" field.
func (_u *OrderUpdate) AddActual(v float64) *OrderUpdate {
	_u.mutation.AddActual(v)
	return _u
}

// ClearActual clears the value of the "actual" field.
func (_u *OrderUpdate) ClearActual() *OrderUpdate {
	_u.mutation.ClearActual()
	return _u
}

// SetRemission sets the "remission" field.
func (_u *OrderUpdate) SetRemission(v float64) *OrderUpdate {
	_u.mutation.ResetRemission()
	_u.mutation.SetRemission(v)
	return _u
}

// SetNillableRemission sets the "remission" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableRemission(v *float64) *OrderUpdate {
	if v != nil {
		_u.SetRemission(*v)
	}
	return _u
}

// AddRemission adds value to the "remission" field.
func (_u *OrderUpdate) AddRemission(v float64) *OrderUpdate {
	_u.mutation.AddRemission(v)
	return _u
}

// ClearRemission clears the value of the "remission" field.
func (_u *OrderUpdate) ClearRemission() *OrderUpdate {
	_u.mutation.ClearRemission()
	return _u
}

// SetRefund sets the "refund" field.
func (_u *OrderUpdate) SetRefund(v float64) *OrderUpdate {
	_u.mutation.ResetRefund()
	_u.mutation.SetRefund(v)
	return _u
}

// SetNillableRefund sets the "refund" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableRefund(v *float64) *OrderUpdate {
	if v != nil {
		_u.SetRefund(*v)
	}
	return _u
}

// AddRefund adds value to the "refund" field.
func (_u *OrderUpdate) AddRefund(v float64) *OrderUpdate {
	_u.mutation.AddRefund(v)
	return _u
}

// ClearRefund clears the value of the "refund" field.
func (_u *OrderUpdate) ClearRefund() *OrderUpdate {
	_u.mutation.ClearRefund()
	return _u
}

// SetCloseNature sets the "close_nature" field.
func (_u *OrderUpdate) SetCloseNature(v string) *OrderUpdate {
	_u.mutation.SetCloseNature(v)
	return _u
}

// SetNillableCloseNature sets the "close_nature" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableCloseNature(v *string) *OrderUpdate {
	if v != nil {
		_u.SetCloseNature(*v)
	}
	return _u
}

// ClearCloseNature clears the value of the "close_nature" field.
func (_u *OrderUpdate) ClearCloseNature() *OrderUpdate {
	_u.mutation.ClearCloseNature()
	return _u
}

// SetRefundNature sets the "refund_nature" field.
func (_u *OrderUpdate) SetRefundNature(v string) *OrderUpdate {
	_u.mutation.SetRefundNature(v)
	return _u
}

// SetNillableRefundNature sets the "refund_nature" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableRefundNature(v *string) *OrderUpdate {
	if v != nil {
		_u.SetRefundNature(*v)
	}
	return _u
}

// ClearRefundNature clears the value of the "refund_nature" field.
func (_u *OrderUpdate) ClearRefundNature() *OrderUpdate {
	_u.mutation.ClearRefundNature()
	return _u
}

// AddItemIDs adds the "items" edge to the OrderItem entity by IDs.
func (_u *OrderUpdate) AddItemIDs(ids ...int64) *OrderUpdate {
	_u.mutation.AddItemIDs(ids...)
	return _u
}

// AddItems adds the "items" edges to the OrderItem entity.
func (_u *OrderUpdate) AddItems(v ...*OrderItem) *OrderUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddItemIDs(ids...)
}

// AddPayIDs adds the "pay" edge to the OrderPay entity by IDs.
func (_u *OrderUpdate) AddPayIDs(ids ...int64) *OrderUpdate {
	_u.mutation.AddPayIDs(ids...)
	return _u
}

// AddPay adds the "pay" edges to the OrderPay entity.
func (_u *OrderUpdate) AddPay(v ...*OrderPay) *OrderUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPayIDs(ids...)
}

// AddEventIDs adds the "events" edge to the OrderEvents entity by IDs.
func (_u *OrderUpdate) AddEventIDs(ids ...int64) *OrderUpdate {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the OrderEvents entity.
func (_u *OrderUpdate) AddEvents(v ...*OrderEvents) *OrderUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// AddSnapshotIDs adds the "snapshots" edge to the OrderSnapshots entity by IDs.
func (_u *OrderUpdate) AddSnapshotIDs(ids ...int64) *OrderUpdate {
	_u.mutation.AddSnapshotIDs(ids...)
	return _u
}

// AddSnapshots adds the "snapshots" edges to the OrderSnapshots entity.
func (_u *OrderUpdate) AddSnapshots(v ...*OrderSnapshots) *OrderUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSnapshotIDs(ids...)
}

// AddStatusHistoryIDs adds the "status_history" edge to the OrderStatusHistory entity by IDs.
func (_u *OrderUpdate) AddStatusHistoryIDs(ids ...int64) *OrderUpdate {
	_u.mutation.AddStatusHistoryIDs(ids...)
	return _u
}

// AddStatusHistory adds the "status_history" edges to the OrderStatusHistory entity.
func (_u *OrderUpdate) AddStatusHistory(v ...*OrderStatusHistory) *OrderUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStatusHistoryIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (_u *OrderUpdate) Mutation() *OrderMutation {
	return _u.mutation
}

// ClearItems clears all "items" edges to the OrderItem entity.
func (_u *OrderUpdate) ClearItems() *OrderUpdate {
	_u.mutation.ClearItems()
	return _u
}

// RemoveItemIDs removes the "items" edge to OrderItem entities by IDs.
func (_u *OrderUpdate) RemoveItemIDs(ids ...int64) *OrderUpdate {
	_u.mutation.RemoveItemIDs(ids...)
	return _u
}

// RemoveItems removes "items" edges to OrderItem entities.
func (_u *OrderUpdate) RemoveItems(v ...*OrderItem) *OrderUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveItemIDs(ids...)
}

// ClearPay clears all "pay" edges to the OrderPay entity.
func (_u *OrderUpdate) ClearPay() *OrderUpdate {
	_u.mutation.ClearPay()
	return _u
}

// RemovePayIDs removes the "pay" edge to OrderPay entities by IDs.
func (_u *OrderUpdate) RemovePayIDs(ids ...int64) *OrderUpdate {
	_u.mutation.RemovePayIDs(ids...)
	return _u
}

// RemovePay removes "pay" edges to OrderPay entities.
func (_u *OrderUpdate) RemovePay(v ...*OrderPay) *OrderUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePayIDs(ids...)
}

// ClearEvents clears all "events" edges to the OrderEvents entity.
func (_u *OrderUpdate) ClearEvents() *OrderUpdate {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to OrderEvents entities by IDs.
func (_u *OrderUpdate) RemoveEventIDs(ids ...int64) *OrderUpdate {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to OrderEvents entities.
func (_u *OrderUpdate) RemoveEvents(v ...*OrderEvents) *OrderUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// ClearSnapshots clears all "snapshots" edges to the OrderSnapshots entity.
func (_u *OrderUpdate) ClearSnapshots() *OrderUpdate {
	_u.mutation.ClearSnapshots()
	return _u
}

// RemoveSnapshotIDs removes the "snapshots" edge to OrderSnapshots entities by IDs.
func (_u *OrderUpdate) RemoveSnapshotIDs(ids ...int64) *OrderUpdate {
	_u.mutation.RemoveSnapshotIDs(ids...)
	return _u
}

// RemoveSnapshots removes "snapshots" edges to OrderSnapshots entities.
func (_u *OrderUpdate) RemoveSnapshots(v ...*OrderSnapshots) *OrderUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSnapshotIDs(ids...)
}

// ClearStatusHistory clears all "status_history" edges to the OrderStatusHistory entity.
func (_u *OrderUpdate) ClearStatusHistory() *OrderUpdate {
	_u.mutation.ClearStatusHistory()
	return _u
}

// RemoveStatusHistoryIDs removes the "status_history" edge to OrderStatusHistory entities by IDs.
func (_u *OrderUpdate) RemoveStatusHistoryIDs(ids ...int64) *OrderUpdate {
	_u.mutation.RemoveStatusHistoryIDs(ids...)
	return _u
}

// RemoveStatusHistory removes "status_history" edges to OrderStatusHistory entities.
func (_u *OrderUpdate) RemoveStatusHistory(v ...*OrderStatusHistory) *OrderUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStatusHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OrderUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OrderUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrderUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrderUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := order.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OrderUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	return nil
}

func (_u *OrderUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(order.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(order.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(order.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(order.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(order.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(order.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(order.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(order.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Sn(); ok {
		_spec.SetField(order.FieldSn, field.TypeString, value)
	}
	if value, ok := _u.mutation.MemberID(); ok {
		_spec.SetField(order.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedMemberID(); ok {
		_spec.AddField(order.FieldMemberID, field.TypeInt64, value)
	}
	if _u.mutation.MemberIDCleared() {
		_spec.ClearField(order.FieldMemberID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(order.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.Nature(); ok {
		_spec.SetField(order.FieldNature, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedNature(); ok {
		_spec.AddField(order.FieldNature, field.TypeInt64, value)
	}
	if _u.mutation.NatureCleared() {
		_spec.ClearField(order.FieldNature, field.TypeInt64)
	}
	if value, ok := _u.mutation.CompletionAt(); ok {
		_spec.SetField(order.FieldCompletionAt, field.TypeTime, value)
	}
	if _u.mutation.CompletionAtCleared() {
		_spec.ClearField(order.FieldCompletionAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CloseAt(); ok {
		_spec.SetField(order.FieldCloseAt, field.TypeTime, value)
	}
	if _u.mutation.CloseAtCleared() {
		_spec.ClearField(order.FieldCloseAt, field.TypeTime)
	}
	if value, ok := _u.mutation.RefundAt(); ok {
		_spec.SetField(order.FieldRefundAt, field.TypeTime, value)
	}
	if _u.mutation.RefundAtCleared() {
		_spec.ClearField(order.FieldRefundAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(order.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedVersion(); ok {
		_spec.AddField(order.FieldVersion, field.TypeInt64, value)
	}
	if _u.mutation.VersionCleared() {
		_spec.ClearField(order.FieldVersion, field.TypeInt64)
	}
	if value, ok := _u.mutation.TotalAmount(); ok {
		_spec.SetField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedTotalAmount(); ok {
		_spec.AddField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if _u.mutation.TotalAmountCleared() {
		_spec.ClearField(order.FieldTotalAmount, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Actual(); ok {
		_spec.SetField(order.FieldActual, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedActual(); ok {
		_spec.AddField(order.FieldActual, field.TypeFloat64, value)
	}
	if _u.mutation.ActualCleared() {
		_spec.ClearField(order.FieldActual, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Remission(); ok {
		_spec.SetField(order.FieldRemission, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedRemission(); ok {
		_spec.AddField(order.FieldRemission, field.TypeFloat64, value)
	}
	if _u.mutation.RemissionCleared() {
		_spec.ClearField(order.FieldRemission, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Refund(); ok {
		_spec.SetField(order.FieldRefund, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedRefund(); ok {
		_spec.AddField(order.FieldRefund, field.TypeFloat64, value)
	}
	if _u.mutation.RefundCleared() {
		_spec.ClearField(order.FieldRefund, field.TypeFloat64)
	}
	if value, ok := _u.mutation.CloseNature(); ok {
		_spec.SetField(order.FieldCloseNature, field.TypeString, value)
	}
	if _u.mutation.CloseNatureCleared() {
		_spec.ClearField(order.FieldCloseNature, field.TypeString)
	}
	if value, ok := _u.mutation.RefundNature(); ok {
		_spec.SetField(order.FieldRefundNature, field.TypeString, value)
	}
	if _u.mutation.RefundNatureCleared() {
		_spec.ClearField(order.FieldRefundNature, field.TypeString)
	}
	if _u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedItemsIDs(); len(nodes) > 0 && !_u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PayCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PayTable,
			Columns: []string{order.PayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderpay.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPayIDs(); len(nodes) > 0 && !_u.mutation.PayCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PayTable,
			Columns: []string{order.PayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderpay.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PayIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PayTable,
			Columns: []string{order.PayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderpay.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.EventsTable,
			Columns: []string{order.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderevents.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.EventsTable,
			Columns: []string{order.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderevents.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.EventsTable,
			Columns: []string{order.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderevents.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SnapshotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SnapshotsTable,
			Columns: []string{order.SnapshotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersnapshots.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSnapshotsIDs(); len(nodes) > 0 && !_u.mutation.SnapshotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SnapshotsTable,
			Columns: []string{order.SnapshotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersnapshots.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SnapshotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SnapshotsTable,
			Columns: []string{order.SnapshotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersnapshots.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StatusHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.StatusHistoryTable,
			Columns: []string{order.StatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStatusHistoryIDs(); len(nodes) > 0 && !_u.mutation.StatusHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.StatusHistoryTable,
			Columns: []string{order.StatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StatusHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.StatusHistoryTable,
			Columns: []string{order.StatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrderUpdateOne) SetUpdatedAt(v time.Time) *OrderUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrderUpdateOne) ClearUpdatedAt() *OrderUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *OrderUpdateOne) SetDelete(v int64) *OrderUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableDelete(v *int64) *OrderUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *OrderUpdateOne) AddDelete(v int64) *OrderUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *OrderUpdateOne) ClearDelete() *OrderUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *OrderUpdateOne) SetCreatedID(v int64) *OrderUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableCreatedID(v *int64) *OrderUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *OrderUpdateOne) AddCreatedID(v int64) *OrderUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *OrderUpdateOne) ClearCreatedID() *OrderUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetSn sets the "sn" field.
func (_u *OrderUpdateOne) SetSn(v string) *OrderUpdateOne {
	_u.mutation.SetSn(v)
	return _u
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableSn(v *string) *OrderUpdateOne {
	if v != nil {
		_u.SetSn(*v)
	}
	return _u
}

// SetMemberID sets the "member_id" field.
func (_u *OrderUpdateOne) SetMemberID(v int64) *OrderUpdateOne {
	_u.mutation.ResetMemberID()
	_u.mutation.SetMemberID(v)
	return _u
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableMemberID(v *int64) *OrderUpdateOne {
	if v != nil {
		_u.SetMemberID(*v)
	}
	return _u
}

// AddMemberID adds value to the "member_id" field.
func (_u *OrderUpdateOne) AddMemberID(v int64) *OrderUpdateOne {
	_u.mutation.AddMemberID(v)
	return _u
}

// ClearMemberID clears the value of the "member_id" field.
func (_u *OrderUpdateOne) ClearMemberID() *OrderUpdateOne {
	_u.mutation.ClearMemberID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *OrderUpdateOne) SetStatus(v order.Status) *OrderUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableStatus(v *order.Status) *OrderUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *OrderUpdateOne) ClearStatus() *OrderUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetNature sets the "nature" field.
func (_u *OrderUpdateOne) SetNature(v int64) *OrderUpdateOne {
	_u.mutation.ResetNature()
	_u.mutation.SetNature(v)
	return _u
}

// SetNillableNature sets the "nature" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableNature(v *int64) *OrderUpdateOne {
	if v != nil {
		_u.SetNature(*v)
	}
	return _u
}

// AddNature adds value to the "nature" field.
func (_u *OrderUpdateOne) AddNature(v int64) *OrderUpdateOne {
	_u.mutation.AddNature(v)
	return _u
}

// ClearNature clears the value of the "nature" field.
func (_u *OrderUpdateOne) ClearNature() *OrderUpdateOne {
	_u.mutation.ClearNature()
	return _u
}

// SetCompletionAt sets the "completion_at" field.
func (_u *OrderUpdateOne) SetCompletionAt(v time.Time) *OrderUpdateOne {
	_u.mutation.SetCompletionAt(v)
	return _u
}

// SetNillableCompletionAt sets the "completion_at" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableCompletionAt(v *time.Time) *OrderUpdateOne {
	if v != nil {
		_u.SetCompletionAt(*v)
	}
	return _u
}

// ClearCompletionAt clears the value of the "completion_at" field.
func (_u *OrderUpdateOne) ClearCompletionAt() *OrderUpdateOne {
	_u.mutation.ClearCompletionAt()
	return _u
}

// SetCloseAt sets the "close_at" field.
func (_u *OrderUpdateOne) SetCloseAt(v time.Time) *OrderUpdateOne {
	_u.mutation.SetCloseAt(v)
	return _u
}

// SetNillableCloseAt sets the "close_at" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableCloseAt(v *time.Time) *OrderUpdateOne {
	if v != nil {
		_u.SetCloseAt(*v)
	}
	return _u
}

// ClearCloseAt clears the value of the "close_at" field.
func (_u *OrderUpdateOne) ClearCloseAt() *OrderUpdateOne {
	_u.mutation.ClearCloseAt()
	return _u
}

// SetRefundAt sets the "refund_at" field.
func (_u *OrderUpdateOne) SetRefundAt(v time.Time) *OrderUpdateOne {
	_u.mutation.SetRefundAt(v)
	return _u
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableRefundAt(v *time.Time) *OrderUpdateOne {
	if v != nil {
		_u.SetRefundAt(*v)
	}
	return _u
}

// ClearRefundAt clears the value of the "refund_at" field.
func (_u *OrderUpdateOne) ClearRefundAt() *OrderUpdateOne {
	_u.mutation.ClearRefundAt()
	return _u
}

// SetVersion sets the "version" field.
func (_u *OrderUpdateOne) SetVersion(v int64) *OrderUpdateOne {
	_u.mutation.ResetVersion()
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableVersion(v *int64) *OrderUpdateOne {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// AddVersion adds value to the "version" field.
func (_u *OrderUpdateOne) AddVersion(v int64) *OrderUpdateOne {
	_u.mutation.AddVersion(v)
	return _u
}

// ClearVersion clears the value of the "version" field.
func (_u *OrderUpdateOne) ClearVersion() *OrderUpdateOne {
	_u.mutation.ClearVersion()
	return _u
}

// SetTotalAmount sets the "total_amount" field.
func (_u *OrderUpdateOne) SetTotalAmount(v float64) *OrderUpdateOne {
	_u.mutation.ResetTotalAmount()
	_u.mutation.SetTotalAmount(v)
	return _u
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableTotalAmount(v *float64) *OrderUpdateOne {
	if v != nil {
		_u.SetTotalAmount(*v)
	}
	return _u
}

// AddTotalAmount adds value to the "total_amount" field.
func (_u *OrderUpdateOne) AddTotalAmount(v float64) *OrderUpdateOne {
	_u.mutation.AddTotalAmount(v)
	return _u
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (_u *OrderUpdateOne) ClearTotalAmount() *OrderUpdateOne {
	_u.mutation.ClearTotalAmount()
	return _u
}

// SetActual sets the "actual" field.
func (_u *OrderUpdateOne) SetActual(v float64) *OrderUpdateOne {
	_u.mutation.ResetActual()
	_u.mutation.SetActual(v)
	return _u
}

// SetNillableActual sets the "actual" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableActual(v *float64) *OrderUpdateOne {
	if v != nil {
		_u.SetActual(*v)
	}
	return _u
}

// AddActual adds value to the "actual" field.
func (_u *OrderUpdateOne) AddActual(v float64) *OrderUpdateOne {
	_u.mutation.AddActual(v)
	return _u
}

// ClearActual clears the value of the "actual" field.
func (_u *OrderUpdateOne) ClearActual() *OrderUpdateOne {
	_u.mutation.ClearActual()
	return _u
}

// SetRemission sets the "remission" field.
func (_u *OrderUpdateOne) SetRemission(v float64) *OrderUpdateOne {
	_u.mutation.ResetRemission()
	_u.mutation.SetRemission(v)
	return _u
}

// SetNillableRemission sets the "remission" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableRemission(v *float64) *OrderUpdateOne {
	if v != nil {
		_u.SetRemission(*v)
	}
	return _u
}

// AddRemission adds value to the "remission" field.
func (_u *OrderUpdateOne) AddRemission(v float64) *OrderUpdateOne {
	_u.mutation.AddRemission(v)
	return _u
}

// ClearRemission clears the value of the "remission" field.
func (_u *OrderUpdateOne) ClearRemission() *OrderUpdateOne {
	_u.mutation.ClearRemission()
	return _u
}

// SetRefund sets the "refund" field.
func (_u *OrderUpdateOne) SetRefund(v float64) *OrderUpdateOne {
	_u.mutation.ResetRefund()
	_u.mutation.SetRefund(v)
	return _u
}

// SetNillableRefund sets the "refund" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableRefund(v *float64) *OrderUpdateOne {
	if v != nil {
		_u.SetRefund(*v)
	}
	return _u
}

// AddRefund adds value to the "refund" field.
func (_u *OrderUpdateOne) AddRefund(v float64) *OrderUpdateOne {
	_u.mutation.AddRefund(v)
	return _u
}

// ClearRefund clears the value of the "refund" field.
func (_u *OrderUpdateOne) ClearRefund() *OrderUpdateOne {
	_u.mutation.ClearRefund()
	return _u
}

// SetCloseNature sets the "close_nature" field.
func (_u *OrderUpdateOne) SetCloseNature(v string) *OrderUpdateOne {
	_u.mutation.SetCloseNature(v)
	return _u
}

// SetNillableCloseNature sets the "close_nature" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableCloseNature(v *string) *OrderUpdateOne {
	if v != nil {
		_u.SetCloseNature(*v)
	}
	return _u
}

// ClearCloseNature clears the value of the "close_nature" field.
func (_u *OrderUpdateOne) ClearCloseNature() *OrderUpdateOne {
	_u.mutation.ClearCloseNature()
	return _u
}

// SetRefundNature sets the "refund_nature" field.
func (_u *OrderUpdateOne) SetRefundNature(v string) *OrderUpdateOne {
	_u.mutation.SetRefundNature(v)
	return _u
}

// SetNillableRefundNature sets the "refund_nature" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableRefundNature(v *string) *OrderUpdateOne {
	if v != nil {
		_u.SetRefundNature(*v)
	}
	return _u
}

// ClearRefundNature clears the value of the "refund_nature" field.
func (_u *OrderUpdateOne) ClearRefundNature() *OrderUpdateOne {
	_u.mutation.ClearRefundNature()
	return _u
}

// AddItemIDs adds the "items" edge to the OrderItem entity by IDs.
func (_u *OrderUpdateOne) AddItemIDs(ids ...int64) *OrderUpdateOne {
	_u.mutation.AddItemIDs(ids...)
	return _u
}

// AddItems adds the "items" edges to the OrderItem entity.
func (_u *OrderUpdateOne) AddItems(v ...*OrderItem) *OrderUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddItemIDs(ids...)
}

// AddPayIDs adds the "pay" edge to the OrderPay entity by IDs.
func (_u *OrderUpdateOne) AddPayIDs(ids ...int64) *OrderUpdateOne {
	_u.mutation.AddPayIDs(ids...)
	return _u
}

// AddPay adds the "pay" edges to the OrderPay entity.
func (_u *OrderUpdateOne) AddPay(v ...*OrderPay) *OrderUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPayIDs(ids...)
}

// AddEventIDs adds the "events" edge to the OrderEvents entity by IDs.
func (_u *OrderUpdateOne) AddEventIDs(ids ...int64) *OrderUpdateOne {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the OrderEvents entity.
func (_u *OrderUpdateOne) AddEvents(v ...*OrderEvents) *OrderUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// AddSnapshotIDs adds the "snapshots" edge to the OrderSnapshots entity by IDs.
func (_u *OrderUpdateOne) AddSnapshotIDs(ids ...int64) *OrderUpdateOne {
	_u.mutation.AddSnapshotIDs(ids...)
	return _u
}

// AddSnapshots adds the "snapshots" edges to the OrderSnapshots entity.
func (_u *OrderUpdateOne) AddSnapshots(v ...*OrderSnapshots) *OrderUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSnapshotIDs(ids...)
}

// AddStatusHistoryIDs adds the "status_history" edge to the OrderStatusHistory entity by IDs.
func (_u *OrderUpdateOne) AddStatusHistoryIDs(ids ...int64) *OrderUpdateOne {
	_u.mutation.AddStatusHistoryIDs(ids...)
	return _u
}

// AddStatusHistory adds the "status_history" edges to the OrderStatusHistory entity.
func (_u *OrderUpdateOne) AddStatusHistory(v ...*OrderStatusHistory) *OrderUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStatusHistoryIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (_u *OrderUpdateOne) Mutation() *OrderMutation {
	return _u.mutation
}

// ClearItems clears all "items" edges to the OrderItem entity.
func (_u *OrderUpdateOne) ClearItems() *OrderUpdateOne {
	_u.mutation.ClearItems()
	return _u
}

// RemoveItemIDs removes the "items" edge to OrderItem entities by IDs.
func (_u *OrderUpdateOne) RemoveItemIDs(ids ...int64) *OrderUpdateOne {
	_u.mutation.RemoveItemIDs(ids...)
	return _u
}

// RemoveItems removes "items" edges to OrderItem entities.
func (_u *OrderUpdateOne) RemoveItems(v ...*OrderItem) *OrderUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveItemIDs(ids...)
}

// ClearPay clears all "pay" edges to the OrderPay entity.
func (_u *OrderUpdateOne) ClearPay() *OrderUpdateOne {
	_u.mutation.ClearPay()
	return _u
}

// RemovePayIDs removes the "pay" edge to OrderPay entities by IDs.
func (_u *OrderUpdateOne) RemovePayIDs(ids ...int64) *OrderUpdateOne {
	_u.mutation.RemovePayIDs(ids...)
	return _u
}

// RemovePay removes "pay" edges to OrderPay entities.
func (_u *OrderUpdateOne) RemovePay(v ...*OrderPay) *OrderUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePayIDs(ids...)
}

// ClearEvents clears all "events" edges to the OrderEvents entity.
func (_u *OrderUpdateOne) ClearEvents() *OrderUpdateOne {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to OrderEvents entities by IDs.
func (_u *OrderUpdateOne) RemoveEventIDs(ids ...int64) *OrderUpdateOne {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to OrderEvents entities.
func (_u *OrderUpdateOne) RemoveEvents(v ...*OrderEvents) *OrderUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// ClearSnapshots clears all "snapshots" edges to the OrderSnapshots entity.
func (_u *OrderUpdateOne) ClearSnapshots() *OrderUpdateOne {
	_u.mutation.ClearSnapshots()
	return _u
}

// RemoveSnapshotIDs removes the "snapshots" edge to OrderSnapshots entities by IDs.
func (_u *OrderUpdateOne) RemoveSnapshotIDs(ids ...int64) *OrderUpdateOne {
	_u.mutation.RemoveSnapshotIDs(ids...)
	return _u
}

// RemoveSnapshots removes "snapshots" edges to OrderSnapshots entities.
func (_u *OrderUpdateOne) RemoveSnapshots(v ...*OrderSnapshots) *OrderUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSnapshotIDs(ids...)
}

// ClearStatusHistory clears all "status_history" edges to the OrderStatusHistory entity.
func (_u *OrderUpdateOne) ClearStatusHistory() *OrderUpdateOne {
	_u.mutation.ClearStatusHistory()
	return _u
}

// RemoveStatusHistoryIDs removes the "status_history" edge to OrderStatusHistory entities by IDs.
func (_u *OrderUpdateOne) RemoveStatusHistoryIDs(ids ...int64) *OrderUpdateOne {
	_u.mutation.RemoveStatusHistoryIDs(ids...)
	return _u
}

// RemoveStatusHistory removes "status_history" edges to OrderStatusHistory entities.
func (_u *OrderUpdateOne) RemoveStatusHistory(v ...*OrderStatusHistory) *OrderUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStatusHistoryIDs(ids...)
}

// Where appends a list predicates to the OrderUpdate builder.
func (_u *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Order entity.
func (_u *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrderUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := order.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OrderUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	return nil
}

func (_u *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(order.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(order.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(order.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(order.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(order.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(order.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(order.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(order.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Sn(); ok {
		_spec.SetField(order.FieldSn, field.TypeString, value)
	}
	if value, ok := _u.mutation.MemberID(); ok {
		_spec.SetField(order.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedMemberID(); ok {
		_spec.AddField(order.FieldMemberID, field.TypeInt64, value)
	}
	if _u.mutation.MemberIDCleared() {
		_spec.ClearField(order.FieldMemberID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(order.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.Nature(); ok {
		_spec.SetField(order.FieldNature, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedNature(); ok {
		_spec.AddField(order.FieldNature, field.TypeInt64, value)
	}
	if _u.mutation.NatureCleared() {
		_spec.ClearField(order.FieldNature, field.TypeInt64)
	}
	if value, ok := _u.mutation.CompletionAt(); ok {
		_spec.SetField(order.FieldCompletionAt, field.TypeTime, value)
	}
	if _u.mutation.CompletionAtCleared() {
		_spec.ClearField(order.FieldCompletionAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CloseAt(); ok {
		_spec.SetField(order.FieldCloseAt, field.TypeTime, value)
	}
	if _u.mutation.CloseAtCleared() {
		_spec.ClearField(order.FieldCloseAt, field.TypeTime)
	}
	if value, ok := _u.mutation.RefundAt(); ok {
		_spec.SetField(order.FieldRefundAt, field.TypeTime, value)
	}
	if _u.mutation.RefundAtCleared() {
		_spec.ClearField(order.FieldRefundAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(order.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedVersion(); ok {
		_spec.AddField(order.FieldVersion, field.TypeInt64, value)
	}
	if _u.mutation.VersionCleared() {
		_spec.ClearField(order.FieldVersion, field.TypeInt64)
	}
	if value, ok := _u.mutation.TotalAmount(); ok {
		_spec.SetField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedTotalAmount(); ok {
		_spec.AddField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if _u.mutation.TotalAmountCleared() {
		_spec.ClearField(order.FieldTotalAmount, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Actual(); ok {
		_spec.SetField(order.FieldActual, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedActual(); ok {
		_spec.AddField(order.FieldActual, field.TypeFloat64, value)
	}
	if _u.mutation.ActualCleared() {
		_spec.ClearField(order.FieldActual, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Remission(); ok {
		_spec.SetField(order.FieldRemission, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedRemission(); ok {
		_spec.AddField(order.FieldRemission, field.TypeFloat64, value)
	}
	if _u.mutation.RemissionCleared() {
		_spec.ClearField(order.FieldRemission, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Refund(); ok {
		_spec.SetField(order.FieldRefund, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedRefund(); ok {
		_spec.AddField(order.FieldRefund, field.TypeFloat64, value)
	}
	if _u.mutation.RefundCleared() {
		_spec.ClearField(order.FieldRefund, field.TypeFloat64)
	}
	if value, ok := _u.mutation.CloseNature(); ok {
		_spec.SetField(order.FieldCloseNature, field.TypeString, value)
	}
	if _u.mutation.CloseNatureCleared() {
		_spec.ClearField(order.FieldCloseNature, field.TypeString)
	}
	if value, ok := _u.mutation.RefundNature(); ok {
		_spec.SetField(order.FieldRefundNature, field.TypeString, value)
	}
	if _u.mutation.RefundNatureCleared() {
		_spec.ClearField(order.FieldRefundNature, field.TypeString)
	}
	if _u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedItemsIDs(); len(nodes) > 0 && !_u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PayCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PayTable,
			Columns: []string{order.PayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderpay.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPayIDs(); len(nodes) > 0 && !_u.mutation.PayCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PayTable,
			Columns: []string{order.PayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderpay.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PayIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PayTable,
			Columns: []string{order.PayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderpay.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.EventsTable,
			Columns: []string{order.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderevents.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.EventsTable,
			Columns: []string{order.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderevents.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.EventsTable,
			Columns: []string{order.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderevents.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SnapshotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SnapshotsTable,
			Columns: []string{order.SnapshotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersnapshots.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSnapshotsIDs(); len(nodes) > 0 && !_u.mutation.SnapshotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SnapshotsTable,
			Columns: []string{order.SnapshotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersnapshots.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SnapshotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SnapshotsTable,
			Columns: []string{order.SnapshotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersnapshots.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StatusHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.StatusHistoryTable,
			Columns: []string{order.StatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStatusHistoryIDs(); len(nodes) > 0 && !_u.mutation.StatusHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.StatusHistoryTable,
			Columns: []string{order.StatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StatusHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.StatusHistoryTable,
			Columns: []string{order.StatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
