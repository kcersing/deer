// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"deer/rpc/order/biz/dal/mysql/ent/order"
	"deer/rpc/order/biz/dal/mysql/ent/orderitem"
	"deer/rpc/order/biz/dal/mysql/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderItemUpdate is the builder for updating OrderItem entities.
type OrderItemUpdate struct {
	config
	hooks    []Hook
	mutation *OrderItemMutation
}

// Where appends a list predicates to the OrderItemUpdate builder.
func (_u *OrderItemUpdate) Where(ps ...predicate.OrderItem) *OrderItemUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrderItemUpdate) SetUpdatedAt(v time.Time) *OrderItemUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrderItemUpdate) ClearUpdatedAt() *OrderItemUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *OrderItemUpdate) SetDelete(v int64) *OrderItemUpdate {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *OrderItemUpdate) SetNillableDelete(v *int64) *OrderItemUpdate {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *OrderItemUpdate) AddDelete(v int64) *OrderItemUpdate {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *OrderItemUpdate) ClearDelete() *OrderItemUpdate {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *OrderItemUpdate) SetCreatedID(v int64) *OrderItemUpdate {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *OrderItemUpdate) SetNillableCreatedID(v *int64) *OrderItemUpdate {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *OrderItemUpdate) AddCreatedID(v int64) *OrderItemUpdate {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *OrderItemUpdate) ClearCreatedID() *OrderItemUpdate {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetOrderID sets the "order_id" field.
func (_u *OrderItemUpdate) SetOrderID(v int64) *OrderItemUpdate {
	_u.mutation.SetOrderID(v)
	return _u
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (_u *OrderItemUpdate) SetNillableOrderID(v *int64) *OrderItemUpdate {
	if v != nil {
		_u.SetOrderID(*v)
	}
	return _u
}

// ClearOrderID clears the value of the "order_id" field.
func (_u *OrderItemUpdate) ClearOrderID() *OrderItemUpdate {
	_u.mutation.ClearOrderID()
	return _u
}

// SetProductID sets the "product_id" field.
func (_u *OrderItemUpdate) SetProductID(v int64) *OrderItemUpdate {
	_u.mutation.ResetProductID()
	_u.mutation.SetProductID(v)
	return _u
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (_u *OrderItemUpdate) SetNillableProductID(v *int64) *OrderItemUpdate {
	if v != nil {
		_u.SetProductID(*v)
	}
	return _u
}

// AddProductID adds value to the "product_id" field.
func (_u *OrderItemUpdate) AddProductID(v int64) *OrderItemUpdate {
	_u.mutation.AddProductID(v)
	return _u
}

// ClearProductID clears the value of the "product_id" field.
func (_u *OrderItemUpdate) ClearProductID() *OrderItemUpdate {
	_u.mutation.ClearProductID()
	return _u
}

// SetName sets the "name" field.
func (_u *OrderItemUpdate) SetName(v string) *OrderItemUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OrderItemUpdate) SetNillableName(v *string) *OrderItemUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *OrderItemUpdate) ClearName() *OrderItemUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetUnitPrice sets the "unit_price" field.
func (_u *OrderItemUpdate) SetUnitPrice(v float64) *OrderItemUpdate {
	_u.mutation.ResetUnitPrice()
	_u.mutation.SetUnitPrice(v)
	return _u
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (_u *OrderItemUpdate) SetNillableUnitPrice(v *float64) *OrderItemUpdate {
	if v != nil {
		_u.SetUnitPrice(*v)
	}
	return _u
}

// AddUnitPrice adds value to the "unit_price" field.
func (_u *OrderItemUpdate) AddUnitPrice(v float64) *OrderItemUpdate {
	_u.mutation.AddUnitPrice(v)
	return _u
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (_u *OrderItemUpdate) ClearUnitPrice() *OrderItemUpdate {
	_u.mutation.ClearUnitPrice()
	return _u
}

// SetQuantity sets the "quantity" field.
func (_u *OrderItemUpdate) SetQuantity(v int64) *OrderItemUpdate {
	_u.mutation.ResetQuantity()
	_u.mutation.SetQuantity(v)
	return _u
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (_u *OrderItemUpdate) SetNillableQuantity(v *int64) *OrderItemUpdate {
	if v != nil {
		_u.SetQuantity(*v)
	}
	return _u
}

// AddQuantity adds value to the "quantity" field.
func (_u *OrderItemUpdate) AddQuantity(v int64) *OrderItemUpdate {
	_u.mutation.AddQuantity(v)
	return _u
}

// ClearQuantity clears the value of the "quantity" field.
func (_u *OrderItemUpdate) ClearQuantity() *OrderItemUpdate {
	_u.mutation.ClearQuantity()
	return _u
}

// SetOrder sets the "order" edge to the Order entity.
func (_u *OrderItemUpdate) SetOrder(v *Order) *OrderItemUpdate {
	return _u.SetOrderID(v.ID)
}

// Mutation returns the OrderItemMutation object of the builder.
func (_u *OrderItemUpdate) Mutation() *OrderItemMutation {
	return _u.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (_u *OrderItemUpdate) ClearOrder() *OrderItemUpdate {
	_u.mutation.ClearOrder()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OrderItemUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrderItemUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OrderItemUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrderItemUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrderItemUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := orderitem.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *OrderItemUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderitem.Table, orderitem.Columns, sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(orderitem.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(orderitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(orderitem.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(orderitem.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(orderitem.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(orderitem.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(orderitem.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(orderitem.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(orderitem.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.ProductID(); ok {
		_spec.SetField(orderitem.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedProductID(); ok {
		_spec.AddField(orderitem.FieldProductID, field.TypeInt64, value)
	}
	if _u.mutation.ProductIDCleared() {
		_spec.ClearField(orderitem.FieldProductID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(orderitem.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(orderitem.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.UnitPrice(); ok {
		_spec.SetField(orderitem.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedUnitPrice(); ok {
		_spec.AddField(orderitem.FieldUnitPrice, field.TypeFloat64, value)
	}
	if _u.mutation.UnitPriceCleared() {
		_spec.ClearField(orderitem.FieldUnitPrice, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Quantity(); ok {
		_spec.SetField(orderitem.FieldQuantity, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedQuantity(); ok {
		_spec.AddField(orderitem.FieldQuantity, field.TypeInt64, value)
	}
	if _u.mutation.QuantityCleared() {
		_spec.ClearField(orderitem.FieldQuantity, field.TypeInt64)
	}
	if _u.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OrderItemUpdateOne is the builder for updating a single OrderItem entity.
type OrderItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderItemMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrderItemUpdateOne) SetUpdatedAt(v time.Time) *OrderItemUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrderItemUpdateOne) ClearUpdatedAt() *OrderItemUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDelete sets the "delete" field.
func (_u *OrderItemUpdateOne) SetDelete(v int64) *OrderItemUpdateOne {
	_u.mutation.ResetDelete()
	_u.mutation.SetDelete(v)
	return _u
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_u *OrderItemUpdateOne) SetNillableDelete(v *int64) *OrderItemUpdateOne {
	if v != nil {
		_u.SetDelete(*v)
	}
	return _u
}

// AddDelete adds value to the "delete" field.
func (_u *OrderItemUpdateOne) AddDelete(v int64) *OrderItemUpdateOne {
	_u.mutation.AddDelete(v)
	return _u
}

// ClearDelete clears the value of the "delete" field.
func (_u *OrderItemUpdateOne) ClearDelete() *OrderItemUpdateOne {
	_u.mutation.ClearDelete()
	return _u
}

// SetCreatedID sets the "created_id" field.
func (_u *OrderItemUpdateOne) SetCreatedID(v int64) *OrderItemUpdateOne {
	_u.mutation.ResetCreatedID()
	_u.mutation.SetCreatedID(v)
	return _u
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_u *OrderItemUpdateOne) SetNillableCreatedID(v *int64) *OrderItemUpdateOne {
	if v != nil {
		_u.SetCreatedID(*v)
	}
	return _u
}

// AddCreatedID adds value to the "created_id" field.
func (_u *OrderItemUpdateOne) AddCreatedID(v int64) *OrderItemUpdateOne {
	_u.mutation.AddCreatedID(v)
	return _u
}

// ClearCreatedID clears the value of the "created_id" field.
func (_u *OrderItemUpdateOne) ClearCreatedID() *OrderItemUpdateOne {
	_u.mutation.ClearCreatedID()
	return _u
}

// SetOrderID sets the "order_id" field.
func (_u *OrderItemUpdateOne) SetOrderID(v int64) *OrderItemUpdateOne {
	_u.mutation.SetOrderID(v)
	return _u
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (_u *OrderItemUpdateOne) SetNillableOrderID(v *int64) *OrderItemUpdateOne {
	if v != nil {
		_u.SetOrderID(*v)
	}
	return _u
}

// ClearOrderID clears the value of the "order_id" field.
func (_u *OrderItemUpdateOne) ClearOrderID() *OrderItemUpdateOne {
	_u.mutation.ClearOrderID()
	return _u
}

// SetProductID sets the "product_id" field.
func (_u *OrderItemUpdateOne) SetProductID(v int64) *OrderItemUpdateOne {
	_u.mutation.ResetProductID()
	_u.mutation.SetProductID(v)
	return _u
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (_u *OrderItemUpdateOne) SetNillableProductID(v *int64) *OrderItemUpdateOne {
	if v != nil {
		_u.SetProductID(*v)
	}
	return _u
}

// AddProductID adds value to the "product_id" field.
func (_u *OrderItemUpdateOne) AddProductID(v int64) *OrderItemUpdateOne {
	_u.mutation.AddProductID(v)
	return _u
}

// ClearProductID clears the value of the "product_id" field.
func (_u *OrderItemUpdateOne) ClearProductID() *OrderItemUpdateOne {
	_u.mutation.ClearProductID()
	return _u
}

// SetName sets the "name" field.
func (_u *OrderItemUpdateOne) SetName(v string) *OrderItemUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OrderItemUpdateOne) SetNillableName(v *string) *OrderItemUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *OrderItemUpdateOne) ClearName() *OrderItemUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetUnitPrice sets the "unit_price" field.
func (_u *OrderItemUpdateOne) SetUnitPrice(v float64) *OrderItemUpdateOne {
	_u.mutation.ResetUnitPrice()
	_u.mutation.SetUnitPrice(v)
	return _u
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (_u *OrderItemUpdateOne) SetNillableUnitPrice(v *float64) *OrderItemUpdateOne {
	if v != nil {
		_u.SetUnitPrice(*v)
	}
	return _u
}

// AddUnitPrice adds value to the "unit_price" field.
func (_u *OrderItemUpdateOne) AddUnitPrice(v float64) *OrderItemUpdateOne {
	_u.mutation.AddUnitPrice(v)
	return _u
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (_u *OrderItemUpdateOne) ClearUnitPrice() *OrderItemUpdateOne {
	_u.mutation.ClearUnitPrice()
	return _u
}

// SetQuantity sets the "quantity" field.
func (_u *OrderItemUpdateOne) SetQuantity(v int64) *OrderItemUpdateOne {
	_u.mutation.ResetQuantity()
	_u.mutation.SetQuantity(v)
	return _u
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (_u *OrderItemUpdateOne) SetNillableQuantity(v *int64) *OrderItemUpdateOne {
	if v != nil {
		_u.SetQuantity(*v)
	}
	return _u
}

// AddQuantity adds value to the "quantity" field.
func (_u *OrderItemUpdateOne) AddQuantity(v int64) *OrderItemUpdateOne {
	_u.mutation.AddQuantity(v)
	return _u
}

// ClearQuantity clears the value of the "quantity" field.
func (_u *OrderItemUpdateOne) ClearQuantity() *OrderItemUpdateOne {
	_u.mutation.ClearQuantity()
	return _u
}

// SetOrder sets the "order" edge to the Order entity.
func (_u *OrderItemUpdateOne) SetOrder(v *Order) *OrderItemUpdateOne {
	return _u.SetOrderID(v.ID)
}

// Mutation returns the OrderItemMutation object of the builder.
func (_u *OrderItemUpdateOne) Mutation() *OrderItemMutation {
	return _u.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (_u *OrderItemUpdateOne) ClearOrder() *OrderItemUpdateOne {
	_u.mutation.ClearOrder()
	return _u
}

// Where appends a list predicates to the OrderItemUpdate builder.
func (_u *OrderItemUpdateOne) Where(ps ...predicate.OrderItem) *OrderItemUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OrderItemUpdateOne) Select(field string, fields ...string) *OrderItemUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OrderItem entity.
func (_u *OrderItemUpdateOne) Save(ctx context.Context) (*OrderItem, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrderItemUpdateOne) SaveX(ctx context.Context) *OrderItem {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OrderItemUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrderItemUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrderItemUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := orderitem.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *OrderItemUpdateOne) sqlSave(ctx context.Context) (_node *OrderItem, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderitem.Table, orderitem.Columns, sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderitem.FieldID)
		for _, f := range fields {
			if !orderitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(orderitem.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(orderitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(orderitem.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Delete(); ok {
		_spec.SetField(orderitem.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDelete(); ok {
		_spec.AddField(orderitem.FieldDelete, field.TypeInt64, value)
	}
	if _u.mutation.DeleteCleared() {
		_spec.ClearField(orderitem.FieldDelete, field.TypeInt64)
	}
	if value, ok := _u.mutation.CreatedID(); ok {
		_spec.SetField(orderitem.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedCreatedID(); ok {
		_spec.AddField(orderitem.FieldCreatedID, field.TypeInt64, value)
	}
	if _u.mutation.CreatedIDCleared() {
		_spec.ClearField(orderitem.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := _u.mutation.ProductID(); ok {
		_spec.SetField(orderitem.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedProductID(); ok {
		_spec.AddField(orderitem.FieldProductID, field.TypeInt64, value)
	}
	if _u.mutation.ProductIDCleared() {
		_spec.ClearField(orderitem.FieldProductID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(orderitem.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(orderitem.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.UnitPrice(); ok {
		_spec.SetField(orderitem.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedUnitPrice(); ok {
		_spec.AddField(orderitem.FieldUnitPrice, field.TypeFloat64, value)
	}
	if _u.mutation.UnitPriceCleared() {
		_spec.ClearField(orderitem.FieldUnitPrice, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Quantity(); ok {
		_spec.SetField(orderitem.FieldQuantity, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedQuantity(); ok {
		_spec.AddField(orderitem.FieldQuantity, field.TypeInt64, value)
	}
	if _u.mutation.QuantityCleared() {
		_spec.ClearField(orderitem.FieldQuantity, field.TypeInt64)
	}
	if _u.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderItem{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
