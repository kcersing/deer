// Code generated by ent, DO NOT EDIT.

package order

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDelete holds the string denoting the delete field in the database.
	FieldDelete = "delete"
	// FieldCreatedID holds the string denoting the created_id field in the database.
	FieldCreatedID = "created_id"
	// FieldSn holds the string denoting the sn field in the database.
	FieldSn = "sn"
	// FieldMemberID holds the string denoting the member_id field in the database.
	FieldMemberID = "member_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldNature holds the string denoting the nature field in the database.
	FieldNature = "nature"
	// FieldCompletionAt holds the string denoting the completion_at field in the database.
	FieldCompletionAt = "completion_at"
	// FieldCloseAt holds the string denoting the close_at field in the database.
	FieldCloseAt = "close_at"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldTotalAmount holds the string denoting the total_amount field in the database.
	FieldTotalAmount = "total_amount"
	// FieldActual holds the string denoting the actual field in the database.
	FieldActual = "actual"
	// FieldRemission holds the string denoting the remission field in the database.
	FieldRemission = "remission"
	// FieldCloseNature holds the string denoting the close_nature field in the database.
	FieldCloseNature = "close_nature"
	// EdgeItems holds the string denoting the items edge name in mutations.
	EdgeItems = "items"
	// EdgePay holds the string denoting the pay edge name in mutations.
	EdgePay = "pay"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// EdgeSnapshots holds the string denoting the snapshots edge name in mutations.
	EdgeSnapshots = "snapshots"
	// EdgeStatusHistory holds the string denoting the status_history edge name in mutations.
	EdgeStatusHistory = "status_history"
	// EdgeRefund holds the string denoting the refund edge name in mutations.
	EdgeRefund = "refund"
	// Table holds the table name of the order in the database.
	Table = "order"
	// ItemsTable is the table that holds the items relation/edge.
	ItemsTable = "order_item"
	// ItemsInverseTable is the table name for the OrderItem entity.
	// It exists in this package in order to avoid circular dependency with the "orderitem" package.
	ItemsInverseTable = "order_item"
	// ItemsColumn is the table column denoting the items relation/edge.
	ItemsColumn = "order_id"
	// PayTable is the table that holds the pay relation/edge.
	PayTable = "order_pay"
	// PayInverseTable is the table name for the OrderPay entity.
	// It exists in this package in order to avoid circular dependency with the "orderpay" package.
	PayInverseTable = "order_pay"
	// PayColumn is the table column denoting the pay relation/edge.
	PayColumn = "order_id"
	// EventsTable is the table that holds the events relation/edge.
	EventsTable = "order_events"
	// EventsInverseTable is the table name for the OrderEvents entity.
	// It exists in this package in order to avoid circular dependency with the "orderevents" package.
	EventsInverseTable = "order_events"
	// EventsColumn is the table column denoting the events relation/edge.
	EventsColumn = "aggregate_id"
	// SnapshotsTable is the table that holds the snapshots relation/edge.
	SnapshotsTable = "order_snapshots"
	// SnapshotsInverseTable is the table name for the OrderSnapshots entity.
	// It exists in this package in order to avoid circular dependency with the "ordersnapshots" package.
	SnapshotsInverseTable = "order_snapshots"
	// SnapshotsColumn is the table column denoting the snapshots relation/edge.
	SnapshotsColumn = "aggregate_id"
	// StatusHistoryTable is the table that holds the status_history relation/edge.
	StatusHistoryTable = "order_status_history"
	// StatusHistoryInverseTable is the table name for the OrderStatusHistory entity.
	// It exists in this package in order to avoid circular dependency with the "orderstatushistory" package.
	StatusHistoryInverseTable = "order_status_history"
	// StatusHistoryColumn is the table column denoting the status_history relation/edge.
	StatusHistoryColumn = "order_id"
	// RefundTable is the table that holds the refund relation/edge.
	RefundTable = "order_refund"
	// RefundInverseTable is the table name for the OrderRefund entity.
	// It exists in this package in order to avoid circular dependency with the "orderrefund" package.
	RefundInverseTable = "order_refund"
	// RefundColumn is the table column denoting the refund relation/edge.
	RefundColumn = "order_id"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDelete,
	FieldCreatedID,
	FieldSn,
	FieldMemberID,
	FieldStatus,
	FieldNature,
	FieldCompletionAt,
	FieldCloseAt,
	FieldVersion,
	FieldTotalAmount,
	FieldActual,
	FieldRemission,
	FieldCloseNature,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDelete holds the default value on creation for the "delete" field.
	DefaultDelete int64
	// DefaultCreatedID holds the default value on creation for the "created_id" field.
	DefaultCreatedID int64
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion int64
	// DefaultTotalAmount holds the default value on creation for the "total_amount" field.
	DefaultTotalAmount float64
	// DefaultActual holds the default value on creation for the "actual" field.
	DefaultActual float64
	// DefaultRemission holds the default value on creation for the "remission" field.
	DefaultRemission float64
)

// Status defines the type for the "status" enum field.
type Status string

// StatusCreated is the default value of the Status enum.
const DefaultStatus = StatusCreated

// Status values.
const (
	StatusCreated   Status = "created"
	StatusPaid      Status = "paid"
	StatusShipped   Status = "shipped"
	StatusCancelled Status = "cancelled"
	StatusCompleted Status = "completed"
	StatusRefunded  Status = "refunded"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusCreated, StatusPaid, StatusShipped, StatusCancelled, StatusCompleted, StatusRefunded:
		return nil
	default:
		return fmt.Errorf("order: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Order queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDelete orders the results by the delete field.
func ByDelete(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDelete, opts...).ToFunc()
}

// ByCreatedID orders the results by the created_id field.
func ByCreatedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedID, opts...).ToFunc()
}

// BySn orders the results by the sn field.
func BySn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSn, opts...).ToFunc()
}

// ByMemberID orders the results by the member_id field.
func ByMemberID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemberID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByNature orders the results by the nature field.
func ByNature(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNature, opts...).ToFunc()
}

// ByCompletionAt orders the results by the completion_at field.
func ByCompletionAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletionAt, opts...).ToFunc()
}

// ByCloseAt orders the results by the close_at field.
func ByCloseAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCloseAt, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByTotalAmount orders the results by the total_amount field.
func ByTotalAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalAmount, opts...).ToFunc()
}

// ByActual orders the results by the actual field.
func ByActual(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActual, opts...).ToFunc()
}

// ByRemission orders the results by the remission field.
func ByRemission(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemission, opts...).ToFunc()
}

// ByCloseNature orders the results by the close_nature field.
func ByCloseNature(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCloseNature, opts...).ToFunc()
}

// ByItemsCount orders the results by items count.
func ByItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newItemsStep(), opts...)
	}
}

// ByItems orders the results by items terms.
func ByItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPayCount orders the results by pay count.
func ByPayCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPayStep(), opts...)
	}
}

// ByPay orders the results by pay terms.
func ByPay(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPayStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventsCount orders the results by events count.
func ByEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventsStep(), opts...)
	}
}

// ByEvents orders the results by events terms.
func ByEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySnapshotsCount orders the results by snapshots count.
func BySnapshotsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSnapshotsStep(), opts...)
	}
}

// BySnapshots orders the results by snapshots terms.
func BySnapshots(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSnapshotsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStatusHistoryCount orders the results by status_history count.
func ByStatusHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStatusHistoryStep(), opts...)
	}
}

// ByStatusHistory orders the results by status_history terms.
func ByStatusHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStatusHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRefundCount orders the results by refund count.
func ByRefundCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRefundStep(), opts...)
	}
}

// ByRefund orders the results by refund terms.
func ByRefund(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRefundStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
	)
}
func newPayStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PayInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PayTable, PayColumn),
	)
}
func newEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
	)
}
func newSnapshotsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SnapshotsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SnapshotsTable, SnapshotsColumn),
	)
}
func newStatusHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StatusHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StatusHistoryTable, StatusHistoryColumn),
	)
}
func newRefundStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RefundInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RefundTable, RefundColumn),
	)
}
