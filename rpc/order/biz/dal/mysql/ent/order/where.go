// Code generated by ent, DO NOT EDIT.

package order

import (
	"deer/rpc/order/biz/dal/mysql/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// Delete applies equality check predicate on the "delete" field. It's identical to DeleteEQ.
func Delete(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDelete, v))
}

// CreatedID applies equality check predicate on the "created_id" field. It's identical to CreatedIDEQ.
func CreatedID(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedID, v))
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldSn, v))
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldMemberID, v))
}

// Nature applies equality check predicate on the "nature" field. It's identical to NatureEQ.
func Nature(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldNature, v))
}

// CompletionAt applies equality check predicate on the "completion_at" field. It's identical to CompletionAtEQ.
func CompletionAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCompletionAt, v))
}

// CloseAt applies equality check predicate on the "close_at" field. It's identical to CloseAtEQ.
func CloseAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCloseAt, v))
}

// RefundAt applies equality check predicate on the "refund_at" field. It's identical to RefundAtEQ.
func RefundAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldRefundAt, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldVersion, v))
}

// TotalAmount applies equality check predicate on the "total_amount" field. It's identical to TotalAmountEQ.
func TotalAmount(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTotalAmount, v))
}

// Actual applies equality check predicate on the "actual" field. It's identical to ActualEQ.
func Actual(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldActual, v))
}

// Remission applies equality check predicate on the "remission" field. It's identical to RemissionEQ.
func Remission(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldRemission, v))
}

// Refund applies equality check predicate on the "refund" field. It's identical to RefundEQ.
func Refund(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldRefund, v))
}

// CloseNature applies equality check predicate on the "close_nature" field. It's identical to CloseNatureEQ.
func CloseNature(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCloseNature, v))
}

// RefundNature applies equality check predicate on the "refund_nature" field. It's identical to RefundNatureEQ.
func RefundNature(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldRefundNature, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldUpdatedAt))
}

// DeleteEQ applies the EQ predicate on the "delete" field.
func DeleteEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDelete, v))
}

// DeleteNEQ applies the NEQ predicate on the "delete" field.
func DeleteNEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldDelete, v))
}

// DeleteIn applies the In predicate on the "delete" field.
func DeleteIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldDelete, vs...))
}

// DeleteNotIn applies the NotIn predicate on the "delete" field.
func DeleteNotIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldDelete, vs...))
}

// DeleteGT applies the GT predicate on the "delete" field.
func DeleteGT(v int64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldDelete, v))
}

// DeleteGTE applies the GTE predicate on the "delete" field.
func DeleteGTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldDelete, v))
}

// DeleteLT applies the LT predicate on the "delete" field.
func DeleteLT(v int64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldDelete, v))
}

// DeleteLTE applies the LTE predicate on the "delete" field.
func DeleteLTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldDelete, v))
}

// DeleteIsNil applies the IsNil predicate on the "delete" field.
func DeleteIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldDelete))
}

// DeleteNotNil applies the NotNil predicate on the "delete" field.
func DeleteNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldDelete))
}

// CreatedIDEQ applies the EQ predicate on the "created_id" field.
func CreatedIDEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedID, v))
}

// CreatedIDNEQ applies the NEQ predicate on the "created_id" field.
func CreatedIDNEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCreatedID, v))
}

// CreatedIDIn applies the In predicate on the "created_id" field.
func CreatedIDIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCreatedID, vs...))
}

// CreatedIDNotIn applies the NotIn predicate on the "created_id" field.
func CreatedIDNotIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCreatedID, vs...))
}

// CreatedIDGT applies the GT predicate on the "created_id" field.
func CreatedIDGT(v int64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCreatedID, v))
}

// CreatedIDGTE applies the GTE predicate on the "created_id" field.
func CreatedIDGTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCreatedID, v))
}

// CreatedIDLT applies the LT predicate on the "created_id" field.
func CreatedIDLT(v int64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCreatedID, v))
}

// CreatedIDLTE applies the LTE predicate on the "created_id" field.
func CreatedIDLTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCreatedID, v))
}

// CreatedIDIsNil applies the IsNil predicate on the "created_id" field.
func CreatedIDIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldCreatedID))
}

// CreatedIDNotNil applies the NotNil predicate on the "created_id" field.
func CreatedIDNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldCreatedID))
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldSn, v))
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldSn, v))
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldSn, vs...))
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldSn, vs...))
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldSn, v))
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldSn, v))
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldSn, v))
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldSn, v))
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldSn, v))
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldSn, v))
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldSn, v))
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldSn, v))
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldSn, v))
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldMemberID, v))
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldMemberID, v))
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldMemberID, vs...))
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldMemberID, vs...))
}

// MemberIDGT applies the GT predicate on the "member_id" field.
func MemberIDGT(v int64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldMemberID, v))
}

// MemberIDGTE applies the GTE predicate on the "member_id" field.
func MemberIDGTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldMemberID, v))
}

// MemberIDLT applies the LT predicate on the "member_id" field.
func MemberIDLT(v int64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldMemberID, v))
}

// MemberIDLTE applies the LTE predicate on the "member_id" field.
func MemberIDLTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldMemberID, v))
}

// MemberIDIsNil applies the IsNil predicate on the "member_id" field.
func MemberIDIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldMemberID))
}

// MemberIDNotNil applies the NotNil predicate on the "member_id" field.
func MemberIDNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldMemberID))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldStatus))
}

// NatureEQ applies the EQ predicate on the "nature" field.
func NatureEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldNature, v))
}

// NatureNEQ applies the NEQ predicate on the "nature" field.
func NatureNEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldNature, v))
}

// NatureIn applies the In predicate on the "nature" field.
func NatureIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldNature, vs...))
}

// NatureNotIn applies the NotIn predicate on the "nature" field.
func NatureNotIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldNature, vs...))
}

// NatureGT applies the GT predicate on the "nature" field.
func NatureGT(v int64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldNature, v))
}

// NatureGTE applies the GTE predicate on the "nature" field.
func NatureGTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldNature, v))
}

// NatureLT applies the LT predicate on the "nature" field.
func NatureLT(v int64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldNature, v))
}

// NatureLTE applies the LTE predicate on the "nature" field.
func NatureLTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldNature, v))
}

// NatureIsNil applies the IsNil predicate on the "nature" field.
func NatureIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldNature))
}

// NatureNotNil applies the NotNil predicate on the "nature" field.
func NatureNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldNature))
}

// CompletionAtEQ applies the EQ predicate on the "completion_at" field.
func CompletionAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCompletionAt, v))
}

// CompletionAtNEQ applies the NEQ predicate on the "completion_at" field.
func CompletionAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCompletionAt, v))
}

// CompletionAtIn applies the In predicate on the "completion_at" field.
func CompletionAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCompletionAt, vs...))
}

// CompletionAtNotIn applies the NotIn predicate on the "completion_at" field.
func CompletionAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCompletionAt, vs...))
}

// CompletionAtGT applies the GT predicate on the "completion_at" field.
func CompletionAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCompletionAt, v))
}

// CompletionAtGTE applies the GTE predicate on the "completion_at" field.
func CompletionAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCompletionAt, v))
}

// CompletionAtLT applies the LT predicate on the "completion_at" field.
func CompletionAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCompletionAt, v))
}

// CompletionAtLTE applies the LTE predicate on the "completion_at" field.
func CompletionAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCompletionAt, v))
}

// CompletionAtIsNil applies the IsNil predicate on the "completion_at" field.
func CompletionAtIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldCompletionAt))
}

// CompletionAtNotNil applies the NotNil predicate on the "completion_at" field.
func CompletionAtNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldCompletionAt))
}

// CloseAtEQ applies the EQ predicate on the "close_at" field.
func CloseAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCloseAt, v))
}

// CloseAtNEQ applies the NEQ predicate on the "close_at" field.
func CloseAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCloseAt, v))
}

// CloseAtIn applies the In predicate on the "close_at" field.
func CloseAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCloseAt, vs...))
}

// CloseAtNotIn applies the NotIn predicate on the "close_at" field.
func CloseAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCloseAt, vs...))
}

// CloseAtGT applies the GT predicate on the "close_at" field.
func CloseAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCloseAt, v))
}

// CloseAtGTE applies the GTE predicate on the "close_at" field.
func CloseAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCloseAt, v))
}

// CloseAtLT applies the LT predicate on the "close_at" field.
func CloseAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCloseAt, v))
}

// CloseAtLTE applies the LTE predicate on the "close_at" field.
func CloseAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCloseAt, v))
}

// CloseAtIsNil applies the IsNil predicate on the "close_at" field.
func CloseAtIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldCloseAt))
}

// CloseAtNotNil applies the NotNil predicate on the "close_at" field.
func CloseAtNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldCloseAt))
}

// RefundAtEQ applies the EQ predicate on the "refund_at" field.
func RefundAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldRefundAt, v))
}

// RefundAtNEQ applies the NEQ predicate on the "refund_at" field.
func RefundAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldRefundAt, v))
}

// RefundAtIn applies the In predicate on the "refund_at" field.
func RefundAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldRefundAt, vs...))
}

// RefundAtNotIn applies the NotIn predicate on the "refund_at" field.
func RefundAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldRefundAt, vs...))
}

// RefundAtGT applies the GT predicate on the "refund_at" field.
func RefundAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldRefundAt, v))
}

// RefundAtGTE applies the GTE predicate on the "refund_at" field.
func RefundAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldRefundAt, v))
}

// RefundAtLT applies the LT predicate on the "refund_at" field.
func RefundAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldRefundAt, v))
}

// RefundAtLTE applies the LTE predicate on the "refund_at" field.
func RefundAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldRefundAt, v))
}

// RefundAtIsNil applies the IsNil predicate on the "refund_at" field.
func RefundAtIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldRefundAt))
}

// RefundAtNotNil applies the NotNil predicate on the "refund_at" field.
func RefundAtNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldRefundAt))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldVersion))
}

// TotalAmountEQ applies the EQ predicate on the "total_amount" field.
func TotalAmountEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTotalAmount, v))
}

// TotalAmountNEQ applies the NEQ predicate on the "total_amount" field.
func TotalAmountNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTotalAmount, v))
}

// TotalAmountIn applies the In predicate on the "total_amount" field.
func TotalAmountIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTotalAmount, vs...))
}

// TotalAmountNotIn applies the NotIn predicate on the "total_amount" field.
func TotalAmountNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTotalAmount, vs...))
}

// TotalAmountGT applies the GT predicate on the "total_amount" field.
func TotalAmountGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTotalAmount, v))
}

// TotalAmountGTE applies the GTE predicate on the "total_amount" field.
func TotalAmountGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTotalAmount, v))
}

// TotalAmountLT applies the LT predicate on the "total_amount" field.
func TotalAmountLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTotalAmount, v))
}

// TotalAmountLTE applies the LTE predicate on the "total_amount" field.
func TotalAmountLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTotalAmount, v))
}

// TotalAmountIsNil applies the IsNil predicate on the "total_amount" field.
func TotalAmountIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldTotalAmount))
}

// TotalAmountNotNil applies the NotNil predicate on the "total_amount" field.
func TotalAmountNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldTotalAmount))
}

// ActualEQ applies the EQ predicate on the "actual" field.
func ActualEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldActual, v))
}

// ActualNEQ applies the NEQ predicate on the "actual" field.
func ActualNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldActual, v))
}

// ActualIn applies the In predicate on the "actual" field.
func ActualIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldActual, vs...))
}

// ActualNotIn applies the NotIn predicate on the "actual" field.
func ActualNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldActual, vs...))
}

// ActualGT applies the GT predicate on the "actual" field.
func ActualGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldActual, v))
}

// ActualGTE applies the GTE predicate on the "actual" field.
func ActualGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldActual, v))
}

// ActualLT applies the LT predicate on the "actual" field.
func ActualLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldActual, v))
}

// ActualLTE applies the LTE predicate on the "actual" field.
func ActualLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldActual, v))
}

// ActualIsNil applies the IsNil predicate on the "actual" field.
func ActualIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldActual))
}

// ActualNotNil applies the NotNil predicate on the "actual" field.
func ActualNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldActual))
}

// RemissionEQ applies the EQ predicate on the "remission" field.
func RemissionEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldRemission, v))
}

// RemissionNEQ applies the NEQ predicate on the "remission" field.
func RemissionNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldRemission, v))
}

// RemissionIn applies the In predicate on the "remission" field.
func RemissionIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldRemission, vs...))
}

// RemissionNotIn applies the NotIn predicate on the "remission" field.
func RemissionNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldRemission, vs...))
}

// RemissionGT applies the GT predicate on the "remission" field.
func RemissionGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldRemission, v))
}

// RemissionGTE applies the GTE predicate on the "remission" field.
func RemissionGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldRemission, v))
}

// RemissionLT applies the LT predicate on the "remission" field.
func RemissionLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldRemission, v))
}

// RemissionLTE applies the LTE predicate on the "remission" field.
func RemissionLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldRemission, v))
}

// RemissionIsNil applies the IsNil predicate on the "remission" field.
func RemissionIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldRemission))
}

// RemissionNotNil applies the NotNil predicate on the "remission" field.
func RemissionNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldRemission))
}

// RefundEQ applies the EQ predicate on the "refund" field.
func RefundEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldRefund, v))
}

// RefundNEQ applies the NEQ predicate on the "refund" field.
func RefundNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldRefund, v))
}

// RefundIn applies the In predicate on the "refund" field.
func RefundIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldRefund, vs...))
}

// RefundNotIn applies the NotIn predicate on the "refund" field.
func RefundNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldRefund, vs...))
}

// RefundGT applies the GT predicate on the "refund" field.
func RefundGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldRefund, v))
}

// RefundGTE applies the GTE predicate on the "refund" field.
func RefundGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldRefund, v))
}

// RefundLT applies the LT predicate on the "refund" field.
func RefundLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldRefund, v))
}

// RefundLTE applies the LTE predicate on the "refund" field.
func RefundLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldRefund, v))
}

// RefundIsNil applies the IsNil predicate on the "refund" field.
func RefundIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldRefund))
}

// RefundNotNil applies the NotNil predicate on the "refund" field.
func RefundNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldRefund))
}

// CloseNatureEQ applies the EQ predicate on the "close_nature" field.
func CloseNatureEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCloseNature, v))
}

// CloseNatureNEQ applies the NEQ predicate on the "close_nature" field.
func CloseNatureNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCloseNature, v))
}

// CloseNatureIn applies the In predicate on the "close_nature" field.
func CloseNatureIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCloseNature, vs...))
}

// CloseNatureNotIn applies the NotIn predicate on the "close_nature" field.
func CloseNatureNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCloseNature, vs...))
}

// CloseNatureGT applies the GT predicate on the "close_nature" field.
func CloseNatureGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCloseNature, v))
}

// CloseNatureGTE applies the GTE predicate on the "close_nature" field.
func CloseNatureGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCloseNature, v))
}

// CloseNatureLT applies the LT predicate on the "close_nature" field.
func CloseNatureLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCloseNature, v))
}

// CloseNatureLTE applies the LTE predicate on the "close_nature" field.
func CloseNatureLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCloseNature, v))
}

// CloseNatureContains applies the Contains predicate on the "close_nature" field.
func CloseNatureContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldCloseNature, v))
}

// CloseNatureHasPrefix applies the HasPrefix predicate on the "close_nature" field.
func CloseNatureHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldCloseNature, v))
}

// CloseNatureHasSuffix applies the HasSuffix predicate on the "close_nature" field.
func CloseNatureHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldCloseNature, v))
}

// CloseNatureIsNil applies the IsNil predicate on the "close_nature" field.
func CloseNatureIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldCloseNature))
}

// CloseNatureNotNil applies the NotNil predicate on the "close_nature" field.
func CloseNatureNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldCloseNature))
}

// CloseNatureEqualFold applies the EqualFold predicate on the "close_nature" field.
func CloseNatureEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldCloseNature, v))
}

// CloseNatureContainsFold applies the ContainsFold predicate on the "close_nature" field.
func CloseNatureContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldCloseNature, v))
}

// RefundNatureEQ applies the EQ predicate on the "refund_nature" field.
func RefundNatureEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldRefundNature, v))
}

// RefundNatureNEQ applies the NEQ predicate on the "refund_nature" field.
func RefundNatureNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldRefundNature, v))
}

// RefundNatureIn applies the In predicate on the "refund_nature" field.
func RefundNatureIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldRefundNature, vs...))
}

// RefundNatureNotIn applies the NotIn predicate on the "refund_nature" field.
func RefundNatureNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldRefundNature, vs...))
}

// RefundNatureGT applies the GT predicate on the "refund_nature" field.
func RefundNatureGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldRefundNature, v))
}

// RefundNatureGTE applies the GTE predicate on the "refund_nature" field.
func RefundNatureGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldRefundNature, v))
}

// RefundNatureLT applies the LT predicate on the "refund_nature" field.
func RefundNatureLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldRefundNature, v))
}

// RefundNatureLTE applies the LTE predicate on the "refund_nature" field.
func RefundNatureLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldRefundNature, v))
}

// RefundNatureContains applies the Contains predicate on the "refund_nature" field.
func RefundNatureContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldRefundNature, v))
}

// RefundNatureHasPrefix applies the HasPrefix predicate on the "refund_nature" field.
func RefundNatureHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldRefundNature, v))
}

// RefundNatureHasSuffix applies the HasSuffix predicate on the "refund_nature" field.
func RefundNatureHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldRefundNature, v))
}

// RefundNatureIsNil applies the IsNil predicate on the "refund_nature" field.
func RefundNatureIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldRefundNature))
}

// RefundNatureNotNil applies the NotNil predicate on the "refund_nature" field.
func RefundNatureNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldRefundNature))
}

// RefundNatureEqualFold applies the EqualFold predicate on the "refund_nature" field.
func RefundNatureEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldRefundNature, v))
}

// RefundNatureContainsFold applies the ContainsFold predicate on the "refund_nature" field.
func RefundNatureContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldRefundNature, v))
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.OrderItem) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPay applies the HasEdge predicate on the "pay" edge.
func HasPay() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PayTable, PayColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPayWith applies the HasEdge predicate on the "pay" edge with a given conditions (other predicates).
func HasPayWith(preds ...predicate.OrderPay) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newPayStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.OrderEvents) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSnapshots applies the HasEdge predicate on the "snapshots" edge.
func HasSnapshots() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SnapshotsTable, SnapshotsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSnapshotsWith applies the HasEdge predicate on the "snapshots" edge with a given conditions (other predicates).
func HasSnapshotsWith(preds ...predicate.OrderSnapshots) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newSnapshotsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatusHistory applies the HasEdge predicate on the "status_history" edge.
func HasStatusHistory() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StatusHistoryTable, StatusHistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusHistoryWith applies the HasEdge predicate on the "status_history" edge with a given conditions (other predicates).
func HasStatusHistoryWith(preds ...predicate.OrderStatusHistory) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newStatusHistoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(sql.NotPredicates(p))
}
