// Code generated by ent, DO NOT EDIT.

package ent

import (
	"deer/rpc/order/biz/dal/mysql/ent/order"
	"deer/rpc/order/biz/dal/mysql/ent/orderrefund"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OrderRefund is the model entity for the OrderRefund schema.
type OrderRefund struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除 0:未删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// 订单id
	OrderID int64 `json:"order_id,omitempty"`
	// 订单退费时间
	RefundAt time.Time `json:"refund_at,omitempty"`
	// 退费金额
	Refund float64 `json:"refund,omitempty"`
	// 退费原因
	RefundNature string `json:"refund_nature,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderRefundQuery when eager-loading is set.
	Edges        OrderRefundEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderRefundEdges holds the relations/edges for other nodes in the graph.
type OrderRefundEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderRefundEdges) OrderOrErr() (*Order, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: order.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderRefund) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderrefund.FieldRefund:
			values[i] = new(sql.NullFloat64)
		case orderrefund.FieldID, orderrefund.FieldDelete, orderrefund.FieldCreatedID, orderrefund.FieldOrderID:
			values[i] = new(sql.NullInt64)
		case orderrefund.FieldRefundNature:
			values[i] = new(sql.NullString)
		case orderrefund.FieldCreatedAt, orderrefund.FieldUpdatedAt, orderrefund.FieldRefundAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderRefund fields.
func (_m *OrderRefund) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderrefund.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int64(value.Int64)
		case orderrefund.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case orderrefund.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case orderrefund.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				_m.Delete = value.Int64
			}
		case orderrefund.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				_m.CreatedID = value.Int64
			}
		case orderrefund.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				_m.OrderID = value.Int64
			}
		case orderrefund.FieldRefundAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field refund_at", values[i])
			} else if value.Valid {
				_m.RefundAt = value.Time
			}
		case orderrefund.FieldRefund:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field refund", values[i])
			} else if value.Valid {
				_m.Refund = value.Float64
			}
		case orderrefund.FieldRefundNature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refund_nature", values[i])
			} else if value.Valid {
				_m.RefundNature = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderRefund.
// This includes values selected through modifiers, order, etc.
func (_m *OrderRefund) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the OrderRefund entity.
func (_m *OrderRefund) QueryOrder() *OrderQuery {
	return NewOrderRefundClient(_m.config).QueryOrder(_m)
}

// Update returns a builder for updating this OrderRefund.
// Note that you need to call OrderRefund.Unwrap() before calling this method if this OrderRefund
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *OrderRefund) Update() *OrderRefundUpdateOne {
	return NewOrderRefundClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the OrderRefund entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *OrderRefund) Unwrap() *OrderRefund {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderRefund is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *OrderRefund) String() string {
	var builder strings.Builder
	builder.WriteString("OrderRefund(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", _m.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.OrderID))
	builder.WriteString(", ")
	builder.WriteString("refund_at=")
	builder.WriteString(_m.RefundAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("refund=")
	builder.WriteString(fmt.Sprintf("%v", _m.Refund))
	builder.WriteString(", ")
	builder.WriteString("refund_nature=")
	builder.WriteString(_m.RefundNature)
	builder.WriteByte(')')
	return builder.String()
}

// OrderRefunds is a parsable slice of OrderRefund.
type OrderRefunds []*OrderRefund
