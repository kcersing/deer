// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"deer/rpc/order/biz/dal/mysql/ent/migrate"

	"deer/rpc/order/biz/dal/mysql/ent/order"
	"deer/rpc/order/biz/dal/mysql/ent/orderevents"
	"deer/rpc/order/biz/dal/mysql/ent/ordereventsubscriptions"
	"deer/rpc/order/biz/dal/mysql/ent/orderitem"
	"deer/rpc/order/biz/dal/mysql/ent/ordersnapshots"
	"deer/rpc/order/biz/dal/mysql/ent/orderstatushistory"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// OrderEventSubscriptions is the client for interacting with the OrderEventSubscriptions builders.
	OrderEventSubscriptions *OrderEventSubscriptionsClient
	// OrderEvents is the client for interacting with the OrderEvents builders.
	OrderEvents *OrderEventsClient
	// OrderItem is the client for interacting with the OrderItem builders.
	OrderItem *OrderItemClient
	// OrderSnapshots is the client for interacting with the OrderSnapshots builders.
	OrderSnapshots *OrderSnapshotsClient
	// OrderStatusHistory is the client for interacting with the OrderStatusHistory builders.
	OrderStatusHistory *OrderStatusHistoryClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Order = NewOrderClient(c.config)
	c.OrderEventSubscriptions = NewOrderEventSubscriptionsClient(c.config)
	c.OrderEvents = NewOrderEventsClient(c.config)
	c.OrderItem = NewOrderItemClient(c.config)
	c.OrderSnapshots = NewOrderSnapshotsClient(c.config)
	c.OrderStatusHistory = NewOrderStatusHistoryClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		Order:                   NewOrderClient(cfg),
		OrderEventSubscriptions: NewOrderEventSubscriptionsClient(cfg),
		OrderEvents:             NewOrderEventsClient(cfg),
		OrderItem:               NewOrderItemClient(cfg),
		OrderSnapshots:          NewOrderSnapshotsClient(cfg),
		OrderStatusHistory:      NewOrderStatusHistoryClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		Order:                   NewOrderClient(cfg),
		OrderEventSubscriptions: NewOrderEventSubscriptionsClient(cfg),
		OrderEvents:             NewOrderEventsClient(cfg),
		OrderItem:               NewOrderItemClient(cfg),
		OrderSnapshots:          NewOrderSnapshotsClient(cfg),
		OrderStatusHistory:      NewOrderStatusHistoryClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Order.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Order, c.OrderEventSubscriptions, c.OrderEvents, c.OrderItem,
		c.OrderSnapshots, c.OrderStatusHistory,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Order, c.OrderEventSubscriptions, c.OrderEvents, c.OrderItem,
		c.OrderSnapshots, c.OrderStatusHistory,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *OrderMutation:
		return c.Order.mutate(ctx, m)
	case *OrderEventSubscriptionsMutation:
		return c.OrderEventSubscriptions.mutate(ctx, m)
	case *OrderEventsMutation:
		return c.OrderEvents.mutate(ctx, m)
	case *OrderItemMutation:
		return c.OrderItem.mutate(ctx, m)
	case *OrderSnapshotsMutation:
		return c.OrderSnapshots.mutate(ctx, m)
	case *OrderStatusHistoryMutation:
		return c.OrderStatusHistory.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `order.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `order.Intercept(f(g(h())))`.
func (c *OrderClient) Intercept(interceptors ...Interceptor) {
	c.inters.Order = append(c.inters.Order, interceptors...)
}

// Create returns a builder for creating a Order entity.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Order entities.
func (c *OrderClient) CreateBulk(builders ...*OrderCreate) *OrderCreateBulk {
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderClient) MapCreateBulk(slice any, setFunc func(*OrderCreate, int)) *OrderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderCreateBulk{err: fmt.Errorf("calling to OrderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(_m *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(_m))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id int64) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderClient) DeleteOne(_m *Order) *OrderDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderClient) DeleteOneID(id int64) *OrderDeleteOne {
	builder := c.Delete().Where(order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Query returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrder},
		inters: c.Interceptors(),
	}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id int64) (*Order, error) {
	return c.Query().Where(order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id int64) *Order {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryItems queries the items edge of a Order.
func (c *OrderClient) QueryItems(_m *Order) *OrderItemQuery {
	query := (&OrderItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.ItemsTable, order.ItemsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEvents queries the events edge of a Order.
func (c *OrderClient) QueryEvents(_m *Order) *OrderEventsQuery {
	query := (&OrderEventsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(orderevents.Table, orderevents.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.EventsTable, order.EventsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySnapshots queries the snapshots edge of a Order.
func (c *OrderClient) QuerySnapshots(_m *Order) *OrderSnapshotsQuery {
	query := (&OrderSnapshotsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(ordersnapshots.Table, ordersnapshots.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.SnapshotsTable, order.SnapshotsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusHistory queries the status_history edge of a Order.
func (c *OrderClient) QueryStatusHistory(_m *Order) *OrderStatusHistoryQuery {
	query := (&OrderStatusHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(orderstatushistory.Table, orderstatushistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.StatusHistoryTable, order.StatusHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	return c.hooks.Order
}

// Interceptors returns the client interceptors.
func (c *OrderClient) Interceptors() []Interceptor {
	return c.inters.Order
}

func (c *OrderClient) mutate(ctx context.Context, m *OrderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Order mutation op: %q", m.Op())
	}
}

// OrderEventSubscriptionsClient is a client for the OrderEventSubscriptions schema.
type OrderEventSubscriptionsClient struct {
	config
}

// NewOrderEventSubscriptionsClient returns a client for the OrderEventSubscriptions from the given config.
func NewOrderEventSubscriptionsClient(c config) *OrderEventSubscriptionsClient {
	return &OrderEventSubscriptionsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ordereventsubscriptions.Hooks(f(g(h())))`.
func (c *OrderEventSubscriptionsClient) Use(hooks ...Hook) {
	c.hooks.OrderEventSubscriptions = append(c.hooks.OrderEventSubscriptions, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ordereventsubscriptions.Intercept(f(g(h())))`.
func (c *OrderEventSubscriptionsClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderEventSubscriptions = append(c.inters.OrderEventSubscriptions, interceptors...)
}

// Create returns a builder for creating a OrderEventSubscriptions entity.
func (c *OrderEventSubscriptionsClient) Create() *OrderEventSubscriptionsCreate {
	mutation := newOrderEventSubscriptionsMutation(c.config, OpCreate)
	return &OrderEventSubscriptionsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderEventSubscriptions entities.
func (c *OrderEventSubscriptionsClient) CreateBulk(builders ...*OrderEventSubscriptionsCreate) *OrderEventSubscriptionsCreateBulk {
	return &OrderEventSubscriptionsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderEventSubscriptionsClient) MapCreateBulk(slice any, setFunc func(*OrderEventSubscriptionsCreate, int)) *OrderEventSubscriptionsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderEventSubscriptionsCreateBulk{err: fmt.Errorf("calling to OrderEventSubscriptionsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderEventSubscriptionsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderEventSubscriptionsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderEventSubscriptions.
func (c *OrderEventSubscriptionsClient) Update() *OrderEventSubscriptionsUpdate {
	mutation := newOrderEventSubscriptionsMutation(c.config, OpUpdate)
	return &OrderEventSubscriptionsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderEventSubscriptionsClient) UpdateOne(_m *OrderEventSubscriptions) *OrderEventSubscriptionsUpdateOne {
	mutation := newOrderEventSubscriptionsMutation(c.config, OpUpdateOne, withOrderEventSubscriptions(_m))
	return &OrderEventSubscriptionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderEventSubscriptionsClient) UpdateOneID(id int64) *OrderEventSubscriptionsUpdateOne {
	mutation := newOrderEventSubscriptionsMutation(c.config, OpUpdateOne, withOrderEventSubscriptionsID(id))
	return &OrderEventSubscriptionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderEventSubscriptions.
func (c *OrderEventSubscriptionsClient) Delete() *OrderEventSubscriptionsDelete {
	mutation := newOrderEventSubscriptionsMutation(c.config, OpDelete)
	return &OrderEventSubscriptionsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderEventSubscriptionsClient) DeleteOne(_m *OrderEventSubscriptions) *OrderEventSubscriptionsDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderEventSubscriptionsClient) DeleteOneID(id int64) *OrderEventSubscriptionsDeleteOne {
	builder := c.Delete().Where(ordereventsubscriptions.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderEventSubscriptionsDeleteOne{builder}
}

// Query returns a query builder for OrderEventSubscriptions.
func (c *OrderEventSubscriptionsClient) Query() *OrderEventSubscriptionsQuery {
	return &OrderEventSubscriptionsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderEventSubscriptions},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderEventSubscriptions entity by its id.
func (c *OrderEventSubscriptionsClient) Get(ctx context.Context, id int64) (*OrderEventSubscriptions, error) {
	return c.Query().Where(ordereventsubscriptions.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderEventSubscriptionsClient) GetX(ctx context.Context, id int64) *OrderEventSubscriptions {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderEventSubscriptionsClient) Hooks() []Hook {
	return c.hooks.OrderEventSubscriptions
}

// Interceptors returns the client interceptors.
func (c *OrderEventSubscriptionsClient) Interceptors() []Interceptor {
	return c.inters.OrderEventSubscriptions
}

func (c *OrderEventSubscriptionsClient) mutate(ctx context.Context, m *OrderEventSubscriptionsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderEventSubscriptionsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderEventSubscriptionsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderEventSubscriptionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderEventSubscriptionsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderEventSubscriptions mutation op: %q", m.Op())
	}
}

// OrderEventsClient is a client for the OrderEvents schema.
type OrderEventsClient struct {
	config
}

// NewOrderEventsClient returns a client for the OrderEvents from the given config.
func NewOrderEventsClient(c config) *OrderEventsClient {
	return &OrderEventsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderevents.Hooks(f(g(h())))`.
func (c *OrderEventsClient) Use(hooks ...Hook) {
	c.hooks.OrderEvents = append(c.hooks.OrderEvents, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderevents.Intercept(f(g(h())))`.
func (c *OrderEventsClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderEvents = append(c.inters.OrderEvents, interceptors...)
}

// Create returns a builder for creating a OrderEvents entity.
func (c *OrderEventsClient) Create() *OrderEventsCreate {
	mutation := newOrderEventsMutation(c.config, OpCreate)
	return &OrderEventsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderEvents entities.
func (c *OrderEventsClient) CreateBulk(builders ...*OrderEventsCreate) *OrderEventsCreateBulk {
	return &OrderEventsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderEventsClient) MapCreateBulk(slice any, setFunc func(*OrderEventsCreate, int)) *OrderEventsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderEventsCreateBulk{err: fmt.Errorf("calling to OrderEventsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderEventsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderEventsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderEvents.
func (c *OrderEventsClient) Update() *OrderEventsUpdate {
	mutation := newOrderEventsMutation(c.config, OpUpdate)
	return &OrderEventsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderEventsClient) UpdateOne(_m *OrderEvents) *OrderEventsUpdateOne {
	mutation := newOrderEventsMutation(c.config, OpUpdateOne, withOrderEvents(_m))
	return &OrderEventsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderEventsClient) UpdateOneID(id int64) *OrderEventsUpdateOne {
	mutation := newOrderEventsMutation(c.config, OpUpdateOne, withOrderEventsID(id))
	return &OrderEventsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderEvents.
func (c *OrderEventsClient) Delete() *OrderEventsDelete {
	mutation := newOrderEventsMutation(c.config, OpDelete)
	return &OrderEventsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderEventsClient) DeleteOne(_m *OrderEvents) *OrderEventsDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderEventsClient) DeleteOneID(id int64) *OrderEventsDeleteOne {
	builder := c.Delete().Where(orderevents.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderEventsDeleteOne{builder}
}

// Query returns a query builder for OrderEvents.
func (c *OrderEventsClient) Query() *OrderEventsQuery {
	return &OrderEventsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderEvents},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderEvents entity by its id.
func (c *OrderEventsClient) Get(ctx context.Context, id int64) (*OrderEvents, error) {
	return c.Query().Where(orderevents.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderEventsClient) GetX(ctx context.Context, id int64) *OrderEvents {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a OrderEvents.
func (c *OrderEventsClient) QueryOrder(_m *OrderEvents) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderevents.Table, orderevents.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderevents.OrderTable, orderevents.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderEventsClient) Hooks() []Hook {
	return c.hooks.OrderEvents
}

// Interceptors returns the client interceptors.
func (c *OrderEventsClient) Interceptors() []Interceptor {
	return c.inters.OrderEvents
}

func (c *OrderEventsClient) mutate(ctx context.Context, m *OrderEventsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderEventsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderEventsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderEventsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderEventsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderEvents mutation op: %q", m.Op())
	}
}

// OrderItemClient is a client for the OrderItem schema.
type OrderItemClient struct {
	config
}

// NewOrderItemClient returns a client for the OrderItem from the given config.
func NewOrderItemClient(c config) *OrderItemClient {
	return &OrderItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderitem.Hooks(f(g(h())))`.
func (c *OrderItemClient) Use(hooks ...Hook) {
	c.hooks.OrderItem = append(c.hooks.OrderItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderitem.Intercept(f(g(h())))`.
func (c *OrderItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderItem = append(c.inters.OrderItem, interceptors...)
}

// Create returns a builder for creating a OrderItem entity.
func (c *OrderItemClient) Create() *OrderItemCreate {
	mutation := newOrderItemMutation(c.config, OpCreate)
	return &OrderItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderItem entities.
func (c *OrderItemClient) CreateBulk(builders ...*OrderItemCreate) *OrderItemCreateBulk {
	return &OrderItemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderItemClient) MapCreateBulk(slice any, setFunc func(*OrderItemCreate, int)) *OrderItemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderItemCreateBulk{err: fmt.Errorf("calling to OrderItemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderItemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderItem.
func (c *OrderItemClient) Update() *OrderItemUpdate {
	mutation := newOrderItemMutation(c.config, OpUpdate)
	return &OrderItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderItemClient) UpdateOne(_m *OrderItem) *OrderItemUpdateOne {
	mutation := newOrderItemMutation(c.config, OpUpdateOne, withOrderItem(_m))
	return &OrderItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderItemClient) UpdateOneID(id int64) *OrderItemUpdateOne {
	mutation := newOrderItemMutation(c.config, OpUpdateOne, withOrderItemID(id))
	return &OrderItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderItem.
func (c *OrderItemClient) Delete() *OrderItemDelete {
	mutation := newOrderItemMutation(c.config, OpDelete)
	return &OrderItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderItemClient) DeleteOne(_m *OrderItem) *OrderItemDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderItemClient) DeleteOneID(id int64) *OrderItemDeleteOne {
	builder := c.Delete().Where(orderitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderItemDeleteOne{builder}
}

// Query returns a query builder for OrderItem.
func (c *OrderItemClient) Query() *OrderItemQuery {
	return &OrderItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderItem},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderItem entity by its id.
func (c *OrderItemClient) Get(ctx context.Context, id int64) (*OrderItem, error) {
	return c.Query().Where(orderitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderItemClient) GetX(ctx context.Context, id int64) *OrderItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a OrderItem.
func (c *OrderItemClient) QueryOrder(_m *OrderItem) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitem.OrderTable, orderitem.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderItemClient) Hooks() []Hook {
	return c.hooks.OrderItem
}

// Interceptors returns the client interceptors.
func (c *OrderItemClient) Interceptors() []Interceptor {
	return c.inters.OrderItem
}

func (c *OrderItemClient) mutate(ctx context.Context, m *OrderItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderItem mutation op: %q", m.Op())
	}
}

// OrderSnapshotsClient is a client for the OrderSnapshots schema.
type OrderSnapshotsClient struct {
	config
}

// NewOrderSnapshotsClient returns a client for the OrderSnapshots from the given config.
func NewOrderSnapshotsClient(c config) *OrderSnapshotsClient {
	return &OrderSnapshotsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ordersnapshots.Hooks(f(g(h())))`.
func (c *OrderSnapshotsClient) Use(hooks ...Hook) {
	c.hooks.OrderSnapshots = append(c.hooks.OrderSnapshots, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ordersnapshots.Intercept(f(g(h())))`.
func (c *OrderSnapshotsClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderSnapshots = append(c.inters.OrderSnapshots, interceptors...)
}

// Create returns a builder for creating a OrderSnapshots entity.
func (c *OrderSnapshotsClient) Create() *OrderSnapshotsCreate {
	mutation := newOrderSnapshotsMutation(c.config, OpCreate)
	return &OrderSnapshotsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderSnapshots entities.
func (c *OrderSnapshotsClient) CreateBulk(builders ...*OrderSnapshotsCreate) *OrderSnapshotsCreateBulk {
	return &OrderSnapshotsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderSnapshotsClient) MapCreateBulk(slice any, setFunc func(*OrderSnapshotsCreate, int)) *OrderSnapshotsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderSnapshotsCreateBulk{err: fmt.Errorf("calling to OrderSnapshotsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderSnapshotsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderSnapshotsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderSnapshots.
func (c *OrderSnapshotsClient) Update() *OrderSnapshotsUpdate {
	mutation := newOrderSnapshotsMutation(c.config, OpUpdate)
	return &OrderSnapshotsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderSnapshotsClient) UpdateOne(_m *OrderSnapshots) *OrderSnapshotsUpdateOne {
	mutation := newOrderSnapshotsMutation(c.config, OpUpdateOne, withOrderSnapshots(_m))
	return &OrderSnapshotsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderSnapshotsClient) UpdateOneID(id int64) *OrderSnapshotsUpdateOne {
	mutation := newOrderSnapshotsMutation(c.config, OpUpdateOne, withOrderSnapshotsID(id))
	return &OrderSnapshotsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderSnapshots.
func (c *OrderSnapshotsClient) Delete() *OrderSnapshotsDelete {
	mutation := newOrderSnapshotsMutation(c.config, OpDelete)
	return &OrderSnapshotsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderSnapshotsClient) DeleteOne(_m *OrderSnapshots) *OrderSnapshotsDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderSnapshotsClient) DeleteOneID(id int64) *OrderSnapshotsDeleteOne {
	builder := c.Delete().Where(ordersnapshots.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderSnapshotsDeleteOne{builder}
}

// Query returns a query builder for OrderSnapshots.
func (c *OrderSnapshotsClient) Query() *OrderSnapshotsQuery {
	return &OrderSnapshotsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderSnapshots},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderSnapshots entity by its id.
func (c *OrderSnapshotsClient) Get(ctx context.Context, id int64) (*OrderSnapshots, error) {
	return c.Query().Where(ordersnapshots.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderSnapshotsClient) GetX(ctx context.Context, id int64) *OrderSnapshots {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a OrderSnapshots.
func (c *OrderSnapshotsClient) QueryOrder(_m *OrderSnapshots) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ordersnapshots.Table, ordersnapshots.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ordersnapshots.OrderTable, ordersnapshots.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderSnapshotsClient) Hooks() []Hook {
	return c.hooks.OrderSnapshots
}

// Interceptors returns the client interceptors.
func (c *OrderSnapshotsClient) Interceptors() []Interceptor {
	return c.inters.OrderSnapshots
}

func (c *OrderSnapshotsClient) mutate(ctx context.Context, m *OrderSnapshotsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderSnapshotsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderSnapshotsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderSnapshotsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderSnapshotsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderSnapshots mutation op: %q", m.Op())
	}
}

// OrderStatusHistoryClient is a client for the OrderStatusHistory schema.
type OrderStatusHistoryClient struct {
	config
}

// NewOrderStatusHistoryClient returns a client for the OrderStatusHistory from the given config.
func NewOrderStatusHistoryClient(c config) *OrderStatusHistoryClient {
	return &OrderStatusHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderstatushistory.Hooks(f(g(h())))`.
func (c *OrderStatusHistoryClient) Use(hooks ...Hook) {
	c.hooks.OrderStatusHistory = append(c.hooks.OrderStatusHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderstatushistory.Intercept(f(g(h())))`.
func (c *OrderStatusHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderStatusHistory = append(c.inters.OrderStatusHistory, interceptors...)
}

// Create returns a builder for creating a OrderStatusHistory entity.
func (c *OrderStatusHistoryClient) Create() *OrderStatusHistoryCreate {
	mutation := newOrderStatusHistoryMutation(c.config, OpCreate)
	return &OrderStatusHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderStatusHistory entities.
func (c *OrderStatusHistoryClient) CreateBulk(builders ...*OrderStatusHistoryCreate) *OrderStatusHistoryCreateBulk {
	return &OrderStatusHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderStatusHistoryClient) MapCreateBulk(slice any, setFunc func(*OrderStatusHistoryCreate, int)) *OrderStatusHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderStatusHistoryCreateBulk{err: fmt.Errorf("calling to OrderStatusHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderStatusHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderStatusHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderStatusHistory.
func (c *OrderStatusHistoryClient) Update() *OrderStatusHistoryUpdate {
	mutation := newOrderStatusHistoryMutation(c.config, OpUpdate)
	return &OrderStatusHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderStatusHistoryClient) UpdateOne(_m *OrderStatusHistory) *OrderStatusHistoryUpdateOne {
	mutation := newOrderStatusHistoryMutation(c.config, OpUpdateOne, withOrderStatusHistory(_m))
	return &OrderStatusHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderStatusHistoryClient) UpdateOneID(id int64) *OrderStatusHistoryUpdateOne {
	mutation := newOrderStatusHistoryMutation(c.config, OpUpdateOne, withOrderStatusHistoryID(id))
	return &OrderStatusHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderStatusHistory.
func (c *OrderStatusHistoryClient) Delete() *OrderStatusHistoryDelete {
	mutation := newOrderStatusHistoryMutation(c.config, OpDelete)
	return &OrderStatusHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderStatusHistoryClient) DeleteOne(_m *OrderStatusHistory) *OrderStatusHistoryDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderStatusHistoryClient) DeleteOneID(id int64) *OrderStatusHistoryDeleteOne {
	builder := c.Delete().Where(orderstatushistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderStatusHistoryDeleteOne{builder}
}

// Query returns a query builder for OrderStatusHistory.
func (c *OrderStatusHistoryClient) Query() *OrderStatusHistoryQuery {
	return &OrderStatusHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderStatusHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderStatusHistory entity by its id.
func (c *OrderStatusHistoryClient) Get(ctx context.Context, id int64) (*OrderStatusHistory, error) {
	return c.Query().Where(orderstatushistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderStatusHistoryClient) GetX(ctx context.Context, id int64) *OrderStatusHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a OrderStatusHistory.
func (c *OrderStatusHistoryClient) QueryOrder(_m *OrderStatusHistory) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderstatushistory.Table, orderstatushistory.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderstatushistory.OrderTable, orderstatushistory.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderStatusHistoryClient) Hooks() []Hook {
	return c.hooks.OrderStatusHistory
}

// Interceptors returns the client interceptors.
func (c *OrderStatusHistoryClient) Interceptors() []Interceptor {
	return c.inters.OrderStatusHistory
}

func (c *OrderStatusHistoryClient) mutate(ctx context.Context, m *OrderStatusHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderStatusHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderStatusHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderStatusHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderStatusHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderStatusHistory mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Order, OrderEventSubscriptions, OrderEvents, OrderItem, OrderSnapshots,
		OrderStatusHistory []ent.Hook
	}
	inters struct {
		Order, OrderEventSubscriptions, OrderEvents, OrderItem, OrderSnapshots,
		OrderStatusHistory []ent.Interceptor
	}
)
