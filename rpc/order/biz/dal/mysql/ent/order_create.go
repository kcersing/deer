// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"deer/rpc/order/biz/dal/mysql/ent/order"
	"deer/rpc/order/biz/dal/mysql/ent/orderevents"
	"deer/rpc/order/biz/dal/mysql/ent/orderitem"
	"deer/rpc/order/biz/dal/mysql/ent/orderpay"
	"deer/rpc/order/biz/dal/mysql/ent/ordersnapshots"
	"deer/rpc/order/biz/dal/mysql/ent/orderstatushistory"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *OrderCreate) SetCreatedAt(v time.Time) *OrderCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *OrderCreate) SetNillableCreatedAt(v *time.Time) *OrderCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *OrderCreate) SetUpdatedAt(v time.Time) *OrderCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *OrderCreate) SetNillableUpdatedAt(v *time.Time) *OrderCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDelete sets the "delete" field.
func (_c *OrderCreate) SetDelete(v int64) *OrderCreate {
	_c.mutation.SetDelete(v)
	return _c
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (_c *OrderCreate) SetNillableDelete(v *int64) *OrderCreate {
	if v != nil {
		_c.SetDelete(*v)
	}
	return _c
}

// SetCreatedID sets the "created_id" field.
func (_c *OrderCreate) SetCreatedID(v int64) *OrderCreate {
	_c.mutation.SetCreatedID(v)
	return _c
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (_c *OrderCreate) SetNillableCreatedID(v *int64) *OrderCreate {
	if v != nil {
		_c.SetCreatedID(*v)
	}
	return _c
}

// SetOrderSn sets the "order_sn" field.
func (_c *OrderCreate) SetOrderSn(v string) *OrderCreate {
	_c.mutation.SetOrderSn(v)
	return _c
}

// SetMemberID sets the "member_id" field.
func (_c *OrderCreate) SetMemberID(v int64) *OrderCreate {
	_c.mutation.SetMemberID(v)
	return _c
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (_c *OrderCreate) SetNillableMemberID(v *int64) *OrderCreate {
	if v != nil {
		_c.SetMemberID(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *OrderCreate) SetStatus(v order.Status) *OrderCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *OrderCreate) SetNillableStatus(v *order.Status) *OrderCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetNature sets the "nature" field.
func (_c *OrderCreate) SetNature(v int64) *OrderCreate {
	_c.mutation.SetNature(v)
	return _c
}

// SetNillableNature sets the "nature" field if the given value is not nil.
func (_c *OrderCreate) SetNillableNature(v *int64) *OrderCreate {
	if v != nil {
		_c.SetNature(*v)
	}
	return _c
}

// SetCompletionAt sets the "completion_at" field.
func (_c *OrderCreate) SetCompletionAt(v time.Time) *OrderCreate {
	_c.mutation.SetCompletionAt(v)
	return _c
}

// SetNillableCompletionAt sets the "completion_at" field if the given value is not nil.
func (_c *OrderCreate) SetNillableCompletionAt(v *time.Time) *OrderCreate {
	if v != nil {
		_c.SetCompletionAt(*v)
	}
	return _c
}

// SetCloseAt sets the "close_at" field.
func (_c *OrderCreate) SetCloseAt(v time.Time) *OrderCreate {
	_c.mutation.SetCloseAt(v)
	return _c
}

// SetNillableCloseAt sets the "close_at" field if the given value is not nil.
func (_c *OrderCreate) SetNillableCloseAt(v *time.Time) *OrderCreate {
	if v != nil {
		_c.SetCloseAt(*v)
	}
	return _c
}

// SetRefundAt sets the "refund_at" field.
func (_c *OrderCreate) SetRefundAt(v time.Time) *OrderCreate {
	_c.mutation.SetRefundAt(v)
	return _c
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (_c *OrderCreate) SetNillableRefundAt(v *time.Time) *OrderCreate {
	if v != nil {
		_c.SetRefundAt(*v)
	}
	return _c
}

// SetVersion sets the "version" field.
func (_c *OrderCreate) SetVersion(v int64) *OrderCreate {
	_c.mutation.SetVersion(v)
	return _c
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_c *OrderCreate) SetNillableVersion(v *int64) *OrderCreate {
	if v != nil {
		_c.SetVersion(*v)
	}
	return _c
}

// SetTotalAmount sets the "total_amount" field.
func (_c *OrderCreate) SetTotalAmount(v float64) *OrderCreate {
	_c.mutation.SetTotalAmount(v)
	return _c
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (_c *OrderCreate) SetNillableTotalAmount(v *float64) *OrderCreate {
	if v != nil {
		_c.SetTotalAmount(*v)
	}
	return _c
}

// SetActual sets the "actual" field.
func (_c *OrderCreate) SetActual(v float64) *OrderCreate {
	_c.mutation.SetActual(v)
	return _c
}

// SetNillableActual sets the "actual" field if the given value is not nil.
func (_c *OrderCreate) SetNillableActual(v *float64) *OrderCreate {
	if v != nil {
		_c.SetActual(*v)
	}
	return _c
}

// SetResidue sets the "residue" field.
func (_c *OrderCreate) SetResidue(v float64) *OrderCreate {
	_c.mutation.SetResidue(v)
	return _c
}

// SetNillableResidue sets the "residue" field if the given value is not nil.
func (_c *OrderCreate) SetNillableResidue(v *float64) *OrderCreate {
	if v != nil {
		_c.SetResidue(*v)
	}
	return _c
}

// SetRemission sets the "remission" field.
func (_c *OrderCreate) SetRemission(v float64) *OrderCreate {
	_c.mutation.SetRemission(v)
	return _c
}

// SetNillableRemission sets the "remission" field if the given value is not nil.
func (_c *OrderCreate) SetNillableRemission(v *float64) *OrderCreate {
	if v != nil {
		_c.SetRemission(*v)
	}
	return _c
}

// SetRefund sets the "refund" field.
func (_c *OrderCreate) SetRefund(v float64) *OrderCreate {
	_c.mutation.SetRefund(v)
	return _c
}

// SetNillableRefund sets the "refund" field if the given value is not nil.
func (_c *OrderCreate) SetNillableRefund(v *float64) *OrderCreate {
	if v != nil {
		_c.SetRefund(*v)
	}
	return _c
}

// SetCloseNature sets the "close_nature" field.
func (_c *OrderCreate) SetCloseNature(v string) *OrderCreate {
	_c.mutation.SetCloseNature(v)
	return _c
}

// SetNillableCloseNature sets the "close_nature" field if the given value is not nil.
func (_c *OrderCreate) SetNillableCloseNature(v *string) *OrderCreate {
	if v != nil {
		_c.SetCloseNature(*v)
	}
	return _c
}

// SetRefundNature sets the "refund_nature" field.
func (_c *OrderCreate) SetRefundNature(v string) *OrderCreate {
	_c.mutation.SetRefundNature(v)
	return _c
}

// SetNillableRefundNature sets the "refund_nature" field if the given value is not nil.
func (_c *OrderCreate) SetNillableRefundNature(v *string) *OrderCreate {
	if v != nil {
		_c.SetRefundNature(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *OrderCreate) SetID(v int64) *OrderCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddItemIDs adds the "items" edge to the OrderItem entity by IDs.
func (_c *OrderCreate) AddItemIDs(ids ...int64) *OrderCreate {
	_c.mutation.AddItemIDs(ids...)
	return _c
}

// AddItems adds the "items" edges to the OrderItem entity.
func (_c *OrderCreate) AddItems(v ...*OrderItem) *OrderCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddItemIDs(ids...)
}

// AddPayIDs adds the "pay" edge to the OrderPay entity by IDs.
func (_c *OrderCreate) AddPayIDs(ids ...int64) *OrderCreate {
	_c.mutation.AddPayIDs(ids...)
	return _c
}

// AddPay adds the "pay" edges to the OrderPay entity.
func (_c *OrderCreate) AddPay(v ...*OrderPay) *OrderCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddPayIDs(ids...)
}

// AddEventIDs adds the "events" edge to the OrderEvents entity by IDs.
func (_c *OrderCreate) AddEventIDs(ids ...int64) *OrderCreate {
	_c.mutation.AddEventIDs(ids...)
	return _c
}

// AddEvents adds the "events" edges to the OrderEvents entity.
func (_c *OrderCreate) AddEvents(v ...*OrderEvents) *OrderCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEventIDs(ids...)
}

// AddSnapshotIDs adds the "snapshots" edge to the OrderSnapshots entity by IDs.
func (_c *OrderCreate) AddSnapshotIDs(ids ...int64) *OrderCreate {
	_c.mutation.AddSnapshotIDs(ids...)
	return _c
}

// AddSnapshots adds the "snapshots" edges to the OrderSnapshots entity.
func (_c *OrderCreate) AddSnapshots(v ...*OrderSnapshots) *OrderCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSnapshotIDs(ids...)
}

// AddStatusHistoryIDs adds the "status_history" edge to the OrderStatusHistory entity by IDs.
func (_c *OrderCreate) AddStatusHistoryIDs(ids ...int64) *OrderCreate {
	_c.mutation.AddStatusHistoryIDs(ids...)
	return _c
}

// AddStatusHistory adds the "status_history" edges to the OrderStatusHistory entity.
func (_c *OrderCreate) AddStatusHistory(v ...*OrderStatusHistory) *OrderCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddStatusHistoryIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (_c *OrderCreate) Mutation() *OrderMutation {
	return _c.mutation
}

// Save creates the Order in the database.
func (_c *OrderCreate) Save(ctx context.Context) (*Order, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrderCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrderCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OrderCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := order.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := order.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Delete(); !ok {
		v := order.DefaultDelete
		_c.mutation.SetDelete(v)
	}
	if _, ok := _c.mutation.CreatedID(); !ok {
		v := order.DefaultCreatedID
		_c.mutation.SetCreatedID(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := order.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.Version(); !ok {
		v := order.DefaultVersion
		_c.mutation.SetVersion(v)
	}
	if _, ok := _c.mutation.TotalAmount(); !ok {
		v := order.DefaultTotalAmount
		_c.mutation.SetTotalAmount(v)
	}
	if _, ok := _c.mutation.Actual(); !ok {
		v := order.DefaultActual
		_c.mutation.SetActual(v)
	}
	if _, ok := _c.mutation.Residue(); !ok {
		v := order.DefaultResidue
		_c.mutation.SetResidue(v)
	}
	if _, ok := _c.mutation.Remission(); !ok {
		v := order.DefaultRemission
		_c.mutation.SetRemission(v)
	}
	if _, ok := _c.mutation.Refund(); !ok {
		v := order.DefaultRefund
		_c.mutation.SetRefund(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *OrderCreate) check() error {
	if _, ok := _c.mutation.OrderSn(); !ok {
		return &ValidationError{Name: "order_sn", err: errors.New(`ent: missing required field "Order.order_sn"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	return nil
}

func (_c *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(order.Table, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Delete(); ok {
		_spec.SetField(order.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := _c.mutation.CreatedID(); ok {
		_spec.SetField(order.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := _c.mutation.OrderSn(); ok {
		_spec.SetField(order.FieldOrderSn, field.TypeString, value)
		_node.OrderSn = value
	}
	if value, ok := _c.mutation.MemberID(); ok {
		_spec.SetField(order.FieldMemberID, field.TypeInt64, value)
		_node.MemberID = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Nature(); ok {
		_spec.SetField(order.FieldNature, field.TypeInt64, value)
		_node.Nature = value
	}
	if value, ok := _c.mutation.CompletionAt(); ok {
		_spec.SetField(order.FieldCompletionAt, field.TypeTime, value)
		_node.CompletionAt = value
	}
	if value, ok := _c.mutation.CloseAt(); ok {
		_spec.SetField(order.FieldCloseAt, field.TypeTime, value)
		_node.CloseAt = value
	}
	if value, ok := _c.mutation.RefundAt(); ok {
		_spec.SetField(order.FieldRefundAt, field.TypeTime, value)
		_node.RefundAt = value
	}
	if value, ok := _c.mutation.Version(); ok {
		_spec.SetField(order.FieldVersion, field.TypeInt64, value)
		_node.Version = value
	}
	if value, ok := _c.mutation.TotalAmount(); ok {
		_spec.SetField(order.FieldTotalAmount, field.TypeFloat64, value)
		_node.TotalAmount = value
	}
	if value, ok := _c.mutation.Actual(); ok {
		_spec.SetField(order.FieldActual, field.TypeFloat64, value)
		_node.Actual = value
	}
	if value, ok := _c.mutation.Residue(); ok {
		_spec.SetField(order.FieldResidue, field.TypeFloat64, value)
		_node.Residue = value
	}
	if value, ok := _c.mutation.Remission(); ok {
		_spec.SetField(order.FieldRemission, field.TypeFloat64, value)
		_node.Remission = value
	}
	if value, ok := _c.mutation.Refund(); ok {
		_spec.SetField(order.FieldRefund, field.TypeFloat64, value)
		_node.Refund = value
	}
	if value, ok := _c.mutation.CloseNature(); ok {
		_spec.SetField(order.FieldCloseNature, field.TypeString, value)
		_node.CloseNature = value
	}
	if value, ok := _c.mutation.RefundNature(); ok {
		_spec.SetField(order.FieldRefundNature, field.TypeString, value)
		_node.RefundNature = value
	}
	if nodes := _c.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.PayIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PayTable,
			Columns: []string{order.PayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderpay.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.EventsTable,
			Columns: []string{order.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderevents.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SnapshotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SnapshotsTable,
			Columns: []string{order.SnapshotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersnapshots.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.StatusHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.StatusHistoryTable,
			Columns: []string{order.StatusHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatushistory.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *OrderCreate) OnConflict(opts ...sql.ConflictOption) *OrderUpsertOne {
	_c.conflict = opts
	return &OrderUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *OrderCreate) OnConflictColumns(columns ...string) *OrderUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertOne{
		create: _c,
	}
}

type (
	// OrderUpsertOne is the builder for "upsert"-ing
	//  one Order node.
	OrderUpsertOne struct {
		create *OrderCreate
	}

	// OrderUpsert is the "OnConflict" setter.
	OrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUpsert) SetUpdatedAt(v time.Time) *OrderUpsert {
	u.Set(order.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateUpdatedAt() *OrderUpsert {
	u.SetExcluded(order.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderUpsert) ClearUpdatedAt() *OrderUpsert {
	u.SetNull(order.FieldUpdatedAt)
	return u
}

// SetDelete sets the "delete" field.
func (u *OrderUpsert) SetDelete(v int64) *OrderUpsert {
	u.Set(order.FieldDelete, v)
	return u
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderUpsert) UpdateDelete() *OrderUpsert {
	u.SetExcluded(order.FieldDelete)
	return u
}

// AddDelete adds v to the "delete" field.
func (u *OrderUpsert) AddDelete(v int64) *OrderUpsert {
	u.Add(order.FieldDelete, v)
	return u
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderUpsert) ClearDelete() *OrderUpsert {
	u.SetNull(order.FieldDelete)
	return u
}

// SetCreatedID sets the "created_id" field.
func (u *OrderUpsert) SetCreatedID(v int64) *OrderUpsert {
	u.Set(order.FieldCreatedID, v)
	return u
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCreatedID() *OrderUpsert {
	u.SetExcluded(order.FieldCreatedID)
	return u
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderUpsert) AddCreatedID(v int64) *OrderUpsert {
	u.Add(order.FieldCreatedID, v)
	return u
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderUpsert) ClearCreatedID() *OrderUpsert {
	u.SetNull(order.FieldCreatedID)
	return u
}

// SetOrderSn sets the "order_sn" field.
func (u *OrderUpsert) SetOrderSn(v string) *OrderUpsert {
	u.Set(order.FieldOrderSn, v)
	return u
}

// UpdateOrderSn sets the "order_sn" field to the value that was provided on create.
func (u *OrderUpsert) UpdateOrderSn() *OrderUpsert {
	u.SetExcluded(order.FieldOrderSn)
	return u
}

// SetMemberID sets the "member_id" field.
func (u *OrderUpsert) SetMemberID(v int64) *OrderUpsert {
	u.Set(order.FieldMemberID, v)
	return u
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateMemberID() *OrderUpsert {
	u.SetExcluded(order.FieldMemberID)
	return u
}

// AddMemberID adds v to the "member_id" field.
func (u *OrderUpsert) AddMemberID(v int64) *OrderUpsert {
	u.Add(order.FieldMemberID, v)
	return u
}

// ClearMemberID clears the value of the "member_id" field.
func (u *OrderUpsert) ClearMemberID() *OrderUpsert {
	u.SetNull(order.FieldMemberID)
	return u
}

// SetStatus sets the "status" field.
func (u *OrderUpsert) SetStatus(v order.Status) *OrderUpsert {
	u.Set(order.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsert) UpdateStatus() *OrderUpsert {
	u.SetExcluded(order.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *OrderUpsert) ClearStatus() *OrderUpsert {
	u.SetNull(order.FieldStatus)
	return u
}

// SetNature sets the "nature" field.
func (u *OrderUpsert) SetNature(v int64) *OrderUpsert {
	u.Set(order.FieldNature, v)
	return u
}

// UpdateNature sets the "nature" field to the value that was provided on create.
func (u *OrderUpsert) UpdateNature() *OrderUpsert {
	u.SetExcluded(order.FieldNature)
	return u
}

// AddNature adds v to the "nature" field.
func (u *OrderUpsert) AddNature(v int64) *OrderUpsert {
	u.Add(order.FieldNature, v)
	return u
}

// ClearNature clears the value of the "nature" field.
func (u *OrderUpsert) ClearNature() *OrderUpsert {
	u.SetNull(order.FieldNature)
	return u
}

// SetCompletionAt sets the "completion_at" field.
func (u *OrderUpsert) SetCompletionAt(v time.Time) *OrderUpsert {
	u.Set(order.FieldCompletionAt, v)
	return u
}

// UpdateCompletionAt sets the "completion_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCompletionAt() *OrderUpsert {
	u.SetExcluded(order.FieldCompletionAt)
	return u
}

// ClearCompletionAt clears the value of the "completion_at" field.
func (u *OrderUpsert) ClearCompletionAt() *OrderUpsert {
	u.SetNull(order.FieldCompletionAt)
	return u
}

// SetCloseAt sets the "close_at" field.
func (u *OrderUpsert) SetCloseAt(v time.Time) *OrderUpsert {
	u.Set(order.FieldCloseAt, v)
	return u
}

// UpdateCloseAt sets the "close_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCloseAt() *OrderUpsert {
	u.SetExcluded(order.FieldCloseAt)
	return u
}

// ClearCloseAt clears the value of the "close_at" field.
func (u *OrderUpsert) ClearCloseAt() *OrderUpsert {
	u.SetNull(order.FieldCloseAt)
	return u
}

// SetRefundAt sets the "refund_at" field.
func (u *OrderUpsert) SetRefundAt(v time.Time) *OrderUpsert {
	u.Set(order.FieldRefundAt, v)
	return u
}

// UpdateRefundAt sets the "refund_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateRefundAt() *OrderUpsert {
	u.SetExcluded(order.FieldRefundAt)
	return u
}

// ClearRefundAt clears the value of the "refund_at" field.
func (u *OrderUpsert) ClearRefundAt() *OrderUpsert {
	u.SetNull(order.FieldRefundAt)
	return u
}

// SetVersion sets the "version" field.
func (u *OrderUpsert) SetVersion(v int64) *OrderUpsert {
	u.Set(order.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *OrderUpsert) UpdateVersion() *OrderUpsert {
	u.SetExcluded(order.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *OrderUpsert) AddVersion(v int64) *OrderUpsert {
	u.Add(order.FieldVersion, v)
	return u
}

// ClearVersion clears the value of the "version" field.
func (u *OrderUpsert) ClearVersion() *OrderUpsert {
	u.SetNull(order.FieldVersion)
	return u
}

// SetTotalAmount sets the "total_amount" field.
func (u *OrderUpsert) SetTotalAmount(v float64) *OrderUpsert {
	u.Set(order.FieldTotalAmount, v)
	return u
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *OrderUpsert) UpdateTotalAmount() *OrderUpsert {
	u.SetExcluded(order.FieldTotalAmount)
	return u
}

// AddTotalAmount adds v to the "total_amount" field.
func (u *OrderUpsert) AddTotalAmount(v float64) *OrderUpsert {
	u.Add(order.FieldTotalAmount, v)
	return u
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (u *OrderUpsert) ClearTotalAmount() *OrderUpsert {
	u.SetNull(order.FieldTotalAmount)
	return u
}

// SetActual sets the "actual" field.
func (u *OrderUpsert) SetActual(v float64) *OrderUpsert {
	u.Set(order.FieldActual, v)
	return u
}

// UpdateActual sets the "actual" field to the value that was provided on create.
func (u *OrderUpsert) UpdateActual() *OrderUpsert {
	u.SetExcluded(order.FieldActual)
	return u
}

// AddActual adds v to the "actual" field.
func (u *OrderUpsert) AddActual(v float64) *OrderUpsert {
	u.Add(order.FieldActual, v)
	return u
}

// ClearActual clears the value of the "actual" field.
func (u *OrderUpsert) ClearActual() *OrderUpsert {
	u.SetNull(order.FieldActual)
	return u
}

// SetResidue sets the "residue" field.
func (u *OrderUpsert) SetResidue(v float64) *OrderUpsert {
	u.Set(order.FieldResidue, v)
	return u
}

// UpdateResidue sets the "residue" field to the value that was provided on create.
func (u *OrderUpsert) UpdateResidue() *OrderUpsert {
	u.SetExcluded(order.FieldResidue)
	return u
}

// AddResidue adds v to the "residue" field.
func (u *OrderUpsert) AddResidue(v float64) *OrderUpsert {
	u.Add(order.FieldResidue, v)
	return u
}

// ClearResidue clears the value of the "residue" field.
func (u *OrderUpsert) ClearResidue() *OrderUpsert {
	u.SetNull(order.FieldResidue)
	return u
}

// SetRemission sets the "remission" field.
func (u *OrderUpsert) SetRemission(v float64) *OrderUpsert {
	u.Set(order.FieldRemission, v)
	return u
}

// UpdateRemission sets the "remission" field to the value that was provided on create.
func (u *OrderUpsert) UpdateRemission() *OrderUpsert {
	u.SetExcluded(order.FieldRemission)
	return u
}

// AddRemission adds v to the "remission" field.
func (u *OrderUpsert) AddRemission(v float64) *OrderUpsert {
	u.Add(order.FieldRemission, v)
	return u
}

// ClearRemission clears the value of the "remission" field.
func (u *OrderUpsert) ClearRemission() *OrderUpsert {
	u.SetNull(order.FieldRemission)
	return u
}

// SetRefund sets the "refund" field.
func (u *OrderUpsert) SetRefund(v float64) *OrderUpsert {
	u.Set(order.FieldRefund, v)
	return u
}

// UpdateRefund sets the "refund" field to the value that was provided on create.
func (u *OrderUpsert) UpdateRefund() *OrderUpsert {
	u.SetExcluded(order.FieldRefund)
	return u
}

// AddRefund adds v to the "refund" field.
func (u *OrderUpsert) AddRefund(v float64) *OrderUpsert {
	u.Add(order.FieldRefund, v)
	return u
}

// ClearRefund clears the value of the "refund" field.
func (u *OrderUpsert) ClearRefund() *OrderUpsert {
	u.SetNull(order.FieldRefund)
	return u
}

// SetCloseNature sets the "close_nature" field.
func (u *OrderUpsert) SetCloseNature(v string) *OrderUpsert {
	u.Set(order.FieldCloseNature, v)
	return u
}

// UpdateCloseNature sets the "close_nature" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCloseNature() *OrderUpsert {
	u.SetExcluded(order.FieldCloseNature)
	return u
}

// ClearCloseNature clears the value of the "close_nature" field.
func (u *OrderUpsert) ClearCloseNature() *OrderUpsert {
	u.SetNull(order.FieldCloseNature)
	return u
}

// SetRefundNature sets the "refund_nature" field.
func (u *OrderUpsert) SetRefundNature(v string) *OrderUpsert {
	u.Set(order.FieldRefundNature, v)
	return u
}

// UpdateRefundNature sets the "refund_nature" field to the value that was provided on create.
func (u *OrderUpsert) UpdateRefundNature() *OrderUpsert {
	u.SetExcluded(order.FieldRefundNature)
	return u
}

// ClearRefundNature clears the value of the "refund_nature" field.
func (u *OrderUpsert) ClearRefundNature() *OrderUpsert {
	u.SetNull(order.FieldRefundNature)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(order.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderUpsertOne) UpdateNewValues() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(order.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(order.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderUpsertOne) Ignore() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertOne) DoNothing() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreate.OnConflict
// documentation for more info.
func (u *OrderUpsertOne) Update(set func(*OrderUpsert)) *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUpsertOne) SetUpdatedAt(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateUpdatedAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderUpsertOne) ClearUpdatedAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDelete sets the "delete" field.
func (u *OrderUpsertOne) SetDelete(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetDelete(v)
	})
}

// AddDelete adds v to the "delete" field.
func (u *OrderUpsertOne) AddDelete(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddDelete(v)
	})
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateDelete() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateDelete()
	})
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderUpsertOne) ClearDelete() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearDelete()
	})
}

// SetCreatedID sets the "created_id" field.
func (u *OrderUpsertOne) SetCreatedID(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCreatedID(v)
	})
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderUpsertOne) AddCreatedID(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddCreatedID(v)
	})
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCreatedID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCreatedID()
	})
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderUpsertOne) ClearCreatedID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCreatedID()
	})
}

// SetOrderSn sets the "order_sn" field.
func (u *OrderUpsertOne) SetOrderSn(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetOrderSn(v)
	})
}

// UpdateOrderSn sets the "order_sn" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateOrderSn() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateOrderSn()
	})
}

// SetMemberID sets the "member_id" field.
func (u *OrderUpsertOne) SetMemberID(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetMemberID(v)
	})
}

// AddMemberID adds v to the "member_id" field.
func (u *OrderUpsertOne) AddMemberID(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateMemberID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateMemberID()
	})
}

// ClearMemberID clears the value of the "member_id" field.
func (u *OrderUpsertOne) ClearMemberID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearMemberID()
	})
}

// SetStatus sets the "status" field.
func (u *OrderUpsertOne) SetStatus(v order.Status) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateStatus() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *OrderUpsertOne) ClearStatus() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearStatus()
	})
}

// SetNature sets the "nature" field.
func (u *OrderUpsertOne) SetNature(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetNature(v)
	})
}

// AddNature adds v to the "nature" field.
func (u *OrderUpsertOne) AddNature(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddNature(v)
	})
}

// UpdateNature sets the "nature" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateNature() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateNature()
	})
}

// ClearNature clears the value of the "nature" field.
func (u *OrderUpsertOne) ClearNature() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearNature()
	})
}

// SetCompletionAt sets the "completion_at" field.
func (u *OrderUpsertOne) SetCompletionAt(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCompletionAt(v)
	})
}

// UpdateCompletionAt sets the "completion_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCompletionAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCompletionAt()
	})
}

// ClearCompletionAt clears the value of the "completion_at" field.
func (u *OrderUpsertOne) ClearCompletionAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCompletionAt()
	})
}

// SetCloseAt sets the "close_at" field.
func (u *OrderUpsertOne) SetCloseAt(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCloseAt(v)
	})
}

// UpdateCloseAt sets the "close_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCloseAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCloseAt()
	})
}

// ClearCloseAt clears the value of the "close_at" field.
func (u *OrderUpsertOne) ClearCloseAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCloseAt()
	})
}

// SetRefundAt sets the "refund_at" field.
func (u *OrderUpsertOne) SetRefundAt(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetRefundAt(v)
	})
}

// UpdateRefundAt sets the "refund_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateRefundAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRefundAt()
	})
}

// ClearRefundAt clears the value of the "refund_at" field.
func (u *OrderUpsertOne) ClearRefundAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearRefundAt()
	})
}

// SetVersion sets the "version" field.
func (u *OrderUpsertOne) SetVersion(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *OrderUpsertOne) AddVersion(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateVersion() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateVersion()
	})
}

// ClearVersion clears the value of the "version" field.
func (u *OrderUpsertOne) ClearVersion() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearVersion()
	})
}

// SetTotalAmount sets the "total_amount" field.
func (u *OrderUpsertOne) SetTotalAmount(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetTotalAmount(v)
	})
}

// AddTotalAmount adds v to the "total_amount" field.
func (u *OrderUpsertOne) AddTotalAmount(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddTotalAmount(v)
	})
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateTotalAmount() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTotalAmount()
	})
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (u *OrderUpsertOne) ClearTotalAmount() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearTotalAmount()
	})
}

// SetActual sets the "actual" field.
func (u *OrderUpsertOne) SetActual(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetActual(v)
	})
}

// AddActual adds v to the "actual" field.
func (u *OrderUpsertOne) AddActual(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddActual(v)
	})
}

// UpdateActual sets the "actual" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateActual() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateActual()
	})
}

// ClearActual clears the value of the "actual" field.
func (u *OrderUpsertOne) ClearActual() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearActual()
	})
}

// SetResidue sets the "residue" field.
func (u *OrderUpsertOne) SetResidue(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetResidue(v)
	})
}

// AddResidue adds v to the "residue" field.
func (u *OrderUpsertOne) AddResidue(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddResidue(v)
	})
}

// UpdateResidue sets the "residue" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateResidue() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateResidue()
	})
}

// ClearResidue clears the value of the "residue" field.
func (u *OrderUpsertOne) ClearResidue() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearResidue()
	})
}

// SetRemission sets the "remission" field.
func (u *OrderUpsertOne) SetRemission(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetRemission(v)
	})
}

// AddRemission adds v to the "remission" field.
func (u *OrderUpsertOne) AddRemission(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddRemission(v)
	})
}

// UpdateRemission sets the "remission" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateRemission() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRemission()
	})
}

// ClearRemission clears the value of the "remission" field.
func (u *OrderUpsertOne) ClearRemission() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearRemission()
	})
}

// SetRefund sets the "refund" field.
func (u *OrderUpsertOne) SetRefund(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetRefund(v)
	})
}

// AddRefund adds v to the "refund" field.
func (u *OrderUpsertOne) AddRefund(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddRefund(v)
	})
}

// UpdateRefund sets the "refund" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateRefund() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRefund()
	})
}

// ClearRefund clears the value of the "refund" field.
func (u *OrderUpsertOne) ClearRefund() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearRefund()
	})
}

// SetCloseNature sets the "close_nature" field.
func (u *OrderUpsertOne) SetCloseNature(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCloseNature(v)
	})
}

// UpdateCloseNature sets the "close_nature" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCloseNature() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCloseNature()
	})
}

// ClearCloseNature clears the value of the "close_nature" field.
func (u *OrderUpsertOne) ClearCloseNature() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCloseNature()
	})
}

// SetRefundNature sets the "refund_nature" field.
func (u *OrderUpsertOne) SetRefundNature(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetRefundNature(v)
	})
}

// UpdateRefundNature sets the "refund_nature" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateRefundNature() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRefundNature()
	})
}

// ClearRefundNature clears the value of the "refund_nature" field.
func (u *OrderUpsertOne) ClearRefundNature() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearRefundNature()
	})
}

// Exec executes the query.
func (u *OrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	err      error
	builders []*OrderCreate
	conflict []sql.ConflictOption
}

// Save creates the Order entities in the database.
func (_c *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Order, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *OrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderUpsertBulk {
	_c.conflict = opts
	return &OrderUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *OrderCreateBulk) OnConflictColumns(columns ...string) *OrderUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertBulk{
		create: _c,
	}
}

// OrderUpsertBulk is the builder for "upsert"-ing
// a bulk of Order nodes.
type OrderUpsertBulk struct {
	create *OrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(order.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderUpsertBulk) UpdateNewValues() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(order.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(order.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderUpsertBulk) Ignore() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertBulk) DoNothing() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreateBulk.OnConflict
// documentation for more info.
func (u *OrderUpsertBulk) Update(set func(*OrderUpsert)) *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUpsertBulk) SetUpdatedAt(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateUpdatedAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrderUpsertBulk) ClearUpdatedAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDelete sets the "delete" field.
func (u *OrderUpsertBulk) SetDelete(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetDelete(v)
	})
}

// AddDelete adds v to the "delete" field.
func (u *OrderUpsertBulk) AddDelete(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddDelete(v)
	})
}

// UpdateDelete sets the "delete" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateDelete() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateDelete()
	})
}

// ClearDelete clears the value of the "delete" field.
func (u *OrderUpsertBulk) ClearDelete() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearDelete()
	})
}

// SetCreatedID sets the "created_id" field.
func (u *OrderUpsertBulk) SetCreatedID(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCreatedID(v)
	})
}

// AddCreatedID adds v to the "created_id" field.
func (u *OrderUpsertBulk) AddCreatedID(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddCreatedID(v)
	})
}

// UpdateCreatedID sets the "created_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCreatedID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCreatedID()
	})
}

// ClearCreatedID clears the value of the "created_id" field.
func (u *OrderUpsertBulk) ClearCreatedID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCreatedID()
	})
}

// SetOrderSn sets the "order_sn" field.
func (u *OrderUpsertBulk) SetOrderSn(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetOrderSn(v)
	})
}

// UpdateOrderSn sets the "order_sn" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateOrderSn() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateOrderSn()
	})
}

// SetMemberID sets the "member_id" field.
func (u *OrderUpsertBulk) SetMemberID(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetMemberID(v)
	})
}

// AddMemberID adds v to the "member_id" field.
func (u *OrderUpsertBulk) AddMemberID(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateMemberID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateMemberID()
	})
}

// ClearMemberID clears the value of the "member_id" field.
func (u *OrderUpsertBulk) ClearMemberID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearMemberID()
	})
}

// SetStatus sets the "status" field.
func (u *OrderUpsertBulk) SetStatus(v order.Status) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateStatus() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *OrderUpsertBulk) ClearStatus() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearStatus()
	})
}

// SetNature sets the "nature" field.
func (u *OrderUpsertBulk) SetNature(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetNature(v)
	})
}

// AddNature adds v to the "nature" field.
func (u *OrderUpsertBulk) AddNature(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddNature(v)
	})
}

// UpdateNature sets the "nature" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateNature() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateNature()
	})
}

// ClearNature clears the value of the "nature" field.
func (u *OrderUpsertBulk) ClearNature() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearNature()
	})
}

// SetCompletionAt sets the "completion_at" field.
func (u *OrderUpsertBulk) SetCompletionAt(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCompletionAt(v)
	})
}

// UpdateCompletionAt sets the "completion_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCompletionAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCompletionAt()
	})
}

// ClearCompletionAt clears the value of the "completion_at" field.
func (u *OrderUpsertBulk) ClearCompletionAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCompletionAt()
	})
}

// SetCloseAt sets the "close_at" field.
func (u *OrderUpsertBulk) SetCloseAt(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCloseAt(v)
	})
}

// UpdateCloseAt sets the "close_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCloseAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCloseAt()
	})
}

// ClearCloseAt clears the value of the "close_at" field.
func (u *OrderUpsertBulk) ClearCloseAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCloseAt()
	})
}

// SetRefundAt sets the "refund_at" field.
func (u *OrderUpsertBulk) SetRefundAt(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetRefundAt(v)
	})
}

// UpdateRefundAt sets the "refund_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateRefundAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRefundAt()
	})
}

// ClearRefundAt clears the value of the "refund_at" field.
func (u *OrderUpsertBulk) ClearRefundAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearRefundAt()
	})
}

// SetVersion sets the "version" field.
func (u *OrderUpsertBulk) SetVersion(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *OrderUpsertBulk) AddVersion(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateVersion() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateVersion()
	})
}

// ClearVersion clears the value of the "version" field.
func (u *OrderUpsertBulk) ClearVersion() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearVersion()
	})
}

// SetTotalAmount sets the "total_amount" field.
func (u *OrderUpsertBulk) SetTotalAmount(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetTotalAmount(v)
	})
}

// AddTotalAmount adds v to the "total_amount" field.
func (u *OrderUpsertBulk) AddTotalAmount(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddTotalAmount(v)
	})
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateTotalAmount() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTotalAmount()
	})
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (u *OrderUpsertBulk) ClearTotalAmount() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearTotalAmount()
	})
}

// SetActual sets the "actual" field.
func (u *OrderUpsertBulk) SetActual(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetActual(v)
	})
}

// AddActual adds v to the "actual" field.
func (u *OrderUpsertBulk) AddActual(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddActual(v)
	})
}

// UpdateActual sets the "actual" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateActual() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateActual()
	})
}

// ClearActual clears the value of the "actual" field.
func (u *OrderUpsertBulk) ClearActual() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearActual()
	})
}

// SetResidue sets the "residue" field.
func (u *OrderUpsertBulk) SetResidue(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetResidue(v)
	})
}

// AddResidue adds v to the "residue" field.
func (u *OrderUpsertBulk) AddResidue(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddResidue(v)
	})
}

// UpdateResidue sets the "residue" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateResidue() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateResidue()
	})
}

// ClearResidue clears the value of the "residue" field.
func (u *OrderUpsertBulk) ClearResidue() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearResidue()
	})
}

// SetRemission sets the "remission" field.
func (u *OrderUpsertBulk) SetRemission(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetRemission(v)
	})
}

// AddRemission adds v to the "remission" field.
func (u *OrderUpsertBulk) AddRemission(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddRemission(v)
	})
}

// UpdateRemission sets the "remission" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateRemission() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRemission()
	})
}

// ClearRemission clears the value of the "remission" field.
func (u *OrderUpsertBulk) ClearRemission() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearRemission()
	})
}

// SetRefund sets the "refund" field.
func (u *OrderUpsertBulk) SetRefund(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetRefund(v)
	})
}

// AddRefund adds v to the "refund" field.
func (u *OrderUpsertBulk) AddRefund(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddRefund(v)
	})
}

// UpdateRefund sets the "refund" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateRefund() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRefund()
	})
}

// ClearRefund clears the value of the "refund" field.
func (u *OrderUpsertBulk) ClearRefund() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearRefund()
	})
}

// SetCloseNature sets the "close_nature" field.
func (u *OrderUpsertBulk) SetCloseNature(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCloseNature(v)
	})
}

// UpdateCloseNature sets the "close_nature" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCloseNature() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCloseNature()
	})
}

// ClearCloseNature clears the value of the "close_nature" field.
func (u *OrderUpsertBulk) ClearCloseNature() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCloseNature()
	})
}

// SetRefundNature sets the "refund_nature" field.
func (u *OrderUpsertBulk) SetRefundNature(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetRefundNature(v)
	})
}

// UpdateRefundNature sets the "refund_nature" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateRefundNature() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRefundNature()
	})
}

// ClearRefundNature clears the value of the "refund_nature" field.
func (u *OrderUpsertBulk) ClearRefundNature() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearRefundNature()
	})
}

// Exec executes the query.
func (u *OrderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
