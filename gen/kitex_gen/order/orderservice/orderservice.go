// Code generated by Kitex v0.15.1. DO NOT EDIT.

package orderservice

import (
	"context"
	"errors"
	base "gen/kitex_gen/base"
	order "gen/kitex_gen/order"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetOrderInfo": kitex.NewMethodInfo(
		getOrderInfoHandler,
		newOrderServiceGetOrderInfoArgs,
		newOrderServiceGetOrderInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetOrderList": kitex.NewMethodInfo(
		getOrderListHandler,
		newOrderServiceGetOrderListArgs,
		newOrderServiceGetOrderListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteOrder": kitex.NewMethodInfo(
		deleteOrderHandler,
		newOrderServiceDeleteOrderArgs,
		newOrderServiceDeleteOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateOrder": kitex.NewMethodInfo(
		createOrderHandler,
		newOrderServiceCreateOrderArgs,
		newOrderServiceCreateOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Payment": kitex.NewMethodInfo(
		paymentHandler,
		newOrderServicePaymentArgs,
		newOrderServicePaymentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CancelledOrder": kitex.NewMethodInfo(
		cancelledOrderHandler,
		newOrderServiceCancelledOrderArgs,
		newOrderServiceCancelledOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RefundOrder": kitex.NewMethodInfo(
		refundOrderHandler,
		newOrderServiceRefundOrderArgs,
		newOrderServiceRefundOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	orderServiceServiceInfo                = NewServiceInfo()
	orderServiceServiceInfoForClient       = NewServiceInfoForClient()
	orderServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return orderServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "OrderService"
	handlerType := (*order.OrderService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "order",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func getOrderInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceGetOrderInfoArgs)
	realResult := result.(*order.OrderServiceGetOrderInfoResult)
	success, err := handler.(order.OrderService).GetOrderInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceGetOrderInfoArgs() interface{} {
	return order.NewOrderServiceGetOrderInfoArgs()
}

func newOrderServiceGetOrderInfoResult() interface{} {
	return order.NewOrderServiceGetOrderInfoResult()
}

func getOrderListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceGetOrderListArgs)
	realResult := result.(*order.OrderServiceGetOrderListResult)
	success, err := handler.(order.OrderService).GetOrderList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceGetOrderListArgs() interface{} {
	return order.NewOrderServiceGetOrderListArgs()
}

func newOrderServiceGetOrderListResult() interface{} {
	return order.NewOrderServiceGetOrderListResult()
}

func deleteOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceDeleteOrderArgs)
	realResult := result.(*order.OrderServiceDeleteOrderResult)
	success, err := handler.(order.OrderService).DeleteOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceDeleteOrderArgs() interface{} {
	return order.NewOrderServiceDeleteOrderArgs()
}

func newOrderServiceDeleteOrderResult() interface{} {
	return order.NewOrderServiceDeleteOrderResult()
}

func createOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceCreateOrderArgs)
	realResult := result.(*order.OrderServiceCreateOrderResult)
	success, err := handler.(order.OrderService).CreateOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceCreateOrderArgs() interface{} {
	return order.NewOrderServiceCreateOrderArgs()
}

func newOrderServiceCreateOrderResult() interface{} {
	return order.NewOrderServiceCreateOrderResult()
}

func paymentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServicePaymentArgs)
	realResult := result.(*order.OrderServicePaymentResult)
	success, err := handler.(order.OrderService).Payment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServicePaymentArgs() interface{} {
	return order.NewOrderServicePaymentArgs()
}

func newOrderServicePaymentResult() interface{} {
	return order.NewOrderServicePaymentResult()
}

func cancelledOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceCancelledOrderArgs)
	realResult := result.(*order.OrderServiceCancelledOrderResult)
	success, err := handler.(order.OrderService).CancelledOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceCancelledOrderArgs() interface{} {
	return order.NewOrderServiceCancelledOrderArgs()
}

func newOrderServiceCancelledOrderResult() interface{} {
	return order.NewOrderServiceCancelledOrderResult()
}

func refundOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceRefundOrderArgs)
	realResult := result.(*order.OrderServiceRefundOrderResult)
	success, err := handler.(order.OrderService).RefundOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceRefundOrderArgs() interface{} {
	return order.NewOrderServiceRefundOrderArgs()
}

func newOrderServiceRefundOrderResult() interface{} {
	return order.NewOrderServiceRefundOrderResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetOrderInfo(ctx context.Context, req *order.GetOrderInfoReq) (r *order.OrderResp, err error) {
	var _args order.OrderServiceGetOrderInfoArgs
	_args.Req = req
	var _result order.OrderServiceGetOrderInfoResult
	if err = p.c.Call(ctx, "GetOrderInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOrderList(ctx context.Context, req *order.GetOrderListReq) (r *order.GetOrderListResp, err error) {
	var _args order.OrderServiceGetOrderListArgs
	_args.Req = req
	var _result order.OrderServiceGetOrderListResult
	if err = p.c.Call(ctx, "GetOrderList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteOrder(ctx context.Context, req *base.IdReq) (r *base.NilResponse, err error) {
	var _args order.OrderServiceDeleteOrderArgs
	_args.Req = req
	var _result order.OrderServiceDeleteOrderResult
	if err = p.c.Call(ctx, "DeleteOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateOrder(ctx context.Context, req *order.GetOrderListReq) (r *order.OrderResp, err error) {
	var _args order.OrderServiceCreateOrderArgs
	_args.Req = req
	var _result order.OrderServiceCreateOrderResult
	if err = p.c.Call(ctx, "CreateOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Payment(ctx context.Context, req *order.PaymentReq) (r *order.OrderResp, err error) {
	var _args order.OrderServicePaymentArgs
	_args.Req = req
	var _result order.OrderServicePaymentResult
	if err = p.c.Call(ctx, "Payment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelledOrder(ctx context.Context, req *order.CreateOrderReq) (r *base.NilResponse, err error) {
	var _args order.OrderServiceCancelledOrderArgs
	_args.Req = req
	var _result order.OrderServiceCancelledOrderResult
	if err = p.c.Call(ctx, "CancelledOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RefundOrder(ctx context.Context, req *order.RefundOrderReq) (r *base.NilResponse, err error) {
	var _args order.OrderServiceRefundOrderArgs
	_args.Req = req
	var _result order.OrderServiceRefundOrderResult
	if err = p.c.Call(ctx, "RefundOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
