// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package user

import (
	"context"
	"fmt"
	"gen/kitex_gen/base"
	"gen/kitex_gen/system"
)

type User struct {
	Id        int64          `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Username  string         `thrift:"username,2,optional" frugal:"2,optional,string" json:"username,omitempty"`
	Password  string         `thrift:"password,3,optional" frugal:"3,optional,string" json:"password,omitempty"`
	Avatar    string         `thrift:"avatar,4,optional" frugal:"4,optional,string" json:"avatar,omitempty"`
	Mobile    string         `thrift:"mobile,5,optional" frugal:"5,optional,string" json:"mobile,omitempty"`
	Name      string         `thrift:"name,6,optional" frugal:"6,optional,string" json:"name,omitempty"`
	Status    int64          `thrift:"status,7,optional" frugal:"7,optional,i64" json:"status,omitempty"`
	Gender    int64          `thrift:"gender,9,optional" frugal:"9,optional,i64" json:"gender,omitempty"`
	Birthday  string         `thrift:"birthday,10,optional" frugal:"10,optional,string" json:"birthday,omitempty"`
	LastAt    string         `thrift:"lastAt,11,optional" frugal:"11,optional,string" json:"lastAt,omitempty"`
	LastIp    string         `thrift:"lastIp,12,optional" frugal:"12,optional,string" json:"lastIp,omitempty"`
	Detail    string         `thrift:"detail,13,optional" frugal:"13,optional,string" json:"detail,omitempty"`
	Roles     []*system.Role `thrift:"roles,14,optional" frugal:"14,optional,list<system.Role>" json:"roles,omitempty"`
	CreatedAt string         `thrift:"createdAt,251,optional" frugal:"251,optional,string" json:"createdAt,omitempty"`
	UpdatedAt string         `thrift:"updatedAt,252,optional" frugal:"252,optional,string" json:"updatedAt,omitempty"`
	CreatedId int64          `thrift:"createdId,253,optional" frugal:"253,optional,i64" json:"createdId,omitempty"`
}

func NewUser() *User {
	return &User{
		Id:        0,
		Username:  "",
		Password:  "",
		Avatar:    "",
		Mobile:    "",
		Name:      "",
		Status:    0,
		Gender:    0,
		Birthday:  "",
		LastAt:    "",
		LastIp:    "",
		Detail:    "",
		Roles:     []*system.Role{},
		CreatedAt: "",
		UpdatedAt: "",
		CreatedId: 0,
	}
}

func (p *User) InitDefault() {
	p.Id = 0
	p.Username = ""
	p.Password = ""
	p.Avatar = ""
	p.Mobile = ""
	p.Name = ""
	p.Status = 0
	p.Gender = 0
	p.Birthday = ""
	p.LastAt = ""
	p.LastIp = ""
	p.Detail = ""
	p.Roles = []*system.Role{}
	p.CreatedAt = ""
	p.UpdatedAt = ""
	p.CreatedId = 0
}

var User_Id_DEFAULT int64 = 0

func (p *User) GetId() (v int64) {
	if !p.IsSetId() {
		return User_Id_DEFAULT
	}
	return p.Id
}

var User_Username_DEFAULT string = ""

func (p *User) GetUsername() (v string) {
	if !p.IsSetUsername() {
		return User_Username_DEFAULT
	}
	return p.Username
}

var User_Password_DEFAULT string = ""

func (p *User) GetPassword() (v string) {
	if !p.IsSetPassword() {
		return User_Password_DEFAULT
	}
	return p.Password
}

var User_Avatar_DEFAULT string = ""

func (p *User) GetAvatar() (v string) {
	if !p.IsSetAvatar() {
		return User_Avatar_DEFAULT
	}
	return p.Avatar
}

var User_Mobile_DEFAULT string = ""

func (p *User) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return User_Mobile_DEFAULT
	}
	return p.Mobile
}

var User_Name_DEFAULT string = ""

func (p *User) GetName() (v string) {
	if !p.IsSetName() {
		return User_Name_DEFAULT
	}
	return p.Name
}

var User_Status_DEFAULT int64 = 0

func (p *User) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return User_Status_DEFAULT
	}
	return p.Status
}

var User_Gender_DEFAULT int64 = 0

func (p *User) GetGender() (v int64) {
	if !p.IsSetGender() {
		return User_Gender_DEFAULT
	}
	return p.Gender
}

var User_Birthday_DEFAULT string = ""

func (p *User) GetBirthday() (v string) {
	if !p.IsSetBirthday() {
		return User_Birthday_DEFAULT
	}
	return p.Birthday
}

var User_LastAt_DEFAULT string = ""

func (p *User) GetLastAt() (v string) {
	if !p.IsSetLastAt() {
		return User_LastAt_DEFAULT
	}
	return p.LastAt
}

var User_LastIp_DEFAULT string = ""

func (p *User) GetLastIp() (v string) {
	if !p.IsSetLastIp() {
		return User_LastIp_DEFAULT
	}
	return p.LastIp
}

var User_Detail_DEFAULT string = ""

func (p *User) GetDetail() (v string) {
	if !p.IsSetDetail() {
		return User_Detail_DEFAULT
	}
	return p.Detail
}

var User_Roles_DEFAULT []*system.Role = []*system.Role{}

func (p *User) GetRoles() (v []*system.Role) {
	if !p.IsSetRoles() {
		return User_Roles_DEFAULT
	}
	return p.Roles
}

var User_CreatedAt_DEFAULT string = ""

func (p *User) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return User_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var User_UpdatedAt_DEFAULT string = ""

func (p *User) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return User_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var User_CreatedId_DEFAULT int64 = 0

func (p *User) GetCreatedId() (v int64) {
	if !p.IsSetCreatedId() {
		return User_CreatedId_DEFAULT
	}
	return p.CreatedId
}
func (p *User) SetId(val int64) {
	p.Id = val
}
func (p *User) SetUsername(val string) {
	p.Username = val
}
func (p *User) SetPassword(val string) {
	p.Password = val
}
func (p *User) SetAvatar(val string) {
	p.Avatar = val
}
func (p *User) SetMobile(val string) {
	p.Mobile = val
}
func (p *User) SetName(val string) {
	p.Name = val
}
func (p *User) SetStatus(val int64) {
	p.Status = val
}
func (p *User) SetGender(val int64) {
	p.Gender = val
}
func (p *User) SetBirthday(val string) {
	p.Birthday = val
}
func (p *User) SetLastAt(val string) {
	p.LastAt = val
}
func (p *User) SetLastIp(val string) {
	p.LastIp = val
}
func (p *User) SetDetail(val string) {
	p.Detail = val
}
func (p *User) SetRoles(val []*system.Role) {
	p.Roles = val
}
func (p *User) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *User) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *User) SetCreatedId(val int64) {
	p.CreatedId = val
}

func (p *User) IsSetId() bool {
	return p.Id != User_Id_DEFAULT
}

func (p *User) IsSetUsername() bool {
	return p.Username != User_Username_DEFAULT
}

func (p *User) IsSetPassword() bool {
	return p.Password != User_Password_DEFAULT
}

func (p *User) IsSetAvatar() bool {
	return p.Avatar != User_Avatar_DEFAULT
}

func (p *User) IsSetMobile() bool {
	return p.Mobile != User_Mobile_DEFAULT
}

func (p *User) IsSetName() bool {
	return p.Name != User_Name_DEFAULT
}

func (p *User) IsSetStatus() bool {
	return p.Status != User_Status_DEFAULT
}

func (p *User) IsSetGender() bool {
	return p.Gender != User_Gender_DEFAULT
}

func (p *User) IsSetBirthday() bool {
	return p.Birthday != User_Birthday_DEFAULT
}

func (p *User) IsSetLastAt() bool {
	return p.LastAt != User_LastAt_DEFAULT
}

func (p *User) IsSetLastIp() bool {
	return p.LastIp != User_LastIp_DEFAULT
}

func (p *User) IsSetDetail() bool {
	return p.Detail != User_Detail_DEFAULT
}

func (p *User) IsSetRoles() bool {
	return p.Roles != nil
}

func (p *User) IsSetCreatedAt() bool {
	return p.CreatedAt != User_CreatedAt_DEFAULT
}

func (p *User) IsSetUpdatedAt() bool {
	return p.UpdatedAt != User_UpdatedAt_DEFAULT
}

func (p *User) IsSetCreatedId() bool {
	return p.CreatedId != User_CreatedId_DEFAULT
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

var fieldIDToName_User = map[int16]string{
	1:   "id",
	2:   "username",
	3:   "password",
	4:   "avatar",
	5:   "mobile",
	6:   "name",
	7:   "status",
	9:   "gender",
	10:  "birthday",
	11:  "lastAt",
	12:  "lastIp",
	13:  "detail",
	14:  "roles",
	251: "createdAt",
	252: "updatedAt",
	253: "createdId",
}

type UserResp struct {
	Data     *User          `thrift:"data,1,optional" frugal:"1,optional,User" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewUserResp() *UserResp {
	return &UserResp{
		Data:     &User{},
		BaseResp: &base.BaseResp{},
	}
}

func (p *UserResp) InitDefault() {
	p.Data = &User{}
	p.BaseResp = &base.BaseResp{}
}

var UserResp_Data_DEFAULT *User = &User{}

func (p *UserResp) GetData() (v *User) {
	if !p.IsSetData() {
		return UserResp_Data_DEFAULT
	}
	return p.Data
}

var UserResp_BaseResp_DEFAULT *base.BaseResp = &base.BaseResp{}

func (p *UserResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return UserResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UserResp) SetData(val *User) {
	p.Data = val
}
func (p *UserResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *UserResp) IsSetData() bool {
	return p.Data != nil
}

func (p *UserResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UserResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserResp(%+v)", *p)
}

var fieldIDToName_UserResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type UserListResp struct {
	Data     []*User        `thrift:"data,1,optional" frugal:"1,optional,list<User>" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewUserListResp() *UserListResp {
	return &UserListResp{
		Data:     []*User{},
		BaseResp: &base.BaseResp{},
	}
}

func (p *UserListResp) InitDefault() {
	p.Data = []*User{}
	p.BaseResp = &base.BaseResp{}
}

var UserListResp_Data_DEFAULT []*User = []*User{}

func (p *UserListResp) GetData() (v []*User) {
	if !p.IsSetData() {
		return UserListResp_Data_DEFAULT
	}
	return p.Data
}

var UserListResp_BaseResp_DEFAULT *base.BaseResp = &base.BaseResp{}

func (p *UserListResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return UserListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UserListResp) SetData(val []*User) {
	p.Data = val
}
func (p *UserListResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *UserListResp) IsSetData() bool {
	return p.Data != nil
}

func (p *UserListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UserListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserListResp(%+v)", *p)
}

var fieldIDToName_UserListResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type CreateUserReq struct {
	Username *string `thrift:"username,1,optional" frugal:"1,optional,string" json:"username,omitempty"`
	Password *string `thrift:"password,2,optional" frugal:"2,optional,string" json:"password,omitempty"`
}

func NewCreateUserReq() *CreateUserReq {
	return &CreateUserReq{}
}

func (p *CreateUserReq) InitDefault() {
}

var CreateUserReq_Username_DEFAULT string

func (p *CreateUserReq) GetUsername() (v string) {
	if !p.IsSetUsername() {
		return CreateUserReq_Username_DEFAULT
	}
	return *p.Username
}

var CreateUserReq_Password_DEFAULT string

func (p *CreateUserReq) GetPassword() (v string) {
	if !p.IsSetPassword() {
		return CreateUserReq_Password_DEFAULT
	}
	return *p.Password
}
func (p *CreateUserReq) SetUsername(val *string) {
	p.Username = val
}
func (p *CreateUserReq) SetPassword(val *string) {
	p.Password = val
}

func (p *CreateUserReq) IsSetUsername() bool {
	return p.Username != nil
}

func (p *CreateUserReq) IsSetPassword() bool {
	return p.Password != nil
}

func (p *CreateUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateUserReq(%+v)", *p)
}

var fieldIDToName_CreateUserReq = map[int16]string{
	1: "username",
	2: "password",
}

type GetUserListReq struct {
	Page     int64  `thrift:"page,1,optional" frugal:"1,optional,i64" json:"page,omitempty"`
	PageSize int64  `thrift:"pageSize,2,optional" frugal:"2,optional,i64" json:"pageSize,omitempty"`
	Keyword  string `thrift:"keyword,3,optional" frugal:"3,optional,string" json:"keyword,omitempty"`
	Name     string `thrift:"name,4,optional" frugal:"4,optional,string" json:"name,omitempty"`
	Mobile   string `thrift:"mobile,5,optional" frugal:"5,optional,string" json:"mobile,omitempty"`
}

func NewGetUserListReq() *GetUserListReq {
	return &GetUserListReq{
		Page:     1,
		PageSize: 10,
		Keyword:  "",
		Name:     "",
		Mobile:   "",
	}
}

func (p *GetUserListReq) InitDefault() {
	p.Page = 1
	p.PageSize = 10
	p.Keyword = ""
	p.Name = ""
	p.Mobile = ""
}

var GetUserListReq_Page_DEFAULT int64 = 1

func (p *GetUserListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return GetUserListReq_Page_DEFAULT
	}
	return p.Page
}

var GetUserListReq_PageSize_DEFAULT int64 = 10

func (p *GetUserListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return GetUserListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var GetUserListReq_Keyword_DEFAULT string = ""

func (p *GetUserListReq) GetKeyword() (v string) {
	if !p.IsSetKeyword() {
		return GetUserListReq_Keyword_DEFAULT
	}
	return p.Keyword
}

var GetUserListReq_Name_DEFAULT string = ""

func (p *GetUserListReq) GetName() (v string) {
	if !p.IsSetName() {
		return GetUserListReq_Name_DEFAULT
	}
	return p.Name
}

var GetUserListReq_Mobile_DEFAULT string = ""

func (p *GetUserListReq) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return GetUserListReq_Mobile_DEFAULT
	}
	return p.Mobile
}
func (p *GetUserListReq) SetPage(val int64) {
	p.Page = val
}
func (p *GetUserListReq) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *GetUserListReq) SetKeyword(val string) {
	p.Keyword = val
}
func (p *GetUserListReq) SetName(val string) {
	p.Name = val
}
func (p *GetUserListReq) SetMobile(val string) {
	p.Mobile = val
}

func (p *GetUserListReq) IsSetPage() bool {
	return p.Page != GetUserListReq_Page_DEFAULT
}

func (p *GetUserListReq) IsSetPageSize() bool {
	return p.PageSize != GetUserListReq_PageSize_DEFAULT
}

func (p *GetUserListReq) IsSetKeyword() bool {
	return p.Keyword != GetUserListReq_Keyword_DEFAULT
}

func (p *GetUserListReq) IsSetName() bool {
	return p.Name != GetUserListReq_Name_DEFAULT
}

func (p *GetUserListReq) IsSetMobile() bool {
	return p.Mobile != GetUserListReq_Mobile_DEFAULT
}

func (p *GetUserListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserListReq(%+v)", *p)
}

var fieldIDToName_GetUserListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "keyword",
	4: "name",
	5: "mobile",
}

type UpdateUserReq struct {
	Id       int64  `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Avatar   string `thrift:"avatar,2,optional" frugal:"2,optional,string" json:"avatar,omitempty"`
	Mobile   string `thrift:"mobile,3,optional" frugal:"3,optional,string" json:"mobile,omitempty"`
	Name     string `thrift:"name,4,optional" frugal:"4,optional,string" json:"name,omitempty"`
	Status   int64  `thrift:"status,5,optional" frugal:"5,optional,i64" json:"status,omitempty"`
	Gender   int64  `thrift:"gender,6,optional" frugal:"6,optional,i64" json:"gender,omitempty"`
	Birthday string `thrift:"birthday,7,optional" frugal:"7,optional,string" json:"birthday,omitempty"`
	Detail   string `thrift:"detail,8,optional" frugal:"8,optional,string" json:"detail,omitempty"`
	RoleId   int64  `thrift:"roleId,9,optional" frugal:"9,optional,i64" json:"roleId,omitempty"`
}

func NewUpdateUserReq() *UpdateUserReq {
	return &UpdateUserReq{
		Id:       0,
		Avatar:   "",
		Mobile:   "",
		Name:     "",
		Status:   0,
		Gender:   0,
		Birthday: "",
		Detail:   "",
		RoleId:   0,
	}
}

func (p *UpdateUserReq) InitDefault() {
	p.Id = 0
	p.Avatar = ""
	p.Mobile = ""
	p.Name = ""
	p.Status = 0
	p.Gender = 0
	p.Birthday = ""
	p.Detail = ""
	p.RoleId = 0
}

var UpdateUserReq_Id_DEFAULT int64 = 0

func (p *UpdateUserReq) GetId() (v int64) {
	if !p.IsSetId() {
		return UpdateUserReq_Id_DEFAULT
	}
	return p.Id
}

var UpdateUserReq_Avatar_DEFAULT string = ""

func (p *UpdateUserReq) GetAvatar() (v string) {
	if !p.IsSetAvatar() {
		return UpdateUserReq_Avatar_DEFAULT
	}
	return p.Avatar
}

var UpdateUserReq_Mobile_DEFAULT string = ""

func (p *UpdateUserReq) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return UpdateUserReq_Mobile_DEFAULT
	}
	return p.Mobile
}

var UpdateUserReq_Name_DEFAULT string = ""

func (p *UpdateUserReq) GetName() (v string) {
	if !p.IsSetName() {
		return UpdateUserReq_Name_DEFAULT
	}
	return p.Name
}

var UpdateUserReq_Status_DEFAULT int64 = 0

func (p *UpdateUserReq) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return UpdateUserReq_Status_DEFAULT
	}
	return p.Status
}

var UpdateUserReq_Gender_DEFAULT int64 = 0

func (p *UpdateUserReq) GetGender() (v int64) {
	if !p.IsSetGender() {
		return UpdateUserReq_Gender_DEFAULT
	}
	return p.Gender
}

var UpdateUserReq_Birthday_DEFAULT string = ""

func (p *UpdateUserReq) GetBirthday() (v string) {
	if !p.IsSetBirthday() {
		return UpdateUserReq_Birthday_DEFAULT
	}
	return p.Birthday
}

var UpdateUserReq_Detail_DEFAULT string = ""

func (p *UpdateUserReq) GetDetail() (v string) {
	if !p.IsSetDetail() {
		return UpdateUserReq_Detail_DEFAULT
	}
	return p.Detail
}

var UpdateUserReq_RoleId_DEFAULT int64 = 0

func (p *UpdateUserReq) GetRoleId() (v int64) {
	if !p.IsSetRoleId() {
		return UpdateUserReq_RoleId_DEFAULT
	}
	return p.RoleId
}
func (p *UpdateUserReq) SetId(val int64) {
	p.Id = val
}
func (p *UpdateUserReq) SetAvatar(val string) {
	p.Avatar = val
}
func (p *UpdateUserReq) SetMobile(val string) {
	p.Mobile = val
}
func (p *UpdateUserReq) SetName(val string) {
	p.Name = val
}
func (p *UpdateUserReq) SetStatus(val int64) {
	p.Status = val
}
func (p *UpdateUserReq) SetGender(val int64) {
	p.Gender = val
}
func (p *UpdateUserReq) SetBirthday(val string) {
	p.Birthday = val
}
func (p *UpdateUserReq) SetDetail(val string) {
	p.Detail = val
}
func (p *UpdateUserReq) SetRoleId(val int64) {
	p.RoleId = val
}

func (p *UpdateUserReq) IsSetId() bool {
	return p.Id != UpdateUserReq_Id_DEFAULT
}

func (p *UpdateUserReq) IsSetAvatar() bool {
	return p.Avatar != UpdateUserReq_Avatar_DEFAULT
}

func (p *UpdateUserReq) IsSetMobile() bool {
	return p.Mobile != UpdateUserReq_Mobile_DEFAULT
}

func (p *UpdateUserReq) IsSetName() bool {
	return p.Name != UpdateUserReq_Name_DEFAULT
}

func (p *UpdateUserReq) IsSetStatus() bool {
	return p.Status != UpdateUserReq_Status_DEFAULT
}

func (p *UpdateUserReq) IsSetGender() bool {
	return p.Gender != UpdateUserReq_Gender_DEFAULT
}

func (p *UpdateUserReq) IsSetBirthday() bool {
	return p.Birthday != UpdateUserReq_Birthday_DEFAULT
}

func (p *UpdateUserReq) IsSetDetail() bool {
	return p.Detail != UpdateUserReq_Detail_DEFAULT
}

func (p *UpdateUserReq) IsSetRoleId() bool {
	return p.RoleId != UpdateUserReq_RoleId_DEFAULT
}

func (p *UpdateUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateUserReq(%+v)", *p)
}

var fieldIDToName_UpdateUserReq = map[int16]string{
	1: "id",
	2: "avatar",
	3: "mobile",
	4: "name",
	5: "status",
	6: "gender",
	7: "birthday",
	8: "detail",
	9: "roleId",
}

type ChangePasswordReq struct {
	Id       int64  `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Password string `thrift:"password,2,optional" frugal:"2,optional,string" json:"password,omitempty"`
}

func NewChangePasswordReq() *ChangePasswordReq {
	return &ChangePasswordReq{
		Id:       0,
		Password: "",
	}
}

func (p *ChangePasswordReq) InitDefault() {
	p.Id = 0
	p.Password = ""
}

var ChangePasswordReq_Id_DEFAULT int64 = 0

func (p *ChangePasswordReq) GetId() (v int64) {
	if !p.IsSetId() {
		return ChangePasswordReq_Id_DEFAULT
	}
	return p.Id
}

var ChangePasswordReq_Password_DEFAULT string = ""

func (p *ChangePasswordReq) GetPassword() (v string) {
	if !p.IsSetPassword() {
		return ChangePasswordReq_Password_DEFAULT
	}
	return p.Password
}
func (p *ChangePasswordReq) SetId(val int64) {
	p.Id = val
}
func (p *ChangePasswordReq) SetPassword(val string) {
	p.Password = val
}

func (p *ChangePasswordReq) IsSetId() bool {
	return p.Id != ChangePasswordReq_Id_DEFAULT
}

func (p *ChangePasswordReq) IsSetPassword() bool {
	return p.Password != ChangePasswordReq_Password_DEFAULT
}

func (p *ChangePasswordReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangePasswordReq(%+v)", *p)
}

var fieldIDToName_ChangePasswordReq = map[int16]string{
	1: "id",
	2: "password",
}

type SetUserRoleReq struct {
	Id     int64 `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	RoleId int64 `thrift:"roleId,2,optional" frugal:"2,optional,i64" json:"roleId,omitempty"`
}

func NewSetUserRoleReq() *SetUserRoleReq {
	return &SetUserRoleReq{
		Id:     0,
		RoleId: 0,
	}
}

func (p *SetUserRoleReq) InitDefault() {
	p.Id = 0
	p.RoleId = 0
}

var SetUserRoleReq_Id_DEFAULT int64 = 0

func (p *SetUserRoleReq) GetId() (v int64) {
	if !p.IsSetId() {
		return SetUserRoleReq_Id_DEFAULT
	}
	return p.Id
}

var SetUserRoleReq_RoleId_DEFAULT int64 = 0

func (p *SetUserRoleReq) GetRoleId() (v int64) {
	if !p.IsSetRoleId() {
		return SetUserRoleReq_RoleId_DEFAULT
	}
	return p.RoleId
}
func (p *SetUserRoleReq) SetId(val int64) {
	p.Id = val
}
func (p *SetUserRoleReq) SetRoleId(val int64) {
	p.RoleId = val
}

func (p *SetUserRoleReq) IsSetId() bool {
	return p.Id != SetUserRoleReq_Id_DEFAULT
}

func (p *SetUserRoleReq) IsSetRoleId() bool {
	return p.RoleId != SetUserRoleReq_RoleId_DEFAULT
}

func (p *SetUserRoleReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetUserRoleReq(%+v)", *p)
}

var fieldIDToName_SetUserRoleReq = map[int16]string{
	1: "id",
	2: "roleId",
}

type UserService interface {
	CreateUser(ctx context.Context, req *CreateUserReq) (r *UserResp, err error)

	GetUser(ctx context.Context, req *base.IdReq) (r *UserResp, err error)

	LoginUser(ctx context.Context, req *base.CheckAccountReq) (r *UserResp, err error)

	GetUserList(ctx context.Context, req *GetUserListReq) (r *UserListResp, err error)

	UpdateUser(ctx context.Context, req *UpdateUserReq) (r *UserResp, err error)

	ChangePassword(ctx context.Context, req *ChangePasswordReq) (r *base.NilResponse, err error)

	DeleteUser(ctx context.Context, req *base.IdReq) (r *base.NilResponse, err error)

	SetUserRole(ctx context.Context, req *SetUserRoleReq) (r *base.NilResponse, err error)
}

type UserServiceCreateUserArgs struct {
	Req *CreateUserReq `thrift:"req,1" frugal:"1,default,CreateUserReq" json:"req"`
}

func NewUserServiceCreateUserArgs() *UserServiceCreateUserArgs {
	return &UserServiceCreateUserArgs{}
}

func (p *UserServiceCreateUserArgs) InitDefault() {
}

var UserServiceCreateUserArgs_Req_DEFAULT *CreateUserReq

func (p *UserServiceCreateUserArgs) GetReq() (v *CreateUserReq) {
	if !p.IsSetReq() {
		return UserServiceCreateUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceCreateUserArgs) SetReq(val *CreateUserReq) {
	p.Req = val
}

func (p *UserServiceCreateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceCreateUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceCreateUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceCreateUserArgs = map[int16]string{
	1: "req",
}

type UserServiceCreateUserResult struct {
	Success *UserResp `thrift:"success,0,optional" frugal:"0,optional,UserResp" json:"success,omitempty"`
}

func NewUserServiceCreateUserResult() *UserServiceCreateUserResult {
	return &UserServiceCreateUserResult{}
}

func (p *UserServiceCreateUserResult) InitDefault() {
}

var UserServiceCreateUserResult_Success_DEFAULT *UserResp

func (p *UserServiceCreateUserResult) GetSuccess() (v *UserResp) {
	if !p.IsSetSuccess() {
		return UserServiceCreateUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceCreateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserResp)
}

func (p *UserServiceCreateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceCreateUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceCreateUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceCreateUserResult = map[int16]string{
	0: "success",
}

type UserServiceGetUserArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewUserServiceGetUserArgs() *UserServiceGetUserArgs {
	return &UserServiceGetUserArgs{}
}

func (p *UserServiceGetUserArgs) InitDefault() {
}

var UserServiceGetUserArgs_Req_DEFAULT *base.IdReq

func (p *UserServiceGetUserArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return UserServiceGetUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceGetUserArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *UserServiceGetUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceGetUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserArgs = map[int16]string{
	1: "req",
}

type UserServiceGetUserResult struct {
	Success *UserResp `thrift:"success,0,optional" frugal:"0,optional,UserResp" json:"success,omitempty"`
}

func NewUserServiceGetUserResult() *UserServiceGetUserResult {
	return &UserServiceGetUserResult{}
}

func (p *UserServiceGetUserResult) InitDefault() {
}

var UserServiceGetUserResult_Success_DEFAULT *UserResp

func (p *UserServiceGetUserResult) GetSuccess() (v *UserResp) {
	if !p.IsSetSuccess() {
		return UserServiceGetUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserResp)
}

func (p *UserServiceGetUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserResult = map[int16]string{
	0: "success",
}

type UserServiceLoginUserArgs struct {
	Req *base.CheckAccountReq `thrift:"req,1" frugal:"1,default,base.CheckAccountReq" json:"req"`
}

func NewUserServiceLoginUserArgs() *UserServiceLoginUserArgs {
	return &UserServiceLoginUserArgs{}
}

func (p *UserServiceLoginUserArgs) InitDefault() {
}

var UserServiceLoginUserArgs_Req_DEFAULT *base.CheckAccountReq

func (p *UserServiceLoginUserArgs) GetReq() (v *base.CheckAccountReq) {
	if !p.IsSetReq() {
		return UserServiceLoginUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceLoginUserArgs) SetReq(val *base.CheckAccountReq) {
	p.Req = val
}

func (p *UserServiceLoginUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceLoginUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceLoginUserArgs = map[int16]string{
	1: "req",
}

type UserServiceLoginUserResult struct {
	Success *UserResp `thrift:"success,0,optional" frugal:"0,optional,UserResp" json:"success,omitempty"`
}

func NewUserServiceLoginUserResult() *UserServiceLoginUserResult {
	return &UserServiceLoginUserResult{}
}

func (p *UserServiceLoginUserResult) InitDefault() {
}

var UserServiceLoginUserResult_Success_DEFAULT *UserResp

func (p *UserServiceLoginUserResult) GetSuccess() (v *UserResp) {
	if !p.IsSetSuccess() {
		return UserServiceLoginUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceLoginUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserResp)
}

func (p *UserServiceLoginUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceLoginUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceLoginUserResult = map[int16]string{
	0: "success",
}

type UserServiceGetUserListArgs struct {
	Req *GetUserListReq `thrift:"req,1" frugal:"1,default,GetUserListReq" json:"req"`
}

func NewUserServiceGetUserListArgs() *UserServiceGetUserListArgs {
	return &UserServiceGetUserListArgs{}
}

func (p *UserServiceGetUserListArgs) InitDefault() {
}

var UserServiceGetUserListArgs_Req_DEFAULT *GetUserListReq

func (p *UserServiceGetUserListArgs) GetReq() (v *GetUserListReq) {
	if !p.IsSetReq() {
		return UserServiceGetUserListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceGetUserListArgs) SetReq(val *GetUserListReq) {
	p.Req = val
}

func (p *UserServiceGetUserListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceGetUserListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserListArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserListArgs = map[int16]string{
	1: "req",
}

type UserServiceGetUserListResult struct {
	Success *UserListResp `thrift:"success,0,optional" frugal:"0,optional,UserListResp" json:"success,omitempty"`
}

func NewUserServiceGetUserListResult() *UserServiceGetUserListResult {
	return &UserServiceGetUserListResult{}
}

func (p *UserServiceGetUserListResult) InitDefault() {
}

var UserServiceGetUserListResult_Success_DEFAULT *UserListResp

func (p *UserServiceGetUserListResult) GetSuccess() (v *UserListResp) {
	if !p.IsSetSuccess() {
		return UserServiceGetUserListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetUserListResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserListResp)
}

func (p *UserServiceGetUserListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetUserListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserListResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserListResult = map[int16]string{
	0: "success",
}

type UserServiceUpdateUserArgs struct {
	Req *UpdateUserReq `thrift:"req,1" frugal:"1,default,UpdateUserReq" json:"req"`
}

func NewUserServiceUpdateUserArgs() *UserServiceUpdateUserArgs {
	return &UserServiceUpdateUserArgs{}
}

func (p *UserServiceUpdateUserArgs) InitDefault() {
}

var UserServiceUpdateUserArgs_Req_DEFAULT *UpdateUserReq

func (p *UserServiceUpdateUserArgs) GetReq() (v *UpdateUserReq) {
	if !p.IsSetReq() {
		return UserServiceUpdateUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUpdateUserArgs) SetReq(val *UpdateUserReq) {
	p.Req = val
}

func (p *UserServiceUpdateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUpdateUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceUpdateUserArgs = map[int16]string{
	1: "req",
}

type UserServiceUpdateUserResult struct {
	Success *UserResp `thrift:"success,0,optional" frugal:"0,optional,UserResp" json:"success,omitempty"`
}

func NewUserServiceUpdateUserResult() *UserServiceUpdateUserResult {
	return &UserServiceUpdateUserResult{}
}

func (p *UserServiceUpdateUserResult) InitDefault() {
}

var UserServiceUpdateUserResult_Success_DEFAULT *UserResp

func (p *UserServiceUpdateUserResult) GetSuccess() (v *UserResp) {
	if !p.IsSetSuccess() {
		return UserServiceUpdateUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUpdateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserResp)
}

func (p *UserServiceUpdateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUpdateUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceUpdateUserResult = map[int16]string{
	0: "success",
}

type UserServiceChangePasswordArgs struct {
	Req *ChangePasswordReq `thrift:"req,1" frugal:"1,default,ChangePasswordReq" json:"req"`
}

func NewUserServiceChangePasswordArgs() *UserServiceChangePasswordArgs {
	return &UserServiceChangePasswordArgs{}
}

func (p *UserServiceChangePasswordArgs) InitDefault() {
}

var UserServiceChangePasswordArgs_Req_DEFAULT *ChangePasswordReq

func (p *UserServiceChangePasswordArgs) GetReq() (v *ChangePasswordReq) {
	if !p.IsSetReq() {
		return UserServiceChangePasswordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceChangePasswordArgs) SetReq(val *ChangePasswordReq) {
	p.Req = val
}

func (p *UserServiceChangePasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceChangePasswordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceChangePasswordArgs(%+v)", *p)
}

var fieldIDToName_UserServiceChangePasswordArgs = map[int16]string{
	1: "req",
}

type UserServiceChangePasswordResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewUserServiceChangePasswordResult() *UserServiceChangePasswordResult {
	return &UserServiceChangePasswordResult{}
}

func (p *UserServiceChangePasswordResult) InitDefault() {
}

var UserServiceChangePasswordResult_Success_DEFAULT *base.NilResponse

func (p *UserServiceChangePasswordResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return UserServiceChangePasswordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceChangePasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

func (p *UserServiceChangePasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceChangePasswordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceChangePasswordResult(%+v)", *p)
}

var fieldIDToName_UserServiceChangePasswordResult = map[int16]string{
	0: "success",
}

type UserServiceDeleteUserArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewUserServiceDeleteUserArgs() *UserServiceDeleteUserArgs {
	return &UserServiceDeleteUserArgs{}
}

func (p *UserServiceDeleteUserArgs) InitDefault() {
}

var UserServiceDeleteUserArgs_Req_DEFAULT *base.IdReq

func (p *UserServiceDeleteUserArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return UserServiceDeleteUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceDeleteUserArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *UserServiceDeleteUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceDeleteUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceDeleteUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceDeleteUserArgs = map[int16]string{
	1: "req",
}

type UserServiceDeleteUserResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewUserServiceDeleteUserResult() *UserServiceDeleteUserResult {
	return &UserServiceDeleteUserResult{}
}

func (p *UserServiceDeleteUserResult) InitDefault() {
}

var UserServiceDeleteUserResult_Success_DEFAULT *base.NilResponse

func (p *UserServiceDeleteUserResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return UserServiceDeleteUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceDeleteUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

func (p *UserServiceDeleteUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceDeleteUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceDeleteUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceDeleteUserResult = map[int16]string{
	0: "success",
}

type UserServiceSetUserRoleArgs struct {
	Req *SetUserRoleReq `thrift:"req,1" frugal:"1,default,SetUserRoleReq" json:"req"`
}

func NewUserServiceSetUserRoleArgs() *UserServiceSetUserRoleArgs {
	return &UserServiceSetUserRoleArgs{}
}

func (p *UserServiceSetUserRoleArgs) InitDefault() {
}

var UserServiceSetUserRoleArgs_Req_DEFAULT *SetUserRoleReq

func (p *UserServiceSetUserRoleArgs) GetReq() (v *SetUserRoleReq) {
	if !p.IsSetReq() {
		return UserServiceSetUserRoleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceSetUserRoleArgs) SetReq(val *SetUserRoleReq) {
	p.Req = val
}

func (p *UserServiceSetUserRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceSetUserRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceSetUserRoleArgs(%+v)", *p)
}

var fieldIDToName_UserServiceSetUserRoleArgs = map[int16]string{
	1: "req",
}

type UserServiceSetUserRoleResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewUserServiceSetUserRoleResult() *UserServiceSetUserRoleResult {
	return &UserServiceSetUserRoleResult{}
}

func (p *UserServiceSetUserRoleResult) InitDefault() {
}

var UserServiceSetUserRoleResult_Success_DEFAULT *base.NilResponse

func (p *UserServiceSetUserRoleResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return UserServiceSetUserRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceSetUserRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

func (p *UserServiceSetUserRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceSetUserRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceSetUserRoleResult(%+v)", *p)
}

var fieldIDToName_UserServiceSetUserRoleResult = map[int16]string{
	0: "success",
}
