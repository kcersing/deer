// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package user

import (
	"context"
	"fmt"
	"gen/kitex_gen/base"
)

type User struct {
	Id int64 `thrift:"id,254,optional" frugal:"254,optional,i64" json:"id,omitempty"`
}

func NewUser() *User {
	return &User{
		Id: 0,
	}
}

func (p *User) InitDefault() {
	p.Id = 0
}

var User_Id_DEFAULT int64 = 0

func (p *User) GetId() (v int64) {
	if !p.IsSetId() {
		return User_Id_DEFAULT
	}
	return p.Id
}
func (p *User) SetId(val int64) {
	p.Id = val
}

func (p *User) IsSetId() bool {
	return p.Id != User_Id_DEFAULT
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

var fieldIDToName_User = map[int16]string{
	254: "id",
}

type UserResp struct {
	User     *User          `thrift:"user,1,optional" frugal:"1,optional,User" json:"user,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewUserResp() *UserResp {
	return &UserResp{}
}

func (p *UserResp) InitDefault() {
}

var UserResp_User_DEFAULT *User

func (p *UserResp) GetUser() (v *User) {
	if !p.IsSetUser() {
		return UserResp_User_DEFAULT
	}
	return p.User
}

var UserResp_BaseResp_DEFAULT *base.BaseResp

func (p *UserResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return UserResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UserResp) SetUser(val *User) {
	p.User = val
}
func (p *UserResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *UserResp) IsSetUser() bool {
	return p.User != nil
}

func (p *UserResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UserResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserResp(%+v)", *p)
}

var fieldIDToName_UserResp = map[int16]string{
	1:   "user",
	255: "baseResp",
}

type UserService interface {
	GetUserInfo(ctx context.Context, req *base.IdReq) (r *UserResp, err error)
}

type UserServiceGetUserInfoArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewUserServiceGetUserInfoArgs() *UserServiceGetUserInfoArgs {
	return &UserServiceGetUserInfoArgs{}
}

func (p *UserServiceGetUserInfoArgs) InitDefault() {
}

var UserServiceGetUserInfoArgs_Req_DEFAULT *base.IdReq

func (p *UserServiceGetUserInfoArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return UserServiceGetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceGetUserInfoArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *UserServiceGetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceGetUserInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserInfoArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserInfoArgs = map[int16]string{
	1: "req",
}

type UserServiceGetUserInfoResult struct {
	Success *UserResp `thrift:"success,0,optional" frugal:"0,optional,UserResp" json:"success,omitempty"`
}

func NewUserServiceGetUserInfoResult() *UserServiceGetUserInfoResult {
	return &UserServiceGetUserInfoResult{}
}

func (p *UserServiceGetUserInfoResult) InitDefault() {
}

var UserServiceGetUserInfoResult_Success_DEFAULT *UserResp

func (p *UserServiceGetUserInfoResult) GetSuccess() (v *UserResp) {
	if !p.IsSetSuccess() {
		return UserServiceGetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserResp)
}

func (p *UserServiceGetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetUserInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserInfoResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserInfoResult = map[int16]string{
	0: "success",
}
