// Code generated by Validator v0.2.6. DO NOT EDIT.

package member

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *Member) IsValid() error {
	return nil
}
func (p *CreateMemberReq) IsValid() error {
	return nil
}
func (p *GetMemberListReq) IsValid() error {
	if p.Pages != nil {
		if err := p.Pages.IsValid(); err != nil {
			return fmt.Errorf("field Pages not valid, %w", err)
		}
	}
	return nil
}
func (p *MemberResp) IsValid() error {
	if p.Member != nil {
		if err := p.Member.IsValid(); err != nil {
			return fmt.Errorf("field Member not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *MemberListResp) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateMemberReq) IsValid() error {
	if p.Member != nil {
		if err := p.Member.IsValid(); err != nil {
			return fmt.Errorf("field Member not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ChangePasswordReq) IsValid() error {
	return nil
}
