// Code generated by Kitex v0.15.1. DO NOT EDIT.

package memberservice

import (
	"context"
	"errors"
	base "gen/kitex_gen/base"
	member "gen/kitex_gen/member"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateMember": kitex.NewMethodInfo(
		createMemberHandler,
		newMemberServiceCreateMemberArgs,
		newMemberServiceCreateMemberResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetMember": kitex.NewMethodInfo(
		getMemberHandler,
		newMemberServiceGetMemberArgs,
		newMemberServiceGetMemberResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"LoginMember": kitex.NewMethodInfo(
		loginMemberHandler,
		newMemberServiceLoginMemberArgs,
		newMemberServiceLoginMemberResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetMemberList": kitex.NewMethodInfo(
		getMemberListHandler,
		newMemberServiceGetMemberListArgs,
		newMemberServiceGetMemberListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	memberServiceServiceInfo                = NewServiceInfo()
	memberServiceServiceInfoForClient       = NewServiceInfoForClient()
	memberServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return memberServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return memberServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return memberServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "MemberService"
	handlerType := (*member.MemberService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "member",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func createMemberHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*member.MemberServiceCreateMemberArgs)
	realResult := result.(*member.MemberServiceCreateMemberResult)
	success, err := handler.(member.MemberService).CreateMember(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMemberServiceCreateMemberArgs() interface{} {
	return member.NewMemberServiceCreateMemberArgs()
}

func newMemberServiceCreateMemberResult() interface{} {
	return member.NewMemberServiceCreateMemberResult()
}

func getMemberHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*member.MemberServiceGetMemberArgs)
	realResult := result.(*member.MemberServiceGetMemberResult)
	success, err := handler.(member.MemberService).GetMember(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMemberServiceGetMemberArgs() interface{} {
	return member.NewMemberServiceGetMemberArgs()
}

func newMemberServiceGetMemberResult() interface{} {
	return member.NewMemberServiceGetMemberResult()
}

func loginMemberHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*member.MemberServiceLoginMemberArgs)
	realResult := result.(*member.MemberServiceLoginMemberResult)
	success, err := handler.(member.MemberService).LoginMember(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMemberServiceLoginMemberArgs() interface{} {
	return member.NewMemberServiceLoginMemberArgs()
}

func newMemberServiceLoginMemberResult() interface{} {
	return member.NewMemberServiceLoginMemberResult()
}

func getMemberListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*member.MemberServiceGetMemberListArgs)
	realResult := result.(*member.MemberServiceGetMemberListResult)
	success, err := handler.(member.MemberService).GetMemberList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMemberServiceGetMemberListArgs() interface{} {
	return member.NewMemberServiceGetMemberListArgs()
}

func newMemberServiceGetMemberListResult() interface{} {
	return member.NewMemberServiceGetMemberListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateMember(ctx context.Context, req *member.CreateMemberReq) (r *member.MemberResp, err error) {
	var _args member.MemberServiceCreateMemberArgs
	_args.Req = req
	var _result member.MemberServiceCreateMemberResult
	if err = p.c.Call(ctx, "CreateMember", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMember(ctx context.Context, req *base.IdReq) (r *member.MemberResp, err error) {
	var _args member.MemberServiceGetMemberArgs
	_args.Req = req
	var _result member.MemberServiceGetMemberResult
	if err = p.c.Call(ctx, "GetMember", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoginMember(ctx context.Context, req *base.CheckAccountReq) (r *member.MemberResp, err error) {
	var _args member.MemberServiceLoginMemberArgs
	_args.Req = req
	var _result member.MemberServiceLoginMemberResult
	if err = p.c.Call(ctx, "LoginMember", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMemberList(ctx context.Context, req *member.GetMemberListReq) (r *member.MemberListResp, err error) {
	var _args member.MemberServiceGetMemberListArgs
	_args.Req = req
	var _result member.MemberServiceGetMemberListResult
	if err = p.c.Call(ctx, "GetMemberList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
