// Code generated by Kitex v0.15.1. DO NOT EDIT.

package memberservice

import (
	"context"
	base "gen/kitex_gen/base"
	member "gen/kitex_gen/member"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateMember(ctx context.Context, req *member.CreateMemberReq, callOptions ...callopt.Option) (r *member.MemberResp, err error)
	DeleteMember(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *base.BaseResp, err error)
	UpdateMember(ctx context.Context, req *member.UpdateMemberReq, callOptions ...callopt.Option) (r *member.MemberResp, err error)
	GetMember(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *member.MemberResp, err error)
	GetMemberList(ctx context.Context, req *member.GetMemberListReq, callOptions ...callopt.Option) (r *member.MemberListResp, err error)
	LoginMember(ctx context.Context, req *base.CheckAccountReq, callOptions ...callopt.Option) (r *member.MemberResp, err error)
	ChangePassword(ctx context.Context, req *member.ChangePasswordReq, callOptions ...callopt.Option) (r *base.BaseResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kMemberServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kMemberServiceClient struct {
	*kClient
}

func (p *kMemberServiceClient) CreateMember(ctx context.Context, req *member.CreateMemberReq, callOptions ...callopt.Option) (r *member.MemberResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateMember(ctx, req)
}

func (p *kMemberServiceClient) DeleteMember(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *base.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteMember(ctx, req)
}

func (p *kMemberServiceClient) UpdateMember(ctx context.Context, req *member.UpdateMemberReq, callOptions ...callopt.Option) (r *member.MemberResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateMember(ctx, req)
}

func (p *kMemberServiceClient) GetMember(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *member.MemberResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetMember(ctx, req)
}

func (p *kMemberServiceClient) GetMemberList(ctx context.Context, req *member.GetMemberListReq, callOptions ...callopt.Option) (r *member.MemberListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetMemberList(ctx, req)
}

func (p *kMemberServiceClient) LoginMember(ctx context.Context, req *base.CheckAccountReq, callOptions ...callopt.Option) (r *member.MemberResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LoginMember(ctx, req)
}

func (p *kMemberServiceClient) ChangePassword(ctx context.Context, req *member.ChangePasswordReq, callOptions ...callopt.Option) (r *base.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ChangePassword(ctx, req)
}
