// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package member

import (
	"context"
	"fmt"
	"gen/kitex_gen/base"
)

type Member struct {
	Id int64 `thrift:"id,254,optional" frugal:"254,optional,i64" json:"id,omitempty"`
}

func NewMember() *Member {
	return &Member{
		Id: 0,
	}
}

func (p *Member) InitDefault() {
	p.Id = 0
}

var Member_Id_DEFAULT int64 = 0

func (p *Member) GetId() (v int64) {
	if !p.IsSetId() {
		return Member_Id_DEFAULT
	}
	return p.Id
}
func (p *Member) SetId(val int64) {
	p.Id = val
}

func (p *Member) IsSetId() bool {
	return p.Id != Member_Id_DEFAULT
}

func (p *Member) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Member(%+v)", *p)
}

var fieldIDToName_Member = map[int16]string{
	254: "id",
}

type MemberResp struct {
	Member   *Member        `thrift:"Member,1,optional" frugal:"1,optional,Member" json:"Member,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewMemberResp() *MemberResp {
	return &MemberResp{}
}

func (p *MemberResp) InitDefault() {
}

var MemberResp_Member_DEFAULT *Member

func (p *MemberResp) GetMember() (v *Member) {
	if !p.IsSetMember() {
		return MemberResp_Member_DEFAULT
	}
	return p.Member
}

var MemberResp_BaseResp_DEFAULT *base.BaseResp

func (p *MemberResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return MemberResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *MemberResp) SetMember(val *Member) {
	p.Member = val
}
func (p *MemberResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *MemberResp) IsSetMember() bool {
	return p.Member != nil
}

func (p *MemberResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *MemberResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberResp(%+v)", *p)
}

var fieldIDToName_MemberResp = map[int16]string{
	1:   "Member",
	255: "baseResp",
}

type MemberService interface {
	GetMemberInfo(ctx context.Context, req *base.IdReq) (r *MemberResp, err error)
}

type MemberServiceGetMemberInfoArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewMemberServiceGetMemberInfoArgs() *MemberServiceGetMemberInfoArgs {
	return &MemberServiceGetMemberInfoArgs{}
}

func (p *MemberServiceGetMemberInfoArgs) InitDefault() {
}

var MemberServiceGetMemberInfoArgs_Req_DEFAULT *base.IdReq

func (p *MemberServiceGetMemberInfoArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return MemberServiceGetMemberInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MemberServiceGetMemberInfoArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *MemberServiceGetMemberInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceGetMemberInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetMemberInfoArgs(%+v)", *p)
}

var fieldIDToName_MemberServiceGetMemberInfoArgs = map[int16]string{
	1: "req",
}

type MemberServiceGetMemberInfoResult struct {
	Success *MemberResp `thrift:"success,0,optional" frugal:"0,optional,MemberResp" json:"success,omitempty"`
}

func NewMemberServiceGetMemberInfoResult() *MemberServiceGetMemberInfoResult {
	return &MemberServiceGetMemberInfoResult{}
}

func (p *MemberServiceGetMemberInfoResult) InitDefault() {
}

var MemberServiceGetMemberInfoResult_Success_DEFAULT *MemberResp

func (p *MemberServiceGetMemberInfoResult) GetSuccess() (v *MemberResp) {
	if !p.IsSetSuccess() {
		return MemberServiceGetMemberInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MemberServiceGetMemberInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*MemberResp)
}

func (p *MemberServiceGetMemberInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceGetMemberInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceGetMemberInfoResult(%+v)", *p)
}

var fieldIDToName_MemberServiceGetMemberInfoResult = map[int16]string{
	0: "success",
}
