// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package product

import (
	"context"
	"fmt"
	"gen/kitex_gen/base"
)

type Product struct {
	Id int64 `thrift:"id,254,optional" frugal:"254,optional,i64" json:"id,omitempty"`
}

func NewProduct() *Product {
	return &Product{
		Id: 0,
	}
}

func (p *Product) InitDefault() {
	p.Id = 0
}

var Product_Id_DEFAULT int64 = 0

func (p *Product) GetId() (v int64) {
	if !p.IsSetId() {
		return Product_Id_DEFAULT
	}
	return p.Id
}
func (p *Product) SetId(val int64) {
	p.Id = val
}

func (p *Product) IsSetId() bool {
	return p.Id != Product_Id_DEFAULT
}

func (p *Product) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Product(%+v)", *p)
}

var fieldIDToName_Product = map[int16]string{
	254: "id",
}

type ProductResp struct {
	Product  *Product       `thrift:"product,1,optional" frugal:"1,optional,Product" json:"product,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewProductResp() *ProductResp {
	return &ProductResp{}
}

func (p *ProductResp) InitDefault() {
}

var ProductResp_Product_DEFAULT *Product

func (p *ProductResp) GetProduct() (v *Product) {
	if !p.IsSetProduct() {
		return ProductResp_Product_DEFAULT
	}
	return p.Product
}

var ProductResp_BaseResp_DEFAULT *base.BaseResp

func (p *ProductResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return ProductResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ProductResp) SetProduct(val *Product) {
	p.Product = val
}
func (p *ProductResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *ProductResp) IsSetProduct() bool {
	return p.Product != nil
}

func (p *ProductResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ProductResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductResp(%+v)", *p)
}

var fieldIDToName_ProductResp = map[int16]string{
	1:   "product",
	255: "baseResp",
}

type ProductService interface {
	GetProductInfo(ctx context.Context, req *base.IdReq) (r *ProductResp, err error)
}

type ProductServiceGetProductInfoArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewProductServiceGetProductInfoArgs() *ProductServiceGetProductInfoArgs {
	return &ProductServiceGetProductInfoArgs{}
}

func (p *ProductServiceGetProductInfoArgs) InitDefault() {
}

var ProductServiceGetProductInfoArgs_Req_DEFAULT *base.IdReq

func (p *ProductServiceGetProductInfoArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return ProductServiceGetProductInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProductServiceGetProductInfoArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *ProductServiceGetProductInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductServiceGetProductInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceGetProductInfoArgs(%+v)", *p)
}

var fieldIDToName_ProductServiceGetProductInfoArgs = map[int16]string{
	1: "req",
}

type ProductServiceGetProductInfoResult struct {
	Success *ProductResp `thrift:"success,0,optional" frugal:"0,optional,ProductResp" json:"success,omitempty"`
}

func NewProductServiceGetProductInfoResult() *ProductServiceGetProductInfoResult {
	return &ProductServiceGetProductInfoResult{}
}

func (p *ProductServiceGetProductInfoResult) InitDefault() {
}

var ProductServiceGetProductInfoResult_Success_DEFAULT *ProductResp

func (p *ProductServiceGetProductInfoResult) GetSuccess() (v *ProductResp) {
	if !p.IsSetSuccess() {
		return ProductServiceGetProductInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProductServiceGetProductInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*ProductResp)
}

func (p *ProductServiceGetProductInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductServiceGetProductInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductServiceGetProductInfoResult(%+v)", *p)
}

var fieldIDToName_ProductServiceGetProductInfoResult = map[int16]string{
	0: "success",
}
