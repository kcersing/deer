// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package base

import (
	"fmt"
)

type BaseResp struct {
	Code    int64  `thrift:"code,1,optional" frugal:"1,optional,i64" json:"code,omitempty"`
	Message string `thrift:"message,2,optional" frugal:"2,optional,string" json:"message,omitempty"`
	Time    string `thrift:"time,3,optional" frugal:"3,optional,string" json:"time,omitempty"`
	Total   int64  `thrift:"total,4,optional" frugal:"4,optional,i64" json:"total,omitempty"`
}

func NewBaseResp() *BaseResp {
	return &BaseResp{
		Code:    0,
		Message: "",
		Time:    "",
		Total:   0,
	}
}

func (p *BaseResp) InitDefault() {
	p.Code = 0
	p.Message = ""
	p.Time = ""
	p.Total = 0
}

var BaseResp_Code_DEFAULT int64 = 0

func (p *BaseResp) GetCode() (v int64) {
	if !p.IsSetCode() {
		return BaseResp_Code_DEFAULT
	}
	return p.Code
}

var BaseResp_Message_DEFAULT string = ""

func (p *BaseResp) GetMessage() (v string) {
	if !p.IsSetMessage() {
		return BaseResp_Message_DEFAULT
	}
	return p.Message
}

var BaseResp_Time_DEFAULT string = ""

func (p *BaseResp) GetTime() (v string) {
	if !p.IsSetTime() {
		return BaseResp_Time_DEFAULT
	}
	return p.Time
}

var BaseResp_Total_DEFAULT int64 = 0

func (p *BaseResp) GetTotal() (v int64) {
	if !p.IsSetTotal() {
		return BaseResp_Total_DEFAULT
	}
	return p.Total
}
func (p *BaseResp) SetCode(val int64) {
	p.Code = val
}
func (p *BaseResp) SetMessage(val string) {
	p.Message = val
}
func (p *BaseResp) SetTime(val string) {
	p.Time = val
}
func (p *BaseResp) SetTotal(val int64) {
	p.Total = val
}

func (p *BaseResp) IsSetCode() bool {
	return p.Code != BaseResp_Code_DEFAULT
}

func (p *BaseResp) IsSetMessage() bool {
	return p.Message != BaseResp_Message_DEFAULT
}

func (p *BaseResp) IsSetTime() bool {
	return p.Time != BaseResp_Time_DEFAULT
}

func (p *BaseResp) IsSetTotal() bool {
	return p.Total != BaseResp_Total_DEFAULT
}

func (p *BaseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResp(%+v)", *p)
}

var fieldIDToName_BaseResp = map[int16]string{
	1: "code",
	2: "message",
	3: "time",
	4: "total",
}

type PageReq struct {
	Page     int64  `thrift:"page,1,optional" frugal:"1,optional,i64" json:"page,omitempty"`
	PageSize int64  `thrift:"pageSize,2,optional" frugal:"2,optional,i64" json:"pageSize,omitempty"`
	Keyword  string `thrift:"Keyword,3,optional" frugal:"3,optional,string" json:"Keyword,omitempty"`
}

func NewPageReq() *PageReq {
	return &PageReq{
		Page:     1,
		PageSize: 10,
		Keyword:  "",
	}
}

func (p *PageReq) InitDefault() {
	p.Page = 1
	p.PageSize = 10
	p.Keyword = ""
}

var PageReq_Page_DEFAULT int64 = 1

func (p *PageReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return PageReq_Page_DEFAULT
	}
	return p.Page
}

var PageReq_PageSize_DEFAULT int64 = 10

func (p *PageReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return PageReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var PageReq_Keyword_DEFAULT string = ""

func (p *PageReq) GetKeyword() (v string) {
	if !p.IsSetKeyword() {
		return PageReq_Keyword_DEFAULT
	}
	return p.Keyword
}
func (p *PageReq) SetPage(val int64) {
	p.Page = val
}
func (p *PageReq) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *PageReq) SetKeyword(val string) {
	p.Keyword = val
}

func (p *PageReq) IsSetPage() bool {
	return p.Page != PageReq_Page_DEFAULT
}

func (p *PageReq) IsSetPageSize() bool {
	return p.PageSize != PageReq_PageSize_DEFAULT
}

func (p *PageReq) IsSetKeyword() bool {
	return p.Keyword != PageReq_Keyword_DEFAULT
}

func (p *PageReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PageReq(%+v)", *p)
}

var fieldIDToName_PageReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "Keyword",
}

type IdReq struct {
	Id int64 `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
}

func NewIdReq() *IdReq {
	return &IdReq{
		Id: 0,
	}
}

func (p *IdReq) InitDefault() {
	p.Id = 0
}

var IdReq_Id_DEFAULT int64 = 0

func (p *IdReq) GetId() (v int64) {
	if !p.IsSetId() {
		return IdReq_Id_DEFAULT
	}
	return p.Id
}
func (p *IdReq) SetId(val int64) {
	p.Id = val
}

func (p *IdReq) IsSetId() bool {
	return p.Id != IdReq_Id_DEFAULT
}

func (p *IdReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdReq(%+v)", *p)
}

var fieldIDToName_IdReq = map[int16]string{
	1: "id",
}

type NilResponse struct {
}

func NewNilResponse() *NilResponse {
	return &NilResponse{}
}

func (p *NilResponse) InitDefault() {
}

func (p *NilResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NilResponse(%+v)", *p)
}

var fieldIDToName_NilResponse = map[int16]string{}

type CheckAccountReq struct {
	Username string  `thrift:"username,1" frugal:"1,default,string" json:"username"`
	Password string  `thrift:"password,2" frugal:"2,default,string" json:"password"`
	Captcha  *string `thrift:"captcha,3,optional" frugal:"3,optional,string" json:"captcha,omitempty"`
}

func NewCheckAccountReq() *CheckAccountReq {
	return &CheckAccountReq{}
}

func (p *CheckAccountReq) InitDefault() {
}

func (p *CheckAccountReq) GetUsername() (v string) {
	return p.Username
}

func (p *CheckAccountReq) GetPassword() (v string) {
	return p.Password
}

var CheckAccountReq_Captcha_DEFAULT string

func (p *CheckAccountReq) GetCaptcha() (v string) {
	if !p.IsSetCaptcha() {
		return CheckAccountReq_Captcha_DEFAULT
	}
	return *p.Captcha
}
func (p *CheckAccountReq) SetUsername(val string) {
	p.Username = val
}
func (p *CheckAccountReq) SetPassword(val string) {
	p.Password = val
}
func (p *CheckAccountReq) SetCaptcha(val *string) {
	p.Captcha = val
}

func (p *CheckAccountReq) IsSetCaptcha() bool {
	return p.Captcha != nil
}

func (p *CheckAccountReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckAccountReq(%+v)", *p)
}

var fieldIDToName_CheckAccountReq = map[int16]string{
	1: "username",
	2: "password",
	3: "captcha",
}
