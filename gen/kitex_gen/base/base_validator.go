// Code generated by Validator v0.2.6. DO NOT EDIT.

package base

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *BaseResp) IsValid() error {
	return nil
}
func (p *PageReq) IsValid() error {
	return nil
}
func (p *IdReq) IsValid() error {
	return nil
}
func (p *NilResponse) IsValid() error {
	return nil
}
func (p *CheckAccountReq) IsValid() error {
	if len(p.Username) < int(1) {
		return fmt.Errorf("field Username min_len rule failed, current value: %d", len(p.Username))
	}
	if len(p.Password) < int(1) {
		return fmt.Errorf("field Password min_len rule failed, current value: %d", len(p.Password))
	}
	if len(p.Captcha) < int(1) {
		return fmt.Errorf("field Captcha min_len rule failed, current value: %d", len(p.Captcha))
	}
	return nil
}
