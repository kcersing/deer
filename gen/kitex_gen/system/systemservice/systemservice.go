// Code generated by Kitex v0.15.1. DO NOT EDIT.

package systemservice

import (
	"context"
	"errors"
	base "gen/kitex_gen/base"
	system "gen/kitex_gen/system"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateApi": kitex.NewMethodInfo(
		createApiHandler,
		newSystemServiceCreateApiArgs,
		newSystemServiceCreateApiResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateApi": kitex.NewMethodInfo(
		updateApiHandler,
		newSystemServiceUpdateApiArgs,
		newSystemServiceUpdateApiResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteApi": kitex.NewMethodInfo(
		deleteApiHandler,
		newSystemServiceDeleteApiArgs,
		newSystemServiceDeleteApiResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ApiList": kitex.NewMethodInfo(
		apiListHandler,
		newSystemServiceApiListArgs,
		newSystemServiceApiListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ApiTree": kitex.NewMethodInfo(
		apiTreeHandler,
		newSystemServiceApiTreeArgs,
		newSystemServiceApiTreeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateMenu": kitex.NewMethodInfo(
		createMenuHandler,
		newSystemServiceCreateMenuArgs,
		newSystemServiceCreateMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateMenu": kitex.NewMethodInfo(
		updateMenuHandler,
		newSystemServiceUpdateMenuArgs,
		newSystemServiceUpdateMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteMenu": kitex.NewMethodInfo(
		deleteMenuHandler,
		newSystemServiceDeleteMenuArgs,
		newSystemServiceDeleteMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetMenu": kitex.NewMethodInfo(
		getMenuHandler,
		newSystemServiceGetMenuArgs,
		newSystemServiceGetMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MenuList": kitex.NewMethodInfo(
		menuListHandler,
		newSystemServiceMenuListArgs,
		newSystemServiceMenuListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MenuTree": kitex.NewMethodInfo(
		menuTreeHandler,
		newSystemServiceMenuTreeArgs,
		newSystemServiceMenuTreeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateRole": kitex.NewMethodInfo(
		createRoleHandler,
		newSystemServiceCreateRoleArgs,
		newSystemServiceCreateRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetRole": kitex.NewMethodInfo(
		getRoleHandler,
		newSystemServiceGetRoleArgs,
		newSystemServiceGetRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetRoleList": kitex.NewMethodInfo(
		getRoleListHandler,
		newSystemServiceGetRoleListArgs,
		newSystemServiceGetRoleListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateRole": kitex.NewMethodInfo(
		updateRoleHandler,
		newSystemServiceUpdateRoleArgs,
		newSystemServiceUpdateRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteRole": kitex.NewMethodInfo(
		deleteRoleHandler,
		newSystemServiceDeleteRoleArgs,
		newSystemServiceDeleteRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateRoleMenu": kitex.NewMethodInfo(
		createRoleMenuHandler,
		newSystemServiceCreateRoleMenuArgs,
		newSystemServiceCreateRoleMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateRoleApi": kitex.NewMethodInfo(
		createRoleApiHandler,
		newSystemServiceCreateRoleApiArgs,
		newSystemServiceCreateRoleApiResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetRoleApi": kitex.NewMethodInfo(
		getRoleApiHandler,
		newSystemServiceGetRoleApiArgs,
		newSystemServiceGetRoleApiResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetRoleMenu": kitex.NewMethodInfo(
		getRoleMenuHandler,
		newSystemServiceGetRoleMenuArgs,
		newSystemServiceGetRoleMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateDict": kitex.NewMethodInfo(
		createDictHandler,
		newSystemServiceCreateDictArgs,
		newSystemServiceCreateDictResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateDict": kitex.NewMethodInfo(
		updateDictHandler,
		newSystemServiceUpdateDictArgs,
		newSystemServiceUpdateDictResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteDict": kitex.NewMethodInfo(
		deleteDictHandler,
		newSystemServiceDeleteDictArgs,
		newSystemServiceDeleteDictResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DictList": kitex.NewMethodInfo(
		dictListHandler,
		newSystemServiceDictListArgs,
		newSystemServiceDictListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateDictht": kitex.NewMethodInfo(
		createDicthtHandler,
		newSystemServiceCreateDicthtArgs,
		newSystemServiceCreateDicthtResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateDictht": kitex.NewMethodInfo(
		updateDicthtHandler,
		newSystemServiceUpdateDicthtArgs,
		newSystemServiceUpdateDicthtResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteDictht": kitex.NewMethodInfo(
		deleteDicthtHandler,
		newSystemServiceDeleteDicthtArgs,
		newSystemServiceDeleteDicthtResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DicthtList": kitex.NewMethodInfo(
		dicthtListHandler,
		newSystemServiceDicthtListArgs,
		newSystemServiceDicthtListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"LogList": kitex.NewMethodInfo(
		logListHandler,
		newSystemServiceLogListArgs,
		newSystemServiceLogListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteLog": kitex.NewMethodInfo(
		deleteLogHandler,
		newSystemServiceDeleteLogArgs,
		newSystemServiceDeleteLogResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VerifyRoleAuth": kitex.NewMethodInfo(
		verifyRoleAuthHandler,
		newSystemServiceVerifyRoleAuthArgs,
		newSystemServiceVerifyRoleAuthResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	systemServiceServiceInfo                = NewServiceInfo()
	systemServiceServiceInfoForClient       = NewServiceInfoForClient()
	systemServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return systemServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return systemServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return systemServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "SystemService"
	handlerType := (*system.SystemService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "system",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func createApiHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceCreateApiArgs)
	realResult := result.(*system.SystemServiceCreateApiResult)
	success, err := handler.(system.SystemService).CreateApi(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateApiArgs() interface{} {
	return system.NewSystemServiceCreateApiArgs()
}

func newSystemServiceCreateApiResult() interface{} {
	return system.NewSystemServiceCreateApiResult()
}

func updateApiHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceUpdateApiArgs)
	realResult := result.(*system.SystemServiceUpdateApiResult)
	success, err := handler.(system.SystemService).UpdateApi(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateApiArgs() interface{} {
	return system.NewSystemServiceUpdateApiArgs()
}

func newSystemServiceUpdateApiResult() interface{} {
	return system.NewSystemServiceUpdateApiResult()
}

func deleteApiHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceDeleteApiArgs)
	realResult := result.(*system.SystemServiceDeleteApiResult)
	success, err := handler.(system.SystemService).DeleteApi(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteApiArgs() interface{} {
	return system.NewSystemServiceDeleteApiArgs()
}

func newSystemServiceDeleteApiResult() interface{} {
	return system.NewSystemServiceDeleteApiResult()
}

func apiListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceApiListArgs)
	realResult := result.(*system.SystemServiceApiListResult)
	success, err := handler.(system.SystemService).ApiList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceApiListArgs() interface{} {
	return system.NewSystemServiceApiListArgs()
}

func newSystemServiceApiListResult() interface{} {
	return system.NewSystemServiceApiListResult()
}

func apiTreeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceApiTreeArgs)
	realResult := result.(*system.SystemServiceApiTreeResult)
	success, err := handler.(system.SystemService).ApiTree(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceApiTreeArgs() interface{} {
	return system.NewSystemServiceApiTreeArgs()
}

func newSystemServiceApiTreeResult() interface{} {
	return system.NewSystemServiceApiTreeResult()
}

func createMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceCreateMenuArgs)
	realResult := result.(*system.SystemServiceCreateMenuResult)
	success, err := handler.(system.SystemService).CreateMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateMenuArgs() interface{} {
	return system.NewSystemServiceCreateMenuArgs()
}

func newSystemServiceCreateMenuResult() interface{} {
	return system.NewSystemServiceCreateMenuResult()
}

func updateMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceUpdateMenuArgs)
	realResult := result.(*system.SystemServiceUpdateMenuResult)
	success, err := handler.(system.SystemService).UpdateMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateMenuArgs() interface{} {
	return system.NewSystemServiceUpdateMenuArgs()
}

func newSystemServiceUpdateMenuResult() interface{} {
	return system.NewSystemServiceUpdateMenuResult()
}

func deleteMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceDeleteMenuArgs)
	realResult := result.(*system.SystemServiceDeleteMenuResult)
	success, err := handler.(system.SystemService).DeleteMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteMenuArgs() interface{} {
	return system.NewSystemServiceDeleteMenuArgs()
}

func newSystemServiceDeleteMenuResult() interface{} {
	return system.NewSystemServiceDeleteMenuResult()
}

func getMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceGetMenuArgs)
	realResult := result.(*system.SystemServiceGetMenuResult)
	success, err := handler.(system.SystemService).GetMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetMenuArgs() interface{} {
	return system.NewSystemServiceGetMenuArgs()
}

func newSystemServiceGetMenuResult() interface{} {
	return system.NewSystemServiceGetMenuResult()
}

func menuListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceMenuListArgs)
	realResult := result.(*system.SystemServiceMenuListResult)
	success, err := handler.(system.SystemService).MenuList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceMenuListArgs() interface{} {
	return system.NewSystemServiceMenuListArgs()
}

func newSystemServiceMenuListResult() interface{} {
	return system.NewSystemServiceMenuListResult()
}

func menuTreeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceMenuTreeArgs)
	realResult := result.(*system.SystemServiceMenuTreeResult)
	success, err := handler.(system.SystemService).MenuTree(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceMenuTreeArgs() interface{} {
	return system.NewSystemServiceMenuTreeArgs()
}

func newSystemServiceMenuTreeResult() interface{} {
	return system.NewSystemServiceMenuTreeResult()
}

func createRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceCreateRoleArgs)
	realResult := result.(*system.SystemServiceCreateRoleResult)
	success, err := handler.(system.SystemService).CreateRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateRoleArgs() interface{} {
	return system.NewSystemServiceCreateRoleArgs()
}

func newSystemServiceCreateRoleResult() interface{} {
	return system.NewSystemServiceCreateRoleResult()
}

func getRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceGetRoleArgs)
	realResult := result.(*system.SystemServiceGetRoleResult)
	success, err := handler.(system.SystemService).GetRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetRoleArgs() interface{} {
	return system.NewSystemServiceGetRoleArgs()
}

func newSystemServiceGetRoleResult() interface{} {
	return system.NewSystemServiceGetRoleResult()
}

func getRoleListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceGetRoleListArgs)
	realResult := result.(*system.SystemServiceGetRoleListResult)
	success, err := handler.(system.SystemService).GetRoleList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetRoleListArgs() interface{} {
	return system.NewSystemServiceGetRoleListArgs()
}

func newSystemServiceGetRoleListResult() interface{} {
	return system.NewSystemServiceGetRoleListResult()
}

func updateRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceUpdateRoleArgs)
	realResult := result.(*system.SystemServiceUpdateRoleResult)
	success, err := handler.(system.SystemService).UpdateRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateRoleArgs() interface{} {
	return system.NewSystemServiceUpdateRoleArgs()
}

func newSystemServiceUpdateRoleResult() interface{} {
	return system.NewSystemServiceUpdateRoleResult()
}

func deleteRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceDeleteRoleArgs)
	realResult := result.(*system.SystemServiceDeleteRoleResult)
	success, err := handler.(system.SystemService).DeleteRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteRoleArgs() interface{} {
	return system.NewSystemServiceDeleteRoleArgs()
}

func newSystemServiceDeleteRoleResult() interface{} {
	return system.NewSystemServiceDeleteRoleResult()
}

func createRoleMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceCreateRoleMenuArgs)
	realResult := result.(*system.SystemServiceCreateRoleMenuResult)
	success, err := handler.(system.SystemService).CreateRoleMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateRoleMenuArgs() interface{} {
	return system.NewSystemServiceCreateRoleMenuArgs()
}

func newSystemServiceCreateRoleMenuResult() interface{} {
	return system.NewSystemServiceCreateRoleMenuResult()
}

func createRoleApiHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceCreateRoleApiArgs)
	realResult := result.(*system.SystemServiceCreateRoleApiResult)
	success, err := handler.(system.SystemService).CreateRoleApi(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateRoleApiArgs() interface{} {
	return system.NewSystemServiceCreateRoleApiArgs()
}

func newSystemServiceCreateRoleApiResult() interface{} {
	return system.NewSystemServiceCreateRoleApiResult()
}

func getRoleApiHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceGetRoleApiArgs)
	realResult := result.(*system.SystemServiceGetRoleApiResult)
	success, err := handler.(system.SystemService).GetRoleApi(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetRoleApiArgs() interface{} {
	return system.NewSystemServiceGetRoleApiArgs()
}

func newSystemServiceGetRoleApiResult() interface{} {
	return system.NewSystemServiceGetRoleApiResult()
}

func getRoleMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceGetRoleMenuArgs)
	realResult := result.(*system.SystemServiceGetRoleMenuResult)
	success, err := handler.(system.SystemService).GetRoleMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetRoleMenuArgs() interface{} {
	return system.NewSystemServiceGetRoleMenuArgs()
}

func newSystemServiceGetRoleMenuResult() interface{} {
	return system.NewSystemServiceGetRoleMenuResult()
}

func createDictHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceCreateDictArgs)
	realResult := result.(*system.SystemServiceCreateDictResult)
	success, err := handler.(system.SystemService).CreateDict(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateDictArgs() interface{} {
	return system.NewSystemServiceCreateDictArgs()
}

func newSystemServiceCreateDictResult() interface{} {
	return system.NewSystemServiceCreateDictResult()
}

func updateDictHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceUpdateDictArgs)
	realResult := result.(*system.SystemServiceUpdateDictResult)
	success, err := handler.(system.SystemService).UpdateDict(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateDictArgs() interface{} {
	return system.NewSystemServiceUpdateDictArgs()
}

func newSystemServiceUpdateDictResult() interface{} {
	return system.NewSystemServiceUpdateDictResult()
}

func deleteDictHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceDeleteDictArgs)
	realResult := result.(*system.SystemServiceDeleteDictResult)
	success, err := handler.(system.SystemService).DeleteDict(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteDictArgs() interface{} {
	return system.NewSystemServiceDeleteDictArgs()
}

func newSystemServiceDeleteDictResult() interface{} {
	return system.NewSystemServiceDeleteDictResult()
}

func dictListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceDictListArgs)
	realResult := result.(*system.SystemServiceDictListResult)
	success, err := handler.(system.SystemService).DictList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDictListArgs() interface{} {
	return system.NewSystemServiceDictListArgs()
}

func newSystemServiceDictListResult() interface{} {
	return system.NewSystemServiceDictListResult()
}

func createDicthtHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceCreateDicthtArgs)
	realResult := result.(*system.SystemServiceCreateDicthtResult)
	success, err := handler.(system.SystemService).CreateDictht(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateDicthtArgs() interface{} {
	return system.NewSystemServiceCreateDicthtArgs()
}

func newSystemServiceCreateDicthtResult() interface{} {
	return system.NewSystemServiceCreateDicthtResult()
}

func updateDicthtHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceUpdateDicthtArgs)
	realResult := result.(*system.SystemServiceUpdateDicthtResult)
	success, err := handler.(system.SystemService).UpdateDictht(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateDicthtArgs() interface{} {
	return system.NewSystemServiceUpdateDicthtArgs()
}

func newSystemServiceUpdateDicthtResult() interface{} {
	return system.NewSystemServiceUpdateDicthtResult()
}

func deleteDicthtHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceDeleteDicthtArgs)
	realResult := result.(*system.SystemServiceDeleteDicthtResult)
	success, err := handler.(system.SystemService).DeleteDictht(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteDicthtArgs() interface{} {
	return system.NewSystemServiceDeleteDicthtArgs()
}

func newSystemServiceDeleteDicthtResult() interface{} {
	return system.NewSystemServiceDeleteDicthtResult()
}

func dicthtListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceDicthtListArgs)
	realResult := result.(*system.SystemServiceDicthtListResult)
	success, err := handler.(system.SystemService).DicthtList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDicthtListArgs() interface{} {
	return system.NewSystemServiceDicthtListArgs()
}

func newSystemServiceDicthtListResult() interface{} {
	return system.NewSystemServiceDicthtListResult()
}

func logListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceLogListArgs)
	realResult := result.(*system.SystemServiceLogListResult)
	success, err := handler.(system.SystemService).LogList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceLogListArgs() interface{} {
	return system.NewSystemServiceLogListArgs()
}

func newSystemServiceLogListResult() interface{} {
	return system.NewSystemServiceLogListResult()
}

func deleteLogHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceDeleteLogArgs)
	realResult := result.(*system.SystemServiceDeleteLogResult)
	success, err := handler.(system.SystemService).DeleteLog(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteLogArgs() interface{} {
	return system.NewSystemServiceDeleteLogArgs()
}

func newSystemServiceDeleteLogResult() interface{} {
	return system.NewSystemServiceDeleteLogResult()
}

func verifyRoleAuthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceVerifyRoleAuthArgs)
	realResult := result.(*system.SystemServiceVerifyRoleAuthResult)
	success, err := handler.(system.SystemService).VerifyRoleAuth(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceVerifyRoleAuthArgs() interface{} {
	return system.NewSystemServiceVerifyRoleAuthArgs()
}

func newSystemServiceVerifyRoleAuthResult() interface{} {
	return system.NewSystemServiceVerifyRoleAuthResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateApi(ctx context.Context, req *system.CreateApiReq) (r *system.ApiResp, err error) {
	var _args system.SystemServiceCreateApiArgs
	_args.Req = req
	var _result system.SystemServiceCreateApiResult
	if err = p.c.Call(ctx, "CreateApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateApi(ctx context.Context, req *system.UpdateApiReq) (r *system.ApiResp, err error) {
	var _args system.SystemServiceUpdateApiArgs
	_args.Req = req
	var _result system.SystemServiceUpdateApiResult
	if err = p.c.Call(ctx, "UpdateApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteApi(ctx context.Context, req *base.IdReq) (r *base.NilResponse, err error) {
	var _args system.SystemServiceDeleteApiArgs
	_args.Req = req
	var _result system.SystemServiceDeleteApiResult
	if err = p.c.Call(ctx, "DeleteApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ApiList(ctx context.Context, req *system.ApiListReq) (r *system.ApiListResp, err error) {
	var _args system.SystemServiceApiListArgs
	_args.Req = req
	var _result system.SystemServiceApiListResult
	if err = p.c.Call(ctx, "ApiList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ApiTree(ctx context.Context, req *system.ApiListReq) (r *system.TreeResp, err error) {
	var _args system.SystemServiceApiTreeArgs
	_args.Req = req
	var _result system.SystemServiceApiTreeResult
	if err = p.c.Call(ctx, "ApiTree", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateMenu(ctx context.Context, req *system.CreateMenuReq) (r *system.MenuResp, err error) {
	var _args system.SystemServiceCreateMenuArgs
	_args.Req = req
	var _result system.SystemServiceCreateMenuResult
	if err = p.c.Call(ctx, "CreateMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateMenu(ctx context.Context, req *system.UpdateMenuReq) (r *system.MenuResp, err error) {
	var _args system.SystemServiceUpdateMenuArgs
	_args.Req = req
	var _result system.SystemServiceUpdateMenuResult
	if err = p.c.Call(ctx, "UpdateMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteMenu(ctx context.Context, req *base.IdReq) (r *base.NilResponse, err error) {
	var _args system.SystemServiceDeleteMenuArgs
	_args.Req = req
	var _result system.SystemServiceDeleteMenuResult
	if err = p.c.Call(ctx, "DeleteMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMenu(ctx context.Context, req *base.IdReq) (r *system.MenuResp, err error) {
	var _args system.SystemServiceGetMenuArgs
	_args.Req = req
	var _result system.SystemServiceGetMenuResult
	if err = p.c.Call(ctx, "GetMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MenuList(ctx context.Context, req *system.MenuListReq) (r *system.MenuListResp, err error) {
	var _args system.SystemServiceMenuListArgs
	_args.Req = req
	var _result system.SystemServiceMenuListResult
	if err = p.c.Call(ctx, "MenuList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MenuTree(ctx context.Context, req *system.MenuListReq) (r *system.TreeResp, err error) {
	var _args system.SystemServiceMenuTreeArgs
	_args.Req = req
	var _result system.SystemServiceMenuTreeResult
	if err = p.c.Call(ctx, "MenuTree", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateRole(ctx context.Context, req *system.CreateRoleReq) (r *system.RoleResp, err error) {
	var _args system.SystemServiceCreateRoleArgs
	_args.Req = req
	var _result system.SystemServiceCreateRoleResult
	if err = p.c.Call(ctx, "CreateRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRole(ctx context.Context, req *base.IdReq) (r *system.RoleResp, err error) {
	var _args system.SystemServiceGetRoleArgs
	_args.Req = req
	var _result system.SystemServiceGetRoleResult
	if err = p.c.Call(ctx, "GetRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRoleList(ctx context.Context, req *system.GetRoleListReq) (r *system.RoleListResp, err error) {
	var _args system.SystemServiceGetRoleListArgs
	_args.Req = req
	var _result system.SystemServiceGetRoleListResult
	if err = p.c.Call(ctx, "GetRoleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateRole(ctx context.Context, req *system.UpdateRoleReq) (r *system.RoleResp, err error) {
	var _args system.SystemServiceUpdateRoleArgs
	_args.Req = req
	var _result system.SystemServiceUpdateRoleResult
	if err = p.c.Call(ctx, "UpdateRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteRole(ctx context.Context, req *base.IdReq) (r *base.NilResponse, err error) {
	var _args system.SystemServiceDeleteRoleArgs
	_args.Req = req
	var _result system.SystemServiceDeleteRoleResult
	if err = p.c.Call(ctx, "DeleteRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateRoleMenu(ctx context.Context, req *system.CreateMenuAuthReq) (r *base.NilResponse, err error) {
	var _args system.SystemServiceCreateRoleMenuArgs
	_args.Req = req
	var _result system.SystemServiceCreateRoleMenuResult
	if err = p.c.Call(ctx, "CreateRoleMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateRoleApi(ctx context.Context, req *system.CreateMenuAuthReq) (r *base.NilResponse, err error) {
	var _args system.SystemServiceCreateRoleApiArgs
	_args.Req = req
	var _result system.SystemServiceCreateRoleApiResult
	if err = p.c.Call(ctx, "CreateRoleApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRoleApi(ctx context.Context, req *base.IdReq) (r *system.ApiListResp, err error) {
	var _args system.SystemServiceGetRoleApiArgs
	_args.Req = req
	var _result system.SystemServiceGetRoleApiResult
	if err = p.c.Call(ctx, "GetRoleApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRoleMenu(ctx context.Context, req *base.IdReq) (r *system.MenuListResp, err error) {
	var _args system.SystemServiceGetRoleMenuArgs
	_args.Req = req
	var _result system.SystemServiceGetRoleMenuResult
	if err = p.c.Call(ctx, "GetRoleMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateDict(ctx context.Context, req *system.Dict) (r *system.DictResp, err error) {
	var _args system.SystemServiceCreateDictArgs
	_args.Req = req
	var _result system.SystemServiceCreateDictResult
	if err = p.c.Call(ctx, "CreateDict", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateDict(ctx context.Context, req *system.Dict) (r *system.DictResp, err error) {
	var _args system.SystemServiceUpdateDictArgs
	_args.Req = req
	var _result system.SystemServiceUpdateDictResult
	if err = p.c.Call(ctx, "UpdateDict", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteDict(ctx context.Context, req *base.IdReq) (r *base.NilResponse, err error) {
	var _args system.SystemServiceDeleteDictArgs
	_args.Req = req
	var _result system.SystemServiceDeleteDictResult
	if err = p.c.Call(ctx, "DeleteDict", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DictList(ctx context.Context, req *system.DictListReq) (r *system.DictListResp, err error) {
	var _args system.SystemServiceDictListArgs
	_args.Req = req
	var _result system.SystemServiceDictListResult
	if err = p.c.Call(ctx, "DictList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateDictht(ctx context.Context, req *system.Dictht) (r *system.DictResp, err error) {
	var _args system.SystemServiceCreateDicthtArgs
	_args.Req = req
	var _result system.SystemServiceCreateDicthtResult
	if err = p.c.Call(ctx, "CreateDictht", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateDictht(ctx context.Context, req *system.Dictht) (r *system.DictResp, err error) {
	var _args system.SystemServiceUpdateDicthtArgs
	_args.Req = req
	var _result system.SystemServiceUpdateDicthtResult
	if err = p.c.Call(ctx, "UpdateDictht", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteDictht(ctx context.Context, req *base.IdReq) (r *base.NilResponse, err error) {
	var _args system.SystemServiceDeleteDicthtArgs
	_args.Req = req
	var _result system.SystemServiceDeleteDicthtResult
	if err = p.c.Call(ctx, "DeleteDictht", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DicthtList(ctx context.Context, req *system.DicthtListReq) (r *system.DicthtListResp, err error) {
	var _args system.SystemServiceDicthtListArgs
	_args.Req = req
	var _result system.SystemServiceDicthtListResult
	if err = p.c.Call(ctx, "DicthtList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LogList(ctx context.Context, req *system.LogListReq) (r *system.LogListResp, err error) {
	var _args system.SystemServiceLogListArgs
	_args.Req = req
	var _result system.SystemServiceLogListResult
	if err = p.c.Call(ctx, "LogList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteLog(ctx context.Context, req *system.DeleteLogReq) (r *base.NilResponse, err error) {
	var _args system.SystemServiceDeleteLogArgs
	_args.Req = req
	var _result system.SystemServiceDeleteLogResult
	if err = p.c.Call(ctx, "DeleteLog", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VerifyRoleAuth(ctx context.Context, req *system.VerifyRoleAuthReq) (r *system.VerifyRoleAuthResp, err error) {
	var _args system.SystemServiceVerifyRoleAuthArgs
	_args.Req = req
	var _result system.SystemServiceVerifyRoleAuthResult
	if err = p.c.Call(ctx, "VerifyRoleAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
