// Code generated by Kitex v0.15.1. DO NOT EDIT.

package systemservice

import (
	"context"
	base "gen/kitex_gen/base"
	system "gen/kitex_gen/system"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateApi(ctx context.Context, req *system.CreateApiReq, callOptions ...callopt.Option) (r *system.ApiResp, err error)
	UpdateApi(ctx context.Context, req *system.UpdateApiReq, callOptions ...callopt.Option) (r *system.ApiResp, err error)
	DeleteApi(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *base.NilResponse, err error)
	ApiList(ctx context.Context, req *system.ApiListReq, callOptions ...callopt.Option) (r *system.ApiListResp, err error)
	ApiTree(ctx context.Context, req *system.ApiListReq, callOptions ...callopt.Option) (r *system.ApiListResp, err error)
	CreateMenu(ctx context.Context, req *system.CreateMenuReq, callOptions ...callopt.Option) (r *system.MenuResp, err error)
	UpdateMenu(ctx context.Context, req *system.UpdateMenuReq, callOptions ...callopt.Option) (r *system.MenuResp, err error)
	DeleteMenu(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *base.NilResponse, err error)
	GetMenu(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *system.MenuResp, err error)
	MenuList(ctx context.Context, req *system.MenuListReq, callOptions ...callopt.Option) (r *system.MenuListResp, err error)
	MenuTree(ctx context.Context, req *system.MenuListReq, callOptions ...callopt.Option) (r *system.MenuListResp, err error)
	CreateRole(ctx context.Context, req *system.CreateRoleReq, callOptions ...callopt.Option) (r *system.RoleResp, err error)
	GetRole(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *system.RoleResp, err error)
	GetRoleList(ctx context.Context, req *system.GetRoleListReq, callOptions ...callopt.Option) (r *system.RoleListResp, err error)
	UpdateRole(ctx context.Context, req *system.UpdateRoleReq, callOptions ...callopt.Option) (r *system.RoleResp, err error)
	DeleteRole(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *base.NilResponse, err error)
	CreateRoleMenu(ctx context.Context, req *system.CreateMenuAuthReq, callOptions ...callopt.Option) (r *base.NilResponse, err error)
	CreateRoleApi(ctx context.Context, req *system.CreateMenuAuthReq, callOptions ...callopt.Option) (r *base.NilResponse, err error)
	GetRoleApi(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *system.ApiListResp, err error)
	GetRoleMenu(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *system.MenuListResp, err error)
	CreateDict(ctx context.Context, req *system.Dict, callOptions ...callopt.Option) (r *system.DictResp, err error)
	UpdateDict(ctx context.Context, req *system.Dict, callOptions ...callopt.Option) (r *system.DictResp, err error)
	DeleteDict(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *base.NilResponse, err error)
	DictList(ctx context.Context, req *system.DictListReq, callOptions ...callopt.Option) (r *system.DictListResp, err error)
	CreateDictht(ctx context.Context, req *system.Dictht, callOptions ...callopt.Option) (r *system.DictResp, err error)
	UpdateDictht(ctx context.Context, req *system.Dictht, callOptions ...callopt.Option) (r *system.DictResp, err error)
	DeleteDictht(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *base.NilResponse, err error)
	DicthtList(ctx context.Context, req *system.DicthtListReq, callOptions ...callopt.Option) (r *system.DicthtListResp, err error)
	LogList(ctx context.Context, req *system.LogListReq, callOptions ...callopt.Option) (r *system.LogListResp, err error)
	DeleteLog(ctx context.Context, req *system.DeleteLogReq, callOptions ...callopt.Option) (r *base.NilResponse, err error)
	VerifyRoleAuth(ctx context.Context, req *system.VerifyRoleAuthReq, callOptions ...callopt.Option) (r *system.VerifyRoleAuthResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kSystemServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kSystemServiceClient struct {
	*kClient
}

func (p *kSystemServiceClient) CreateApi(ctx context.Context, req *system.CreateApiReq, callOptions ...callopt.Option) (r *system.ApiResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateApi(ctx, req)
}

func (p *kSystemServiceClient) UpdateApi(ctx context.Context, req *system.UpdateApiReq, callOptions ...callopt.Option) (r *system.ApiResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateApi(ctx, req)
}

func (p *kSystemServiceClient) DeleteApi(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *base.NilResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteApi(ctx, req)
}

func (p *kSystemServiceClient) ApiList(ctx context.Context, req *system.ApiListReq, callOptions ...callopt.Option) (r *system.ApiListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ApiList(ctx, req)
}

func (p *kSystemServiceClient) ApiTree(ctx context.Context, req *system.ApiListReq, callOptions ...callopt.Option) (r *system.ApiListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ApiTree(ctx, req)
}

func (p *kSystemServiceClient) CreateMenu(ctx context.Context, req *system.CreateMenuReq, callOptions ...callopt.Option) (r *system.MenuResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateMenu(ctx, req)
}

func (p *kSystemServiceClient) UpdateMenu(ctx context.Context, req *system.UpdateMenuReq, callOptions ...callopt.Option) (r *system.MenuResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateMenu(ctx, req)
}

func (p *kSystemServiceClient) DeleteMenu(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *base.NilResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteMenu(ctx, req)
}

func (p *kSystemServiceClient) GetMenu(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *system.MenuResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetMenu(ctx, req)
}

func (p *kSystemServiceClient) MenuList(ctx context.Context, req *system.MenuListReq, callOptions ...callopt.Option) (r *system.MenuListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MenuList(ctx, req)
}

func (p *kSystemServiceClient) MenuTree(ctx context.Context, req *system.MenuListReq, callOptions ...callopt.Option) (r *system.MenuListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MenuTree(ctx, req)
}

func (p *kSystemServiceClient) CreateRole(ctx context.Context, req *system.CreateRoleReq, callOptions ...callopt.Option) (r *system.RoleResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateRole(ctx, req)
}

func (p *kSystemServiceClient) GetRole(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *system.RoleResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRole(ctx, req)
}

func (p *kSystemServiceClient) GetRoleList(ctx context.Context, req *system.GetRoleListReq, callOptions ...callopt.Option) (r *system.RoleListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRoleList(ctx, req)
}

func (p *kSystemServiceClient) UpdateRole(ctx context.Context, req *system.UpdateRoleReq, callOptions ...callopt.Option) (r *system.RoleResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateRole(ctx, req)
}

func (p *kSystemServiceClient) DeleteRole(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *base.NilResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteRole(ctx, req)
}

func (p *kSystemServiceClient) CreateRoleMenu(ctx context.Context, req *system.CreateMenuAuthReq, callOptions ...callopt.Option) (r *base.NilResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateRoleMenu(ctx, req)
}

func (p *kSystemServiceClient) CreateRoleApi(ctx context.Context, req *system.CreateMenuAuthReq, callOptions ...callopt.Option) (r *base.NilResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateRoleApi(ctx, req)
}

func (p *kSystemServiceClient) GetRoleApi(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *system.ApiListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRoleApi(ctx, req)
}

func (p *kSystemServiceClient) GetRoleMenu(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *system.MenuListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRoleMenu(ctx, req)
}

func (p *kSystemServiceClient) CreateDict(ctx context.Context, req *system.Dict, callOptions ...callopt.Option) (r *system.DictResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateDict(ctx, req)
}

func (p *kSystemServiceClient) UpdateDict(ctx context.Context, req *system.Dict, callOptions ...callopt.Option) (r *system.DictResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateDict(ctx, req)
}

func (p *kSystemServiceClient) DeleteDict(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *base.NilResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteDict(ctx, req)
}

func (p *kSystemServiceClient) DictList(ctx context.Context, req *system.DictListReq, callOptions ...callopt.Option) (r *system.DictListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DictList(ctx, req)
}

func (p *kSystemServiceClient) CreateDictht(ctx context.Context, req *system.Dictht, callOptions ...callopt.Option) (r *system.DictResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateDictht(ctx, req)
}

func (p *kSystemServiceClient) UpdateDictht(ctx context.Context, req *system.Dictht, callOptions ...callopt.Option) (r *system.DictResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateDictht(ctx, req)
}

func (p *kSystemServiceClient) DeleteDictht(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *base.NilResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteDictht(ctx, req)
}

func (p *kSystemServiceClient) DicthtList(ctx context.Context, req *system.DicthtListReq, callOptions ...callopt.Option) (r *system.DicthtListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DicthtList(ctx, req)
}

func (p *kSystemServiceClient) LogList(ctx context.Context, req *system.LogListReq, callOptions ...callopt.Option) (r *system.LogListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LogList(ctx, req)
}

func (p *kSystemServiceClient) DeleteLog(ctx context.Context, req *system.DeleteLogReq, callOptions ...callopt.Option) (r *base.NilResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteLog(ctx, req)
}

func (p *kSystemServiceClient) VerifyRoleAuth(ctx context.Context, req *system.VerifyRoleAuthReq, callOptions ...callopt.Option) (r *system.VerifyRoleAuthResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VerifyRoleAuth(ctx, req)
}
