// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package system

import (
	"context"
	"fmt"
	"gen/kitex_gen/base"
)

type Api struct {
	Id          int64  `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	CreatedAt   string `thrift:"createdAt,2,optional" frugal:"2,optional,string" json:"createdAt,omitempty"`
	UpdatedAt   string `thrift:"updatedAt,3,optional" frugal:"3,optional,string" json:"updatedAt,omitempty"`
	Path        string `thrift:"path,4,optional" frugal:"4,optional,string" json:"path,omitempty"`
	Description string `thrift:"description,5,optional" frugal:"5,optional,string" json:"description,omitempty"`
	Group       string `thrift:"group,6,optional" frugal:"6,optional,string" json:"group,omitempty"`
	Method      string `thrift:"method,7,optional" frugal:"7,optional,string" json:"method,omitempty"`
	Title       string `thrift:"title,8,optional" frugal:"8,optional,string" json:"title,omitempty"`
}

func NewApi() *Api {
	return &Api{
		Id:          0,
		CreatedAt:   "",
		UpdatedAt:   "",
		Path:        "",
		Description: "",
		Group:       "",
		Method:      "",
		Title:       "",
	}
}

func (p *Api) InitDefault() {
	p.Id = 0
	p.CreatedAt = ""
	p.UpdatedAt = ""
	p.Path = ""
	p.Description = ""
	p.Group = ""
	p.Method = ""
	p.Title = ""
}

var Api_Id_DEFAULT int64 = 0

func (p *Api) GetId() (v int64) {
	if !p.IsSetId() {
		return Api_Id_DEFAULT
	}
	return p.Id
}

var Api_CreatedAt_DEFAULT string = ""

func (p *Api) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return Api_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var Api_UpdatedAt_DEFAULT string = ""

func (p *Api) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return Api_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var Api_Path_DEFAULT string = ""

func (p *Api) GetPath() (v string) {
	if !p.IsSetPath() {
		return Api_Path_DEFAULT
	}
	return p.Path
}

var Api_Description_DEFAULT string = ""

func (p *Api) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return Api_Description_DEFAULT
	}
	return p.Description
}

var Api_Group_DEFAULT string = ""

func (p *Api) GetGroup() (v string) {
	if !p.IsSetGroup() {
		return Api_Group_DEFAULT
	}
	return p.Group
}

var Api_Method_DEFAULT string = ""

func (p *Api) GetMethod() (v string) {
	if !p.IsSetMethod() {
		return Api_Method_DEFAULT
	}
	return p.Method
}

var Api_Title_DEFAULT string = ""

func (p *Api) GetTitle() (v string) {
	if !p.IsSetTitle() {
		return Api_Title_DEFAULT
	}
	return p.Title
}
func (p *Api) SetId(val int64) {
	p.Id = val
}
func (p *Api) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *Api) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *Api) SetPath(val string) {
	p.Path = val
}
func (p *Api) SetDescription(val string) {
	p.Description = val
}
func (p *Api) SetGroup(val string) {
	p.Group = val
}
func (p *Api) SetMethod(val string) {
	p.Method = val
}
func (p *Api) SetTitle(val string) {
	p.Title = val
}

func (p *Api) IsSetId() bool {
	return p.Id != Api_Id_DEFAULT
}

func (p *Api) IsSetCreatedAt() bool {
	return p.CreatedAt != Api_CreatedAt_DEFAULT
}

func (p *Api) IsSetUpdatedAt() bool {
	return p.UpdatedAt != Api_UpdatedAt_DEFAULT
}

func (p *Api) IsSetPath() bool {
	return p.Path != Api_Path_DEFAULT
}

func (p *Api) IsSetDescription() bool {
	return p.Description != Api_Description_DEFAULT
}

func (p *Api) IsSetGroup() bool {
	return p.Group != Api_Group_DEFAULT
}

func (p *Api) IsSetMethod() bool {
	return p.Method != Api_Method_DEFAULT
}

func (p *Api) IsSetTitle() bool {
	return p.Title != Api_Title_DEFAULT
}

func (p *Api) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Api(%+v)", *p)
}

var fieldIDToName_Api = map[int16]string{
	1: "id",
	2: "createdAt",
	3: "updatedAt",
	4: "path",
	5: "description",
	6: "group",
	7: "method",
	8: "title",
}

type ApiResp struct {
	Data     *Api           `thrift:"data,1,optional" frugal:"1,optional,Api" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewApiResp() *ApiResp {
	return &ApiResp{
		Data:     &Api{},
		BaseResp: &base.BaseResp{},
	}
}

func (p *ApiResp) InitDefault() {
	p.Data = &Api{}
	p.BaseResp = &base.BaseResp{}
}

var ApiResp_Data_DEFAULT *Api = &Api{}

func (p *ApiResp) GetData() (v *Api) {
	if !p.IsSetData() {
		return ApiResp_Data_DEFAULT
	}
	return p.Data
}

var ApiResp_BaseResp_DEFAULT *base.BaseResp = &base.BaseResp{}

func (p *ApiResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return ApiResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ApiResp) SetData(val *Api) {
	p.Data = val
}
func (p *ApiResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *ApiResp) IsSetData() bool {
	return p.Data != nil
}

func (p *ApiResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ApiResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiResp(%+v)", *p)
}

var fieldIDToName_ApiResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type ApiListResp struct {
	Data     []*Api         `thrift:"data,1,optional" frugal:"1,optional,list<Api>" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewApiListResp() *ApiListResp {
	return &ApiListResp{
		Data:     []*Api{},
		BaseResp: &base.BaseResp{},
	}
}

func (p *ApiListResp) InitDefault() {
	p.Data = []*Api{}
	p.BaseResp = &base.BaseResp{}
}

var ApiListResp_Data_DEFAULT []*Api = []*Api{}

func (p *ApiListResp) GetData() (v []*Api) {
	if !p.IsSetData() {
		return ApiListResp_Data_DEFAULT
	}
	return p.Data
}

var ApiListResp_BaseResp_DEFAULT *base.BaseResp = &base.BaseResp{}

func (p *ApiListResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return ApiListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ApiListResp) SetData(val []*Api) {
	p.Data = val
}
func (p *ApiListResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *ApiListResp) IsSetData() bool {
	return p.Data != nil
}

func (p *ApiListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ApiListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiListResp(%+v)", *p)
}

var fieldIDToName_ApiListResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type ApiListReq struct {
	Path        string `thrift:"path,3,optional" frugal:"3,optional,string" json:"path,omitempty"`
	Description string `thrift:"description,4,optional" frugal:"4,optional,string" json:"description,omitempty"`
	Method      string `thrift:"method,5,optional" frugal:"5,optional,string" json:"method,omitempty"`
	Group       string `thrift:"group,6,optional" frugal:"6,optional,string" json:"group,omitempty"`
	Page        int64  `thrift:"page,251,optional" frugal:"251,optional,i64" json:"page,omitempty"`
	PageSize    int64  `thrift:"pageSize,252,optional" frugal:"252,optional,i64" json:"pageSize,omitempty"`
	Keyword     string `thrift:"keyword,253,optional" frugal:"253,optional,string" json:"keyword,omitempty"`
}

func NewApiListReq() *ApiListReq {
	return &ApiListReq{
		Path:        "",
		Description: "",
		Method:      "",
		Group:       "",
		Page:        1,
		PageSize:    10,
		Keyword:     "",
	}
}

func (p *ApiListReq) InitDefault() {
	p.Path = ""
	p.Description = ""
	p.Method = ""
	p.Group = ""
	p.Page = 1
	p.PageSize = 10
	p.Keyword = ""
}

var ApiListReq_Path_DEFAULT string = ""

func (p *ApiListReq) GetPath() (v string) {
	if !p.IsSetPath() {
		return ApiListReq_Path_DEFAULT
	}
	return p.Path
}

var ApiListReq_Description_DEFAULT string = ""

func (p *ApiListReq) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return ApiListReq_Description_DEFAULT
	}
	return p.Description
}

var ApiListReq_Method_DEFAULT string = ""

func (p *ApiListReq) GetMethod() (v string) {
	if !p.IsSetMethod() {
		return ApiListReq_Method_DEFAULT
	}
	return p.Method
}

var ApiListReq_Group_DEFAULT string = ""

func (p *ApiListReq) GetGroup() (v string) {
	if !p.IsSetGroup() {
		return ApiListReq_Group_DEFAULT
	}
	return p.Group
}

var ApiListReq_Page_DEFAULT int64 = 1

func (p *ApiListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return ApiListReq_Page_DEFAULT
	}
	return p.Page
}

var ApiListReq_PageSize_DEFAULT int64 = 10

func (p *ApiListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return ApiListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var ApiListReq_Keyword_DEFAULT string = ""

func (p *ApiListReq) GetKeyword() (v string) {
	if !p.IsSetKeyword() {
		return ApiListReq_Keyword_DEFAULT
	}
	return p.Keyword
}
func (p *ApiListReq) SetPath(val string) {
	p.Path = val
}
func (p *ApiListReq) SetDescription(val string) {
	p.Description = val
}
func (p *ApiListReq) SetMethod(val string) {
	p.Method = val
}
func (p *ApiListReq) SetGroup(val string) {
	p.Group = val
}
func (p *ApiListReq) SetPage(val int64) {
	p.Page = val
}
func (p *ApiListReq) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *ApiListReq) SetKeyword(val string) {
	p.Keyword = val
}

func (p *ApiListReq) IsSetPath() bool {
	return p.Path != ApiListReq_Path_DEFAULT
}

func (p *ApiListReq) IsSetDescription() bool {
	return p.Description != ApiListReq_Description_DEFAULT
}

func (p *ApiListReq) IsSetMethod() bool {
	return p.Method != ApiListReq_Method_DEFAULT
}

func (p *ApiListReq) IsSetGroup() bool {
	return p.Group != ApiListReq_Group_DEFAULT
}

func (p *ApiListReq) IsSetPage() bool {
	return p.Page != ApiListReq_Page_DEFAULT
}

func (p *ApiListReq) IsSetPageSize() bool {
	return p.PageSize != ApiListReq_PageSize_DEFAULT
}

func (p *ApiListReq) IsSetKeyword() bool {
	return p.Keyword != ApiListReq_Keyword_DEFAULT
}

func (p *ApiListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiListReq(%+v)", *p)
}

var fieldIDToName_ApiListReq = map[int16]string{
	3:   "path",
	4:   "description",
	5:   "method",
	6:   "group",
	251: "page",
	252: "pageSize",
	253: "keyword",
}

type CreateApiReq struct {
	Path        string `thrift:"path,4,optional" frugal:"4,optional,string" json:"path,omitempty"`
	Description string `thrift:"description,5,optional" frugal:"5,optional,string" json:"description,omitempty"`
	Group       string `thrift:"group,6,optional" frugal:"6,optional,string" json:"group,omitempty"`
	Method      string `thrift:"method,7,optional" frugal:"7,optional,string" json:"method,omitempty"`
	Title       string `thrift:"title,8,optional" frugal:"8,optional,string" json:"title,omitempty"`
}

func NewCreateApiReq() *CreateApiReq {
	return &CreateApiReq{
		Path:        "",
		Description: "",
		Group:       "",
		Method:      "",
		Title:       "",
	}
}

func (p *CreateApiReq) InitDefault() {
	p.Path = ""
	p.Description = ""
	p.Group = ""
	p.Method = ""
	p.Title = ""
}

var CreateApiReq_Path_DEFAULT string = ""

func (p *CreateApiReq) GetPath() (v string) {
	if !p.IsSetPath() {
		return CreateApiReq_Path_DEFAULT
	}
	return p.Path
}

var CreateApiReq_Description_DEFAULT string = ""

func (p *CreateApiReq) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return CreateApiReq_Description_DEFAULT
	}
	return p.Description
}

var CreateApiReq_Group_DEFAULT string = ""

func (p *CreateApiReq) GetGroup() (v string) {
	if !p.IsSetGroup() {
		return CreateApiReq_Group_DEFAULT
	}
	return p.Group
}

var CreateApiReq_Method_DEFAULT string = ""

func (p *CreateApiReq) GetMethod() (v string) {
	if !p.IsSetMethod() {
		return CreateApiReq_Method_DEFAULT
	}
	return p.Method
}

var CreateApiReq_Title_DEFAULT string = ""

func (p *CreateApiReq) GetTitle() (v string) {
	if !p.IsSetTitle() {
		return CreateApiReq_Title_DEFAULT
	}
	return p.Title
}
func (p *CreateApiReq) SetPath(val string) {
	p.Path = val
}
func (p *CreateApiReq) SetDescription(val string) {
	p.Description = val
}
func (p *CreateApiReq) SetGroup(val string) {
	p.Group = val
}
func (p *CreateApiReq) SetMethod(val string) {
	p.Method = val
}
func (p *CreateApiReq) SetTitle(val string) {
	p.Title = val
}

func (p *CreateApiReq) IsSetPath() bool {
	return p.Path != CreateApiReq_Path_DEFAULT
}

func (p *CreateApiReq) IsSetDescription() bool {
	return p.Description != CreateApiReq_Description_DEFAULT
}

func (p *CreateApiReq) IsSetGroup() bool {
	return p.Group != CreateApiReq_Group_DEFAULT
}

func (p *CreateApiReq) IsSetMethod() bool {
	return p.Method != CreateApiReq_Method_DEFAULT
}

func (p *CreateApiReq) IsSetTitle() bool {
	return p.Title != CreateApiReq_Title_DEFAULT
}

func (p *CreateApiReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateApiReq(%+v)", *p)
}

var fieldIDToName_CreateApiReq = map[int16]string{
	4: "path",
	5: "description",
	6: "group",
	7: "method",
	8: "title",
}

type UpdateApiReq struct {
	Id          int64  `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Path        string `thrift:"path,4,optional" frugal:"4,optional,string" json:"path,omitempty"`
	Description string `thrift:"description,5,optional" frugal:"5,optional,string" json:"description,omitempty"`
	Group       string `thrift:"group,6,optional" frugal:"6,optional,string" json:"group,omitempty"`
	Method      string `thrift:"method,7,optional" frugal:"7,optional,string" json:"method,omitempty"`
	Title       string `thrift:"title,8,optional" frugal:"8,optional,string" json:"title,omitempty"`
}

func NewUpdateApiReq() *UpdateApiReq {
	return &UpdateApiReq{
		Id:          0,
		Path:        "",
		Description: "",
		Group:       "",
		Method:      "",
		Title:       "",
	}
}

func (p *UpdateApiReq) InitDefault() {
	p.Id = 0
	p.Path = ""
	p.Description = ""
	p.Group = ""
	p.Method = ""
	p.Title = ""
}

var UpdateApiReq_Id_DEFAULT int64 = 0

func (p *UpdateApiReq) GetId() (v int64) {
	if !p.IsSetId() {
		return UpdateApiReq_Id_DEFAULT
	}
	return p.Id
}

var UpdateApiReq_Path_DEFAULT string = ""

func (p *UpdateApiReq) GetPath() (v string) {
	if !p.IsSetPath() {
		return UpdateApiReq_Path_DEFAULT
	}
	return p.Path
}

var UpdateApiReq_Description_DEFAULT string = ""

func (p *UpdateApiReq) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return UpdateApiReq_Description_DEFAULT
	}
	return p.Description
}

var UpdateApiReq_Group_DEFAULT string = ""

func (p *UpdateApiReq) GetGroup() (v string) {
	if !p.IsSetGroup() {
		return UpdateApiReq_Group_DEFAULT
	}
	return p.Group
}

var UpdateApiReq_Method_DEFAULT string = ""

func (p *UpdateApiReq) GetMethod() (v string) {
	if !p.IsSetMethod() {
		return UpdateApiReq_Method_DEFAULT
	}
	return p.Method
}

var UpdateApiReq_Title_DEFAULT string = ""

func (p *UpdateApiReq) GetTitle() (v string) {
	if !p.IsSetTitle() {
		return UpdateApiReq_Title_DEFAULT
	}
	return p.Title
}
func (p *UpdateApiReq) SetId(val int64) {
	p.Id = val
}
func (p *UpdateApiReq) SetPath(val string) {
	p.Path = val
}
func (p *UpdateApiReq) SetDescription(val string) {
	p.Description = val
}
func (p *UpdateApiReq) SetGroup(val string) {
	p.Group = val
}
func (p *UpdateApiReq) SetMethod(val string) {
	p.Method = val
}
func (p *UpdateApiReq) SetTitle(val string) {
	p.Title = val
}

func (p *UpdateApiReq) IsSetId() bool {
	return p.Id != UpdateApiReq_Id_DEFAULT
}

func (p *UpdateApiReq) IsSetPath() bool {
	return p.Path != UpdateApiReq_Path_DEFAULT
}

func (p *UpdateApiReq) IsSetDescription() bool {
	return p.Description != UpdateApiReq_Description_DEFAULT
}

func (p *UpdateApiReq) IsSetGroup() bool {
	return p.Group != UpdateApiReq_Group_DEFAULT
}

func (p *UpdateApiReq) IsSetMethod() bool {
	return p.Method != UpdateApiReq_Method_DEFAULT
}

func (p *UpdateApiReq) IsSetTitle() bool {
	return p.Title != UpdateApiReq_Title_DEFAULT
}

func (p *UpdateApiReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateApiReq(%+v)", *p)
}

var fieldIDToName_UpdateApiReq = map[int16]string{
	1: "id",
	4: "path",
	5: "description",
	6: "group",
	7: "method",
	8: "title",
}

type CreateMenuReq struct {
	Name      string `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	ParentId  int64  `thrift:"parentId,3,optional" frugal:"3,optional,i64" json:"parentId,omitempty"`
	Level     int64  `thrift:"level,4,optional" frugal:"4,optional,i64" json:"level,omitempty"`
	Path      string `thrift:"path,5,optional" frugal:"5,optional,string" json:"path,omitempty"`
	Redirect  string `thrift:"redirect,6,optional" frugal:"6,optional,string" json:"redirect,omitempty"`
	Component string `thrift:"component,7,optional" frugal:"7,optional,string" json:"component,omitempty"`
	MenuType  int64  `thrift:"menuType,8,optional" frugal:"8,optional,i64" json:"menuType,omitempty"`
	Hidden    int64  `thrift:"hidden,9,optional" frugal:"9,optional,i64" json:"hidden,omitempty"`
	Sort      int64  `thrift:"sort,10,optional" frugal:"10,optional,i64" json:"sort,omitempty"`
	Status    int64  `thrift:"status,12,optional" frugal:"12,optional,i64" json:"status,omitempty"`
	Url       string `thrift:"url,13,optional" frugal:"13,optional,string" json:"url,omitempty"`
	CreatedAt string `thrift:"createdAt,15,optional" frugal:"15,optional,string" json:"createdAt,omitempty"`
	UpdatedAt string `thrift:"updatedAt,16,optional" frugal:"16,optional,string" json:"updatedAt,omitempty"`
	Title     string `thrift:"title,17,optional" frugal:"17,optional,string" json:"title,omitempty"`
	Type      string `thrift:"type,19,optional" frugal:"19,optional,string" json:"type,omitempty"`
}

func NewCreateMenuReq() *CreateMenuReq {
	return &CreateMenuReq{
		Name:      "",
		ParentId:  0,
		Level:     0,
		Path:      "",
		Redirect:  "",
		Component: "",
		MenuType:  0,
		Hidden:    0,
		Sort:      0,
		Status:    1,
		Url:       "",
		CreatedAt: "",
		UpdatedAt: "",
		Title:     "",
		Type:      "",
	}
}

func (p *CreateMenuReq) InitDefault() {
	p.Name = ""
	p.ParentId = 0
	p.Level = 0
	p.Path = ""
	p.Redirect = ""
	p.Component = ""
	p.MenuType = 0
	p.Hidden = 0
	p.Sort = 0
	p.Status = 1
	p.Url = ""
	p.CreatedAt = ""
	p.UpdatedAt = ""
	p.Title = ""
	p.Type = ""
}

var CreateMenuReq_Name_DEFAULT string = ""

func (p *CreateMenuReq) GetName() (v string) {
	if !p.IsSetName() {
		return CreateMenuReq_Name_DEFAULT
	}
	return p.Name
}

var CreateMenuReq_ParentId_DEFAULT int64 = 0

func (p *CreateMenuReq) GetParentId() (v int64) {
	if !p.IsSetParentId() {
		return CreateMenuReq_ParentId_DEFAULT
	}
	return p.ParentId
}

var CreateMenuReq_Level_DEFAULT int64 = 0

func (p *CreateMenuReq) GetLevel() (v int64) {
	if !p.IsSetLevel() {
		return CreateMenuReq_Level_DEFAULT
	}
	return p.Level
}

var CreateMenuReq_Path_DEFAULT string = ""

func (p *CreateMenuReq) GetPath() (v string) {
	if !p.IsSetPath() {
		return CreateMenuReq_Path_DEFAULT
	}
	return p.Path
}

var CreateMenuReq_Redirect_DEFAULT string = ""

func (p *CreateMenuReq) GetRedirect() (v string) {
	if !p.IsSetRedirect() {
		return CreateMenuReq_Redirect_DEFAULT
	}
	return p.Redirect
}

var CreateMenuReq_Component_DEFAULT string = ""

func (p *CreateMenuReq) GetComponent() (v string) {
	if !p.IsSetComponent() {
		return CreateMenuReq_Component_DEFAULT
	}
	return p.Component
}

var CreateMenuReq_MenuType_DEFAULT int64 = 0

func (p *CreateMenuReq) GetMenuType() (v int64) {
	if !p.IsSetMenuType() {
		return CreateMenuReq_MenuType_DEFAULT
	}
	return p.MenuType
}

var CreateMenuReq_Hidden_DEFAULT int64 = 0

func (p *CreateMenuReq) GetHidden() (v int64) {
	if !p.IsSetHidden() {
		return CreateMenuReq_Hidden_DEFAULT
	}
	return p.Hidden
}

var CreateMenuReq_Sort_DEFAULT int64 = 0

func (p *CreateMenuReq) GetSort() (v int64) {
	if !p.IsSetSort() {
		return CreateMenuReq_Sort_DEFAULT
	}
	return p.Sort
}

var CreateMenuReq_Status_DEFAULT int64 = 1

func (p *CreateMenuReq) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return CreateMenuReq_Status_DEFAULT
	}
	return p.Status
}

var CreateMenuReq_Url_DEFAULT string = ""

func (p *CreateMenuReq) GetUrl() (v string) {
	if !p.IsSetUrl() {
		return CreateMenuReq_Url_DEFAULT
	}
	return p.Url
}

var CreateMenuReq_CreatedAt_DEFAULT string = ""

func (p *CreateMenuReq) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return CreateMenuReq_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var CreateMenuReq_UpdatedAt_DEFAULT string = ""

func (p *CreateMenuReq) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return CreateMenuReq_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var CreateMenuReq_Title_DEFAULT string = ""

func (p *CreateMenuReq) GetTitle() (v string) {
	if !p.IsSetTitle() {
		return CreateMenuReq_Title_DEFAULT
	}
	return p.Title
}

var CreateMenuReq_Type_DEFAULT string = ""

func (p *CreateMenuReq) GetType() (v string) {
	if !p.IsSetType() {
		return CreateMenuReq_Type_DEFAULT
	}
	return p.Type
}
func (p *CreateMenuReq) SetName(val string) {
	p.Name = val
}
func (p *CreateMenuReq) SetParentId(val int64) {
	p.ParentId = val
}
func (p *CreateMenuReq) SetLevel(val int64) {
	p.Level = val
}
func (p *CreateMenuReq) SetPath(val string) {
	p.Path = val
}
func (p *CreateMenuReq) SetRedirect(val string) {
	p.Redirect = val
}
func (p *CreateMenuReq) SetComponent(val string) {
	p.Component = val
}
func (p *CreateMenuReq) SetMenuType(val int64) {
	p.MenuType = val
}
func (p *CreateMenuReq) SetHidden(val int64) {
	p.Hidden = val
}
func (p *CreateMenuReq) SetSort(val int64) {
	p.Sort = val
}
func (p *CreateMenuReq) SetStatus(val int64) {
	p.Status = val
}
func (p *CreateMenuReq) SetUrl(val string) {
	p.Url = val
}
func (p *CreateMenuReq) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *CreateMenuReq) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *CreateMenuReq) SetTitle(val string) {
	p.Title = val
}
func (p *CreateMenuReq) SetType(val string) {
	p.Type = val
}

func (p *CreateMenuReq) IsSetName() bool {
	return p.Name != CreateMenuReq_Name_DEFAULT
}

func (p *CreateMenuReq) IsSetParentId() bool {
	return p.ParentId != CreateMenuReq_ParentId_DEFAULT
}

func (p *CreateMenuReq) IsSetLevel() bool {
	return p.Level != CreateMenuReq_Level_DEFAULT
}

func (p *CreateMenuReq) IsSetPath() bool {
	return p.Path != CreateMenuReq_Path_DEFAULT
}

func (p *CreateMenuReq) IsSetRedirect() bool {
	return p.Redirect != CreateMenuReq_Redirect_DEFAULT
}

func (p *CreateMenuReq) IsSetComponent() bool {
	return p.Component != CreateMenuReq_Component_DEFAULT
}

func (p *CreateMenuReq) IsSetMenuType() bool {
	return p.MenuType != CreateMenuReq_MenuType_DEFAULT
}

func (p *CreateMenuReq) IsSetHidden() bool {
	return p.Hidden != CreateMenuReq_Hidden_DEFAULT
}

func (p *CreateMenuReq) IsSetSort() bool {
	return p.Sort != CreateMenuReq_Sort_DEFAULT
}

func (p *CreateMenuReq) IsSetStatus() bool {
	return p.Status != CreateMenuReq_Status_DEFAULT
}

func (p *CreateMenuReq) IsSetUrl() bool {
	return p.Url != CreateMenuReq_Url_DEFAULT
}

func (p *CreateMenuReq) IsSetCreatedAt() bool {
	return p.CreatedAt != CreateMenuReq_CreatedAt_DEFAULT
}

func (p *CreateMenuReq) IsSetUpdatedAt() bool {
	return p.UpdatedAt != CreateMenuReq_UpdatedAt_DEFAULT
}

func (p *CreateMenuReq) IsSetTitle() bool {
	return p.Title != CreateMenuReq_Title_DEFAULT
}

func (p *CreateMenuReq) IsSetType() bool {
	return p.Type != CreateMenuReq_Type_DEFAULT
}

func (p *CreateMenuReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateMenuReq(%+v)", *p)
}

var fieldIDToName_CreateMenuReq = map[int16]string{
	2:  "name",
	3:  "parentId",
	4:  "level",
	5:  "path",
	6:  "redirect",
	7:  "component",
	8:  "menuType",
	9:  "hidden",
	10: "sort",
	12: "status",
	13: "url",
	15: "createdAt",
	16: "updatedAt",
	17: "title",
	19: "type",
}

type UpdateMenuReq struct {
	Id        int64  `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name      string `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	ParentId  int64  `thrift:"parentId,3,optional" frugal:"3,optional,i64" json:"parentId,omitempty"`
	Level     int64  `thrift:"level,4,optional" frugal:"4,optional,i64" json:"level,omitempty"`
	Path      string `thrift:"path,5,optional" frugal:"5,optional,string" json:"path,omitempty"`
	Redirect  string `thrift:"redirect,6,optional" frugal:"6,optional,string" json:"redirect,omitempty"`
	Component string `thrift:"component,7,optional" frugal:"7,optional,string" json:"component,omitempty"`
	MenuType  int64  `thrift:"menuType,8,optional" frugal:"8,optional,i64" json:"menuType,omitempty"`
	Hidden    int64  `thrift:"hidden,9,optional" frugal:"9,optional,i64" json:"hidden,omitempty"`
	Sort      int64  `thrift:"sort,10,optional" frugal:"10,optional,i64" json:"sort,omitempty"`
	Status    int64  `thrift:"status,12,optional" frugal:"12,optional,i64" json:"status,omitempty"`
	Url       string `thrift:"url,13,optional" frugal:"13,optional,string" json:"url,omitempty"`
	CreatedAt string `thrift:"createdAt,15,optional" frugal:"15,optional,string" json:"createdAt,omitempty"`
	UpdatedAt string `thrift:"updatedAt,16,optional" frugal:"16,optional,string" json:"updatedAt,omitempty"`
	Title     string `thrift:"title,17,optional" frugal:"17,optional,string" json:"title,omitempty"`
	Type      string `thrift:"type,19,optional" frugal:"19,optional,string" json:"type,omitempty"`
}

func NewUpdateMenuReq() *UpdateMenuReq {
	return &UpdateMenuReq{
		Id:        0,
		Name:      "",
		ParentId:  0,
		Level:     0,
		Path:      "",
		Redirect:  "",
		Component: "",
		MenuType:  0,
		Hidden:    0,
		Sort:      0,
		Status:    1,
		Url:       "",
		CreatedAt: "",
		UpdatedAt: "",
		Title:     "",
		Type:      "",
	}
}

func (p *UpdateMenuReq) InitDefault() {
	p.Id = 0
	p.Name = ""
	p.ParentId = 0
	p.Level = 0
	p.Path = ""
	p.Redirect = ""
	p.Component = ""
	p.MenuType = 0
	p.Hidden = 0
	p.Sort = 0
	p.Status = 1
	p.Url = ""
	p.CreatedAt = ""
	p.UpdatedAt = ""
	p.Title = ""
	p.Type = ""
}

var UpdateMenuReq_Id_DEFAULT int64 = 0

func (p *UpdateMenuReq) GetId() (v int64) {
	if !p.IsSetId() {
		return UpdateMenuReq_Id_DEFAULT
	}
	return p.Id
}

var UpdateMenuReq_Name_DEFAULT string = ""

func (p *UpdateMenuReq) GetName() (v string) {
	if !p.IsSetName() {
		return UpdateMenuReq_Name_DEFAULT
	}
	return p.Name
}

var UpdateMenuReq_ParentId_DEFAULT int64 = 0

func (p *UpdateMenuReq) GetParentId() (v int64) {
	if !p.IsSetParentId() {
		return UpdateMenuReq_ParentId_DEFAULT
	}
	return p.ParentId
}

var UpdateMenuReq_Level_DEFAULT int64 = 0

func (p *UpdateMenuReq) GetLevel() (v int64) {
	if !p.IsSetLevel() {
		return UpdateMenuReq_Level_DEFAULT
	}
	return p.Level
}

var UpdateMenuReq_Path_DEFAULT string = ""

func (p *UpdateMenuReq) GetPath() (v string) {
	if !p.IsSetPath() {
		return UpdateMenuReq_Path_DEFAULT
	}
	return p.Path
}

var UpdateMenuReq_Redirect_DEFAULT string = ""

func (p *UpdateMenuReq) GetRedirect() (v string) {
	if !p.IsSetRedirect() {
		return UpdateMenuReq_Redirect_DEFAULT
	}
	return p.Redirect
}

var UpdateMenuReq_Component_DEFAULT string = ""

func (p *UpdateMenuReq) GetComponent() (v string) {
	if !p.IsSetComponent() {
		return UpdateMenuReq_Component_DEFAULT
	}
	return p.Component
}

var UpdateMenuReq_MenuType_DEFAULT int64 = 0

func (p *UpdateMenuReq) GetMenuType() (v int64) {
	if !p.IsSetMenuType() {
		return UpdateMenuReq_MenuType_DEFAULT
	}
	return p.MenuType
}

var UpdateMenuReq_Hidden_DEFAULT int64 = 0

func (p *UpdateMenuReq) GetHidden() (v int64) {
	if !p.IsSetHidden() {
		return UpdateMenuReq_Hidden_DEFAULT
	}
	return p.Hidden
}

var UpdateMenuReq_Sort_DEFAULT int64 = 0

func (p *UpdateMenuReq) GetSort() (v int64) {
	if !p.IsSetSort() {
		return UpdateMenuReq_Sort_DEFAULT
	}
	return p.Sort
}

var UpdateMenuReq_Status_DEFAULT int64 = 1

func (p *UpdateMenuReq) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return UpdateMenuReq_Status_DEFAULT
	}
	return p.Status
}

var UpdateMenuReq_Url_DEFAULT string = ""

func (p *UpdateMenuReq) GetUrl() (v string) {
	if !p.IsSetUrl() {
		return UpdateMenuReq_Url_DEFAULT
	}
	return p.Url
}

var UpdateMenuReq_CreatedAt_DEFAULT string = ""

func (p *UpdateMenuReq) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return UpdateMenuReq_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var UpdateMenuReq_UpdatedAt_DEFAULT string = ""

func (p *UpdateMenuReq) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return UpdateMenuReq_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var UpdateMenuReq_Title_DEFAULT string = ""

func (p *UpdateMenuReq) GetTitle() (v string) {
	if !p.IsSetTitle() {
		return UpdateMenuReq_Title_DEFAULT
	}
	return p.Title
}

var UpdateMenuReq_Type_DEFAULT string = ""

func (p *UpdateMenuReq) GetType() (v string) {
	if !p.IsSetType() {
		return UpdateMenuReq_Type_DEFAULT
	}
	return p.Type
}
func (p *UpdateMenuReq) SetId(val int64) {
	p.Id = val
}
func (p *UpdateMenuReq) SetName(val string) {
	p.Name = val
}
func (p *UpdateMenuReq) SetParentId(val int64) {
	p.ParentId = val
}
func (p *UpdateMenuReq) SetLevel(val int64) {
	p.Level = val
}
func (p *UpdateMenuReq) SetPath(val string) {
	p.Path = val
}
func (p *UpdateMenuReq) SetRedirect(val string) {
	p.Redirect = val
}
func (p *UpdateMenuReq) SetComponent(val string) {
	p.Component = val
}
func (p *UpdateMenuReq) SetMenuType(val int64) {
	p.MenuType = val
}
func (p *UpdateMenuReq) SetHidden(val int64) {
	p.Hidden = val
}
func (p *UpdateMenuReq) SetSort(val int64) {
	p.Sort = val
}
func (p *UpdateMenuReq) SetStatus(val int64) {
	p.Status = val
}
func (p *UpdateMenuReq) SetUrl(val string) {
	p.Url = val
}
func (p *UpdateMenuReq) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *UpdateMenuReq) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *UpdateMenuReq) SetTitle(val string) {
	p.Title = val
}
func (p *UpdateMenuReq) SetType(val string) {
	p.Type = val
}

func (p *UpdateMenuReq) IsSetId() bool {
	return p.Id != UpdateMenuReq_Id_DEFAULT
}

func (p *UpdateMenuReq) IsSetName() bool {
	return p.Name != UpdateMenuReq_Name_DEFAULT
}

func (p *UpdateMenuReq) IsSetParentId() bool {
	return p.ParentId != UpdateMenuReq_ParentId_DEFAULT
}

func (p *UpdateMenuReq) IsSetLevel() bool {
	return p.Level != UpdateMenuReq_Level_DEFAULT
}

func (p *UpdateMenuReq) IsSetPath() bool {
	return p.Path != UpdateMenuReq_Path_DEFAULT
}

func (p *UpdateMenuReq) IsSetRedirect() bool {
	return p.Redirect != UpdateMenuReq_Redirect_DEFAULT
}

func (p *UpdateMenuReq) IsSetComponent() bool {
	return p.Component != UpdateMenuReq_Component_DEFAULT
}

func (p *UpdateMenuReq) IsSetMenuType() bool {
	return p.MenuType != UpdateMenuReq_MenuType_DEFAULT
}

func (p *UpdateMenuReq) IsSetHidden() bool {
	return p.Hidden != UpdateMenuReq_Hidden_DEFAULT
}

func (p *UpdateMenuReq) IsSetSort() bool {
	return p.Sort != UpdateMenuReq_Sort_DEFAULT
}

func (p *UpdateMenuReq) IsSetStatus() bool {
	return p.Status != UpdateMenuReq_Status_DEFAULT
}

func (p *UpdateMenuReq) IsSetUrl() bool {
	return p.Url != UpdateMenuReq_Url_DEFAULT
}

func (p *UpdateMenuReq) IsSetCreatedAt() bool {
	return p.CreatedAt != UpdateMenuReq_CreatedAt_DEFAULT
}

func (p *UpdateMenuReq) IsSetUpdatedAt() bool {
	return p.UpdatedAt != UpdateMenuReq_UpdatedAt_DEFAULT
}

func (p *UpdateMenuReq) IsSetTitle() bool {
	return p.Title != UpdateMenuReq_Title_DEFAULT
}

func (p *UpdateMenuReq) IsSetType() bool {
	return p.Type != UpdateMenuReq_Type_DEFAULT
}

func (p *UpdateMenuReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateMenuReq(%+v)", *p)
}

var fieldIDToName_UpdateMenuReq = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "parentId",
	4:  "level",
	5:  "path",
	6:  "redirect",
	7:  "component",
	8:  "menuType",
	9:  "hidden",
	10: "sort",
	12: "status",
	13: "url",
	15: "createdAt",
	16: "updatedAt",
	17: "title",
	19: "type",
}

type MenuListReq struct {
	Page     int64 `thrift:"page,1,optional" frugal:"1,optional,i64" json:"page,omitempty"`
	PageSize int64 `thrift:"pageSize,2,optional" frugal:"2,optional,i64" json:"pageSize,omitempty"`
}

func NewMenuListReq() *MenuListReq {
	return &MenuListReq{
		Page:     1,
		PageSize: 100,
	}
}

func (p *MenuListReq) InitDefault() {
	p.Page = 1
	p.PageSize = 100
}

var MenuListReq_Page_DEFAULT int64 = 1

func (p *MenuListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return MenuListReq_Page_DEFAULT
	}
	return p.Page
}

var MenuListReq_PageSize_DEFAULT int64 = 100

func (p *MenuListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return MenuListReq_PageSize_DEFAULT
	}
	return p.PageSize
}
func (p *MenuListReq) SetPage(val int64) {
	p.Page = val
}
func (p *MenuListReq) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *MenuListReq) IsSetPage() bool {
	return p.Page != MenuListReq_Page_DEFAULT
}

func (p *MenuListReq) IsSetPageSize() bool {
	return p.PageSize != MenuListReq_PageSize_DEFAULT
}

func (p *MenuListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuListReq(%+v)", *p)
}

var fieldIDToName_MenuListReq = map[int16]string{
	1: "page",
	2: "pageSize",
}

type MenuTree struct {
	MenuInfo *Menu       `thrift:"menuInfo,1,optional" frugal:"1,optional,Menu" json:"menuInfo,omitempty"`
	Children []*MenuTree `thrift:"children,4,optional" frugal:"4,optional,list<MenuTree>" json:"children,omitempty"`
	Ignore   bool        `thrift:"ignore,5,optional" frugal:"5,optional,bool" json:"ignore,omitempty"`
}

func NewMenuTree() *MenuTree {
	return &MenuTree{
		MenuInfo: &Menu{},
		Children: []*MenuTree{},
		Ignore:   false,
	}
}

func (p *MenuTree) InitDefault() {
	p.MenuInfo = &Menu{}
	p.Children = []*MenuTree{}
	p.Ignore = false
}

var MenuTree_MenuInfo_DEFAULT *Menu = &Menu{}

func (p *MenuTree) GetMenuInfo() (v *Menu) {
	if !p.IsSetMenuInfo() {
		return MenuTree_MenuInfo_DEFAULT
	}
	return p.MenuInfo
}

var MenuTree_Children_DEFAULT []*MenuTree = []*MenuTree{}

func (p *MenuTree) GetChildren() (v []*MenuTree) {
	if !p.IsSetChildren() {
		return MenuTree_Children_DEFAULT
	}
	return p.Children
}

var MenuTree_Ignore_DEFAULT bool = false

func (p *MenuTree) GetIgnore() (v bool) {
	if !p.IsSetIgnore() {
		return MenuTree_Ignore_DEFAULT
	}
	return p.Ignore
}
func (p *MenuTree) SetMenuInfo(val *Menu) {
	p.MenuInfo = val
}
func (p *MenuTree) SetChildren(val []*MenuTree) {
	p.Children = val
}
func (p *MenuTree) SetIgnore(val bool) {
	p.Ignore = val
}

func (p *MenuTree) IsSetMenuInfo() bool {
	return p.MenuInfo != nil
}

func (p *MenuTree) IsSetChildren() bool {
	return p.Children != nil
}

func (p *MenuTree) IsSetIgnore() bool {
	return p.Ignore != MenuTree_Ignore_DEFAULT
}

func (p *MenuTree) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuTree(%+v)", *p)
}

var fieldIDToName_MenuTree = map[int16]string{
	1: "menuInfo",
	4: "children",
	5: "ignore",
}

type Menu struct {
	Id        int64   `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name      string  `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	ParentId  int64   `thrift:"parentId,3,optional" frugal:"3,optional,i64" json:"parentId,omitempty"`
	Level     int64   `thrift:"level,4,optional" frugal:"4,optional,i64" json:"level,omitempty"`
	Path      string  `thrift:"path,5,optional" frugal:"5,optional,string" json:"path,omitempty"`
	Redirect  string  `thrift:"redirect,6,optional" frugal:"6,optional,string" json:"redirect,omitempty"`
	Component string  `thrift:"component,7,optional" frugal:"7,optional,string" json:"component,omitempty"`
	MenuType  int64   `thrift:"menuType,8,optional" frugal:"8,optional,i64" json:"menuType,omitempty"`
	Hidden    int64   `thrift:"hidden,9,optional" frugal:"9,optional,i64" json:"hidden,omitempty"`
	Sort      int64   `thrift:"sort,10,optional" frugal:"10,optional,i64" json:"sort,omitempty"`
	Status    int64   `thrift:"status,12,optional" frugal:"12,optional,i64" json:"status,omitempty"`
	Url       string  `thrift:"url,13,optional" frugal:"13,optional,string" json:"url,omitempty"`
	Children  []*Menu `thrift:"children,14,optional" frugal:"14,optional,list<Menu>" json:"children,omitempty"`
	CreatedAt string  `thrift:"createdAt,15,optional" frugal:"15,optional,string" json:"createdAt,omitempty"`
	UpdatedAt string  `thrift:"updatedAt,16,optional" frugal:"16,optional,string" json:"updatedAt,omitempty"`
	Title     string  `thrift:"title,17,optional" frugal:"17,optional,string" json:"title,omitempty"`
	Type      string  `thrift:"type,19,optional" frugal:"19,optional,string" json:"type,omitempty"`
}

func NewMenu() *Menu {
	return &Menu{
		Id:        0,
		Name:      "",
		ParentId:  0,
		Level:     0,
		Path:      "",
		Redirect:  "",
		Component: "",
		MenuType:  0,
		Hidden:    0,
		Sort:      0,
		Status:    1,
		Url:       "",
		Children:  []*Menu{},
		CreatedAt: "",
		UpdatedAt: "",
		Title:     "",
		Type:      "",
	}
}

func (p *Menu) InitDefault() {
	p.Id = 0
	p.Name = ""
	p.ParentId = 0
	p.Level = 0
	p.Path = ""
	p.Redirect = ""
	p.Component = ""
	p.MenuType = 0
	p.Hidden = 0
	p.Sort = 0
	p.Status = 1
	p.Url = ""
	p.Children = []*Menu{}
	p.CreatedAt = ""
	p.UpdatedAt = ""
	p.Title = ""
	p.Type = ""
}

var Menu_Id_DEFAULT int64 = 0

func (p *Menu) GetId() (v int64) {
	if !p.IsSetId() {
		return Menu_Id_DEFAULT
	}
	return p.Id
}

var Menu_Name_DEFAULT string = ""

func (p *Menu) GetName() (v string) {
	if !p.IsSetName() {
		return Menu_Name_DEFAULT
	}
	return p.Name
}

var Menu_ParentId_DEFAULT int64 = 0

func (p *Menu) GetParentId() (v int64) {
	if !p.IsSetParentId() {
		return Menu_ParentId_DEFAULT
	}
	return p.ParentId
}

var Menu_Level_DEFAULT int64 = 0

func (p *Menu) GetLevel() (v int64) {
	if !p.IsSetLevel() {
		return Menu_Level_DEFAULT
	}
	return p.Level
}

var Menu_Path_DEFAULT string = ""

func (p *Menu) GetPath() (v string) {
	if !p.IsSetPath() {
		return Menu_Path_DEFAULT
	}
	return p.Path
}

var Menu_Redirect_DEFAULT string = ""

func (p *Menu) GetRedirect() (v string) {
	if !p.IsSetRedirect() {
		return Menu_Redirect_DEFAULT
	}
	return p.Redirect
}

var Menu_Component_DEFAULT string = ""

func (p *Menu) GetComponent() (v string) {
	if !p.IsSetComponent() {
		return Menu_Component_DEFAULT
	}
	return p.Component
}

var Menu_MenuType_DEFAULT int64 = 0

func (p *Menu) GetMenuType() (v int64) {
	if !p.IsSetMenuType() {
		return Menu_MenuType_DEFAULT
	}
	return p.MenuType
}

var Menu_Hidden_DEFAULT int64 = 0

func (p *Menu) GetHidden() (v int64) {
	if !p.IsSetHidden() {
		return Menu_Hidden_DEFAULT
	}
	return p.Hidden
}

var Menu_Sort_DEFAULT int64 = 0

func (p *Menu) GetSort() (v int64) {
	if !p.IsSetSort() {
		return Menu_Sort_DEFAULT
	}
	return p.Sort
}

var Menu_Status_DEFAULT int64 = 1

func (p *Menu) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return Menu_Status_DEFAULT
	}
	return p.Status
}

var Menu_Url_DEFAULT string = ""

func (p *Menu) GetUrl() (v string) {
	if !p.IsSetUrl() {
		return Menu_Url_DEFAULT
	}
	return p.Url
}

var Menu_Children_DEFAULT []*Menu = []*Menu{}

func (p *Menu) GetChildren() (v []*Menu) {
	if !p.IsSetChildren() {
		return Menu_Children_DEFAULT
	}
	return p.Children
}

var Menu_CreatedAt_DEFAULT string = ""

func (p *Menu) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return Menu_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var Menu_UpdatedAt_DEFAULT string = ""

func (p *Menu) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return Menu_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var Menu_Title_DEFAULT string = ""

func (p *Menu) GetTitle() (v string) {
	if !p.IsSetTitle() {
		return Menu_Title_DEFAULT
	}
	return p.Title
}

var Menu_Type_DEFAULT string = ""

func (p *Menu) GetType() (v string) {
	if !p.IsSetType() {
		return Menu_Type_DEFAULT
	}
	return p.Type
}
func (p *Menu) SetId(val int64) {
	p.Id = val
}
func (p *Menu) SetName(val string) {
	p.Name = val
}
func (p *Menu) SetParentId(val int64) {
	p.ParentId = val
}
func (p *Menu) SetLevel(val int64) {
	p.Level = val
}
func (p *Menu) SetPath(val string) {
	p.Path = val
}
func (p *Menu) SetRedirect(val string) {
	p.Redirect = val
}
func (p *Menu) SetComponent(val string) {
	p.Component = val
}
func (p *Menu) SetMenuType(val int64) {
	p.MenuType = val
}
func (p *Menu) SetHidden(val int64) {
	p.Hidden = val
}
func (p *Menu) SetSort(val int64) {
	p.Sort = val
}
func (p *Menu) SetStatus(val int64) {
	p.Status = val
}
func (p *Menu) SetUrl(val string) {
	p.Url = val
}
func (p *Menu) SetChildren(val []*Menu) {
	p.Children = val
}
func (p *Menu) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *Menu) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *Menu) SetTitle(val string) {
	p.Title = val
}
func (p *Menu) SetType(val string) {
	p.Type = val
}

func (p *Menu) IsSetId() bool {
	return p.Id != Menu_Id_DEFAULT
}

func (p *Menu) IsSetName() bool {
	return p.Name != Menu_Name_DEFAULT
}

func (p *Menu) IsSetParentId() bool {
	return p.ParentId != Menu_ParentId_DEFAULT
}

func (p *Menu) IsSetLevel() bool {
	return p.Level != Menu_Level_DEFAULT
}

func (p *Menu) IsSetPath() bool {
	return p.Path != Menu_Path_DEFAULT
}

func (p *Menu) IsSetRedirect() bool {
	return p.Redirect != Menu_Redirect_DEFAULT
}

func (p *Menu) IsSetComponent() bool {
	return p.Component != Menu_Component_DEFAULT
}

func (p *Menu) IsSetMenuType() bool {
	return p.MenuType != Menu_MenuType_DEFAULT
}

func (p *Menu) IsSetHidden() bool {
	return p.Hidden != Menu_Hidden_DEFAULT
}

func (p *Menu) IsSetSort() bool {
	return p.Sort != Menu_Sort_DEFAULT
}

func (p *Menu) IsSetStatus() bool {
	return p.Status != Menu_Status_DEFAULT
}

func (p *Menu) IsSetUrl() bool {
	return p.Url != Menu_Url_DEFAULT
}

func (p *Menu) IsSetChildren() bool {
	return p.Children != nil
}

func (p *Menu) IsSetCreatedAt() bool {
	return p.CreatedAt != Menu_CreatedAt_DEFAULT
}

func (p *Menu) IsSetUpdatedAt() bool {
	return p.UpdatedAt != Menu_UpdatedAt_DEFAULT
}

func (p *Menu) IsSetTitle() bool {
	return p.Title != Menu_Title_DEFAULT
}

func (p *Menu) IsSetType() bool {
	return p.Type != Menu_Type_DEFAULT
}

func (p *Menu) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Menu(%+v)", *p)
}

var fieldIDToName_Menu = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "parentId",
	4:  "level",
	5:  "path",
	6:  "redirect",
	7:  "component",
	8:  "menuType",
	9:  "hidden",
	10: "sort",
	12: "status",
	13: "url",
	14: "children",
	15: "createdAt",
	16: "updatedAt",
	17: "title",
	19: "type",
}

type MenuResp struct {
	Data     *Menu          `thrift:"data,1,optional" frugal:"1,optional,Menu" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewMenuResp() *MenuResp {
	return &MenuResp{
		Data:     &Menu{},
		BaseResp: &base.BaseResp{},
	}
}

func (p *MenuResp) InitDefault() {
	p.Data = &Menu{}
	p.BaseResp = &base.BaseResp{}
}

var MenuResp_Data_DEFAULT *Menu = &Menu{}

func (p *MenuResp) GetData() (v *Menu) {
	if !p.IsSetData() {
		return MenuResp_Data_DEFAULT
	}
	return p.Data
}

var MenuResp_BaseResp_DEFAULT *base.BaseResp = &base.BaseResp{}

func (p *MenuResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return MenuResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *MenuResp) SetData(val *Menu) {
	p.Data = val
}
func (p *MenuResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *MenuResp) IsSetData() bool {
	return p.Data != nil
}

func (p *MenuResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *MenuResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuResp(%+v)", *p)
}

var fieldIDToName_MenuResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type MenuListResp struct {
	Data     []*Menu        `thrift:"data,1,optional" frugal:"1,optional,list<Menu>" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewMenuListResp() *MenuListResp {
	return &MenuListResp{
		Data:     []*Menu{},
		BaseResp: &base.BaseResp{},
	}
}

func (p *MenuListResp) InitDefault() {
	p.Data = []*Menu{}
	p.BaseResp = &base.BaseResp{}
}

var MenuListResp_Data_DEFAULT []*Menu = []*Menu{}

func (p *MenuListResp) GetData() (v []*Menu) {
	if !p.IsSetData() {
		return MenuListResp_Data_DEFAULT
	}
	return p.Data
}

var MenuListResp_BaseResp_DEFAULT *base.BaseResp = &base.BaseResp{}

func (p *MenuListResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return MenuListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *MenuListResp) SetData(val []*Menu) {
	p.Data = val
}
func (p *MenuListResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *MenuListResp) IsSetData() bool {
	return p.Data != nil
}

func (p *MenuListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *MenuListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuListResp(%+v)", *p)
}

var fieldIDToName_MenuListResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type Role struct {
	Id            int64   `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name          string  `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Value         string  `thrift:"value,3,optional" frugal:"3,optional,string" json:"value,omitempty"`
	DefaultRouter string  `thrift:"defaultRouter,4,optional" frugal:"4,optional,string" json:"defaultRouter,omitempty"`
	Remark        string  `thrift:"remark,5,optional" frugal:"5,optional,string" json:"remark,omitempty"`
	Apis          []int64 `thrift:"apis,6,optional" frugal:"6,optional,list<i64>" json:"apis,omitempty"`
}

func NewRole() *Role {
	return &Role{
		Id:            0,
		Name:          "",
		Value:         "",
		DefaultRouter: "",
		Remark:        "",
		Apis:          []int64{},
	}
}

func (p *Role) InitDefault() {
	p.Id = 0
	p.Name = ""
	p.Value = ""
	p.DefaultRouter = ""
	p.Remark = ""
	p.Apis = []int64{}
}

var Role_Id_DEFAULT int64 = 0

func (p *Role) GetId() (v int64) {
	if !p.IsSetId() {
		return Role_Id_DEFAULT
	}
	return p.Id
}

var Role_Name_DEFAULT string = ""

func (p *Role) GetName() (v string) {
	if !p.IsSetName() {
		return Role_Name_DEFAULT
	}
	return p.Name
}

var Role_Value_DEFAULT string = ""

func (p *Role) GetValue() (v string) {
	if !p.IsSetValue() {
		return Role_Value_DEFAULT
	}
	return p.Value
}

var Role_DefaultRouter_DEFAULT string = ""

func (p *Role) GetDefaultRouter() (v string) {
	if !p.IsSetDefaultRouter() {
		return Role_DefaultRouter_DEFAULT
	}
	return p.DefaultRouter
}

var Role_Remark_DEFAULT string = ""

func (p *Role) GetRemark() (v string) {
	if !p.IsSetRemark() {
		return Role_Remark_DEFAULT
	}
	return p.Remark
}

var Role_Apis_DEFAULT []int64 = []int64{}

func (p *Role) GetApis() (v []int64) {
	if !p.IsSetApis() {
		return Role_Apis_DEFAULT
	}
	return p.Apis
}
func (p *Role) SetId(val int64) {
	p.Id = val
}
func (p *Role) SetName(val string) {
	p.Name = val
}
func (p *Role) SetValue(val string) {
	p.Value = val
}
func (p *Role) SetDefaultRouter(val string) {
	p.DefaultRouter = val
}
func (p *Role) SetRemark(val string) {
	p.Remark = val
}
func (p *Role) SetApis(val []int64) {
	p.Apis = val
}

func (p *Role) IsSetId() bool {
	return p.Id != Role_Id_DEFAULT
}

func (p *Role) IsSetName() bool {
	return p.Name != Role_Name_DEFAULT
}

func (p *Role) IsSetValue() bool {
	return p.Value != Role_Value_DEFAULT
}

func (p *Role) IsSetDefaultRouter() bool {
	return p.DefaultRouter != Role_DefaultRouter_DEFAULT
}

func (p *Role) IsSetRemark() bool {
	return p.Remark != Role_Remark_DEFAULT
}

func (p *Role) IsSetApis() bool {
	return p.Apis != nil
}

func (p *Role) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Role(%+v)", *p)
}

var fieldIDToName_Role = map[int16]string{
	1: "id",
	2: "name",
	3: "value",
	4: "defaultRouter",
	5: "remark",
	6: "apis",
}

type RoleResp struct {
	Data     *Role          `thrift:"data,1,optional" frugal:"1,optional,Role" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewRoleResp() *RoleResp {
	return &RoleResp{
		Data:     &Role{},
		BaseResp: &base.BaseResp{},
	}
}

func (p *RoleResp) InitDefault() {
	p.Data = &Role{}
	p.BaseResp = &base.BaseResp{}
}

var RoleResp_Data_DEFAULT *Role = &Role{}

func (p *RoleResp) GetData() (v *Role) {
	if !p.IsSetData() {
		return RoleResp_Data_DEFAULT
	}
	return p.Data
}

var RoleResp_BaseResp_DEFAULT *base.BaseResp = &base.BaseResp{}

func (p *RoleResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return RoleResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *RoleResp) SetData(val *Role) {
	p.Data = val
}
func (p *RoleResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *RoleResp) IsSetData() bool {
	return p.Data != nil
}

func (p *RoleResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *RoleResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleResp(%+v)", *p)
}

var fieldIDToName_RoleResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type RoleListResp struct {
	Data     []*Role        `thrift:"data,1,optional" frugal:"1,optional,list<Role>" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewRoleListResp() *RoleListResp {
	return &RoleListResp{
		Data:     []*Role{},
		BaseResp: &base.BaseResp{},
	}
}

func (p *RoleListResp) InitDefault() {
	p.Data = []*Role{}
	p.BaseResp = &base.BaseResp{}
}

var RoleListResp_Data_DEFAULT []*Role = []*Role{}

func (p *RoleListResp) GetData() (v []*Role) {
	if !p.IsSetData() {
		return RoleListResp_Data_DEFAULT
	}
	return p.Data
}

var RoleListResp_BaseResp_DEFAULT *base.BaseResp = &base.BaseResp{}

func (p *RoleListResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return RoleListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *RoleListResp) SetData(val []*Role) {
	p.Data = val
}
func (p *RoleListResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *RoleListResp) IsSetData() bool {
	return p.Data != nil
}

func (p *RoleListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *RoleListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleListResp(%+v)", *p)
}

var fieldIDToName_RoleListResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type CreateRoleReq struct {
	Id            int64   `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name          string  `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Value         string  `thrift:"value,3,optional" frugal:"3,optional,string" json:"value,omitempty"`
	DefaultRouter string  `thrift:"defaultRouter,4,optional" frugal:"4,optional,string" json:"defaultRouter,omitempty"`
	Remark        string  `thrift:"remark,5,optional" frugal:"5,optional,string" json:"remark,omitempty"`
	Apis          []int64 `thrift:"apis,6,optional" frugal:"6,optional,list<i64>" json:"apis,omitempty"`
}

func NewCreateRoleReq() *CreateRoleReq {
	return &CreateRoleReq{
		Id:            0,
		Name:          "",
		Value:         "",
		DefaultRouter: "",
		Remark:        "",
		Apis:          []int64{},
	}
}

func (p *CreateRoleReq) InitDefault() {
	p.Id = 0
	p.Name = ""
	p.Value = ""
	p.DefaultRouter = ""
	p.Remark = ""
	p.Apis = []int64{}
}

var CreateRoleReq_Id_DEFAULT int64 = 0

func (p *CreateRoleReq) GetId() (v int64) {
	if !p.IsSetId() {
		return CreateRoleReq_Id_DEFAULT
	}
	return p.Id
}

var CreateRoleReq_Name_DEFAULT string = ""

func (p *CreateRoleReq) GetName() (v string) {
	if !p.IsSetName() {
		return CreateRoleReq_Name_DEFAULT
	}
	return p.Name
}

var CreateRoleReq_Value_DEFAULT string = ""

func (p *CreateRoleReq) GetValue() (v string) {
	if !p.IsSetValue() {
		return CreateRoleReq_Value_DEFAULT
	}
	return p.Value
}

var CreateRoleReq_DefaultRouter_DEFAULT string = ""

func (p *CreateRoleReq) GetDefaultRouter() (v string) {
	if !p.IsSetDefaultRouter() {
		return CreateRoleReq_DefaultRouter_DEFAULT
	}
	return p.DefaultRouter
}

var CreateRoleReq_Remark_DEFAULT string = ""

func (p *CreateRoleReq) GetRemark() (v string) {
	if !p.IsSetRemark() {
		return CreateRoleReq_Remark_DEFAULT
	}
	return p.Remark
}

var CreateRoleReq_Apis_DEFAULT []int64 = []int64{}

func (p *CreateRoleReq) GetApis() (v []int64) {
	if !p.IsSetApis() {
		return CreateRoleReq_Apis_DEFAULT
	}
	return p.Apis
}
func (p *CreateRoleReq) SetId(val int64) {
	p.Id = val
}
func (p *CreateRoleReq) SetName(val string) {
	p.Name = val
}
func (p *CreateRoleReq) SetValue(val string) {
	p.Value = val
}
func (p *CreateRoleReq) SetDefaultRouter(val string) {
	p.DefaultRouter = val
}
func (p *CreateRoleReq) SetRemark(val string) {
	p.Remark = val
}
func (p *CreateRoleReq) SetApis(val []int64) {
	p.Apis = val
}

func (p *CreateRoleReq) IsSetId() bool {
	return p.Id != CreateRoleReq_Id_DEFAULT
}

func (p *CreateRoleReq) IsSetName() bool {
	return p.Name != CreateRoleReq_Name_DEFAULT
}

func (p *CreateRoleReq) IsSetValue() bool {
	return p.Value != CreateRoleReq_Value_DEFAULT
}

func (p *CreateRoleReq) IsSetDefaultRouter() bool {
	return p.DefaultRouter != CreateRoleReq_DefaultRouter_DEFAULT
}

func (p *CreateRoleReq) IsSetRemark() bool {
	return p.Remark != CreateRoleReq_Remark_DEFAULT
}

func (p *CreateRoleReq) IsSetApis() bool {
	return p.Apis != nil
}

func (p *CreateRoleReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateRoleReq(%+v)", *p)
}

var fieldIDToName_CreateRoleReq = map[int16]string{
	1: "id",
	2: "name",
	3: "value",
	4: "defaultRouter",
	5: "remark",
	6: "apis",
}

type GetRoleListReq struct {
	Page     int64  `thrift:"page,1,optional" frugal:"1,optional,i64" json:"page,omitempty"`
	PageSize int64  `thrift:"pageSize,2,optional" frugal:"2,optional,i64" json:"pageSize,omitempty"`
	Keyword  string `thrift:"keyword,3,optional" frugal:"3,optional,string" json:"keyword,omitempty"`
}

func NewGetRoleListReq() *GetRoleListReq {
	return &GetRoleListReq{
		Page:     1,
		PageSize: 10,
		Keyword:  "",
	}
}

func (p *GetRoleListReq) InitDefault() {
	p.Page = 1
	p.PageSize = 10
	p.Keyword = ""
}

var GetRoleListReq_Page_DEFAULT int64 = 1

func (p *GetRoleListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return GetRoleListReq_Page_DEFAULT
	}
	return p.Page
}

var GetRoleListReq_PageSize_DEFAULT int64 = 10

func (p *GetRoleListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return GetRoleListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var GetRoleListReq_Keyword_DEFAULT string = ""

func (p *GetRoleListReq) GetKeyword() (v string) {
	if !p.IsSetKeyword() {
		return GetRoleListReq_Keyword_DEFAULT
	}
	return p.Keyword
}
func (p *GetRoleListReq) SetPage(val int64) {
	p.Page = val
}
func (p *GetRoleListReq) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *GetRoleListReq) SetKeyword(val string) {
	p.Keyword = val
}

func (p *GetRoleListReq) IsSetPage() bool {
	return p.Page != GetRoleListReq_Page_DEFAULT
}

func (p *GetRoleListReq) IsSetPageSize() bool {
	return p.PageSize != GetRoleListReq_PageSize_DEFAULT
}

func (p *GetRoleListReq) IsSetKeyword() bool {
	return p.Keyword != GetRoleListReq_Keyword_DEFAULT
}

func (p *GetRoleListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoleListReq(%+v)", *p)
}

var fieldIDToName_GetRoleListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "keyword",
}

type UpdateRoleReq struct {
	Id            int64   `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name          string  `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Value         string  `thrift:"value,3,optional" frugal:"3,optional,string" json:"value,omitempty"`
	DefaultRouter string  `thrift:"defaultRouter,4,optional" frugal:"4,optional,string" json:"defaultRouter,omitempty"`
	Remark        string  `thrift:"remark,5,optional" frugal:"5,optional,string" json:"remark,omitempty"`
	Apis          []int64 `thrift:"apis,6,optional" frugal:"6,optional,list<i64>" json:"apis,omitempty"`
}

func NewUpdateRoleReq() *UpdateRoleReq {
	return &UpdateRoleReq{
		Id:            0,
		Name:          "",
		Value:         "",
		DefaultRouter: "",
		Remark:        "",
		Apis:          []int64{},
	}
}

func (p *UpdateRoleReq) InitDefault() {
	p.Id = 0
	p.Name = ""
	p.Value = ""
	p.DefaultRouter = ""
	p.Remark = ""
	p.Apis = []int64{}
}

var UpdateRoleReq_Id_DEFAULT int64 = 0

func (p *UpdateRoleReq) GetId() (v int64) {
	if !p.IsSetId() {
		return UpdateRoleReq_Id_DEFAULT
	}
	return p.Id
}

var UpdateRoleReq_Name_DEFAULT string = ""

func (p *UpdateRoleReq) GetName() (v string) {
	if !p.IsSetName() {
		return UpdateRoleReq_Name_DEFAULT
	}
	return p.Name
}

var UpdateRoleReq_Value_DEFAULT string = ""

func (p *UpdateRoleReq) GetValue() (v string) {
	if !p.IsSetValue() {
		return UpdateRoleReq_Value_DEFAULT
	}
	return p.Value
}

var UpdateRoleReq_DefaultRouter_DEFAULT string = ""

func (p *UpdateRoleReq) GetDefaultRouter() (v string) {
	if !p.IsSetDefaultRouter() {
		return UpdateRoleReq_DefaultRouter_DEFAULT
	}
	return p.DefaultRouter
}

var UpdateRoleReq_Remark_DEFAULT string = ""

func (p *UpdateRoleReq) GetRemark() (v string) {
	if !p.IsSetRemark() {
		return UpdateRoleReq_Remark_DEFAULT
	}
	return p.Remark
}

var UpdateRoleReq_Apis_DEFAULT []int64 = []int64{}

func (p *UpdateRoleReq) GetApis() (v []int64) {
	if !p.IsSetApis() {
		return UpdateRoleReq_Apis_DEFAULT
	}
	return p.Apis
}
func (p *UpdateRoleReq) SetId(val int64) {
	p.Id = val
}
func (p *UpdateRoleReq) SetName(val string) {
	p.Name = val
}
func (p *UpdateRoleReq) SetValue(val string) {
	p.Value = val
}
func (p *UpdateRoleReq) SetDefaultRouter(val string) {
	p.DefaultRouter = val
}
func (p *UpdateRoleReq) SetRemark(val string) {
	p.Remark = val
}
func (p *UpdateRoleReq) SetApis(val []int64) {
	p.Apis = val
}

func (p *UpdateRoleReq) IsSetId() bool {
	return p.Id != UpdateRoleReq_Id_DEFAULT
}

func (p *UpdateRoleReq) IsSetName() bool {
	return p.Name != UpdateRoleReq_Name_DEFAULT
}

func (p *UpdateRoleReq) IsSetValue() bool {
	return p.Value != UpdateRoleReq_Value_DEFAULT
}

func (p *UpdateRoleReq) IsSetDefaultRouter() bool {
	return p.DefaultRouter != UpdateRoleReq_DefaultRouter_DEFAULT
}

func (p *UpdateRoleReq) IsSetRemark() bool {
	return p.Remark != UpdateRoleReq_Remark_DEFAULT
}

func (p *UpdateRoleReq) IsSetApis() bool {
	return p.Apis != nil
}

func (p *UpdateRoleReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateRoleReq(%+v)", *p)
}

var fieldIDToName_UpdateRoleReq = map[int16]string{
	1: "id",
	2: "name",
	3: "value",
	4: "defaultRouter",
	5: "remark",
	6: "apis",
}

type CreateMenuAuthReq struct {
	RoleId int64   `thrift:"roleId,1,optional" frugal:"1,optional,i64" json:"roleId,omitempty"`
	Ids    []int64 `thrift:"Ids,2,optional" frugal:"2,optional,list<i64>" json:"Ids,omitempty"`
}

func NewCreateMenuAuthReq() *CreateMenuAuthReq {
	return &CreateMenuAuthReq{
		RoleId: 0,
		Ids:    []int64{},
	}
}

func (p *CreateMenuAuthReq) InitDefault() {
	p.RoleId = 0
	p.Ids = []int64{}
}

var CreateMenuAuthReq_RoleId_DEFAULT int64 = 0

func (p *CreateMenuAuthReq) GetRoleId() (v int64) {
	if !p.IsSetRoleId() {
		return CreateMenuAuthReq_RoleId_DEFAULT
	}
	return p.RoleId
}

var CreateMenuAuthReq_Ids_DEFAULT []int64 = []int64{}

func (p *CreateMenuAuthReq) GetIds() (v []int64) {
	if !p.IsSetIds() {
		return CreateMenuAuthReq_Ids_DEFAULT
	}
	return p.Ids
}
func (p *CreateMenuAuthReq) SetRoleId(val int64) {
	p.RoleId = val
}
func (p *CreateMenuAuthReq) SetIds(val []int64) {
	p.Ids = val
}

func (p *CreateMenuAuthReq) IsSetRoleId() bool {
	return p.RoleId != CreateMenuAuthReq_RoleId_DEFAULT
}

func (p *CreateMenuAuthReq) IsSetIds() bool {
	return p.Ids != nil
}

func (p *CreateMenuAuthReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateMenuAuthReq(%+v)", *p)
}

var fieldIDToName_CreateMenuAuthReq = map[int16]string{
	1: "roleId",
	2: "Ids",
}

type Dict struct {
	Id          int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Title       string `thrift:"title,2" frugal:"2,default,string" json:"title"`
	Name        string `thrift:"name,3" frugal:"3,default,string" json:"name"`
	Status      int64  `thrift:"status,5" frugal:"5,default,i64" json:"status"`
	Description string `thrift:"description,6" frugal:"6,default,string" json:"description"`
	CreatedAt   string `thrift:"createdAt,7" frugal:"7,default,string" json:"createdAt"`
	UpdatedAt   string `thrift:"updatedAt,8" frugal:"8,default,string" json:"updatedAt"`
}

func NewDict() *Dict {
	return &Dict{
		Id:          0,
		Title:       "",
		Name:        "",
		Status:      1,
		Description: "",
		CreatedAt:   "",
		UpdatedAt:   "",
	}
}

func (p *Dict) InitDefault() {
	p.Id = 0
	p.Title = ""
	p.Name = ""
	p.Status = 1
	p.Description = ""
	p.CreatedAt = ""
	p.UpdatedAt = ""
}

func (p *Dict) GetId() (v int64) {
	return p.Id
}

func (p *Dict) GetTitle() (v string) {
	return p.Title
}

func (p *Dict) GetName() (v string) {
	return p.Name
}

func (p *Dict) GetStatus() (v int64) {
	return p.Status
}

func (p *Dict) GetDescription() (v string) {
	return p.Description
}

func (p *Dict) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *Dict) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}
func (p *Dict) SetId(val int64) {
	p.Id = val
}
func (p *Dict) SetTitle(val string) {
	p.Title = val
}
func (p *Dict) SetName(val string) {
	p.Name = val
}
func (p *Dict) SetStatus(val int64) {
	p.Status = val
}
func (p *Dict) SetDescription(val string) {
	p.Description = val
}
func (p *Dict) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *Dict) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}

func (p *Dict) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Dict(%+v)", *p)
}

var fieldIDToName_Dict = map[int16]string{
	1: "id",
	2: "title",
	3: "name",
	5: "status",
	6: "description",
	7: "createdAt",
	8: "updatedAt",
}

type Dictht struct {
	Id        int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Title     string `thrift:"title,2" frugal:"2,default,string" json:"title"`
	Key       string `thrift:"key,3" frugal:"3,default,string" json:"key"`
	Value     string `thrift:"value,4" frugal:"4,default,string" json:"value"`
	Status    int64  `thrift:"status,5" frugal:"5,default,i64" json:"status"`
	CreatedAt string `thrift:"createdAt,6" frugal:"6,default,string" json:"createdAt"`
	UpdatedAt string `thrift:"updatedAt,7" frugal:"7,default,string" json:"updatedAt"`
	ParentID  int64  `thrift:"parentID,8" frugal:"8,default,i64" json:"parentID"`
}

func NewDictht() *Dictht {
	return &Dictht{
		Id:        0,
		Title:     "",
		Key:       "",
		Value:     "",
		Status:    1,
		CreatedAt: "",
		UpdatedAt: "",
	}
}

func (p *Dictht) InitDefault() {
	p.Id = 0
	p.Title = ""
	p.Key = ""
	p.Value = ""
	p.Status = 1
	p.CreatedAt = ""
	p.UpdatedAt = ""
}

func (p *Dictht) GetId() (v int64) {
	return p.Id
}

func (p *Dictht) GetTitle() (v string) {
	return p.Title
}

func (p *Dictht) GetKey() (v string) {
	return p.Key
}

func (p *Dictht) GetValue() (v string) {
	return p.Value
}

func (p *Dictht) GetStatus() (v int64) {
	return p.Status
}

func (p *Dictht) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *Dictht) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}

func (p *Dictht) GetParentID() (v int64) {
	return p.ParentID
}
func (p *Dictht) SetId(val int64) {
	p.Id = val
}
func (p *Dictht) SetTitle(val string) {
	p.Title = val
}
func (p *Dictht) SetKey(val string) {
	p.Key = val
}
func (p *Dictht) SetValue(val string) {
	p.Value = val
}
func (p *Dictht) SetStatus(val int64) {
	p.Status = val
}
func (p *Dictht) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *Dictht) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *Dictht) SetParentID(val int64) {
	p.ParentID = val
}

func (p *Dictht) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Dictht(%+v)", *p)
}

var fieldIDToName_Dictht = map[int16]string{
	1: "id",
	2: "title",
	3: "key",
	4: "value",
	5: "status",
	6: "createdAt",
	7: "updatedAt",
	8: "parentID",
}

type DictListReq struct {
	Title    string `thrift:"title,1,optional" frugal:"1,optional,string" json:"title,omitempty"`
	Name     string `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Page     int64  `thrift:"page,3,optional" frugal:"3,optional,i64" json:"page,omitempty"`
	PageSize int64  `thrift:"pageSize,4,optional" frugal:"4,optional,i64" json:"pageSize,omitempty"`
}

func NewDictListReq() *DictListReq {
	return &DictListReq{
		Title:    "",
		Name:     "",
		Page:     1,
		PageSize: 100,
	}
}

func (p *DictListReq) InitDefault() {
	p.Title = ""
	p.Name = ""
	p.Page = 1
	p.PageSize = 100
}

var DictListReq_Title_DEFAULT string = ""

func (p *DictListReq) GetTitle() (v string) {
	if !p.IsSetTitle() {
		return DictListReq_Title_DEFAULT
	}
	return p.Title
}

var DictListReq_Name_DEFAULT string = ""

func (p *DictListReq) GetName() (v string) {
	if !p.IsSetName() {
		return DictListReq_Name_DEFAULT
	}
	return p.Name
}

var DictListReq_Page_DEFAULT int64 = 1

func (p *DictListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return DictListReq_Page_DEFAULT
	}
	return p.Page
}

var DictListReq_PageSize_DEFAULT int64 = 100

func (p *DictListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return DictListReq_PageSize_DEFAULT
	}
	return p.PageSize
}
func (p *DictListReq) SetTitle(val string) {
	p.Title = val
}
func (p *DictListReq) SetName(val string) {
	p.Name = val
}
func (p *DictListReq) SetPage(val int64) {
	p.Page = val
}
func (p *DictListReq) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *DictListReq) IsSetTitle() bool {
	return p.Title != DictListReq_Title_DEFAULT
}

func (p *DictListReq) IsSetName() bool {
	return p.Name != DictListReq_Name_DEFAULT
}

func (p *DictListReq) IsSetPage() bool {
	return p.Page != DictListReq_Page_DEFAULT
}

func (p *DictListReq) IsSetPageSize() bool {
	return p.PageSize != DictListReq_PageSize_DEFAULT
}

func (p *DictListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DictListReq(%+v)", *p)
}

var fieldIDToName_DictListReq = map[int16]string{
	1: "title",
	2: "name",
	3: "page",
	4: "pageSize",
}

type DicthtListReq struct {
	Name         string `thrift:"name,1,optional" frugal:"1,optional,string" json:"name,omitempty"`
	DictionaryId int64  `thrift:"dictionaryId,2,optional" frugal:"2,optional,i64" json:"dictionaryId,omitempty"`
}

func NewDicthtListReq() *DicthtListReq {
	return &DicthtListReq{
		Name:         "",
		DictionaryId: 0,
	}
}

func (p *DicthtListReq) InitDefault() {
	p.Name = ""
	p.DictionaryId = 0
}

var DicthtListReq_Name_DEFAULT string = ""

func (p *DicthtListReq) GetName() (v string) {
	if !p.IsSetName() {
		return DicthtListReq_Name_DEFAULT
	}
	return p.Name
}

var DicthtListReq_DictionaryId_DEFAULT int64 = 0

func (p *DicthtListReq) GetDictionaryId() (v int64) {
	if !p.IsSetDictionaryId() {
		return DicthtListReq_DictionaryId_DEFAULT
	}
	return p.DictionaryId
}
func (p *DicthtListReq) SetName(val string) {
	p.Name = val
}
func (p *DicthtListReq) SetDictionaryId(val int64) {
	p.DictionaryId = val
}

func (p *DicthtListReq) IsSetName() bool {
	return p.Name != DicthtListReq_Name_DEFAULT
}

func (p *DicthtListReq) IsSetDictionaryId() bool {
	return p.DictionaryId != DicthtListReq_DictionaryId_DEFAULT
}

func (p *DicthtListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DicthtListReq(%+v)", *p)
}

var fieldIDToName_DicthtListReq = map[int16]string{
	1: "name",
	2: "dictionaryId",
}

type DictResp struct {
	Data     *Dict          `thrift:"data,1,optional" frugal:"1,optional,Dict" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewDictResp() *DictResp {
	return &DictResp{
		Data:     &Dict{},
		BaseResp: &base.BaseResp{},
	}
}

func (p *DictResp) InitDefault() {
	p.Data = &Dict{}
	p.BaseResp = &base.BaseResp{}
}

var DictResp_Data_DEFAULT *Dict = &Dict{}

func (p *DictResp) GetData() (v *Dict) {
	if !p.IsSetData() {
		return DictResp_Data_DEFAULT
	}
	return p.Data
}

var DictResp_BaseResp_DEFAULT *base.BaseResp = &base.BaseResp{}

func (p *DictResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return DictResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DictResp) SetData(val *Dict) {
	p.Data = val
}
func (p *DictResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *DictResp) IsSetData() bool {
	return p.Data != nil
}

func (p *DictResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DictResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DictResp(%+v)", *p)
}

var fieldIDToName_DictResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type DicthtResp struct {
	Data     *Dictht        `thrift:"data,1,optional" frugal:"1,optional,Dictht" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewDicthtResp() *DicthtResp {
	return &DicthtResp{
		Data:     &Dictht{},
		BaseResp: &base.BaseResp{},
	}
}

func (p *DicthtResp) InitDefault() {
	p.Data = &Dictht{}
	p.BaseResp = &base.BaseResp{}
}

var DicthtResp_Data_DEFAULT *Dictht = &Dictht{}

func (p *DicthtResp) GetData() (v *Dictht) {
	if !p.IsSetData() {
		return DicthtResp_Data_DEFAULT
	}
	return p.Data
}

var DicthtResp_BaseResp_DEFAULT *base.BaseResp = &base.BaseResp{}

func (p *DicthtResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return DicthtResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DicthtResp) SetData(val *Dictht) {
	p.Data = val
}
func (p *DicthtResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *DicthtResp) IsSetData() bool {
	return p.Data != nil
}

func (p *DicthtResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DicthtResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DicthtResp(%+v)", *p)
}

var fieldIDToName_DicthtResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type DictListResp struct {
	Data     []*Dict        `thrift:"data,1,optional" frugal:"1,optional,list<Dict>" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewDictListResp() *DictListResp {
	return &DictListResp{
		Data:     []*Dict{},
		BaseResp: &base.BaseResp{},
	}
}

func (p *DictListResp) InitDefault() {
	p.Data = []*Dict{}
	p.BaseResp = &base.BaseResp{}
}

var DictListResp_Data_DEFAULT []*Dict = []*Dict{}

func (p *DictListResp) GetData() (v []*Dict) {
	if !p.IsSetData() {
		return DictListResp_Data_DEFAULT
	}
	return p.Data
}

var DictListResp_BaseResp_DEFAULT *base.BaseResp = &base.BaseResp{}

func (p *DictListResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return DictListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DictListResp) SetData(val []*Dict) {
	p.Data = val
}
func (p *DictListResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *DictListResp) IsSetData() bool {
	return p.Data != nil
}

func (p *DictListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DictListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DictListResp(%+v)", *p)
}

var fieldIDToName_DictListResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type DicthtListResp struct {
	Data     []*Dictht      `thrift:"data,1,optional" frugal:"1,optional,list<Dictht>" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewDicthtListResp() *DicthtListResp {
	return &DicthtListResp{
		Data:     []*Dictht{},
		BaseResp: &base.BaseResp{},
	}
}

func (p *DicthtListResp) InitDefault() {
	p.Data = []*Dictht{}
	p.BaseResp = &base.BaseResp{}
}

var DicthtListResp_Data_DEFAULT []*Dictht = []*Dictht{}

func (p *DicthtListResp) GetData() (v []*Dictht) {
	if !p.IsSetData() {
		return DicthtListResp_Data_DEFAULT
	}
	return p.Data
}

var DicthtListResp_BaseResp_DEFAULT *base.BaseResp = &base.BaseResp{}

func (p *DicthtListResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return DicthtListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DicthtListResp) SetData(val []*Dictht) {
	p.Data = val
}
func (p *DicthtListResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *DicthtListResp) IsSetData() bool {
	return p.Data != nil
}

func (p *DicthtListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DicthtListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DicthtListResp(%+v)", *p)
}

var fieldIDToName_DicthtListResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type LogListReq struct {
	Page       int64  `thrift:"page,1,optional" frugal:"1,optional,i64" json:"page,omitempty"`
	PageSize   int64  `thrift:"pageSize,2,optional" frugal:"2,optional,i64" json:"pageSize,omitempty"`
	Type       string `thrift:"type,3,optional" frugal:"3,optional,string" json:"type,omitempty"`
	Method     string `thrift:"method,4,optional" frugal:"4,optional,string" json:"method,omitempty"`
	Api        string `thrift:"api,5,optional" frugal:"5,optional,string" json:"api,omitempty"`
	Success    bool   `thrift:"success,6,optional" frugal:"6,optional,bool" json:"success,omitempty"`
	Operatorsr string `thrift:"operatorsr,7,optional" frugal:"7,optional,string" json:"operatorsr,omitempty"`
	Identity   int64  `thrift:"identity,8,optional" frugal:"8,optional,i64" json:"identity,omitempty"`
}

func NewLogListReq() *LogListReq {
	return &LogListReq{
		Page:       0,
		PageSize:   0,
		Type:       "",
		Method:     "",
		Api:        "",
		Success:    true,
		Operatorsr: "",
		Identity:   0,
	}
}

func (p *LogListReq) InitDefault() {
	p.Page = 0
	p.PageSize = 0
	p.Type = ""
	p.Method = ""
	p.Api = ""
	p.Success = true
	p.Operatorsr = ""
	p.Identity = 0
}

var LogListReq_Page_DEFAULT int64 = 0

func (p *LogListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return LogListReq_Page_DEFAULT
	}
	return p.Page
}

var LogListReq_PageSize_DEFAULT int64 = 0

func (p *LogListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return LogListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var LogListReq_Type_DEFAULT string = ""

func (p *LogListReq) GetType() (v string) {
	if !p.IsSetType() {
		return LogListReq_Type_DEFAULT
	}
	return p.Type
}

var LogListReq_Method_DEFAULT string = ""

func (p *LogListReq) GetMethod() (v string) {
	if !p.IsSetMethod() {
		return LogListReq_Method_DEFAULT
	}
	return p.Method
}

var LogListReq_Api_DEFAULT string = ""

func (p *LogListReq) GetApi() (v string) {
	if !p.IsSetApi() {
		return LogListReq_Api_DEFAULT
	}
	return p.Api
}

var LogListReq_Success_DEFAULT bool = true

func (p *LogListReq) GetSuccess() (v bool) {
	if !p.IsSetSuccess() {
		return LogListReq_Success_DEFAULT
	}
	return p.Success
}

var LogListReq_Operatorsr_DEFAULT string = ""

func (p *LogListReq) GetOperatorsr() (v string) {
	if !p.IsSetOperatorsr() {
		return LogListReq_Operatorsr_DEFAULT
	}
	return p.Operatorsr
}

var LogListReq_Identity_DEFAULT int64 = 0

func (p *LogListReq) GetIdentity() (v int64) {
	if !p.IsSetIdentity() {
		return LogListReq_Identity_DEFAULT
	}
	return p.Identity
}
func (p *LogListReq) SetPage(val int64) {
	p.Page = val
}
func (p *LogListReq) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *LogListReq) SetType(val string) {
	p.Type = val
}
func (p *LogListReq) SetMethod(val string) {
	p.Method = val
}
func (p *LogListReq) SetApi(val string) {
	p.Api = val
}
func (p *LogListReq) SetSuccess(val bool) {
	p.Success = val
}
func (p *LogListReq) SetOperatorsr(val string) {
	p.Operatorsr = val
}
func (p *LogListReq) SetIdentity(val int64) {
	p.Identity = val
}

func (p *LogListReq) IsSetPage() bool {
	return p.Page != LogListReq_Page_DEFAULT
}

func (p *LogListReq) IsSetPageSize() bool {
	return p.PageSize != LogListReq_PageSize_DEFAULT
}

func (p *LogListReq) IsSetType() bool {
	return p.Type != LogListReq_Type_DEFAULT
}

func (p *LogListReq) IsSetMethod() bool {
	return p.Method != LogListReq_Method_DEFAULT
}

func (p *LogListReq) IsSetApi() bool {
	return p.Api != LogListReq_Api_DEFAULT
}

func (p *LogListReq) IsSetSuccess() bool {
	return p.Success != LogListReq_Success_DEFAULT
}

func (p *LogListReq) IsSetOperatorsr() bool {
	return p.Operatorsr != LogListReq_Operatorsr_DEFAULT
}

func (p *LogListReq) IsSetIdentity() bool {
	return p.Identity != LogListReq_Identity_DEFAULT
}

func (p *LogListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogListReq(%+v)", *p)
}

var fieldIDToName_LogListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "type",
	4: "method",
	5: "api",
	6: "success",
	7: "operatorsr",
	8: "identity",
}

type Log struct {
	Type        string `thrift:"type,1,optional" frugal:"1,optional,string" json:"type,omitempty"`
	Method      string `thrift:"method,2,optional" frugal:"2,optional,string" json:"method,omitempty"`
	Api         string `thrift:"api,3,optional" frugal:"3,optional,string" json:"api,omitempty"`
	Success     bool   `thrift:"success,4,optional" frugal:"4,optional,bool" json:"success,omitempty"`
	ReqContent  string `thrift:"reqContent,5,optional" frugal:"5,optional,string" json:"reqContent,omitempty"`
	RespContent string `thrift:"respContent,6,optional" frugal:"6,optional,string" json:"respContent,omitempty"`
	Ip          string `thrift:"ip,7,optional" frugal:"7,optional,string" json:"ip,omitempty"`
	UserAgent   string `thrift:"userAgent,8,optional" frugal:"8,optional,string" json:"userAgent,omitempty"`
	Operatorsr  string `thrift:"operatorsr,9,optional" frugal:"9,optional,string" json:"operatorsr,omitempty"`
	Time        int64  `thrift:"time,10,optional" frugal:"10,optional,i64" json:"time,omitempty"`
	CreatedAt   string `thrift:"createdAt,11,optional" frugal:"11,optional,string" json:"createdAt,omitempty"`
	UpdatedAt   string `thrift:"updatedAt,12,optional" frugal:"12,optional,string" json:"updatedAt,omitempty"`
	Identity    int64  `thrift:"identity,13,optional" frugal:"13,optional,i64" json:"identity,omitempty"`
	Id          int64  `thrift:"id,251,optional" frugal:"251,optional,i64" json:"id,omitempty"`
}

func NewLog() *Log {
	return &Log{
		Type:        "",
		Method:      "",
		Api:         "",
		Success:     true,
		ReqContent:  "",
		RespContent: "",
		Ip:          "",
		UserAgent:   "",
		Operatorsr:  "",
		Time:        0,
		CreatedAt:   "",
		UpdatedAt:   "",
		Identity:    0,
		Id:          0,
	}
}

func (p *Log) InitDefault() {
	p.Type = ""
	p.Method = ""
	p.Api = ""
	p.Success = true
	p.ReqContent = ""
	p.RespContent = ""
	p.Ip = ""
	p.UserAgent = ""
	p.Operatorsr = ""
	p.Time = 0
	p.CreatedAt = ""
	p.UpdatedAt = ""
	p.Identity = 0
	p.Id = 0
}

var Log_Type_DEFAULT string = ""

func (p *Log) GetType() (v string) {
	if !p.IsSetType() {
		return Log_Type_DEFAULT
	}
	return p.Type
}

var Log_Method_DEFAULT string = ""

func (p *Log) GetMethod() (v string) {
	if !p.IsSetMethod() {
		return Log_Method_DEFAULT
	}
	return p.Method
}

var Log_Api_DEFAULT string = ""

func (p *Log) GetApi() (v string) {
	if !p.IsSetApi() {
		return Log_Api_DEFAULT
	}
	return p.Api
}

var Log_Success_DEFAULT bool = true

func (p *Log) GetSuccess() (v bool) {
	if !p.IsSetSuccess() {
		return Log_Success_DEFAULT
	}
	return p.Success
}

var Log_ReqContent_DEFAULT string = ""

func (p *Log) GetReqContent() (v string) {
	if !p.IsSetReqContent() {
		return Log_ReqContent_DEFAULT
	}
	return p.ReqContent
}

var Log_RespContent_DEFAULT string = ""

func (p *Log) GetRespContent() (v string) {
	if !p.IsSetRespContent() {
		return Log_RespContent_DEFAULT
	}
	return p.RespContent
}

var Log_Ip_DEFAULT string = ""

func (p *Log) GetIp() (v string) {
	if !p.IsSetIp() {
		return Log_Ip_DEFAULT
	}
	return p.Ip
}

var Log_UserAgent_DEFAULT string = ""

func (p *Log) GetUserAgent() (v string) {
	if !p.IsSetUserAgent() {
		return Log_UserAgent_DEFAULT
	}
	return p.UserAgent
}

var Log_Operatorsr_DEFAULT string = ""

func (p *Log) GetOperatorsr() (v string) {
	if !p.IsSetOperatorsr() {
		return Log_Operatorsr_DEFAULT
	}
	return p.Operatorsr
}

var Log_Time_DEFAULT int64 = 0

func (p *Log) GetTime() (v int64) {
	if !p.IsSetTime() {
		return Log_Time_DEFAULT
	}
	return p.Time
}

var Log_CreatedAt_DEFAULT string = ""

func (p *Log) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return Log_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var Log_UpdatedAt_DEFAULT string = ""

func (p *Log) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return Log_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var Log_Identity_DEFAULT int64 = 0

func (p *Log) GetIdentity() (v int64) {
	if !p.IsSetIdentity() {
		return Log_Identity_DEFAULT
	}
	return p.Identity
}

var Log_Id_DEFAULT int64 = 0

func (p *Log) GetId() (v int64) {
	if !p.IsSetId() {
		return Log_Id_DEFAULT
	}
	return p.Id
}
func (p *Log) SetType(val string) {
	p.Type = val
}
func (p *Log) SetMethod(val string) {
	p.Method = val
}
func (p *Log) SetApi(val string) {
	p.Api = val
}
func (p *Log) SetSuccess(val bool) {
	p.Success = val
}
func (p *Log) SetReqContent(val string) {
	p.ReqContent = val
}
func (p *Log) SetRespContent(val string) {
	p.RespContent = val
}
func (p *Log) SetIp(val string) {
	p.Ip = val
}
func (p *Log) SetUserAgent(val string) {
	p.UserAgent = val
}
func (p *Log) SetOperatorsr(val string) {
	p.Operatorsr = val
}
func (p *Log) SetTime(val int64) {
	p.Time = val
}
func (p *Log) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *Log) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *Log) SetIdentity(val int64) {
	p.Identity = val
}
func (p *Log) SetId(val int64) {
	p.Id = val
}

func (p *Log) IsSetType() bool {
	return p.Type != Log_Type_DEFAULT
}

func (p *Log) IsSetMethod() bool {
	return p.Method != Log_Method_DEFAULT
}

func (p *Log) IsSetApi() bool {
	return p.Api != Log_Api_DEFAULT
}

func (p *Log) IsSetSuccess() bool {
	return p.Success != Log_Success_DEFAULT
}

func (p *Log) IsSetReqContent() bool {
	return p.ReqContent != Log_ReqContent_DEFAULT
}

func (p *Log) IsSetRespContent() bool {
	return p.RespContent != Log_RespContent_DEFAULT
}

func (p *Log) IsSetIp() bool {
	return p.Ip != Log_Ip_DEFAULT
}

func (p *Log) IsSetUserAgent() bool {
	return p.UserAgent != Log_UserAgent_DEFAULT
}

func (p *Log) IsSetOperatorsr() bool {
	return p.Operatorsr != Log_Operatorsr_DEFAULT
}

func (p *Log) IsSetTime() bool {
	return p.Time != Log_Time_DEFAULT
}

func (p *Log) IsSetCreatedAt() bool {
	return p.CreatedAt != Log_CreatedAt_DEFAULT
}

func (p *Log) IsSetUpdatedAt() bool {
	return p.UpdatedAt != Log_UpdatedAt_DEFAULT
}

func (p *Log) IsSetIdentity() bool {
	return p.Identity != Log_Identity_DEFAULT
}

func (p *Log) IsSetId() bool {
	return p.Id != Log_Id_DEFAULT
}

func (p *Log) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Log(%+v)", *p)
}

var fieldIDToName_Log = map[int16]string{
	1:   "type",
	2:   "method",
	3:   "api",
	4:   "success",
	5:   "reqContent",
	6:   "respContent",
	7:   "ip",
	8:   "userAgent",
	9:   "operatorsr",
	10:  "time",
	11:  "createdAt",
	12:  "updatedAt",
	13:  "identity",
	251: "id",
}

type DeleteLogReq struct {
	StartAt string `thrift:"startAt,1,optional" frugal:"1,optional,string" json:"startAt,omitempty"`
	EndAt   string `thrift:"endAt,2,optional" frugal:"2,optional,string" json:"endAt,omitempty"`
}

func NewDeleteLogReq() *DeleteLogReq {
	return &DeleteLogReq{
		StartAt: "",
		EndAt:   "",
	}
}

func (p *DeleteLogReq) InitDefault() {
	p.StartAt = ""
	p.EndAt = ""
}

var DeleteLogReq_StartAt_DEFAULT string = ""

func (p *DeleteLogReq) GetStartAt() (v string) {
	if !p.IsSetStartAt() {
		return DeleteLogReq_StartAt_DEFAULT
	}
	return p.StartAt
}

var DeleteLogReq_EndAt_DEFAULT string = ""

func (p *DeleteLogReq) GetEndAt() (v string) {
	if !p.IsSetEndAt() {
		return DeleteLogReq_EndAt_DEFAULT
	}
	return p.EndAt
}
func (p *DeleteLogReq) SetStartAt(val string) {
	p.StartAt = val
}
func (p *DeleteLogReq) SetEndAt(val string) {
	p.EndAt = val
}

func (p *DeleteLogReq) IsSetStartAt() bool {
	return p.StartAt != DeleteLogReq_StartAt_DEFAULT
}

func (p *DeleteLogReq) IsSetEndAt() bool {
	return p.EndAt != DeleteLogReq_EndAt_DEFAULT
}

func (p *DeleteLogReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteLogReq(%+v)", *p)
}

var fieldIDToName_DeleteLogReq = map[int16]string{
	1: "startAt",
	2: "endAt",
}

type LogListResp struct {
	Data     []*Log         `thrift:"data,1,optional" frugal:"1,optional,list<Log>" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewLogListResp() *LogListResp {
	return &LogListResp{
		Data:     []*Log{},
		BaseResp: &base.BaseResp{},
	}
}

func (p *LogListResp) InitDefault() {
	p.Data = []*Log{}
	p.BaseResp = &base.BaseResp{}
}

var LogListResp_Data_DEFAULT []*Log = []*Log{}

func (p *LogListResp) GetData() (v []*Log) {
	if !p.IsSetData() {
		return LogListResp_Data_DEFAULT
	}
	return p.Data
}

var LogListResp_BaseResp_DEFAULT *base.BaseResp = &base.BaseResp{}

func (p *LogListResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return LogListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *LogListResp) SetData(val []*Log) {
	p.Data = val
}
func (p *LogListResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *LogListResp) IsSetData() bool {
	return p.Data != nil
}

func (p *LogListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *LogListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogListResp(%+v)", *p)
}

var fieldIDToName_LogListResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type VerifyRoleAuthReq struct {
	Obj    string `thrift:"obj,1,optional" frugal:"1,optional,string" json:"obj,omitempty"`
	Act    string `thrift:"act,2,optional" frugal:"2,optional,string" json:"act,omitempty"`
	RoleId int64  `thrift:"roleId,3,optional" frugal:"3,optional,i64" json:"roleId,omitempty"`
}

func NewVerifyRoleAuthReq() *VerifyRoleAuthReq {
	return &VerifyRoleAuthReq{
		Obj:    "",
		Act:    "",
		RoleId: 0,
	}
}

func (p *VerifyRoleAuthReq) InitDefault() {
	p.Obj = ""
	p.Act = ""
	p.RoleId = 0
}

var VerifyRoleAuthReq_Obj_DEFAULT string = ""

func (p *VerifyRoleAuthReq) GetObj() (v string) {
	if !p.IsSetObj() {
		return VerifyRoleAuthReq_Obj_DEFAULT
	}
	return p.Obj
}

var VerifyRoleAuthReq_Act_DEFAULT string = ""

func (p *VerifyRoleAuthReq) GetAct() (v string) {
	if !p.IsSetAct() {
		return VerifyRoleAuthReq_Act_DEFAULT
	}
	return p.Act
}

var VerifyRoleAuthReq_RoleId_DEFAULT int64 = 0

func (p *VerifyRoleAuthReq) GetRoleId() (v int64) {
	if !p.IsSetRoleId() {
		return VerifyRoleAuthReq_RoleId_DEFAULT
	}
	return p.RoleId
}
func (p *VerifyRoleAuthReq) SetObj(val string) {
	p.Obj = val
}
func (p *VerifyRoleAuthReq) SetAct(val string) {
	p.Act = val
}
func (p *VerifyRoleAuthReq) SetRoleId(val int64) {
	p.RoleId = val
}

func (p *VerifyRoleAuthReq) IsSetObj() bool {
	return p.Obj != VerifyRoleAuthReq_Obj_DEFAULT
}

func (p *VerifyRoleAuthReq) IsSetAct() bool {
	return p.Act != VerifyRoleAuthReq_Act_DEFAULT
}

func (p *VerifyRoleAuthReq) IsSetRoleId() bool {
	return p.RoleId != VerifyRoleAuthReq_RoleId_DEFAULT
}

func (p *VerifyRoleAuthReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyRoleAuthReq(%+v)", *p)
}

var fieldIDToName_VerifyRoleAuthReq = map[int16]string{
	1: "obj",
	2: "act",
	3: "roleId",
}

type VerifyRoleAuthResp struct {
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewVerifyRoleAuthResp() *VerifyRoleAuthResp {
	return &VerifyRoleAuthResp{
		BaseResp: &base.BaseResp{},
	}
}

func (p *VerifyRoleAuthResp) InitDefault() {
	p.BaseResp = &base.BaseResp{}
}

var VerifyRoleAuthResp_BaseResp_DEFAULT *base.BaseResp = &base.BaseResp{}

func (p *VerifyRoleAuthResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return VerifyRoleAuthResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *VerifyRoleAuthResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *VerifyRoleAuthResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *VerifyRoleAuthResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyRoleAuthResp(%+v)", *p)
}

var fieldIDToName_VerifyRoleAuthResp = map[int16]string{
	255: "baseResp",
}

type SystemService interface {
	CreateApi(ctx context.Context, req *CreateApiReq) (r *ApiResp, err error)

	UpdateApi(ctx context.Context, req *UpdateApiReq) (r *ApiResp, err error)

	DeleteApi(ctx context.Context, req *base.IdReq) (r *base.NilResponse, err error)

	ApiList(ctx context.Context, req *ApiListReq) (r *ApiListResp, err error)

	ApiTree(ctx context.Context, req *ApiListReq) (r *ApiListResp, err error)

	CreateMenu(ctx context.Context, req *CreateMenuReq) (r *MenuResp, err error)

	UpdateMenu(ctx context.Context, req *UpdateMenuReq) (r *MenuResp, err error)

	DeleteMenu(ctx context.Context, req *base.IdReq) (r *base.NilResponse, err error)

	GetMenu(ctx context.Context, req *base.IdReq) (r *MenuResp, err error)

	MenuList(ctx context.Context, req *MenuListReq) (r *MenuListResp, err error)

	MenuTree(ctx context.Context, req *MenuListReq) (r *MenuListResp, err error)

	CreateRole(ctx context.Context, req *CreateRoleReq) (r *RoleResp, err error)

	GetRole(ctx context.Context, req *base.IdReq) (r *RoleResp, err error)

	GetRoleList(ctx context.Context, req *GetRoleListReq) (r *RoleListResp, err error)

	UpdateRole(ctx context.Context, req *UpdateRoleReq) (r *RoleResp, err error)

	DeleteRole(ctx context.Context, req *base.IdReq) (r *base.NilResponse, err error)

	CreateRoleMenu(ctx context.Context, req *CreateMenuAuthReq) (r *base.NilResponse, err error)

	CreateRoleApi(ctx context.Context, req *CreateMenuAuthReq) (r *base.NilResponse, err error)

	GetRoleApi(ctx context.Context, req *base.IdReq) (r *ApiListResp, err error)

	GetRoleMenu(ctx context.Context, req *base.IdReq) (r *MenuListResp, err error)

	CreateDict(ctx context.Context, req *Dict) (r *DictResp, err error)

	UpdateDict(ctx context.Context, req *Dict) (r *DictResp, err error)

	DeleteDict(ctx context.Context, req *base.IdReq) (r *base.NilResponse, err error)

	DictList(ctx context.Context, req *DictListReq) (r *DictListResp, err error)

	CreateDictht(ctx context.Context, req *Dictht) (r *DictResp, err error)

	UpdateDictht(ctx context.Context, req *Dictht) (r *DictResp, err error)

	DeleteDictht(ctx context.Context, req *base.IdReq) (r *base.NilResponse, err error)

	DicthtList(ctx context.Context, req *DicthtListReq) (r *DicthtListResp, err error)

	LogList(ctx context.Context, req *LogListReq) (r *LogListResp, err error)

	DeleteLog(ctx context.Context, req *DeleteLogReq) (r *base.NilResponse, err error)

	VerifyRoleAuth(ctx context.Context, req *VerifyRoleAuthReq) (r *VerifyRoleAuthResp, err error)
}

type SystemServiceCreateApiArgs struct {
	Req *CreateApiReq `thrift:"req,1" frugal:"1,default,CreateApiReq" json:"req"`
}

func NewSystemServiceCreateApiArgs() *SystemServiceCreateApiArgs {
	return &SystemServiceCreateApiArgs{}
}

func (p *SystemServiceCreateApiArgs) InitDefault() {
}

var SystemServiceCreateApiArgs_Req_DEFAULT *CreateApiReq

func (p *SystemServiceCreateApiArgs) GetReq() (v *CreateApiReq) {
	if !p.IsSetReq() {
		return SystemServiceCreateApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceCreateApiArgs) SetReq(val *CreateApiReq) {
	p.Req = val
}

func (p *SystemServiceCreateApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceCreateApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceCreateApiArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceCreateApiArgs = map[int16]string{
	1: "req",
}

type SystemServiceCreateApiResult struct {
	Success *ApiResp `thrift:"success,0,optional" frugal:"0,optional,ApiResp" json:"success,omitempty"`
}

func NewSystemServiceCreateApiResult() *SystemServiceCreateApiResult {
	return &SystemServiceCreateApiResult{}
}

func (p *SystemServiceCreateApiResult) InitDefault() {
}

var SystemServiceCreateApiResult_Success_DEFAULT *ApiResp

func (p *SystemServiceCreateApiResult) GetSuccess() (v *ApiResp) {
	if !p.IsSetSuccess() {
		return SystemServiceCreateApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceCreateApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*ApiResp)
}

func (p *SystemServiceCreateApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceCreateApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceCreateApiResult(%+v)", *p)
}

var fieldIDToName_SystemServiceCreateApiResult = map[int16]string{
	0: "success",
}

type SystemServiceUpdateApiArgs struct {
	Req *UpdateApiReq `thrift:"req,1" frugal:"1,default,UpdateApiReq" json:"req"`
}

func NewSystemServiceUpdateApiArgs() *SystemServiceUpdateApiArgs {
	return &SystemServiceUpdateApiArgs{}
}

func (p *SystemServiceUpdateApiArgs) InitDefault() {
}

var SystemServiceUpdateApiArgs_Req_DEFAULT *UpdateApiReq

func (p *SystemServiceUpdateApiArgs) GetReq() (v *UpdateApiReq) {
	if !p.IsSetReq() {
		return SystemServiceUpdateApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceUpdateApiArgs) SetReq(val *UpdateApiReq) {
	p.Req = val
}

func (p *SystemServiceUpdateApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceUpdateApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceUpdateApiArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceUpdateApiArgs = map[int16]string{
	1: "req",
}

type SystemServiceUpdateApiResult struct {
	Success *ApiResp `thrift:"success,0,optional" frugal:"0,optional,ApiResp" json:"success,omitempty"`
}

func NewSystemServiceUpdateApiResult() *SystemServiceUpdateApiResult {
	return &SystemServiceUpdateApiResult{}
}

func (p *SystemServiceUpdateApiResult) InitDefault() {
}

var SystemServiceUpdateApiResult_Success_DEFAULT *ApiResp

func (p *SystemServiceUpdateApiResult) GetSuccess() (v *ApiResp) {
	if !p.IsSetSuccess() {
		return SystemServiceUpdateApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceUpdateApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*ApiResp)
}

func (p *SystemServiceUpdateApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceUpdateApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceUpdateApiResult(%+v)", *p)
}

var fieldIDToName_SystemServiceUpdateApiResult = map[int16]string{
	0: "success",
}

type SystemServiceDeleteApiArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewSystemServiceDeleteApiArgs() *SystemServiceDeleteApiArgs {
	return &SystemServiceDeleteApiArgs{}
}

func (p *SystemServiceDeleteApiArgs) InitDefault() {
}

var SystemServiceDeleteApiArgs_Req_DEFAULT *base.IdReq

func (p *SystemServiceDeleteApiArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return SystemServiceDeleteApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceDeleteApiArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *SystemServiceDeleteApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceDeleteApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDeleteApiArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceDeleteApiArgs = map[int16]string{
	1: "req",
}

type SystemServiceDeleteApiResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewSystemServiceDeleteApiResult() *SystemServiceDeleteApiResult {
	return &SystemServiceDeleteApiResult{}
}

func (p *SystemServiceDeleteApiResult) InitDefault() {
}

var SystemServiceDeleteApiResult_Success_DEFAULT *base.NilResponse

func (p *SystemServiceDeleteApiResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return SystemServiceDeleteApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceDeleteApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

func (p *SystemServiceDeleteApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceDeleteApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDeleteApiResult(%+v)", *p)
}

var fieldIDToName_SystemServiceDeleteApiResult = map[int16]string{
	0: "success",
}

type SystemServiceApiListArgs struct {
	Req *ApiListReq `thrift:"req,1" frugal:"1,default,ApiListReq" json:"req"`
}

func NewSystemServiceApiListArgs() *SystemServiceApiListArgs {
	return &SystemServiceApiListArgs{}
}

func (p *SystemServiceApiListArgs) InitDefault() {
}

var SystemServiceApiListArgs_Req_DEFAULT *ApiListReq

func (p *SystemServiceApiListArgs) GetReq() (v *ApiListReq) {
	if !p.IsSetReq() {
		return SystemServiceApiListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceApiListArgs) SetReq(val *ApiListReq) {
	p.Req = val
}

func (p *SystemServiceApiListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceApiListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceApiListArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceApiListArgs = map[int16]string{
	1: "req",
}

type SystemServiceApiListResult struct {
	Success *ApiListResp `thrift:"success,0,optional" frugal:"0,optional,ApiListResp" json:"success,omitempty"`
}

func NewSystemServiceApiListResult() *SystemServiceApiListResult {
	return &SystemServiceApiListResult{}
}

func (p *SystemServiceApiListResult) InitDefault() {
}

var SystemServiceApiListResult_Success_DEFAULT *ApiListResp

func (p *SystemServiceApiListResult) GetSuccess() (v *ApiListResp) {
	if !p.IsSetSuccess() {
		return SystemServiceApiListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceApiListResult) SetSuccess(x interface{}) {
	p.Success = x.(*ApiListResp)
}

func (p *SystemServiceApiListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceApiListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceApiListResult(%+v)", *p)
}

var fieldIDToName_SystemServiceApiListResult = map[int16]string{
	0: "success",
}

type SystemServiceApiTreeArgs struct {
	Req *ApiListReq `thrift:"req,1" frugal:"1,default,ApiListReq" json:"req"`
}

func NewSystemServiceApiTreeArgs() *SystemServiceApiTreeArgs {
	return &SystemServiceApiTreeArgs{}
}

func (p *SystemServiceApiTreeArgs) InitDefault() {
}

var SystemServiceApiTreeArgs_Req_DEFAULT *ApiListReq

func (p *SystemServiceApiTreeArgs) GetReq() (v *ApiListReq) {
	if !p.IsSetReq() {
		return SystemServiceApiTreeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceApiTreeArgs) SetReq(val *ApiListReq) {
	p.Req = val
}

func (p *SystemServiceApiTreeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceApiTreeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceApiTreeArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceApiTreeArgs = map[int16]string{
	1: "req",
}

type SystemServiceApiTreeResult struct {
	Success *ApiListResp `thrift:"success,0,optional" frugal:"0,optional,ApiListResp" json:"success,omitempty"`
}

func NewSystemServiceApiTreeResult() *SystemServiceApiTreeResult {
	return &SystemServiceApiTreeResult{}
}

func (p *SystemServiceApiTreeResult) InitDefault() {
}

var SystemServiceApiTreeResult_Success_DEFAULT *ApiListResp

func (p *SystemServiceApiTreeResult) GetSuccess() (v *ApiListResp) {
	if !p.IsSetSuccess() {
		return SystemServiceApiTreeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceApiTreeResult) SetSuccess(x interface{}) {
	p.Success = x.(*ApiListResp)
}

func (p *SystemServiceApiTreeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceApiTreeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceApiTreeResult(%+v)", *p)
}

var fieldIDToName_SystemServiceApiTreeResult = map[int16]string{
	0: "success",
}

type SystemServiceCreateMenuArgs struct {
	Req *CreateMenuReq `thrift:"req,1" frugal:"1,default,CreateMenuReq" json:"req"`
}

func NewSystemServiceCreateMenuArgs() *SystemServiceCreateMenuArgs {
	return &SystemServiceCreateMenuArgs{}
}

func (p *SystemServiceCreateMenuArgs) InitDefault() {
}

var SystemServiceCreateMenuArgs_Req_DEFAULT *CreateMenuReq

func (p *SystemServiceCreateMenuArgs) GetReq() (v *CreateMenuReq) {
	if !p.IsSetReq() {
		return SystemServiceCreateMenuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceCreateMenuArgs) SetReq(val *CreateMenuReq) {
	p.Req = val
}

func (p *SystemServiceCreateMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceCreateMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceCreateMenuArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceCreateMenuArgs = map[int16]string{
	1: "req",
}

type SystemServiceCreateMenuResult struct {
	Success *MenuResp `thrift:"success,0,optional" frugal:"0,optional,MenuResp" json:"success,omitempty"`
}

func NewSystemServiceCreateMenuResult() *SystemServiceCreateMenuResult {
	return &SystemServiceCreateMenuResult{}
}

func (p *SystemServiceCreateMenuResult) InitDefault() {
}

var SystemServiceCreateMenuResult_Success_DEFAULT *MenuResp

func (p *SystemServiceCreateMenuResult) GetSuccess() (v *MenuResp) {
	if !p.IsSetSuccess() {
		return SystemServiceCreateMenuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceCreateMenuResult) SetSuccess(x interface{}) {
	p.Success = x.(*MenuResp)
}

func (p *SystemServiceCreateMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceCreateMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceCreateMenuResult(%+v)", *p)
}

var fieldIDToName_SystemServiceCreateMenuResult = map[int16]string{
	0: "success",
}

type SystemServiceUpdateMenuArgs struct {
	Req *UpdateMenuReq `thrift:"req,1" frugal:"1,default,UpdateMenuReq" json:"req"`
}

func NewSystemServiceUpdateMenuArgs() *SystemServiceUpdateMenuArgs {
	return &SystemServiceUpdateMenuArgs{}
}

func (p *SystemServiceUpdateMenuArgs) InitDefault() {
}

var SystemServiceUpdateMenuArgs_Req_DEFAULT *UpdateMenuReq

func (p *SystemServiceUpdateMenuArgs) GetReq() (v *UpdateMenuReq) {
	if !p.IsSetReq() {
		return SystemServiceUpdateMenuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceUpdateMenuArgs) SetReq(val *UpdateMenuReq) {
	p.Req = val
}

func (p *SystemServiceUpdateMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceUpdateMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceUpdateMenuArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceUpdateMenuArgs = map[int16]string{
	1: "req",
}

type SystemServiceUpdateMenuResult struct {
	Success *MenuResp `thrift:"success,0,optional" frugal:"0,optional,MenuResp" json:"success,omitempty"`
}

func NewSystemServiceUpdateMenuResult() *SystemServiceUpdateMenuResult {
	return &SystemServiceUpdateMenuResult{}
}

func (p *SystemServiceUpdateMenuResult) InitDefault() {
}

var SystemServiceUpdateMenuResult_Success_DEFAULT *MenuResp

func (p *SystemServiceUpdateMenuResult) GetSuccess() (v *MenuResp) {
	if !p.IsSetSuccess() {
		return SystemServiceUpdateMenuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceUpdateMenuResult) SetSuccess(x interface{}) {
	p.Success = x.(*MenuResp)
}

func (p *SystemServiceUpdateMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceUpdateMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceUpdateMenuResult(%+v)", *p)
}

var fieldIDToName_SystemServiceUpdateMenuResult = map[int16]string{
	0: "success",
}

type SystemServiceDeleteMenuArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewSystemServiceDeleteMenuArgs() *SystemServiceDeleteMenuArgs {
	return &SystemServiceDeleteMenuArgs{}
}

func (p *SystemServiceDeleteMenuArgs) InitDefault() {
}

var SystemServiceDeleteMenuArgs_Req_DEFAULT *base.IdReq

func (p *SystemServiceDeleteMenuArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return SystemServiceDeleteMenuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceDeleteMenuArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *SystemServiceDeleteMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceDeleteMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDeleteMenuArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceDeleteMenuArgs = map[int16]string{
	1: "req",
}

type SystemServiceDeleteMenuResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewSystemServiceDeleteMenuResult() *SystemServiceDeleteMenuResult {
	return &SystemServiceDeleteMenuResult{}
}

func (p *SystemServiceDeleteMenuResult) InitDefault() {
}

var SystemServiceDeleteMenuResult_Success_DEFAULT *base.NilResponse

func (p *SystemServiceDeleteMenuResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return SystemServiceDeleteMenuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceDeleteMenuResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

func (p *SystemServiceDeleteMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceDeleteMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDeleteMenuResult(%+v)", *p)
}

var fieldIDToName_SystemServiceDeleteMenuResult = map[int16]string{
	0: "success",
}

type SystemServiceGetMenuArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewSystemServiceGetMenuArgs() *SystemServiceGetMenuArgs {
	return &SystemServiceGetMenuArgs{}
}

func (p *SystemServiceGetMenuArgs) InitDefault() {
}

var SystemServiceGetMenuArgs_Req_DEFAULT *base.IdReq

func (p *SystemServiceGetMenuArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return SystemServiceGetMenuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceGetMenuArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *SystemServiceGetMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceGetMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceGetMenuArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceGetMenuArgs = map[int16]string{
	1: "req",
}

type SystemServiceGetMenuResult struct {
	Success *MenuResp `thrift:"success,0,optional" frugal:"0,optional,MenuResp" json:"success,omitempty"`
}

func NewSystemServiceGetMenuResult() *SystemServiceGetMenuResult {
	return &SystemServiceGetMenuResult{}
}

func (p *SystemServiceGetMenuResult) InitDefault() {
}

var SystemServiceGetMenuResult_Success_DEFAULT *MenuResp

func (p *SystemServiceGetMenuResult) GetSuccess() (v *MenuResp) {
	if !p.IsSetSuccess() {
		return SystemServiceGetMenuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceGetMenuResult) SetSuccess(x interface{}) {
	p.Success = x.(*MenuResp)
}

func (p *SystemServiceGetMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceGetMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceGetMenuResult(%+v)", *p)
}

var fieldIDToName_SystemServiceGetMenuResult = map[int16]string{
	0: "success",
}

type SystemServiceMenuListArgs struct {
	Req *MenuListReq `thrift:"req,1" frugal:"1,default,MenuListReq" json:"req"`
}

func NewSystemServiceMenuListArgs() *SystemServiceMenuListArgs {
	return &SystemServiceMenuListArgs{}
}

func (p *SystemServiceMenuListArgs) InitDefault() {
}

var SystemServiceMenuListArgs_Req_DEFAULT *MenuListReq

func (p *SystemServiceMenuListArgs) GetReq() (v *MenuListReq) {
	if !p.IsSetReq() {
		return SystemServiceMenuListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceMenuListArgs) SetReq(val *MenuListReq) {
	p.Req = val
}

func (p *SystemServiceMenuListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceMenuListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceMenuListArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceMenuListArgs = map[int16]string{
	1: "req",
}

type SystemServiceMenuListResult struct {
	Success *MenuListResp `thrift:"success,0,optional" frugal:"0,optional,MenuListResp" json:"success,omitempty"`
}

func NewSystemServiceMenuListResult() *SystemServiceMenuListResult {
	return &SystemServiceMenuListResult{}
}

func (p *SystemServiceMenuListResult) InitDefault() {
}

var SystemServiceMenuListResult_Success_DEFAULT *MenuListResp

func (p *SystemServiceMenuListResult) GetSuccess() (v *MenuListResp) {
	if !p.IsSetSuccess() {
		return SystemServiceMenuListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceMenuListResult) SetSuccess(x interface{}) {
	p.Success = x.(*MenuListResp)
}

func (p *SystemServiceMenuListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceMenuListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceMenuListResult(%+v)", *p)
}

var fieldIDToName_SystemServiceMenuListResult = map[int16]string{
	0: "success",
}

type SystemServiceMenuTreeArgs struct {
	Req *MenuListReq `thrift:"req,1" frugal:"1,default,MenuListReq" json:"req"`
}

func NewSystemServiceMenuTreeArgs() *SystemServiceMenuTreeArgs {
	return &SystemServiceMenuTreeArgs{}
}

func (p *SystemServiceMenuTreeArgs) InitDefault() {
}

var SystemServiceMenuTreeArgs_Req_DEFAULT *MenuListReq

func (p *SystemServiceMenuTreeArgs) GetReq() (v *MenuListReq) {
	if !p.IsSetReq() {
		return SystemServiceMenuTreeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceMenuTreeArgs) SetReq(val *MenuListReq) {
	p.Req = val
}

func (p *SystemServiceMenuTreeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceMenuTreeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceMenuTreeArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceMenuTreeArgs = map[int16]string{
	1: "req",
}

type SystemServiceMenuTreeResult struct {
	Success *MenuListResp `thrift:"success,0,optional" frugal:"0,optional,MenuListResp" json:"success,omitempty"`
}

func NewSystemServiceMenuTreeResult() *SystemServiceMenuTreeResult {
	return &SystemServiceMenuTreeResult{}
}

func (p *SystemServiceMenuTreeResult) InitDefault() {
}

var SystemServiceMenuTreeResult_Success_DEFAULT *MenuListResp

func (p *SystemServiceMenuTreeResult) GetSuccess() (v *MenuListResp) {
	if !p.IsSetSuccess() {
		return SystemServiceMenuTreeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceMenuTreeResult) SetSuccess(x interface{}) {
	p.Success = x.(*MenuListResp)
}

func (p *SystemServiceMenuTreeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceMenuTreeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceMenuTreeResult(%+v)", *p)
}

var fieldIDToName_SystemServiceMenuTreeResult = map[int16]string{
	0: "success",
}

type SystemServiceCreateRoleArgs struct {
	Req *CreateRoleReq `thrift:"req,1" frugal:"1,default,CreateRoleReq" json:"req"`
}

func NewSystemServiceCreateRoleArgs() *SystemServiceCreateRoleArgs {
	return &SystemServiceCreateRoleArgs{}
}

func (p *SystemServiceCreateRoleArgs) InitDefault() {
}

var SystemServiceCreateRoleArgs_Req_DEFAULT *CreateRoleReq

func (p *SystemServiceCreateRoleArgs) GetReq() (v *CreateRoleReq) {
	if !p.IsSetReq() {
		return SystemServiceCreateRoleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceCreateRoleArgs) SetReq(val *CreateRoleReq) {
	p.Req = val
}

func (p *SystemServiceCreateRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceCreateRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceCreateRoleArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceCreateRoleArgs = map[int16]string{
	1: "req",
}

type SystemServiceCreateRoleResult struct {
	Success *RoleResp `thrift:"success,0,optional" frugal:"0,optional,RoleResp" json:"success,omitempty"`
}

func NewSystemServiceCreateRoleResult() *SystemServiceCreateRoleResult {
	return &SystemServiceCreateRoleResult{}
}

func (p *SystemServiceCreateRoleResult) InitDefault() {
}

var SystemServiceCreateRoleResult_Success_DEFAULT *RoleResp

func (p *SystemServiceCreateRoleResult) GetSuccess() (v *RoleResp) {
	if !p.IsSetSuccess() {
		return SystemServiceCreateRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceCreateRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*RoleResp)
}

func (p *SystemServiceCreateRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceCreateRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceCreateRoleResult(%+v)", *p)
}

var fieldIDToName_SystemServiceCreateRoleResult = map[int16]string{
	0: "success",
}

type SystemServiceGetRoleArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewSystemServiceGetRoleArgs() *SystemServiceGetRoleArgs {
	return &SystemServiceGetRoleArgs{}
}

func (p *SystemServiceGetRoleArgs) InitDefault() {
}

var SystemServiceGetRoleArgs_Req_DEFAULT *base.IdReq

func (p *SystemServiceGetRoleArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return SystemServiceGetRoleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceGetRoleArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *SystemServiceGetRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceGetRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceGetRoleArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceGetRoleArgs = map[int16]string{
	1: "req",
}

type SystemServiceGetRoleResult struct {
	Success *RoleResp `thrift:"success,0,optional" frugal:"0,optional,RoleResp" json:"success,omitempty"`
}

func NewSystemServiceGetRoleResult() *SystemServiceGetRoleResult {
	return &SystemServiceGetRoleResult{}
}

func (p *SystemServiceGetRoleResult) InitDefault() {
}

var SystemServiceGetRoleResult_Success_DEFAULT *RoleResp

func (p *SystemServiceGetRoleResult) GetSuccess() (v *RoleResp) {
	if !p.IsSetSuccess() {
		return SystemServiceGetRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceGetRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*RoleResp)
}

func (p *SystemServiceGetRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceGetRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceGetRoleResult(%+v)", *p)
}

var fieldIDToName_SystemServiceGetRoleResult = map[int16]string{
	0: "success",
}

type SystemServiceGetRoleListArgs struct {
	Req *GetRoleListReq `thrift:"req,1" frugal:"1,default,GetRoleListReq" json:"req"`
}

func NewSystemServiceGetRoleListArgs() *SystemServiceGetRoleListArgs {
	return &SystemServiceGetRoleListArgs{}
}

func (p *SystemServiceGetRoleListArgs) InitDefault() {
}

var SystemServiceGetRoleListArgs_Req_DEFAULT *GetRoleListReq

func (p *SystemServiceGetRoleListArgs) GetReq() (v *GetRoleListReq) {
	if !p.IsSetReq() {
		return SystemServiceGetRoleListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceGetRoleListArgs) SetReq(val *GetRoleListReq) {
	p.Req = val
}

func (p *SystemServiceGetRoleListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceGetRoleListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceGetRoleListArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceGetRoleListArgs = map[int16]string{
	1: "req",
}

type SystemServiceGetRoleListResult struct {
	Success *RoleListResp `thrift:"success,0,optional" frugal:"0,optional,RoleListResp" json:"success,omitempty"`
}

func NewSystemServiceGetRoleListResult() *SystemServiceGetRoleListResult {
	return &SystemServiceGetRoleListResult{}
}

func (p *SystemServiceGetRoleListResult) InitDefault() {
}

var SystemServiceGetRoleListResult_Success_DEFAULT *RoleListResp

func (p *SystemServiceGetRoleListResult) GetSuccess() (v *RoleListResp) {
	if !p.IsSetSuccess() {
		return SystemServiceGetRoleListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceGetRoleListResult) SetSuccess(x interface{}) {
	p.Success = x.(*RoleListResp)
}

func (p *SystemServiceGetRoleListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceGetRoleListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceGetRoleListResult(%+v)", *p)
}

var fieldIDToName_SystemServiceGetRoleListResult = map[int16]string{
	0: "success",
}

type SystemServiceUpdateRoleArgs struct {
	Req *UpdateRoleReq `thrift:"req,1" frugal:"1,default,UpdateRoleReq" json:"req"`
}

func NewSystemServiceUpdateRoleArgs() *SystemServiceUpdateRoleArgs {
	return &SystemServiceUpdateRoleArgs{}
}

func (p *SystemServiceUpdateRoleArgs) InitDefault() {
}

var SystemServiceUpdateRoleArgs_Req_DEFAULT *UpdateRoleReq

func (p *SystemServiceUpdateRoleArgs) GetReq() (v *UpdateRoleReq) {
	if !p.IsSetReq() {
		return SystemServiceUpdateRoleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceUpdateRoleArgs) SetReq(val *UpdateRoleReq) {
	p.Req = val
}

func (p *SystemServiceUpdateRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceUpdateRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceUpdateRoleArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceUpdateRoleArgs = map[int16]string{
	1: "req",
}

type SystemServiceUpdateRoleResult struct {
	Success *RoleResp `thrift:"success,0,optional" frugal:"0,optional,RoleResp" json:"success,omitempty"`
}

func NewSystemServiceUpdateRoleResult() *SystemServiceUpdateRoleResult {
	return &SystemServiceUpdateRoleResult{}
}

func (p *SystemServiceUpdateRoleResult) InitDefault() {
}

var SystemServiceUpdateRoleResult_Success_DEFAULT *RoleResp

func (p *SystemServiceUpdateRoleResult) GetSuccess() (v *RoleResp) {
	if !p.IsSetSuccess() {
		return SystemServiceUpdateRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceUpdateRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*RoleResp)
}

func (p *SystemServiceUpdateRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceUpdateRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceUpdateRoleResult(%+v)", *p)
}

var fieldIDToName_SystemServiceUpdateRoleResult = map[int16]string{
	0: "success",
}

type SystemServiceDeleteRoleArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewSystemServiceDeleteRoleArgs() *SystemServiceDeleteRoleArgs {
	return &SystemServiceDeleteRoleArgs{}
}

func (p *SystemServiceDeleteRoleArgs) InitDefault() {
}

var SystemServiceDeleteRoleArgs_Req_DEFAULT *base.IdReq

func (p *SystemServiceDeleteRoleArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return SystemServiceDeleteRoleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceDeleteRoleArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *SystemServiceDeleteRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceDeleteRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDeleteRoleArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceDeleteRoleArgs = map[int16]string{
	1: "req",
}

type SystemServiceDeleteRoleResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewSystemServiceDeleteRoleResult() *SystemServiceDeleteRoleResult {
	return &SystemServiceDeleteRoleResult{}
}

func (p *SystemServiceDeleteRoleResult) InitDefault() {
}

var SystemServiceDeleteRoleResult_Success_DEFAULT *base.NilResponse

func (p *SystemServiceDeleteRoleResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return SystemServiceDeleteRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceDeleteRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

func (p *SystemServiceDeleteRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceDeleteRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDeleteRoleResult(%+v)", *p)
}

var fieldIDToName_SystemServiceDeleteRoleResult = map[int16]string{
	0: "success",
}

type SystemServiceCreateRoleMenuArgs struct {
	Req *CreateMenuAuthReq `thrift:"req,1" frugal:"1,default,CreateMenuAuthReq" json:"req"`
}

func NewSystemServiceCreateRoleMenuArgs() *SystemServiceCreateRoleMenuArgs {
	return &SystemServiceCreateRoleMenuArgs{}
}

func (p *SystemServiceCreateRoleMenuArgs) InitDefault() {
}

var SystemServiceCreateRoleMenuArgs_Req_DEFAULT *CreateMenuAuthReq

func (p *SystemServiceCreateRoleMenuArgs) GetReq() (v *CreateMenuAuthReq) {
	if !p.IsSetReq() {
		return SystemServiceCreateRoleMenuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceCreateRoleMenuArgs) SetReq(val *CreateMenuAuthReq) {
	p.Req = val
}

func (p *SystemServiceCreateRoleMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceCreateRoleMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceCreateRoleMenuArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceCreateRoleMenuArgs = map[int16]string{
	1: "req",
}

type SystemServiceCreateRoleMenuResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewSystemServiceCreateRoleMenuResult() *SystemServiceCreateRoleMenuResult {
	return &SystemServiceCreateRoleMenuResult{}
}

func (p *SystemServiceCreateRoleMenuResult) InitDefault() {
}

var SystemServiceCreateRoleMenuResult_Success_DEFAULT *base.NilResponse

func (p *SystemServiceCreateRoleMenuResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return SystemServiceCreateRoleMenuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceCreateRoleMenuResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

func (p *SystemServiceCreateRoleMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceCreateRoleMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceCreateRoleMenuResult(%+v)", *p)
}

var fieldIDToName_SystemServiceCreateRoleMenuResult = map[int16]string{
	0: "success",
}

type SystemServiceCreateRoleApiArgs struct {
	Req *CreateMenuAuthReq `thrift:"req,1" frugal:"1,default,CreateMenuAuthReq" json:"req"`
}

func NewSystemServiceCreateRoleApiArgs() *SystemServiceCreateRoleApiArgs {
	return &SystemServiceCreateRoleApiArgs{}
}

func (p *SystemServiceCreateRoleApiArgs) InitDefault() {
}

var SystemServiceCreateRoleApiArgs_Req_DEFAULT *CreateMenuAuthReq

func (p *SystemServiceCreateRoleApiArgs) GetReq() (v *CreateMenuAuthReq) {
	if !p.IsSetReq() {
		return SystemServiceCreateRoleApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceCreateRoleApiArgs) SetReq(val *CreateMenuAuthReq) {
	p.Req = val
}

func (p *SystemServiceCreateRoleApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceCreateRoleApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceCreateRoleApiArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceCreateRoleApiArgs = map[int16]string{
	1: "req",
}

type SystemServiceCreateRoleApiResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewSystemServiceCreateRoleApiResult() *SystemServiceCreateRoleApiResult {
	return &SystemServiceCreateRoleApiResult{}
}

func (p *SystemServiceCreateRoleApiResult) InitDefault() {
}

var SystemServiceCreateRoleApiResult_Success_DEFAULT *base.NilResponse

func (p *SystemServiceCreateRoleApiResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return SystemServiceCreateRoleApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceCreateRoleApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

func (p *SystemServiceCreateRoleApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceCreateRoleApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceCreateRoleApiResult(%+v)", *p)
}

var fieldIDToName_SystemServiceCreateRoleApiResult = map[int16]string{
	0: "success",
}

type SystemServiceGetRoleApiArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewSystemServiceGetRoleApiArgs() *SystemServiceGetRoleApiArgs {
	return &SystemServiceGetRoleApiArgs{}
}

func (p *SystemServiceGetRoleApiArgs) InitDefault() {
}

var SystemServiceGetRoleApiArgs_Req_DEFAULT *base.IdReq

func (p *SystemServiceGetRoleApiArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return SystemServiceGetRoleApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceGetRoleApiArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *SystemServiceGetRoleApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceGetRoleApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceGetRoleApiArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceGetRoleApiArgs = map[int16]string{
	1: "req",
}

type SystemServiceGetRoleApiResult struct {
	Success *ApiListResp `thrift:"success,0,optional" frugal:"0,optional,ApiListResp" json:"success,omitempty"`
}

func NewSystemServiceGetRoleApiResult() *SystemServiceGetRoleApiResult {
	return &SystemServiceGetRoleApiResult{}
}

func (p *SystemServiceGetRoleApiResult) InitDefault() {
}

var SystemServiceGetRoleApiResult_Success_DEFAULT *ApiListResp

func (p *SystemServiceGetRoleApiResult) GetSuccess() (v *ApiListResp) {
	if !p.IsSetSuccess() {
		return SystemServiceGetRoleApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceGetRoleApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*ApiListResp)
}

func (p *SystemServiceGetRoleApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceGetRoleApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceGetRoleApiResult(%+v)", *p)
}

var fieldIDToName_SystemServiceGetRoleApiResult = map[int16]string{
	0: "success",
}

type SystemServiceGetRoleMenuArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewSystemServiceGetRoleMenuArgs() *SystemServiceGetRoleMenuArgs {
	return &SystemServiceGetRoleMenuArgs{}
}

func (p *SystemServiceGetRoleMenuArgs) InitDefault() {
}

var SystemServiceGetRoleMenuArgs_Req_DEFAULT *base.IdReq

func (p *SystemServiceGetRoleMenuArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return SystemServiceGetRoleMenuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceGetRoleMenuArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *SystemServiceGetRoleMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceGetRoleMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceGetRoleMenuArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceGetRoleMenuArgs = map[int16]string{
	1: "req",
}

type SystemServiceGetRoleMenuResult struct {
	Success *MenuListResp `thrift:"success,0,optional" frugal:"0,optional,MenuListResp" json:"success,omitempty"`
}

func NewSystemServiceGetRoleMenuResult() *SystemServiceGetRoleMenuResult {
	return &SystemServiceGetRoleMenuResult{}
}

func (p *SystemServiceGetRoleMenuResult) InitDefault() {
}

var SystemServiceGetRoleMenuResult_Success_DEFAULT *MenuListResp

func (p *SystemServiceGetRoleMenuResult) GetSuccess() (v *MenuListResp) {
	if !p.IsSetSuccess() {
		return SystemServiceGetRoleMenuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceGetRoleMenuResult) SetSuccess(x interface{}) {
	p.Success = x.(*MenuListResp)
}

func (p *SystemServiceGetRoleMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceGetRoleMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceGetRoleMenuResult(%+v)", *p)
}

var fieldIDToName_SystemServiceGetRoleMenuResult = map[int16]string{
	0: "success",
}

type SystemServiceCreateDictArgs struct {
	Req *Dict `thrift:"req,1" frugal:"1,default,Dict" json:"req"`
}

func NewSystemServiceCreateDictArgs() *SystemServiceCreateDictArgs {
	return &SystemServiceCreateDictArgs{}
}

func (p *SystemServiceCreateDictArgs) InitDefault() {
}

var SystemServiceCreateDictArgs_Req_DEFAULT *Dict

func (p *SystemServiceCreateDictArgs) GetReq() (v *Dict) {
	if !p.IsSetReq() {
		return SystemServiceCreateDictArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceCreateDictArgs) SetReq(val *Dict) {
	p.Req = val
}

func (p *SystemServiceCreateDictArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceCreateDictArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceCreateDictArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceCreateDictArgs = map[int16]string{
	1: "req",
}

type SystemServiceCreateDictResult struct {
	Success *DictResp `thrift:"success,0,optional" frugal:"0,optional,DictResp" json:"success,omitempty"`
}

func NewSystemServiceCreateDictResult() *SystemServiceCreateDictResult {
	return &SystemServiceCreateDictResult{}
}

func (p *SystemServiceCreateDictResult) InitDefault() {
}

var SystemServiceCreateDictResult_Success_DEFAULT *DictResp

func (p *SystemServiceCreateDictResult) GetSuccess() (v *DictResp) {
	if !p.IsSetSuccess() {
		return SystemServiceCreateDictResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceCreateDictResult) SetSuccess(x interface{}) {
	p.Success = x.(*DictResp)
}

func (p *SystemServiceCreateDictResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceCreateDictResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceCreateDictResult(%+v)", *p)
}

var fieldIDToName_SystemServiceCreateDictResult = map[int16]string{
	0: "success",
}

type SystemServiceUpdateDictArgs struct {
	Req *Dict `thrift:"req,1" frugal:"1,default,Dict" json:"req"`
}

func NewSystemServiceUpdateDictArgs() *SystemServiceUpdateDictArgs {
	return &SystemServiceUpdateDictArgs{}
}

func (p *SystemServiceUpdateDictArgs) InitDefault() {
}

var SystemServiceUpdateDictArgs_Req_DEFAULT *Dict

func (p *SystemServiceUpdateDictArgs) GetReq() (v *Dict) {
	if !p.IsSetReq() {
		return SystemServiceUpdateDictArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceUpdateDictArgs) SetReq(val *Dict) {
	p.Req = val
}

func (p *SystemServiceUpdateDictArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceUpdateDictArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceUpdateDictArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceUpdateDictArgs = map[int16]string{
	1: "req",
}

type SystemServiceUpdateDictResult struct {
	Success *DictResp `thrift:"success,0,optional" frugal:"0,optional,DictResp" json:"success,omitempty"`
}

func NewSystemServiceUpdateDictResult() *SystemServiceUpdateDictResult {
	return &SystemServiceUpdateDictResult{}
}

func (p *SystemServiceUpdateDictResult) InitDefault() {
}

var SystemServiceUpdateDictResult_Success_DEFAULT *DictResp

func (p *SystemServiceUpdateDictResult) GetSuccess() (v *DictResp) {
	if !p.IsSetSuccess() {
		return SystemServiceUpdateDictResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceUpdateDictResult) SetSuccess(x interface{}) {
	p.Success = x.(*DictResp)
}

func (p *SystemServiceUpdateDictResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceUpdateDictResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceUpdateDictResult(%+v)", *p)
}

var fieldIDToName_SystemServiceUpdateDictResult = map[int16]string{
	0: "success",
}

type SystemServiceDeleteDictArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewSystemServiceDeleteDictArgs() *SystemServiceDeleteDictArgs {
	return &SystemServiceDeleteDictArgs{}
}

func (p *SystemServiceDeleteDictArgs) InitDefault() {
}

var SystemServiceDeleteDictArgs_Req_DEFAULT *base.IdReq

func (p *SystemServiceDeleteDictArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return SystemServiceDeleteDictArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceDeleteDictArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *SystemServiceDeleteDictArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceDeleteDictArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDeleteDictArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceDeleteDictArgs = map[int16]string{
	1: "req",
}

type SystemServiceDeleteDictResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewSystemServiceDeleteDictResult() *SystemServiceDeleteDictResult {
	return &SystemServiceDeleteDictResult{}
}

func (p *SystemServiceDeleteDictResult) InitDefault() {
}

var SystemServiceDeleteDictResult_Success_DEFAULT *base.NilResponse

func (p *SystemServiceDeleteDictResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return SystemServiceDeleteDictResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceDeleteDictResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

func (p *SystemServiceDeleteDictResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceDeleteDictResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDeleteDictResult(%+v)", *p)
}

var fieldIDToName_SystemServiceDeleteDictResult = map[int16]string{
	0: "success",
}

type SystemServiceDictListArgs struct {
	Req *DictListReq `thrift:"req,1" frugal:"1,default,DictListReq" json:"req"`
}

func NewSystemServiceDictListArgs() *SystemServiceDictListArgs {
	return &SystemServiceDictListArgs{}
}

func (p *SystemServiceDictListArgs) InitDefault() {
}

var SystemServiceDictListArgs_Req_DEFAULT *DictListReq

func (p *SystemServiceDictListArgs) GetReq() (v *DictListReq) {
	if !p.IsSetReq() {
		return SystemServiceDictListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceDictListArgs) SetReq(val *DictListReq) {
	p.Req = val
}

func (p *SystemServiceDictListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceDictListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDictListArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceDictListArgs = map[int16]string{
	1: "req",
}

type SystemServiceDictListResult struct {
	Success *DictListResp `thrift:"success,0,optional" frugal:"0,optional,DictListResp" json:"success,omitempty"`
}

func NewSystemServiceDictListResult() *SystemServiceDictListResult {
	return &SystemServiceDictListResult{}
}

func (p *SystemServiceDictListResult) InitDefault() {
}

var SystemServiceDictListResult_Success_DEFAULT *DictListResp

func (p *SystemServiceDictListResult) GetSuccess() (v *DictListResp) {
	if !p.IsSetSuccess() {
		return SystemServiceDictListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceDictListResult) SetSuccess(x interface{}) {
	p.Success = x.(*DictListResp)
}

func (p *SystemServiceDictListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceDictListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDictListResult(%+v)", *p)
}

var fieldIDToName_SystemServiceDictListResult = map[int16]string{
	0: "success",
}

type SystemServiceCreateDicthtArgs struct {
	Req *Dictht `thrift:"req,1" frugal:"1,default,Dictht" json:"req"`
}

func NewSystemServiceCreateDicthtArgs() *SystemServiceCreateDicthtArgs {
	return &SystemServiceCreateDicthtArgs{}
}

func (p *SystemServiceCreateDicthtArgs) InitDefault() {
}

var SystemServiceCreateDicthtArgs_Req_DEFAULT *Dictht

func (p *SystemServiceCreateDicthtArgs) GetReq() (v *Dictht) {
	if !p.IsSetReq() {
		return SystemServiceCreateDicthtArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceCreateDicthtArgs) SetReq(val *Dictht) {
	p.Req = val
}

func (p *SystemServiceCreateDicthtArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceCreateDicthtArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceCreateDicthtArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceCreateDicthtArgs = map[int16]string{
	1: "req",
}

type SystemServiceCreateDicthtResult struct {
	Success *DictResp `thrift:"success,0,optional" frugal:"0,optional,DictResp" json:"success,omitempty"`
}

func NewSystemServiceCreateDicthtResult() *SystemServiceCreateDicthtResult {
	return &SystemServiceCreateDicthtResult{}
}

func (p *SystemServiceCreateDicthtResult) InitDefault() {
}

var SystemServiceCreateDicthtResult_Success_DEFAULT *DictResp

func (p *SystemServiceCreateDicthtResult) GetSuccess() (v *DictResp) {
	if !p.IsSetSuccess() {
		return SystemServiceCreateDicthtResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceCreateDicthtResult) SetSuccess(x interface{}) {
	p.Success = x.(*DictResp)
}

func (p *SystemServiceCreateDicthtResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceCreateDicthtResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceCreateDicthtResult(%+v)", *p)
}

var fieldIDToName_SystemServiceCreateDicthtResult = map[int16]string{
	0: "success",
}

type SystemServiceUpdateDicthtArgs struct {
	Req *Dictht `thrift:"req,1" frugal:"1,default,Dictht" json:"req"`
}

func NewSystemServiceUpdateDicthtArgs() *SystemServiceUpdateDicthtArgs {
	return &SystemServiceUpdateDicthtArgs{}
}

func (p *SystemServiceUpdateDicthtArgs) InitDefault() {
}

var SystemServiceUpdateDicthtArgs_Req_DEFAULT *Dictht

func (p *SystemServiceUpdateDicthtArgs) GetReq() (v *Dictht) {
	if !p.IsSetReq() {
		return SystemServiceUpdateDicthtArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceUpdateDicthtArgs) SetReq(val *Dictht) {
	p.Req = val
}

func (p *SystemServiceUpdateDicthtArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceUpdateDicthtArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceUpdateDicthtArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceUpdateDicthtArgs = map[int16]string{
	1: "req",
}

type SystemServiceUpdateDicthtResult struct {
	Success *DictResp `thrift:"success,0,optional" frugal:"0,optional,DictResp" json:"success,omitempty"`
}

func NewSystemServiceUpdateDicthtResult() *SystemServiceUpdateDicthtResult {
	return &SystemServiceUpdateDicthtResult{}
}

func (p *SystemServiceUpdateDicthtResult) InitDefault() {
}

var SystemServiceUpdateDicthtResult_Success_DEFAULT *DictResp

func (p *SystemServiceUpdateDicthtResult) GetSuccess() (v *DictResp) {
	if !p.IsSetSuccess() {
		return SystemServiceUpdateDicthtResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceUpdateDicthtResult) SetSuccess(x interface{}) {
	p.Success = x.(*DictResp)
}

func (p *SystemServiceUpdateDicthtResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceUpdateDicthtResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceUpdateDicthtResult(%+v)", *p)
}

var fieldIDToName_SystemServiceUpdateDicthtResult = map[int16]string{
	0: "success",
}

type SystemServiceDeleteDicthtArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewSystemServiceDeleteDicthtArgs() *SystemServiceDeleteDicthtArgs {
	return &SystemServiceDeleteDicthtArgs{}
}

func (p *SystemServiceDeleteDicthtArgs) InitDefault() {
}

var SystemServiceDeleteDicthtArgs_Req_DEFAULT *base.IdReq

func (p *SystemServiceDeleteDicthtArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return SystemServiceDeleteDicthtArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceDeleteDicthtArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *SystemServiceDeleteDicthtArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceDeleteDicthtArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDeleteDicthtArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceDeleteDicthtArgs = map[int16]string{
	1: "req",
}

type SystemServiceDeleteDicthtResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewSystemServiceDeleteDicthtResult() *SystemServiceDeleteDicthtResult {
	return &SystemServiceDeleteDicthtResult{}
}

func (p *SystemServiceDeleteDicthtResult) InitDefault() {
}

var SystemServiceDeleteDicthtResult_Success_DEFAULT *base.NilResponse

func (p *SystemServiceDeleteDicthtResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return SystemServiceDeleteDicthtResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceDeleteDicthtResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

func (p *SystemServiceDeleteDicthtResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceDeleteDicthtResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDeleteDicthtResult(%+v)", *p)
}

var fieldIDToName_SystemServiceDeleteDicthtResult = map[int16]string{
	0: "success",
}

type SystemServiceDicthtListArgs struct {
	Req *DicthtListReq `thrift:"req,1" frugal:"1,default,DicthtListReq" json:"req"`
}

func NewSystemServiceDicthtListArgs() *SystemServiceDicthtListArgs {
	return &SystemServiceDicthtListArgs{}
}

func (p *SystemServiceDicthtListArgs) InitDefault() {
}

var SystemServiceDicthtListArgs_Req_DEFAULT *DicthtListReq

func (p *SystemServiceDicthtListArgs) GetReq() (v *DicthtListReq) {
	if !p.IsSetReq() {
		return SystemServiceDicthtListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceDicthtListArgs) SetReq(val *DicthtListReq) {
	p.Req = val
}

func (p *SystemServiceDicthtListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceDicthtListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDicthtListArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceDicthtListArgs = map[int16]string{
	1: "req",
}

type SystemServiceDicthtListResult struct {
	Success *DicthtListResp `thrift:"success,0,optional" frugal:"0,optional,DicthtListResp" json:"success,omitempty"`
}

func NewSystemServiceDicthtListResult() *SystemServiceDicthtListResult {
	return &SystemServiceDicthtListResult{}
}

func (p *SystemServiceDicthtListResult) InitDefault() {
}

var SystemServiceDicthtListResult_Success_DEFAULT *DicthtListResp

func (p *SystemServiceDicthtListResult) GetSuccess() (v *DicthtListResp) {
	if !p.IsSetSuccess() {
		return SystemServiceDicthtListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceDicthtListResult) SetSuccess(x interface{}) {
	p.Success = x.(*DicthtListResp)
}

func (p *SystemServiceDicthtListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceDicthtListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDicthtListResult(%+v)", *p)
}

var fieldIDToName_SystemServiceDicthtListResult = map[int16]string{
	0: "success",
}

type SystemServiceLogListArgs struct {
	Req *LogListReq `thrift:"req,1" frugal:"1,default,LogListReq" json:"req"`
}

func NewSystemServiceLogListArgs() *SystemServiceLogListArgs {
	return &SystemServiceLogListArgs{}
}

func (p *SystemServiceLogListArgs) InitDefault() {
}

var SystemServiceLogListArgs_Req_DEFAULT *LogListReq

func (p *SystemServiceLogListArgs) GetReq() (v *LogListReq) {
	if !p.IsSetReq() {
		return SystemServiceLogListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceLogListArgs) SetReq(val *LogListReq) {
	p.Req = val
}

func (p *SystemServiceLogListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceLogListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceLogListArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceLogListArgs = map[int16]string{
	1: "req",
}

type SystemServiceLogListResult struct {
	Success *LogListResp `thrift:"success,0,optional" frugal:"0,optional,LogListResp" json:"success,omitempty"`
}

func NewSystemServiceLogListResult() *SystemServiceLogListResult {
	return &SystemServiceLogListResult{}
}

func (p *SystemServiceLogListResult) InitDefault() {
}

var SystemServiceLogListResult_Success_DEFAULT *LogListResp

func (p *SystemServiceLogListResult) GetSuccess() (v *LogListResp) {
	if !p.IsSetSuccess() {
		return SystemServiceLogListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceLogListResult) SetSuccess(x interface{}) {
	p.Success = x.(*LogListResp)
}

func (p *SystemServiceLogListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceLogListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceLogListResult(%+v)", *p)
}

var fieldIDToName_SystemServiceLogListResult = map[int16]string{
	0: "success",
}

type SystemServiceDeleteLogArgs struct {
	Req *DeleteLogReq `thrift:"req,1" frugal:"1,default,DeleteLogReq" json:"req"`
}

func NewSystemServiceDeleteLogArgs() *SystemServiceDeleteLogArgs {
	return &SystemServiceDeleteLogArgs{}
}

func (p *SystemServiceDeleteLogArgs) InitDefault() {
}

var SystemServiceDeleteLogArgs_Req_DEFAULT *DeleteLogReq

func (p *SystemServiceDeleteLogArgs) GetReq() (v *DeleteLogReq) {
	if !p.IsSetReq() {
		return SystemServiceDeleteLogArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceDeleteLogArgs) SetReq(val *DeleteLogReq) {
	p.Req = val
}

func (p *SystemServiceDeleteLogArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceDeleteLogArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDeleteLogArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceDeleteLogArgs = map[int16]string{
	1: "req",
}

type SystemServiceDeleteLogResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewSystemServiceDeleteLogResult() *SystemServiceDeleteLogResult {
	return &SystemServiceDeleteLogResult{}
}

func (p *SystemServiceDeleteLogResult) InitDefault() {
}

var SystemServiceDeleteLogResult_Success_DEFAULT *base.NilResponse

func (p *SystemServiceDeleteLogResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return SystemServiceDeleteLogResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceDeleteLogResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

func (p *SystemServiceDeleteLogResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceDeleteLogResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDeleteLogResult(%+v)", *p)
}

var fieldIDToName_SystemServiceDeleteLogResult = map[int16]string{
	0: "success",
}

type SystemServiceVerifyRoleAuthArgs struct {
	Req *VerifyRoleAuthReq `thrift:"req,1" frugal:"1,default,VerifyRoleAuthReq" json:"req"`
}

func NewSystemServiceVerifyRoleAuthArgs() *SystemServiceVerifyRoleAuthArgs {
	return &SystemServiceVerifyRoleAuthArgs{}
}

func (p *SystemServiceVerifyRoleAuthArgs) InitDefault() {
}

var SystemServiceVerifyRoleAuthArgs_Req_DEFAULT *VerifyRoleAuthReq

func (p *SystemServiceVerifyRoleAuthArgs) GetReq() (v *VerifyRoleAuthReq) {
	if !p.IsSetReq() {
		return SystemServiceVerifyRoleAuthArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceVerifyRoleAuthArgs) SetReq(val *VerifyRoleAuthReq) {
	p.Req = val
}

func (p *SystemServiceVerifyRoleAuthArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceVerifyRoleAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceVerifyRoleAuthArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceVerifyRoleAuthArgs = map[int16]string{
	1: "req",
}

type SystemServiceVerifyRoleAuthResult struct {
	Success *VerifyRoleAuthResp `thrift:"success,0,optional" frugal:"0,optional,VerifyRoleAuthResp" json:"success,omitempty"`
}

func NewSystemServiceVerifyRoleAuthResult() *SystemServiceVerifyRoleAuthResult {
	return &SystemServiceVerifyRoleAuthResult{}
}

func (p *SystemServiceVerifyRoleAuthResult) InitDefault() {
}

var SystemServiceVerifyRoleAuthResult_Success_DEFAULT *VerifyRoleAuthResp

func (p *SystemServiceVerifyRoleAuthResult) GetSuccess() (v *VerifyRoleAuthResp) {
	if !p.IsSetSuccess() {
		return SystemServiceVerifyRoleAuthResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceVerifyRoleAuthResult) SetSuccess(x interface{}) {
	p.Success = x.(*VerifyRoleAuthResp)
}

func (p *SystemServiceVerifyRoleAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceVerifyRoleAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceVerifyRoleAuthResult(%+v)", *p)
}

var fieldIDToName_SystemServiceVerifyRoleAuthResult = map[int16]string{
	0: "success",
}
