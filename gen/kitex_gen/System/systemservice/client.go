// Code generated by Kitex v0.15.1. DO NOT EDIT.

package systemservice

import (
	"context"
	system "gen/kitex_gen/System"
	base "gen/kitex_gen/base"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateApi(ctx context.Context, req *system.CreateApiReq, callOptions ...callopt.Option) (r *system.ApiResp, err error)
	UpdateApi(ctx context.Context, req *system.UpdateApiReq, callOptions ...callopt.Option) (r *system.ApiResp, err error)
	DeleteApi(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *base.BaseResp, err error)
	ApiList(ctx context.Context, req *system.ApiListReq, callOptions ...callopt.Option) (r *system.ApiListResp, err error)
	ApiTree(ctx context.Context, req *system.ApiListReq, callOptions ...callopt.Option) (r *system.ApiListResp, err error)
	CreateMenu(ctx context.Context, req *system.CreateMenuReq, callOptions ...callopt.Option) (r *system.MenuResp, err error)
	UpdateMenu(ctx context.Context, req *system.UpdateMenuReq, callOptions ...callopt.Option) (r *system.MenuResp, err error)
	DeleteMenu(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *base.BaseResp, err error)
	Menu(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *system.MenuResp, err error)
	MenuList(ctx context.Context, req *system.MenuListReq, callOptions ...callopt.Option) (r *system.MenuListResp, err error)
	MenuTree(ctx context.Context, req *system.MenuListReq, callOptions ...callopt.Option) (r *system.MenuListResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kSystemServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kSystemServiceClient struct {
	*kClient
}

func (p *kSystemServiceClient) CreateApi(ctx context.Context, req *system.CreateApiReq, callOptions ...callopt.Option) (r *system.ApiResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateApi(ctx, req)
}

func (p *kSystemServiceClient) UpdateApi(ctx context.Context, req *system.UpdateApiReq, callOptions ...callopt.Option) (r *system.ApiResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateApi(ctx, req)
}

func (p *kSystemServiceClient) DeleteApi(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *base.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteApi(ctx, req)
}

func (p *kSystemServiceClient) ApiList(ctx context.Context, req *system.ApiListReq, callOptions ...callopt.Option) (r *system.ApiListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ApiList(ctx, req)
}

func (p *kSystemServiceClient) ApiTree(ctx context.Context, req *system.ApiListReq, callOptions ...callopt.Option) (r *system.ApiListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ApiTree(ctx, req)
}

func (p *kSystemServiceClient) CreateMenu(ctx context.Context, req *system.CreateMenuReq, callOptions ...callopt.Option) (r *system.MenuResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateMenu(ctx, req)
}

func (p *kSystemServiceClient) UpdateMenu(ctx context.Context, req *system.UpdateMenuReq, callOptions ...callopt.Option) (r *system.MenuResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateMenu(ctx, req)
}

func (p *kSystemServiceClient) DeleteMenu(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *base.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteMenu(ctx, req)
}

func (p *kSystemServiceClient) Menu(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *system.MenuResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Menu(ctx, req)
}

func (p *kSystemServiceClient) MenuList(ctx context.Context, req *system.MenuListReq, callOptions ...callopt.Option) (r *system.MenuListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MenuList(ctx, req)
}

func (p *kSystemServiceClient) MenuTree(ctx context.Context, req *system.MenuListReq, callOptions ...callopt.Option) (r *system.MenuListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MenuTree(ctx, req)
}
