// Code generated by Kitex v0.15.1. DO NOT EDIT.

package systemservice

import (
	"context"
	"errors"
	system "gen/kitex_gen/System"
	base "gen/kitex_gen/base"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateApi": kitex.NewMethodInfo(
		createApiHandler,
		newSystemServiceCreateApiArgs,
		newSystemServiceCreateApiResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateApi": kitex.NewMethodInfo(
		updateApiHandler,
		newSystemServiceUpdateApiArgs,
		newSystemServiceUpdateApiResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteApi": kitex.NewMethodInfo(
		deleteApiHandler,
		newSystemServiceDeleteApiArgs,
		newSystemServiceDeleteApiResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ApiList": kitex.NewMethodInfo(
		apiListHandler,
		newSystemServiceApiListArgs,
		newSystemServiceApiListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ApiTree": kitex.NewMethodInfo(
		apiTreeHandler,
		newSystemServiceApiTreeArgs,
		newSystemServiceApiTreeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateMenu": kitex.NewMethodInfo(
		createMenuHandler,
		newSystemServiceCreateMenuArgs,
		newSystemServiceCreateMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateMenu": kitex.NewMethodInfo(
		updateMenuHandler,
		newSystemServiceUpdateMenuArgs,
		newSystemServiceUpdateMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteMenu": kitex.NewMethodInfo(
		deleteMenuHandler,
		newSystemServiceDeleteMenuArgs,
		newSystemServiceDeleteMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Menu": kitex.NewMethodInfo(
		menuHandler,
		newSystemServiceMenuArgs,
		newSystemServiceMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MenuList": kitex.NewMethodInfo(
		menuListHandler,
		newSystemServiceMenuListArgs,
		newSystemServiceMenuListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MenuTree": kitex.NewMethodInfo(
		menuTreeHandler,
		newSystemServiceMenuTreeArgs,
		newSystemServiceMenuTreeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	systemServiceServiceInfo                = NewServiceInfo()
	systemServiceServiceInfoForClient       = NewServiceInfoForClient()
	systemServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return systemServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return systemServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return systemServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "SystemService"
	handlerType := (*system.SystemService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "system",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func createApiHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceCreateApiArgs)
	realResult := result.(*system.SystemServiceCreateApiResult)
	success, err := handler.(system.SystemService).CreateApi(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateApiArgs() interface{} {
	return system.NewSystemServiceCreateApiArgs()
}

func newSystemServiceCreateApiResult() interface{} {
	return system.NewSystemServiceCreateApiResult()
}

func updateApiHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceUpdateApiArgs)
	realResult := result.(*system.SystemServiceUpdateApiResult)
	success, err := handler.(system.SystemService).UpdateApi(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateApiArgs() interface{} {
	return system.NewSystemServiceUpdateApiArgs()
}

func newSystemServiceUpdateApiResult() interface{} {
	return system.NewSystemServiceUpdateApiResult()
}

func deleteApiHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceDeleteApiArgs)
	realResult := result.(*system.SystemServiceDeleteApiResult)
	success, err := handler.(system.SystemService).DeleteApi(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteApiArgs() interface{} {
	return system.NewSystemServiceDeleteApiArgs()
}

func newSystemServiceDeleteApiResult() interface{} {
	return system.NewSystemServiceDeleteApiResult()
}

func apiListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceApiListArgs)
	realResult := result.(*system.SystemServiceApiListResult)
	success, err := handler.(system.SystemService).ApiList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceApiListArgs() interface{} {
	return system.NewSystemServiceApiListArgs()
}

func newSystemServiceApiListResult() interface{} {
	return system.NewSystemServiceApiListResult()
}

func apiTreeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceApiTreeArgs)
	realResult := result.(*system.SystemServiceApiTreeResult)
	success, err := handler.(system.SystemService).ApiTree(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceApiTreeArgs() interface{} {
	return system.NewSystemServiceApiTreeArgs()
}

func newSystemServiceApiTreeResult() interface{} {
	return system.NewSystemServiceApiTreeResult()
}

func createMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceCreateMenuArgs)
	realResult := result.(*system.SystemServiceCreateMenuResult)
	success, err := handler.(system.SystemService).CreateMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateMenuArgs() interface{} {
	return system.NewSystemServiceCreateMenuArgs()
}

func newSystemServiceCreateMenuResult() interface{} {
	return system.NewSystemServiceCreateMenuResult()
}

func updateMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceUpdateMenuArgs)
	realResult := result.(*system.SystemServiceUpdateMenuResult)
	success, err := handler.(system.SystemService).UpdateMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateMenuArgs() interface{} {
	return system.NewSystemServiceUpdateMenuArgs()
}

func newSystemServiceUpdateMenuResult() interface{} {
	return system.NewSystemServiceUpdateMenuResult()
}

func deleteMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceDeleteMenuArgs)
	realResult := result.(*system.SystemServiceDeleteMenuResult)
	success, err := handler.(system.SystemService).DeleteMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteMenuArgs() interface{} {
	return system.NewSystemServiceDeleteMenuArgs()
}

func newSystemServiceDeleteMenuResult() interface{} {
	return system.NewSystemServiceDeleteMenuResult()
}

func menuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceMenuArgs)
	realResult := result.(*system.SystemServiceMenuResult)
	success, err := handler.(system.SystemService).Menu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceMenuArgs() interface{} {
	return system.NewSystemServiceMenuArgs()
}

func newSystemServiceMenuResult() interface{} {
	return system.NewSystemServiceMenuResult()
}

func menuListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceMenuListArgs)
	realResult := result.(*system.SystemServiceMenuListResult)
	success, err := handler.(system.SystemService).MenuList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceMenuListArgs() interface{} {
	return system.NewSystemServiceMenuListArgs()
}

func newSystemServiceMenuListResult() interface{} {
	return system.NewSystemServiceMenuListResult()
}

func menuTreeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*system.SystemServiceMenuTreeArgs)
	realResult := result.(*system.SystemServiceMenuTreeResult)
	success, err := handler.(system.SystemService).MenuTree(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceMenuTreeArgs() interface{} {
	return system.NewSystemServiceMenuTreeArgs()
}

func newSystemServiceMenuTreeResult() interface{} {
	return system.NewSystemServiceMenuTreeResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateApi(ctx context.Context, req *system.CreateApiReq) (r *system.ApiResp, err error) {
	var _args system.SystemServiceCreateApiArgs
	_args.Req = req
	var _result system.SystemServiceCreateApiResult
	if err = p.c.Call(ctx, "CreateApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateApi(ctx context.Context, req *system.UpdateApiReq) (r *system.ApiResp, err error) {
	var _args system.SystemServiceUpdateApiArgs
	_args.Req = req
	var _result system.SystemServiceUpdateApiResult
	if err = p.c.Call(ctx, "UpdateApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteApi(ctx context.Context, req *base.IdReq) (r *base.BaseResp, err error) {
	var _args system.SystemServiceDeleteApiArgs
	_args.Req = req
	var _result system.SystemServiceDeleteApiResult
	if err = p.c.Call(ctx, "DeleteApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ApiList(ctx context.Context, req *system.ApiListReq) (r *system.ApiListResp, err error) {
	var _args system.SystemServiceApiListArgs
	_args.Req = req
	var _result system.SystemServiceApiListResult
	if err = p.c.Call(ctx, "ApiList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ApiTree(ctx context.Context, req *system.ApiListReq) (r *system.ApiListResp, err error) {
	var _args system.SystemServiceApiTreeArgs
	_args.Req = req
	var _result system.SystemServiceApiTreeResult
	if err = p.c.Call(ctx, "ApiTree", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateMenu(ctx context.Context, req *system.CreateMenuReq) (r *system.MenuResp, err error) {
	var _args system.SystemServiceCreateMenuArgs
	_args.Req = req
	var _result system.SystemServiceCreateMenuResult
	if err = p.c.Call(ctx, "CreateMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateMenu(ctx context.Context, req *system.UpdateMenuReq) (r *system.MenuResp, err error) {
	var _args system.SystemServiceUpdateMenuArgs
	_args.Req = req
	var _result system.SystemServiceUpdateMenuResult
	if err = p.c.Call(ctx, "UpdateMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteMenu(ctx context.Context, req *base.IdReq) (r *base.BaseResp, err error) {
	var _args system.SystemServiceDeleteMenuArgs
	_args.Req = req
	var _result system.SystemServiceDeleteMenuResult
	if err = p.c.Call(ctx, "DeleteMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Menu(ctx context.Context, req *base.IdReq) (r *system.MenuResp, err error) {
	var _args system.SystemServiceMenuArgs
	_args.Req = req
	var _result system.SystemServiceMenuResult
	if err = p.c.Call(ctx, "Menu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MenuList(ctx context.Context, req *system.MenuListReq) (r *system.MenuListResp, err error) {
	var _args system.SystemServiceMenuListArgs
	_args.Req = req
	var _result system.SystemServiceMenuListResult
	if err = p.c.Call(ctx, "MenuList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MenuTree(ctx context.Context, req *system.MenuListReq) (r *system.MenuListResp, err error) {
	var _args system.SystemServiceMenuTreeArgs
	_args.Req = req
	var _result system.SystemServiceMenuTreeResult
	if err = p.c.Call(ctx, "MenuTree", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
