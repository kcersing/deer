// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package system

import (
	"context"
	"fmt"
	"gen/kitex_gen/base"
)

type Api struct {
}

func NewApi() *Api {
	return &Api{}
}

func (p *Api) InitDefault() {
}

func (p *Api) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Api(%+v)", *p)
}

var fieldIDToName_Api = map[int16]string{}

type ApiResp struct {
	Data     *Api           `thrift:"data,1,optional" frugal:"1,optional,Api" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewApiResp() *ApiResp {
	return &ApiResp{}
}

func (p *ApiResp) InitDefault() {
}

var ApiResp_Data_DEFAULT *Api

func (p *ApiResp) GetData() (v *Api) {
	if !p.IsSetData() {
		return ApiResp_Data_DEFAULT
	}
	return p.Data
}

var ApiResp_BaseResp_DEFAULT *base.BaseResp

func (p *ApiResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return ApiResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ApiResp) SetData(val *Api) {
	p.Data = val
}
func (p *ApiResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *ApiResp) IsSetData() bool {
	return p.Data != nil
}

func (p *ApiResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ApiResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiResp(%+v)", *p)
}

var fieldIDToName_ApiResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type ApiListResp struct {
	Data     *Api           `thrift:"data,1,optional" frugal:"1,optional,Api" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewApiListResp() *ApiListResp {
	return &ApiListResp{}
}

func (p *ApiListResp) InitDefault() {
}

var ApiListResp_Data_DEFAULT *Api

func (p *ApiListResp) GetData() (v *Api) {
	if !p.IsSetData() {
		return ApiListResp_Data_DEFAULT
	}
	return p.Data
}

var ApiListResp_BaseResp_DEFAULT *base.BaseResp

func (p *ApiListResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return ApiListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ApiListResp) SetData(val *Api) {
	p.Data = val
}
func (p *ApiListResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *ApiListResp) IsSetData() bool {
	return p.Data != nil
}

func (p *ApiListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ApiListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiListResp(%+v)", *p)
}

var fieldIDToName_ApiListResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type ApiListReq struct {
}

func NewApiListReq() *ApiListReq {
	return &ApiListReq{}
}

func (p *ApiListReq) InitDefault() {
}

func (p *ApiListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiListReq(%+v)", *p)
}

var fieldIDToName_ApiListReq = map[int16]string{}

type CreateApiReq struct {
}

func NewCreateApiReq() *CreateApiReq {
	return &CreateApiReq{}
}

func (p *CreateApiReq) InitDefault() {
}

func (p *CreateApiReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateApiReq(%+v)", *p)
}

var fieldIDToName_CreateApiReq = map[int16]string{}

type UpdateApiReq struct {
}

func NewUpdateApiReq() *UpdateApiReq {
	return &UpdateApiReq{}
}

func (p *UpdateApiReq) InitDefault() {
}

func (p *UpdateApiReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateApiReq(%+v)", *p)
}

var fieldIDToName_UpdateApiReq = map[int16]string{}

type CreateMenuReq struct {
}

func NewCreateMenuReq() *CreateMenuReq {
	return &CreateMenuReq{}
}

func (p *CreateMenuReq) InitDefault() {
}

func (p *CreateMenuReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateMenuReq(%+v)", *p)
}

var fieldIDToName_CreateMenuReq = map[int16]string{}

type UpdateMenuReq struct {
}

func NewUpdateMenuReq() *UpdateMenuReq {
	return &UpdateMenuReq{}
}

func (p *UpdateMenuReq) InitDefault() {
}

func (p *UpdateMenuReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateMenuReq(%+v)", *p)
}

var fieldIDToName_UpdateMenuReq = map[int16]string{}

type MenuListReq struct {
}

func NewMenuListReq() *MenuListReq {
	return &MenuListReq{}
}

func (p *MenuListReq) InitDefault() {
}

func (p *MenuListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuListReq(%+v)", *p)
}

var fieldIDToName_MenuListReq = map[int16]string{}

type MenuResp struct {
}

func NewMenuResp() *MenuResp {
	return &MenuResp{}
}

func (p *MenuResp) InitDefault() {
}

func (p *MenuResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuResp(%+v)", *p)
}

var fieldIDToName_MenuResp = map[int16]string{}

type MenuListResp struct {
}

func NewMenuListResp() *MenuListResp {
	return &MenuListResp{}
}

func (p *MenuListResp) InitDefault() {
}

func (p *MenuListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuListResp(%+v)", *p)
}

var fieldIDToName_MenuListResp = map[int16]string{}

type SystemService interface {
	CreateApi(ctx context.Context, req *CreateApiReq) (r *ApiResp, err error)

	UpdateApi(ctx context.Context, req *UpdateApiReq) (r *ApiResp, err error)

	DeleteApi(ctx context.Context, req *base.IdReq) (r *base.BaseResp, err error)

	ApiList(ctx context.Context, req *ApiListReq) (r *ApiListResp, err error)

	ApiTree(ctx context.Context, req *ApiListReq) (r *ApiListResp, err error)

	CreateMenu(ctx context.Context, req *CreateMenuReq) (r *MenuResp, err error)

	UpdateMenu(ctx context.Context, req *UpdateMenuReq) (r *MenuResp, err error)

	DeleteMenu(ctx context.Context, req *base.IdReq) (r *base.BaseResp, err error)

	Menu(ctx context.Context, req *base.IdReq) (r *MenuResp, err error)

	MenuList(ctx context.Context, req *MenuListReq) (r *MenuListResp, err error)

	MenuTree(ctx context.Context, req *MenuListReq) (r *MenuListResp, err error)
}

type SystemServiceCreateApiArgs struct {
	Req *CreateApiReq `thrift:"req,1" frugal:"1,default,CreateApiReq" json:"req"`
}

func NewSystemServiceCreateApiArgs() *SystemServiceCreateApiArgs {
	return &SystemServiceCreateApiArgs{}
}

func (p *SystemServiceCreateApiArgs) InitDefault() {
}

var SystemServiceCreateApiArgs_Req_DEFAULT *CreateApiReq

func (p *SystemServiceCreateApiArgs) GetReq() (v *CreateApiReq) {
	if !p.IsSetReq() {
		return SystemServiceCreateApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceCreateApiArgs) SetReq(val *CreateApiReq) {
	p.Req = val
}

func (p *SystemServiceCreateApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceCreateApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceCreateApiArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceCreateApiArgs = map[int16]string{
	1: "req",
}

type SystemServiceCreateApiResult struct {
	Success *ApiResp `thrift:"success,0,optional" frugal:"0,optional,ApiResp" json:"success,omitempty"`
}

func NewSystemServiceCreateApiResult() *SystemServiceCreateApiResult {
	return &SystemServiceCreateApiResult{}
}

func (p *SystemServiceCreateApiResult) InitDefault() {
}

var SystemServiceCreateApiResult_Success_DEFAULT *ApiResp

func (p *SystemServiceCreateApiResult) GetSuccess() (v *ApiResp) {
	if !p.IsSetSuccess() {
		return SystemServiceCreateApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceCreateApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*ApiResp)
}

func (p *SystemServiceCreateApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceCreateApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceCreateApiResult(%+v)", *p)
}

var fieldIDToName_SystemServiceCreateApiResult = map[int16]string{
	0: "success",
}

type SystemServiceUpdateApiArgs struct {
	Req *UpdateApiReq `thrift:"req,1" frugal:"1,default,UpdateApiReq" json:"req"`
}

func NewSystemServiceUpdateApiArgs() *SystemServiceUpdateApiArgs {
	return &SystemServiceUpdateApiArgs{}
}

func (p *SystemServiceUpdateApiArgs) InitDefault() {
}

var SystemServiceUpdateApiArgs_Req_DEFAULT *UpdateApiReq

func (p *SystemServiceUpdateApiArgs) GetReq() (v *UpdateApiReq) {
	if !p.IsSetReq() {
		return SystemServiceUpdateApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceUpdateApiArgs) SetReq(val *UpdateApiReq) {
	p.Req = val
}

func (p *SystemServiceUpdateApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceUpdateApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceUpdateApiArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceUpdateApiArgs = map[int16]string{
	1: "req",
}

type SystemServiceUpdateApiResult struct {
	Success *ApiResp `thrift:"success,0,optional" frugal:"0,optional,ApiResp" json:"success,omitempty"`
}

func NewSystemServiceUpdateApiResult() *SystemServiceUpdateApiResult {
	return &SystemServiceUpdateApiResult{}
}

func (p *SystemServiceUpdateApiResult) InitDefault() {
}

var SystemServiceUpdateApiResult_Success_DEFAULT *ApiResp

func (p *SystemServiceUpdateApiResult) GetSuccess() (v *ApiResp) {
	if !p.IsSetSuccess() {
		return SystemServiceUpdateApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceUpdateApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*ApiResp)
}

func (p *SystemServiceUpdateApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceUpdateApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceUpdateApiResult(%+v)", *p)
}

var fieldIDToName_SystemServiceUpdateApiResult = map[int16]string{
	0: "success",
}

type SystemServiceDeleteApiArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewSystemServiceDeleteApiArgs() *SystemServiceDeleteApiArgs {
	return &SystemServiceDeleteApiArgs{}
}

func (p *SystemServiceDeleteApiArgs) InitDefault() {
}

var SystemServiceDeleteApiArgs_Req_DEFAULT *base.IdReq

func (p *SystemServiceDeleteApiArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return SystemServiceDeleteApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceDeleteApiArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *SystemServiceDeleteApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceDeleteApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDeleteApiArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceDeleteApiArgs = map[int16]string{
	1: "req",
}

type SystemServiceDeleteApiResult struct {
	Success *base.BaseResp `thrift:"success,0,optional" frugal:"0,optional,base.BaseResp" json:"success,omitempty"`
}

func NewSystemServiceDeleteApiResult() *SystemServiceDeleteApiResult {
	return &SystemServiceDeleteApiResult{}
}

func (p *SystemServiceDeleteApiResult) InitDefault() {
}

var SystemServiceDeleteApiResult_Success_DEFAULT *base.BaseResp

func (p *SystemServiceDeleteApiResult) GetSuccess() (v *base.BaseResp) {
	if !p.IsSetSuccess() {
		return SystemServiceDeleteApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceDeleteApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.BaseResp)
}

func (p *SystemServiceDeleteApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceDeleteApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDeleteApiResult(%+v)", *p)
}

var fieldIDToName_SystemServiceDeleteApiResult = map[int16]string{
	0: "success",
}

type SystemServiceApiListArgs struct {
	Req *ApiListReq `thrift:"req,1" frugal:"1,default,ApiListReq" json:"req"`
}

func NewSystemServiceApiListArgs() *SystemServiceApiListArgs {
	return &SystemServiceApiListArgs{}
}

func (p *SystemServiceApiListArgs) InitDefault() {
}

var SystemServiceApiListArgs_Req_DEFAULT *ApiListReq

func (p *SystemServiceApiListArgs) GetReq() (v *ApiListReq) {
	if !p.IsSetReq() {
		return SystemServiceApiListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceApiListArgs) SetReq(val *ApiListReq) {
	p.Req = val
}

func (p *SystemServiceApiListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceApiListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceApiListArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceApiListArgs = map[int16]string{
	1: "req",
}

type SystemServiceApiListResult struct {
	Success *ApiListResp `thrift:"success,0,optional" frugal:"0,optional,ApiListResp" json:"success,omitempty"`
}

func NewSystemServiceApiListResult() *SystemServiceApiListResult {
	return &SystemServiceApiListResult{}
}

func (p *SystemServiceApiListResult) InitDefault() {
}

var SystemServiceApiListResult_Success_DEFAULT *ApiListResp

func (p *SystemServiceApiListResult) GetSuccess() (v *ApiListResp) {
	if !p.IsSetSuccess() {
		return SystemServiceApiListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceApiListResult) SetSuccess(x interface{}) {
	p.Success = x.(*ApiListResp)
}

func (p *SystemServiceApiListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceApiListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceApiListResult(%+v)", *p)
}

var fieldIDToName_SystemServiceApiListResult = map[int16]string{
	0: "success",
}

type SystemServiceApiTreeArgs struct {
	Req *ApiListReq `thrift:"req,1" frugal:"1,default,ApiListReq" json:"req"`
}

func NewSystemServiceApiTreeArgs() *SystemServiceApiTreeArgs {
	return &SystemServiceApiTreeArgs{}
}

func (p *SystemServiceApiTreeArgs) InitDefault() {
}

var SystemServiceApiTreeArgs_Req_DEFAULT *ApiListReq

func (p *SystemServiceApiTreeArgs) GetReq() (v *ApiListReq) {
	if !p.IsSetReq() {
		return SystemServiceApiTreeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceApiTreeArgs) SetReq(val *ApiListReq) {
	p.Req = val
}

func (p *SystemServiceApiTreeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceApiTreeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceApiTreeArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceApiTreeArgs = map[int16]string{
	1: "req",
}

type SystemServiceApiTreeResult struct {
	Success *ApiListResp `thrift:"success,0,optional" frugal:"0,optional,ApiListResp" json:"success,omitempty"`
}

func NewSystemServiceApiTreeResult() *SystemServiceApiTreeResult {
	return &SystemServiceApiTreeResult{}
}

func (p *SystemServiceApiTreeResult) InitDefault() {
}

var SystemServiceApiTreeResult_Success_DEFAULT *ApiListResp

func (p *SystemServiceApiTreeResult) GetSuccess() (v *ApiListResp) {
	if !p.IsSetSuccess() {
		return SystemServiceApiTreeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceApiTreeResult) SetSuccess(x interface{}) {
	p.Success = x.(*ApiListResp)
}

func (p *SystemServiceApiTreeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceApiTreeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceApiTreeResult(%+v)", *p)
}

var fieldIDToName_SystemServiceApiTreeResult = map[int16]string{
	0: "success",
}

type SystemServiceCreateMenuArgs struct {
	Req *CreateMenuReq `thrift:"req,1" frugal:"1,default,CreateMenuReq" json:"req"`
}

func NewSystemServiceCreateMenuArgs() *SystemServiceCreateMenuArgs {
	return &SystemServiceCreateMenuArgs{}
}

func (p *SystemServiceCreateMenuArgs) InitDefault() {
}

var SystemServiceCreateMenuArgs_Req_DEFAULT *CreateMenuReq

func (p *SystemServiceCreateMenuArgs) GetReq() (v *CreateMenuReq) {
	if !p.IsSetReq() {
		return SystemServiceCreateMenuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceCreateMenuArgs) SetReq(val *CreateMenuReq) {
	p.Req = val
}

func (p *SystemServiceCreateMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceCreateMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceCreateMenuArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceCreateMenuArgs = map[int16]string{
	1: "req",
}

type SystemServiceCreateMenuResult struct {
	Success *MenuResp `thrift:"success,0,optional" frugal:"0,optional,MenuResp" json:"success,omitempty"`
}

func NewSystemServiceCreateMenuResult() *SystemServiceCreateMenuResult {
	return &SystemServiceCreateMenuResult{}
}

func (p *SystemServiceCreateMenuResult) InitDefault() {
}

var SystemServiceCreateMenuResult_Success_DEFAULT *MenuResp

func (p *SystemServiceCreateMenuResult) GetSuccess() (v *MenuResp) {
	if !p.IsSetSuccess() {
		return SystemServiceCreateMenuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceCreateMenuResult) SetSuccess(x interface{}) {
	p.Success = x.(*MenuResp)
}

func (p *SystemServiceCreateMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceCreateMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceCreateMenuResult(%+v)", *p)
}

var fieldIDToName_SystemServiceCreateMenuResult = map[int16]string{
	0: "success",
}

type SystemServiceUpdateMenuArgs struct {
	Req *UpdateMenuReq `thrift:"req,1" frugal:"1,default,UpdateMenuReq" json:"req"`
}

func NewSystemServiceUpdateMenuArgs() *SystemServiceUpdateMenuArgs {
	return &SystemServiceUpdateMenuArgs{}
}

func (p *SystemServiceUpdateMenuArgs) InitDefault() {
}

var SystemServiceUpdateMenuArgs_Req_DEFAULT *UpdateMenuReq

func (p *SystemServiceUpdateMenuArgs) GetReq() (v *UpdateMenuReq) {
	if !p.IsSetReq() {
		return SystemServiceUpdateMenuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceUpdateMenuArgs) SetReq(val *UpdateMenuReq) {
	p.Req = val
}

func (p *SystemServiceUpdateMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceUpdateMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceUpdateMenuArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceUpdateMenuArgs = map[int16]string{
	1: "req",
}

type SystemServiceUpdateMenuResult struct {
	Success *MenuResp `thrift:"success,0,optional" frugal:"0,optional,MenuResp" json:"success,omitempty"`
}

func NewSystemServiceUpdateMenuResult() *SystemServiceUpdateMenuResult {
	return &SystemServiceUpdateMenuResult{}
}

func (p *SystemServiceUpdateMenuResult) InitDefault() {
}

var SystemServiceUpdateMenuResult_Success_DEFAULT *MenuResp

func (p *SystemServiceUpdateMenuResult) GetSuccess() (v *MenuResp) {
	if !p.IsSetSuccess() {
		return SystemServiceUpdateMenuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceUpdateMenuResult) SetSuccess(x interface{}) {
	p.Success = x.(*MenuResp)
}

func (p *SystemServiceUpdateMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceUpdateMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceUpdateMenuResult(%+v)", *p)
}

var fieldIDToName_SystemServiceUpdateMenuResult = map[int16]string{
	0: "success",
}

type SystemServiceDeleteMenuArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewSystemServiceDeleteMenuArgs() *SystemServiceDeleteMenuArgs {
	return &SystemServiceDeleteMenuArgs{}
}

func (p *SystemServiceDeleteMenuArgs) InitDefault() {
}

var SystemServiceDeleteMenuArgs_Req_DEFAULT *base.IdReq

func (p *SystemServiceDeleteMenuArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return SystemServiceDeleteMenuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceDeleteMenuArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *SystemServiceDeleteMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceDeleteMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDeleteMenuArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceDeleteMenuArgs = map[int16]string{
	1: "req",
}

type SystemServiceDeleteMenuResult struct {
	Success *base.BaseResp `thrift:"success,0,optional" frugal:"0,optional,base.BaseResp" json:"success,omitempty"`
}

func NewSystemServiceDeleteMenuResult() *SystemServiceDeleteMenuResult {
	return &SystemServiceDeleteMenuResult{}
}

func (p *SystemServiceDeleteMenuResult) InitDefault() {
}

var SystemServiceDeleteMenuResult_Success_DEFAULT *base.BaseResp

func (p *SystemServiceDeleteMenuResult) GetSuccess() (v *base.BaseResp) {
	if !p.IsSetSuccess() {
		return SystemServiceDeleteMenuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceDeleteMenuResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.BaseResp)
}

func (p *SystemServiceDeleteMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceDeleteMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceDeleteMenuResult(%+v)", *p)
}

var fieldIDToName_SystemServiceDeleteMenuResult = map[int16]string{
	0: "success",
}

type SystemServiceMenuArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewSystemServiceMenuArgs() *SystemServiceMenuArgs {
	return &SystemServiceMenuArgs{}
}

func (p *SystemServiceMenuArgs) InitDefault() {
}

var SystemServiceMenuArgs_Req_DEFAULT *base.IdReq

func (p *SystemServiceMenuArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return SystemServiceMenuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceMenuArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *SystemServiceMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceMenuArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceMenuArgs = map[int16]string{
	1: "req",
}

type SystemServiceMenuResult struct {
	Success *MenuResp `thrift:"success,0,optional" frugal:"0,optional,MenuResp" json:"success,omitempty"`
}

func NewSystemServiceMenuResult() *SystemServiceMenuResult {
	return &SystemServiceMenuResult{}
}

func (p *SystemServiceMenuResult) InitDefault() {
}

var SystemServiceMenuResult_Success_DEFAULT *MenuResp

func (p *SystemServiceMenuResult) GetSuccess() (v *MenuResp) {
	if !p.IsSetSuccess() {
		return SystemServiceMenuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceMenuResult) SetSuccess(x interface{}) {
	p.Success = x.(*MenuResp)
}

func (p *SystemServiceMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceMenuResult(%+v)", *p)
}

var fieldIDToName_SystemServiceMenuResult = map[int16]string{
	0: "success",
}

type SystemServiceMenuListArgs struct {
	Req *MenuListReq `thrift:"req,1" frugal:"1,default,MenuListReq" json:"req"`
}

func NewSystemServiceMenuListArgs() *SystemServiceMenuListArgs {
	return &SystemServiceMenuListArgs{}
}

func (p *SystemServiceMenuListArgs) InitDefault() {
}

var SystemServiceMenuListArgs_Req_DEFAULT *MenuListReq

func (p *SystemServiceMenuListArgs) GetReq() (v *MenuListReq) {
	if !p.IsSetReq() {
		return SystemServiceMenuListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceMenuListArgs) SetReq(val *MenuListReq) {
	p.Req = val
}

func (p *SystemServiceMenuListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceMenuListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceMenuListArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceMenuListArgs = map[int16]string{
	1: "req",
}

type SystemServiceMenuListResult struct {
	Success *MenuListResp `thrift:"success,0,optional" frugal:"0,optional,MenuListResp" json:"success,omitempty"`
}

func NewSystemServiceMenuListResult() *SystemServiceMenuListResult {
	return &SystemServiceMenuListResult{}
}

func (p *SystemServiceMenuListResult) InitDefault() {
}

var SystemServiceMenuListResult_Success_DEFAULT *MenuListResp

func (p *SystemServiceMenuListResult) GetSuccess() (v *MenuListResp) {
	if !p.IsSetSuccess() {
		return SystemServiceMenuListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceMenuListResult) SetSuccess(x interface{}) {
	p.Success = x.(*MenuListResp)
}

func (p *SystemServiceMenuListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceMenuListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceMenuListResult(%+v)", *p)
}

var fieldIDToName_SystemServiceMenuListResult = map[int16]string{
	0: "success",
}

type SystemServiceMenuTreeArgs struct {
	Req *MenuListReq `thrift:"req,1" frugal:"1,default,MenuListReq" json:"req"`
}

func NewSystemServiceMenuTreeArgs() *SystemServiceMenuTreeArgs {
	return &SystemServiceMenuTreeArgs{}
}

func (p *SystemServiceMenuTreeArgs) InitDefault() {
}

var SystemServiceMenuTreeArgs_Req_DEFAULT *MenuListReq

func (p *SystemServiceMenuTreeArgs) GetReq() (v *MenuListReq) {
	if !p.IsSetReq() {
		return SystemServiceMenuTreeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SystemServiceMenuTreeArgs) SetReq(val *MenuListReq) {
	p.Req = val
}

func (p *SystemServiceMenuTreeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemServiceMenuTreeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceMenuTreeArgs(%+v)", *p)
}

var fieldIDToName_SystemServiceMenuTreeArgs = map[int16]string{
	1: "req",
}

type SystemServiceMenuTreeResult struct {
	Success *MenuListResp `thrift:"success,0,optional" frugal:"0,optional,MenuListResp" json:"success,omitempty"`
}

func NewSystemServiceMenuTreeResult() *SystemServiceMenuTreeResult {
	return &SystemServiceMenuTreeResult{}
}

func (p *SystemServiceMenuTreeResult) InitDefault() {
}

var SystemServiceMenuTreeResult_Success_DEFAULT *MenuListResp

func (p *SystemServiceMenuTreeResult) GetSuccess() (v *MenuListResp) {
	if !p.IsSetSuccess() {
		return SystemServiceMenuTreeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SystemServiceMenuTreeResult) SetSuccess(x interface{}) {
	p.Success = x.(*MenuListResp)
}

func (p *SystemServiceMenuTreeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemServiceMenuTreeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemServiceMenuTreeResult(%+v)", *p)
}

var fieldIDToName_SystemServiceMenuTreeResult = map[int16]string{
	0: "success",
}
