// Code generated by Kitex v0.15.1. DO NOT EDIT.

package roleservice

import (
	"context"
	role "gen/kitex_gen/Role"
	system "gen/kitex_gen/System"
	base "gen/kitex_gen/base"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateRole(ctx context.Context, req *role.CreateRoleReq, callOptions ...callopt.Option) (r *role.RoleResp, err error)
	GetRole(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *role.RoleResp, err error)
	LoginRole(ctx context.Context, req *base.CheckAccountReq, callOptions ...callopt.Option) (r *role.RoleResp, err error)
	GetRoleList(ctx context.Context, req *role.GetRoleListReq, callOptions ...callopt.Option) (r *role.RoleListResp, err error)
	UpdateRole(ctx context.Context, req *role.UpdateRoleReq, callOptions ...callopt.Option) (r *role.RoleResp, err error)
	DeleteRole(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *base.BaseResp, err error)
	CreateMenu(ctx context.Context, req *role.MenuAuthReq, callOptions ...callopt.Option) (r *base.BaseResp, err error)
	CreateApi(ctx context.Context, req *role.MenuAuthReq, callOptions ...callopt.Option) (r *base.BaseResp, err error)
	GetApi(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *system.MenuListResp, err error)
	GetMenu(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *system.MenuListResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kRoleServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kRoleServiceClient struct {
	*kClient
}

func (p *kRoleServiceClient) CreateRole(ctx context.Context, req *role.CreateRoleReq, callOptions ...callopt.Option) (r *role.RoleResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateRole(ctx, req)
}

func (p *kRoleServiceClient) GetRole(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *role.RoleResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRole(ctx, req)
}

func (p *kRoleServiceClient) LoginRole(ctx context.Context, req *base.CheckAccountReq, callOptions ...callopt.Option) (r *role.RoleResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LoginRole(ctx, req)
}

func (p *kRoleServiceClient) GetRoleList(ctx context.Context, req *role.GetRoleListReq, callOptions ...callopt.Option) (r *role.RoleListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRoleList(ctx, req)
}

func (p *kRoleServiceClient) UpdateRole(ctx context.Context, req *role.UpdateRoleReq, callOptions ...callopt.Option) (r *role.RoleResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateRole(ctx, req)
}

func (p *kRoleServiceClient) DeleteRole(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *base.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteRole(ctx, req)
}

func (p *kRoleServiceClient) CreateMenu(ctx context.Context, req *role.MenuAuthReq, callOptions ...callopt.Option) (r *base.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateMenu(ctx, req)
}

func (p *kRoleServiceClient) CreateApi(ctx context.Context, req *role.MenuAuthReq, callOptions ...callopt.Option) (r *base.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateApi(ctx, req)
}

func (p *kRoleServiceClient) GetApi(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *system.MenuListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetApi(ctx, req)
}

func (p *kRoleServiceClient) GetMenu(ctx context.Context, req *base.IdReq, callOptions ...callopt.Option) (r *system.MenuListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetMenu(ctx, req)
}
