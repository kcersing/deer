// Code generated by Kitex v0.15.1. DO NOT EDIT.

package roleservice

import (
	"context"
	"errors"
	role "gen/kitex_gen/Role"
	system "gen/kitex_gen/System"
	base "gen/kitex_gen/base"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateRole": kitex.NewMethodInfo(
		createRoleHandler,
		newRoleServiceCreateRoleArgs,
		newRoleServiceCreateRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetRole": kitex.NewMethodInfo(
		getRoleHandler,
		newRoleServiceGetRoleArgs,
		newRoleServiceGetRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"LoginRole": kitex.NewMethodInfo(
		loginRoleHandler,
		newRoleServiceLoginRoleArgs,
		newRoleServiceLoginRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetRoleList": kitex.NewMethodInfo(
		getRoleListHandler,
		newRoleServiceGetRoleListArgs,
		newRoleServiceGetRoleListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateRole": kitex.NewMethodInfo(
		updateRoleHandler,
		newRoleServiceUpdateRoleArgs,
		newRoleServiceUpdateRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteRole": kitex.NewMethodInfo(
		deleteRoleHandler,
		newRoleServiceDeleteRoleArgs,
		newRoleServiceDeleteRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateMenu": kitex.NewMethodInfo(
		createMenuHandler,
		newRoleServiceCreateMenuArgs,
		newRoleServiceCreateMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateApi": kitex.NewMethodInfo(
		createApiHandler,
		newRoleServiceCreateApiArgs,
		newRoleServiceCreateApiResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetApi": kitex.NewMethodInfo(
		getApiHandler,
		newRoleServiceGetApiArgs,
		newRoleServiceGetApiResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetMenu": kitex.NewMethodInfo(
		getMenuHandler,
		newRoleServiceGetMenuArgs,
		newRoleServiceGetMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	roleServiceServiceInfo                = NewServiceInfo()
	roleServiceServiceInfoForClient       = NewServiceInfoForClient()
	roleServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return roleServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return roleServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return roleServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "RoleService"
	handlerType := (*role.RoleService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "role",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func createRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.RoleServiceCreateRoleArgs)
	realResult := result.(*role.RoleServiceCreateRoleResult)
	success, err := handler.(role.RoleService).CreateRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRoleServiceCreateRoleArgs() interface{} {
	return role.NewRoleServiceCreateRoleArgs()
}

func newRoleServiceCreateRoleResult() interface{} {
	return role.NewRoleServiceCreateRoleResult()
}

func getRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.RoleServiceGetRoleArgs)
	realResult := result.(*role.RoleServiceGetRoleResult)
	success, err := handler.(role.RoleService).GetRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRoleServiceGetRoleArgs() interface{} {
	return role.NewRoleServiceGetRoleArgs()
}

func newRoleServiceGetRoleResult() interface{} {
	return role.NewRoleServiceGetRoleResult()
}

func loginRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.RoleServiceLoginRoleArgs)
	realResult := result.(*role.RoleServiceLoginRoleResult)
	success, err := handler.(role.RoleService).LoginRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRoleServiceLoginRoleArgs() interface{} {
	return role.NewRoleServiceLoginRoleArgs()
}

func newRoleServiceLoginRoleResult() interface{} {
	return role.NewRoleServiceLoginRoleResult()
}

func getRoleListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.RoleServiceGetRoleListArgs)
	realResult := result.(*role.RoleServiceGetRoleListResult)
	success, err := handler.(role.RoleService).GetRoleList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRoleServiceGetRoleListArgs() interface{} {
	return role.NewRoleServiceGetRoleListArgs()
}

func newRoleServiceGetRoleListResult() interface{} {
	return role.NewRoleServiceGetRoleListResult()
}

func updateRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.RoleServiceUpdateRoleArgs)
	realResult := result.(*role.RoleServiceUpdateRoleResult)
	success, err := handler.(role.RoleService).UpdateRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRoleServiceUpdateRoleArgs() interface{} {
	return role.NewRoleServiceUpdateRoleArgs()
}

func newRoleServiceUpdateRoleResult() interface{} {
	return role.NewRoleServiceUpdateRoleResult()
}

func deleteRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.RoleServiceDeleteRoleArgs)
	realResult := result.(*role.RoleServiceDeleteRoleResult)
	success, err := handler.(role.RoleService).DeleteRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRoleServiceDeleteRoleArgs() interface{} {
	return role.NewRoleServiceDeleteRoleArgs()
}

func newRoleServiceDeleteRoleResult() interface{} {
	return role.NewRoleServiceDeleteRoleResult()
}

func createMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.RoleServiceCreateMenuArgs)
	realResult := result.(*role.RoleServiceCreateMenuResult)
	success, err := handler.(role.RoleService).CreateMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRoleServiceCreateMenuArgs() interface{} {
	return role.NewRoleServiceCreateMenuArgs()
}

func newRoleServiceCreateMenuResult() interface{} {
	return role.NewRoleServiceCreateMenuResult()
}

func createApiHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.RoleServiceCreateApiArgs)
	realResult := result.(*role.RoleServiceCreateApiResult)
	success, err := handler.(role.RoleService).CreateApi(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRoleServiceCreateApiArgs() interface{} {
	return role.NewRoleServiceCreateApiArgs()
}

func newRoleServiceCreateApiResult() interface{} {
	return role.NewRoleServiceCreateApiResult()
}

func getApiHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.RoleServiceGetApiArgs)
	realResult := result.(*role.RoleServiceGetApiResult)
	success, err := handler.(role.RoleService).GetApi(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRoleServiceGetApiArgs() interface{} {
	return role.NewRoleServiceGetApiArgs()
}

func newRoleServiceGetApiResult() interface{} {
	return role.NewRoleServiceGetApiResult()
}

func getMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.RoleServiceGetMenuArgs)
	realResult := result.(*role.RoleServiceGetMenuResult)
	success, err := handler.(role.RoleService).GetMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRoleServiceGetMenuArgs() interface{} {
	return role.NewRoleServiceGetMenuArgs()
}

func newRoleServiceGetMenuResult() interface{} {
	return role.NewRoleServiceGetMenuResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateRole(ctx context.Context, req *role.CreateRoleReq) (r *role.RoleResp, err error) {
	var _args role.RoleServiceCreateRoleArgs
	_args.Req = req
	var _result role.RoleServiceCreateRoleResult
	if err = p.c.Call(ctx, "CreateRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRole(ctx context.Context, req *base.IdReq) (r *role.RoleResp, err error) {
	var _args role.RoleServiceGetRoleArgs
	_args.Req = req
	var _result role.RoleServiceGetRoleResult
	if err = p.c.Call(ctx, "GetRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoginRole(ctx context.Context, req *base.CheckAccountReq) (r *role.RoleResp, err error) {
	var _args role.RoleServiceLoginRoleArgs
	_args.Req = req
	var _result role.RoleServiceLoginRoleResult
	if err = p.c.Call(ctx, "LoginRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRoleList(ctx context.Context, req *role.GetRoleListReq) (r *role.RoleListResp, err error) {
	var _args role.RoleServiceGetRoleListArgs
	_args.Req = req
	var _result role.RoleServiceGetRoleListResult
	if err = p.c.Call(ctx, "GetRoleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateRole(ctx context.Context, req *role.UpdateRoleReq) (r *role.RoleResp, err error) {
	var _args role.RoleServiceUpdateRoleArgs
	_args.Req = req
	var _result role.RoleServiceUpdateRoleResult
	if err = p.c.Call(ctx, "UpdateRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteRole(ctx context.Context, req *base.IdReq) (r *base.BaseResp, err error) {
	var _args role.RoleServiceDeleteRoleArgs
	_args.Req = req
	var _result role.RoleServiceDeleteRoleResult
	if err = p.c.Call(ctx, "DeleteRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateMenu(ctx context.Context, req *role.MenuAuthReq) (r *base.BaseResp, err error) {
	var _args role.RoleServiceCreateMenuArgs
	_args.Req = req
	var _result role.RoleServiceCreateMenuResult
	if err = p.c.Call(ctx, "CreateMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateApi(ctx context.Context, req *role.MenuAuthReq) (r *base.BaseResp, err error) {
	var _args role.RoleServiceCreateApiArgs
	_args.Req = req
	var _result role.RoleServiceCreateApiResult
	if err = p.c.Call(ctx, "CreateApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetApi(ctx context.Context, req *base.IdReq) (r *system.MenuListResp, err error) {
	var _args role.RoleServiceGetApiArgs
	_args.Req = req
	var _result role.RoleServiceGetApiResult
	if err = p.c.Call(ctx, "GetApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMenu(ctx context.Context, req *base.IdReq) (r *system.MenuListResp, err error) {
	var _args role.RoleServiceGetMenuArgs
	_args.Req = req
	var _result role.RoleServiceGetMenuResult
	if err = p.c.Call(ctx, "GetMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
