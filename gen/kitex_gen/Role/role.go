// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package role

import (
	"context"
	"fmt"
	system "gen/kitex_gen/System"
	"gen/kitex_gen/base"
)

type Role struct {
	Id            *int64  `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name          *string `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Value         *string `thrift:"value,3,optional" frugal:"3,optional,string" json:"value,omitempty"`
	DefaultRouter *string `thrift:"defaultRouter,4,optional" frugal:"4,optional,string" json:"defaultRouter,omitempty"`
	Remark        *string `thrift:"remark,5,optional" frugal:"5,optional,string" json:"remark,omitempty"`
	Apis          []int64 `thrift:"apis,6,optional" frugal:"6,optional,list<i64>" json:"apis,omitempty"`
}

func NewRole() *Role {
	return &Role{}
}

func (p *Role) InitDefault() {
}

var Role_Id_DEFAULT int64

func (p *Role) GetId() (v int64) {
	if !p.IsSetId() {
		return Role_Id_DEFAULT
	}
	return *p.Id
}

var Role_Name_DEFAULT string

func (p *Role) GetName() (v string) {
	if !p.IsSetName() {
		return Role_Name_DEFAULT
	}
	return *p.Name
}

var Role_Value_DEFAULT string

func (p *Role) GetValue() (v string) {
	if !p.IsSetValue() {
		return Role_Value_DEFAULT
	}
	return *p.Value
}

var Role_DefaultRouter_DEFAULT string

func (p *Role) GetDefaultRouter() (v string) {
	if !p.IsSetDefaultRouter() {
		return Role_DefaultRouter_DEFAULT
	}
	return *p.DefaultRouter
}

var Role_Remark_DEFAULT string

func (p *Role) GetRemark() (v string) {
	if !p.IsSetRemark() {
		return Role_Remark_DEFAULT
	}
	return *p.Remark
}

var Role_Apis_DEFAULT []int64

func (p *Role) GetApis() (v []int64) {
	if !p.IsSetApis() {
		return Role_Apis_DEFAULT
	}
	return p.Apis
}
func (p *Role) SetId(val *int64) {
	p.Id = val
}
func (p *Role) SetName(val *string) {
	p.Name = val
}
func (p *Role) SetValue(val *string) {
	p.Value = val
}
func (p *Role) SetDefaultRouter(val *string) {
	p.DefaultRouter = val
}
func (p *Role) SetRemark(val *string) {
	p.Remark = val
}
func (p *Role) SetApis(val []int64) {
	p.Apis = val
}

func (p *Role) IsSetId() bool {
	return p.Id != nil
}

func (p *Role) IsSetName() bool {
	return p.Name != nil
}

func (p *Role) IsSetValue() bool {
	return p.Value != nil
}

func (p *Role) IsSetDefaultRouter() bool {
	return p.DefaultRouter != nil
}

func (p *Role) IsSetRemark() bool {
	return p.Remark != nil
}

func (p *Role) IsSetApis() bool {
	return p.Apis != nil
}

func (p *Role) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Role(%+v)", *p)
}

var fieldIDToName_Role = map[int16]string{
	1: "id",
	2: "name",
	3: "value",
	4: "defaultRouter",
	5: "remark",
	6: "apis",
}

type RoleResp struct {
	Data     *Role          `thrift:"data,1,optional" frugal:"1,optional,Role" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewRoleResp() *RoleResp {
	return &RoleResp{}
}

func (p *RoleResp) InitDefault() {
}

var RoleResp_Data_DEFAULT *Role

func (p *RoleResp) GetData() (v *Role) {
	if !p.IsSetData() {
		return RoleResp_Data_DEFAULT
	}
	return p.Data
}

var RoleResp_BaseResp_DEFAULT *base.BaseResp

func (p *RoleResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return RoleResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *RoleResp) SetData(val *Role) {
	p.Data = val
}
func (p *RoleResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *RoleResp) IsSetData() bool {
	return p.Data != nil
}

func (p *RoleResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *RoleResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleResp(%+v)", *p)
}

var fieldIDToName_RoleResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type RoleListResp struct {
	Data     []*Role        `thrift:"data,1,optional" frugal:"1,optional,list<Role>" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewRoleListResp() *RoleListResp {
	return &RoleListResp{}
}

func (p *RoleListResp) InitDefault() {
}

var RoleListResp_Data_DEFAULT []*Role

func (p *RoleListResp) GetData() (v []*Role) {
	if !p.IsSetData() {
		return RoleListResp_Data_DEFAULT
	}
	return p.Data
}

var RoleListResp_BaseResp_DEFAULT *base.BaseResp

func (p *RoleListResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return RoleListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *RoleListResp) SetData(val []*Role) {
	p.Data = val
}
func (p *RoleListResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *RoleListResp) IsSetData() bool {
	return p.Data != nil
}

func (p *RoleListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *RoleListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleListResp(%+v)", *p)
}

var fieldIDToName_RoleListResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type CreateRoleReq struct {
	Id            *int64  `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name          *string `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Value         *string `thrift:"value,3,optional" frugal:"3,optional,string" json:"value,omitempty"`
	DefaultRouter *string `thrift:"defaultRouter,4,optional" frugal:"4,optional,string" json:"defaultRouter,omitempty"`
	Remark        *string `thrift:"remark,5,optional" frugal:"5,optional,string" json:"remark,omitempty"`
	Apis          []int64 `thrift:"apis,6,optional" frugal:"6,optional,list<i64>" json:"apis,omitempty"`
}

func NewCreateRoleReq() *CreateRoleReq {
	return &CreateRoleReq{}
}

func (p *CreateRoleReq) InitDefault() {
}

var CreateRoleReq_Id_DEFAULT int64

func (p *CreateRoleReq) GetId() (v int64) {
	if !p.IsSetId() {
		return CreateRoleReq_Id_DEFAULT
	}
	return *p.Id
}

var CreateRoleReq_Name_DEFAULT string

func (p *CreateRoleReq) GetName() (v string) {
	if !p.IsSetName() {
		return CreateRoleReq_Name_DEFAULT
	}
	return *p.Name
}

var CreateRoleReq_Value_DEFAULT string

func (p *CreateRoleReq) GetValue() (v string) {
	if !p.IsSetValue() {
		return CreateRoleReq_Value_DEFAULT
	}
	return *p.Value
}

var CreateRoleReq_DefaultRouter_DEFAULT string

func (p *CreateRoleReq) GetDefaultRouter() (v string) {
	if !p.IsSetDefaultRouter() {
		return CreateRoleReq_DefaultRouter_DEFAULT
	}
	return *p.DefaultRouter
}

var CreateRoleReq_Remark_DEFAULT string

func (p *CreateRoleReq) GetRemark() (v string) {
	if !p.IsSetRemark() {
		return CreateRoleReq_Remark_DEFAULT
	}
	return *p.Remark
}

var CreateRoleReq_Apis_DEFAULT []int64

func (p *CreateRoleReq) GetApis() (v []int64) {
	if !p.IsSetApis() {
		return CreateRoleReq_Apis_DEFAULT
	}
	return p.Apis
}
func (p *CreateRoleReq) SetId(val *int64) {
	p.Id = val
}
func (p *CreateRoleReq) SetName(val *string) {
	p.Name = val
}
func (p *CreateRoleReq) SetValue(val *string) {
	p.Value = val
}
func (p *CreateRoleReq) SetDefaultRouter(val *string) {
	p.DefaultRouter = val
}
func (p *CreateRoleReq) SetRemark(val *string) {
	p.Remark = val
}
func (p *CreateRoleReq) SetApis(val []int64) {
	p.Apis = val
}

func (p *CreateRoleReq) IsSetId() bool {
	return p.Id != nil
}

func (p *CreateRoleReq) IsSetName() bool {
	return p.Name != nil
}

func (p *CreateRoleReq) IsSetValue() bool {
	return p.Value != nil
}

func (p *CreateRoleReq) IsSetDefaultRouter() bool {
	return p.DefaultRouter != nil
}

func (p *CreateRoleReq) IsSetRemark() bool {
	return p.Remark != nil
}

func (p *CreateRoleReq) IsSetApis() bool {
	return p.Apis != nil
}

func (p *CreateRoleReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateRoleReq(%+v)", *p)
}

var fieldIDToName_CreateRoleReq = map[int16]string{
	1: "id",
	2: "name",
	3: "value",
	4: "defaultRouter",
	5: "remark",
	6: "apis",
}

type GetRoleListReq struct {
	Pages *base.PageReq `thrift:"pages,1,optional" frugal:"1,optional,base.PageReq" json:"pages,omitempty"`
}

func NewGetRoleListReq() *GetRoleListReq {
	return &GetRoleListReq{}
}

func (p *GetRoleListReq) InitDefault() {
}

var GetRoleListReq_Pages_DEFAULT *base.PageReq

func (p *GetRoleListReq) GetPages() (v *base.PageReq) {
	if !p.IsSetPages() {
		return GetRoleListReq_Pages_DEFAULT
	}
	return p.Pages
}
func (p *GetRoleListReq) SetPages(val *base.PageReq) {
	p.Pages = val
}

func (p *GetRoleListReq) IsSetPages() bool {
	return p.Pages != nil
}

func (p *GetRoleListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoleListReq(%+v)", *p)
}

var fieldIDToName_GetRoleListReq = map[int16]string{
	1: "pages",
}

type UpdateRoleReq struct {
	Id            *int64  `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name          *string `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Value         *string `thrift:"value,3,optional" frugal:"3,optional,string" json:"value,omitempty"`
	DefaultRouter *string `thrift:"defaultRouter,4,optional" frugal:"4,optional,string" json:"defaultRouter,omitempty"`
	Remark        *string `thrift:"remark,5,optional" frugal:"5,optional,string" json:"remark,omitempty"`
	Apis          []int64 `thrift:"apis,6,optional" frugal:"6,optional,list<i64>" json:"apis,omitempty"`
}

func NewUpdateRoleReq() *UpdateRoleReq {
	return &UpdateRoleReq{}
}

func (p *UpdateRoleReq) InitDefault() {
}

var UpdateRoleReq_Id_DEFAULT int64

func (p *UpdateRoleReq) GetId() (v int64) {
	if !p.IsSetId() {
		return UpdateRoleReq_Id_DEFAULT
	}
	return *p.Id
}

var UpdateRoleReq_Name_DEFAULT string

func (p *UpdateRoleReq) GetName() (v string) {
	if !p.IsSetName() {
		return UpdateRoleReq_Name_DEFAULT
	}
	return *p.Name
}

var UpdateRoleReq_Value_DEFAULT string

func (p *UpdateRoleReq) GetValue() (v string) {
	if !p.IsSetValue() {
		return UpdateRoleReq_Value_DEFAULT
	}
	return *p.Value
}

var UpdateRoleReq_DefaultRouter_DEFAULT string

func (p *UpdateRoleReq) GetDefaultRouter() (v string) {
	if !p.IsSetDefaultRouter() {
		return UpdateRoleReq_DefaultRouter_DEFAULT
	}
	return *p.DefaultRouter
}

var UpdateRoleReq_Remark_DEFAULT string

func (p *UpdateRoleReq) GetRemark() (v string) {
	if !p.IsSetRemark() {
		return UpdateRoleReq_Remark_DEFAULT
	}
	return *p.Remark
}

var UpdateRoleReq_Apis_DEFAULT []int64

func (p *UpdateRoleReq) GetApis() (v []int64) {
	if !p.IsSetApis() {
		return UpdateRoleReq_Apis_DEFAULT
	}
	return p.Apis
}
func (p *UpdateRoleReq) SetId(val *int64) {
	p.Id = val
}
func (p *UpdateRoleReq) SetName(val *string) {
	p.Name = val
}
func (p *UpdateRoleReq) SetValue(val *string) {
	p.Value = val
}
func (p *UpdateRoleReq) SetDefaultRouter(val *string) {
	p.DefaultRouter = val
}
func (p *UpdateRoleReq) SetRemark(val *string) {
	p.Remark = val
}
func (p *UpdateRoleReq) SetApis(val []int64) {
	p.Apis = val
}

func (p *UpdateRoleReq) IsSetId() bool {
	return p.Id != nil
}

func (p *UpdateRoleReq) IsSetName() bool {
	return p.Name != nil
}

func (p *UpdateRoleReq) IsSetValue() bool {
	return p.Value != nil
}

func (p *UpdateRoleReq) IsSetDefaultRouter() bool {
	return p.DefaultRouter != nil
}

func (p *UpdateRoleReq) IsSetRemark() bool {
	return p.Remark != nil
}

func (p *UpdateRoleReq) IsSetApis() bool {
	return p.Apis != nil
}

func (p *UpdateRoleReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateRoleReq(%+v)", *p)
}

var fieldIDToName_UpdateRoleReq = map[int16]string{
	1: "id",
	2: "name",
	3: "value",
	4: "defaultRouter",
	5: "remark",
	6: "apis",
}

type MenuAuthReq struct {
	RoleId int64   `thrift:"roleId,1" frugal:"1,default,i64" json:"roleId"`
	Ids    []int64 `thrift:"Ids,2" frugal:"2,default,list<i64>" json:"Ids"`
}

func NewMenuAuthReq() *MenuAuthReq {
	return &MenuAuthReq{}
}

func (p *MenuAuthReq) InitDefault() {
}

func (p *MenuAuthReq) GetRoleId() (v int64) {
	return p.RoleId
}

func (p *MenuAuthReq) GetIds() (v []int64) {
	return p.Ids
}
func (p *MenuAuthReq) SetRoleId(val int64) {
	p.RoleId = val
}
func (p *MenuAuthReq) SetIds(val []int64) {
	p.Ids = val
}

func (p *MenuAuthReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuAuthReq(%+v)", *p)
}

var fieldIDToName_MenuAuthReq = map[int16]string{
	1: "roleId",
	2: "Ids",
}

type RoleService interface {
	CreateRole(ctx context.Context, req *CreateRoleReq) (r *RoleResp, err error)

	GetRole(ctx context.Context, req *base.IdReq) (r *RoleResp, err error)

	LoginRole(ctx context.Context, req *base.CheckAccountReq) (r *RoleResp, err error)

	GetRoleList(ctx context.Context, req *GetRoleListReq) (r *RoleListResp, err error)

	UpdateRole(ctx context.Context, req *UpdateRoleReq) (r *RoleResp, err error)

	DeleteRole(ctx context.Context, req *base.IdReq) (r *base.BaseResp, err error)

	CreateMenu(ctx context.Context, req *MenuAuthReq) (r *base.BaseResp, err error)

	CreateApi(ctx context.Context, req *MenuAuthReq) (r *base.BaseResp, err error)

	GetApi(ctx context.Context, req *base.IdReq) (r *system.MenuListResp, err error)

	GetMenu(ctx context.Context, req *base.IdReq) (r *system.MenuListResp, err error)
}

type RoleServiceCreateRoleArgs struct {
	Req *CreateRoleReq `thrift:"req,1" frugal:"1,default,CreateRoleReq" json:"req"`
}

func NewRoleServiceCreateRoleArgs() *RoleServiceCreateRoleArgs {
	return &RoleServiceCreateRoleArgs{}
}

func (p *RoleServiceCreateRoleArgs) InitDefault() {
}

var RoleServiceCreateRoleArgs_Req_DEFAULT *CreateRoleReq

func (p *RoleServiceCreateRoleArgs) GetReq() (v *CreateRoleReq) {
	if !p.IsSetReq() {
		return RoleServiceCreateRoleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoleServiceCreateRoleArgs) SetReq(val *CreateRoleReq) {
	p.Req = val
}

func (p *RoleServiceCreateRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoleServiceCreateRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceCreateRoleArgs(%+v)", *p)
}

var fieldIDToName_RoleServiceCreateRoleArgs = map[int16]string{
	1: "req",
}

type RoleServiceCreateRoleResult struct {
	Success *RoleResp `thrift:"success,0,optional" frugal:"0,optional,RoleResp" json:"success,omitempty"`
}

func NewRoleServiceCreateRoleResult() *RoleServiceCreateRoleResult {
	return &RoleServiceCreateRoleResult{}
}

func (p *RoleServiceCreateRoleResult) InitDefault() {
}

var RoleServiceCreateRoleResult_Success_DEFAULT *RoleResp

func (p *RoleServiceCreateRoleResult) GetSuccess() (v *RoleResp) {
	if !p.IsSetSuccess() {
		return RoleServiceCreateRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoleServiceCreateRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*RoleResp)
}

func (p *RoleServiceCreateRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoleServiceCreateRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceCreateRoleResult(%+v)", *p)
}

var fieldIDToName_RoleServiceCreateRoleResult = map[int16]string{
	0: "success",
}

type RoleServiceGetRoleArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewRoleServiceGetRoleArgs() *RoleServiceGetRoleArgs {
	return &RoleServiceGetRoleArgs{}
}

func (p *RoleServiceGetRoleArgs) InitDefault() {
}

var RoleServiceGetRoleArgs_Req_DEFAULT *base.IdReq

func (p *RoleServiceGetRoleArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return RoleServiceGetRoleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoleServiceGetRoleArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *RoleServiceGetRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoleServiceGetRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceGetRoleArgs(%+v)", *p)
}

var fieldIDToName_RoleServiceGetRoleArgs = map[int16]string{
	1: "req",
}

type RoleServiceGetRoleResult struct {
	Success *RoleResp `thrift:"success,0,optional" frugal:"0,optional,RoleResp" json:"success,omitempty"`
}

func NewRoleServiceGetRoleResult() *RoleServiceGetRoleResult {
	return &RoleServiceGetRoleResult{}
}

func (p *RoleServiceGetRoleResult) InitDefault() {
}

var RoleServiceGetRoleResult_Success_DEFAULT *RoleResp

func (p *RoleServiceGetRoleResult) GetSuccess() (v *RoleResp) {
	if !p.IsSetSuccess() {
		return RoleServiceGetRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoleServiceGetRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*RoleResp)
}

func (p *RoleServiceGetRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoleServiceGetRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceGetRoleResult(%+v)", *p)
}

var fieldIDToName_RoleServiceGetRoleResult = map[int16]string{
	0: "success",
}

type RoleServiceLoginRoleArgs struct {
	Req *base.CheckAccountReq `thrift:"req,1" frugal:"1,default,base.CheckAccountReq" json:"req"`
}

func NewRoleServiceLoginRoleArgs() *RoleServiceLoginRoleArgs {
	return &RoleServiceLoginRoleArgs{}
}

func (p *RoleServiceLoginRoleArgs) InitDefault() {
}

var RoleServiceLoginRoleArgs_Req_DEFAULT *base.CheckAccountReq

func (p *RoleServiceLoginRoleArgs) GetReq() (v *base.CheckAccountReq) {
	if !p.IsSetReq() {
		return RoleServiceLoginRoleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoleServiceLoginRoleArgs) SetReq(val *base.CheckAccountReq) {
	p.Req = val
}

func (p *RoleServiceLoginRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoleServiceLoginRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceLoginRoleArgs(%+v)", *p)
}

var fieldIDToName_RoleServiceLoginRoleArgs = map[int16]string{
	1: "req",
}

type RoleServiceLoginRoleResult struct {
	Success *RoleResp `thrift:"success,0,optional" frugal:"0,optional,RoleResp" json:"success,omitempty"`
}

func NewRoleServiceLoginRoleResult() *RoleServiceLoginRoleResult {
	return &RoleServiceLoginRoleResult{}
}

func (p *RoleServiceLoginRoleResult) InitDefault() {
}

var RoleServiceLoginRoleResult_Success_DEFAULT *RoleResp

func (p *RoleServiceLoginRoleResult) GetSuccess() (v *RoleResp) {
	if !p.IsSetSuccess() {
		return RoleServiceLoginRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoleServiceLoginRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*RoleResp)
}

func (p *RoleServiceLoginRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoleServiceLoginRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceLoginRoleResult(%+v)", *p)
}

var fieldIDToName_RoleServiceLoginRoleResult = map[int16]string{
	0: "success",
}

type RoleServiceGetRoleListArgs struct {
	Req *GetRoleListReq `thrift:"req,1" frugal:"1,default,GetRoleListReq" json:"req"`
}

func NewRoleServiceGetRoleListArgs() *RoleServiceGetRoleListArgs {
	return &RoleServiceGetRoleListArgs{}
}

func (p *RoleServiceGetRoleListArgs) InitDefault() {
}

var RoleServiceGetRoleListArgs_Req_DEFAULT *GetRoleListReq

func (p *RoleServiceGetRoleListArgs) GetReq() (v *GetRoleListReq) {
	if !p.IsSetReq() {
		return RoleServiceGetRoleListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoleServiceGetRoleListArgs) SetReq(val *GetRoleListReq) {
	p.Req = val
}

func (p *RoleServiceGetRoleListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoleServiceGetRoleListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceGetRoleListArgs(%+v)", *p)
}

var fieldIDToName_RoleServiceGetRoleListArgs = map[int16]string{
	1: "req",
}

type RoleServiceGetRoleListResult struct {
	Success *RoleListResp `thrift:"success,0,optional" frugal:"0,optional,RoleListResp" json:"success,omitempty"`
}

func NewRoleServiceGetRoleListResult() *RoleServiceGetRoleListResult {
	return &RoleServiceGetRoleListResult{}
}

func (p *RoleServiceGetRoleListResult) InitDefault() {
}

var RoleServiceGetRoleListResult_Success_DEFAULT *RoleListResp

func (p *RoleServiceGetRoleListResult) GetSuccess() (v *RoleListResp) {
	if !p.IsSetSuccess() {
		return RoleServiceGetRoleListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoleServiceGetRoleListResult) SetSuccess(x interface{}) {
	p.Success = x.(*RoleListResp)
}

func (p *RoleServiceGetRoleListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoleServiceGetRoleListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceGetRoleListResult(%+v)", *p)
}

var fieldIDToName_RoleServiceGetRoleListResult = map[int16]string{
	0: "success",
}

type RoleServiceUpdateRoleArgs struct {
	Req *UpdateRoleReq `thrift:"req,1" frugal:"1,default,UpdateRoleReq" json:"req"`
}

func NewRoleServiceUpdateRoleArgs() *RoleServiceUpdateRoleArgs {
	return &RoleServiceUpdateRoleArgs{}
}

func (p *RoleServiceUpdateRoleArgs) InitDefault() {
}

var RoleServiceUpdateRoleArgs_Req_DEFAULT *UpdateRoleReq

func (p *RoleServiceUpdateRoleArgs) GetReq() (v *UpdateRoleReq) {
	if !p.IsSetReq() {
		return RoleServiceUpdateRoleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoleServiceUpdateRoleArgs) SetReq(val *UpdateRoleReq) {
	p.Req = val
}

func (p *RoleServiceUpdateRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoleServiceUpdateRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceUpdateRoleArgs(%+v)", *p)
}

var fieldIDToName_RoleServiceUpdateRoleArgs = map[int16]string{
	1: "req",
}

type RoleServiceUpdateRoleResult struct {
	Success *RoleResp `thrift:"success,0,optional" frugal:"0,optional,RoleResp" json:"success,omitempty"`
}

func NewRoleServiceUpdateRoleResult() *RoleServiceUpdateRoleResult {
	return &RoleServiceUpdateRoleResult{}
}

func (p *RoleServiceUpdateRoleResult) InitDefault() {
}

var RoleServiceUpdateRoleResult_Success_DEFAULT *RoleResp

func (p *RoleServiceUpdateRoleResult) GetSuccess() (v *RoleResp) {
	if !p.IsSetSuccess() {
		return RoleServiceUpdateRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoleServiceUpdateRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*RoleResp)
}

func (p *RoleServiceUpdateRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoleServiceUpdateRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceUpdateRoleResult(%+v)", *p)
}

var fieldIDToName_RoleServiceUpdateRoleResult = map[int16]string{
	0: "success",
}

type RoleServiceDeleteRoleArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewRoleServiceDeleteRoleArgs() *RoleServiceDeleteRoleArgs {
	return &RoleServiceDeleteRoleArgs{}
}

func (p *RoleServiceDeleteRoleArgs) InitDefault() {
}

var RoleServiceDeleteRoleArgs_Req_DEFAULT *base.IdReq

func (p *RoleServiceDeleteRoleArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return RoleServiceDeleteRoleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoleServiceDeleteRoleArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *RoleServiceDeleteRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoleServiceDeleteRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceDeleteRoleArgs(%+v)", *p)
}

var fieldIDToName_RoleServiceDeleteRoleArgs = map[int16]string{
	1: "req",
}

type RoleServiceDeleteRoleResult struct {
	Success *base.BaseResp `thrift:"success,0,optional" frugal:"0,optional,base.BaseResp" json:"success,omitempty"`
}

func NewRoleServiceDeleteRoleResult() *RoleServiceDeleteRoleResult {
	return &RoleServiceDeleteRoleResult{}
}

func (p *RoleServiceDeleteRoleResult) InitDefault() {
}

var RoleServiceDeleteRoleResult_Success_DEFAULT *base.BaseResp

func (p *RoleServiceDeleteRoleResult) GetSuccess() (v *base.BaseResp) {
	if !p.IsSetSuccess() {
		return RoleServiceDeleteRoleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoleServiceDeleteRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.BaseResp)
}

func (p *RoleServiceDeleteRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoleServiceDeleteRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceDeleteRoleResult(%+v)", *p)
}

var fieldIDToName_RoleServiceDeleteRoleResult = map[int16]string{
	0: "success",
}

type RoleServiceCreateMenuArgs struct {
	Req *MenuAuthReq `thrift:"req,1" frugal:"1,default,MenuAuthReq" json:"req"`
}

func NewRoleServiceCreateMenuArgs() *RoleServiceCreateMenuArgs {
	return &RoleServiceCreateMenuArgs{}
}

func (p *RoleServiceCreateMenuArgs) InitDefault() {
}

var RoleServiceCreateMenuArgs_Req_DEFAULT *MenuAuthReq

func (p *RoleServiceCreateMenuArgs) GetReq() (v *MenuAuthReq) {
	if !p.IsSetReq() {
		return RoleServiceCreateMenuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoleServiceCreateMenuArgs) SetReq(val *MenuAuthReq) {
	p.Req = val
}

func (p *RoleServiceCreateMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoleServiceCreateMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceCreateMenuArgs(%+v)", *p)
}

var fieldIDToName_RoleServiceCreateMenuArgs = map[int16]string{
	1: "req",
}

type RoleServiceCreateMenuResult struct {
	Success *base.BaseResp `thrift:"success,0,optional" frugal:"0,optional,base.BaseResp" json:"success,omitempty"`
}

func NewRoleServiceCreateMenuResult() *RoleServiceCreateMenuResult {
	return &RoleServiceCreateMenuResult{}
}

func (p *RoleServiceCreateMenuResult) InitDefault() {
}

var RoleServiceCreateMenuResult_Success_DEFAULT *base.BaseResp

func (p *RoleServiceCreateMenuResult) GetSuccess() (v *base.BaseResp) {
	if !p.IsSetSuccess() {
		return RoleServiceCreateMenuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoleServiceCreateMenuResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.BaseResp)
}

func (p *RoleServiceCreateMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoleServiceCreateMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceCreateMenuResult(%+v)", *p)
}

var fieldIDToName_RoleServiceCreateMenuResult = map[int16]string{
	0: "success",
}

type RoleServiceCreateApiArgs struct {
	Req *MenuAuthReq `thrift:"req,1" frugal:"1,default,MenuAuthReq" json:"req"`
}

func NewRoleServiceCreateApiArgs() *RoleServiceCreateApiArgs {
	return &RoleServiceCreateApiArgs{}
}

func (p *RoleServiceCreateApiArgs) InitDefault() {
}

var RoleServiceCreateApiArgs_Req_DEFAULT *MenuAuthReq

func (p *RoleServiceCreateApiArgs) GetReq() (v *MenuAuthReq) {
	if !p.IsSetReq() {
		return RoleServiceCreateApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoleServiceCreateApiArgs) SetReq(val *MenuAuthReq) {
	p.Req = val
}

func (p *RoleServiceCreateApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoleServiceCreateApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceCreateApiArgs(%+v)", *p)
}

var fieldIDToName_RoleServiceCreateApiArgs = map[int16]string{
	1: "req",
}

type RoleServiceCreateApiResult struct {
	Success *base.BaseResp `thrift:"success,0,optional" frugal:"0,optional,base.BaseResp" json:"success,omitempty"`
}

func NewRoleServiceCreateApiResult() *RoleServiceCreateApiResult {
	return &RoleServiceCreateApiResult{}
}

func (p *RoleServiceCreateApiResult) InitDefault() {
}

var RoleServiceCreateApiResult_Success_DEFAULT *base.BaseResp

func (p *RoleServiceCreateApiResult) GetSuccess() (v *base.BaseResp) {
	if !p.IsSetSuccess() {
		return RoleServiceCreateApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoleServiceCreateApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.BaseResp)
}

func (p *RoleServiceCreateApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoleServiceCreateApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceCreateApiResult(%+v)", *p)
}

var fieldIDToName_RoleServiceCreateApiResult = map[int16]string{
	0: "success",
}

type RoleServiceGetApiArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewRoleServiceGetApiArgs() *RoleServiceGetApiArgs {
	return &RoleServiceGetApiArgs{}
}

func (p *RoleServiceGetApiArgs) InitDefault() {
}

var RoleServiceGetApiArgs_Req_DEFAULT *base.IdReq

func (p *RoleServiceGetApiArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return RoleServiceGetApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoleServiceGetApiArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *RoleServiceGetApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoleServiceGetApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceGetApiArgs(%+v)", *p)
}

var fieldIDToName_RoleServiceGetApiArgs = map[int16]string{
	1: "req",
}

type RoleServiceGetApiResult struct {
	Success *system.MenuListResp `thrift:"success,0,optional" frugal:"0,optional,system.MenuListResp" json:"success,omitempty"`
}

func NewRoleServiceGetApiResult() *RoleServiceGetApiResult {
	return &RoleServiceGetApiResult{}
}

func (p *RoleServiceGetApiResult) InitDefault() {
}

var RoleServiceGetApiResult_Success_DEFAULT *system.MenuListResp

func (p *RoleServiceGetApiResult) GetSuccess() (v *system.MenuListResp) {
	if !p.IsSetSuccess() {
		return RoleServiceGetApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoleServiceGetApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.MenuListResp)
}

func (p *RoleServiceGetApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoleServiceGetApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceGetApiResult(%+v)", *p)
}

var fieldIDToName_RoleServiceGetApiResult = map[int16]string{
	0: "success",
}

type RoleServiceGetMenuArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewRoleServiceGetMenuArgs() *RoleServiceGetMenuArgs {
	return &RoleServiceGetMenuArgs{}
}

func (p *RoleServiceGetMenuArgs) InitDefault() {
}

var RoleServiceGetMenuArgs_Req_DEFAULT *base.IdReq

func (p *RoleServiceGetMenuArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return RoleServiceGetMenuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoleServiceGetMenuArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *RoleServiceGetMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoleServiceGetMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceGetMenuArgs(%+v)", *p)
}

var fieldIDToName_RoleServiceGetMenuArgs = map[int16]string{
	1: "req",
}

type RoleServiceGetMenuResult struct {
	Success *system.MenuListResp `thrift:"success,0,optional" frugal:"0,optional,system.MenuListResp" json:"success,omitempty"`
}

func NewRoleServiceGetMenuResult() *RoleServiceGetMenuResult {
	return &RoleServiceGetMenuResult{}
}

func (p *RoleServiceGetMenuResult) InitDefault() {
}

var RoleServiceGetMenuResult_Success_DEFAULT *system.MenuListResp

func (p *RoleServiceGetMenuResult) GetSuccess() (v *system.MenuListResp) {
	if !p.IsSetSuccess() {
		return RoleServiceGetMenuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoleServiceGetMenuResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.MenuListResp)
}

func (p *RoleServiceGetMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoleServiceGetMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoleServiceGetMenuResult(%+v)", *p)
}

var fieldIDToName_RoleServiceGetMenuResult = map[int16]string{
	0: "success",
}
