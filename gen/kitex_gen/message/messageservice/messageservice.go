// Code generated by Kitex v0.15.1. DO NOT EDIT.

package messageservice

import (
	"context"
	"errors"
	base "gen/kitex_gen/base"
	message "gen/kitex_gen/message"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"ImgCaptcha": kitex.NewMethodInfo(
		imgCaptchaHandler,
		newMessageServiceImgCaptchaArgs,
		newMessageServiceImgCaptchaResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Sms": kitex.NewMethodInfo(
		smsHandler,
		newMessageServiceSmsArgs,
		newMessageServiceSmsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SmsList": kitex.NewMethodInfo(
		smsListHandler,
		newMessageServiceSmsListArgs,
		newMessageServiceSmsListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SendSms": kitex.NewMethodInfo(
		sendSmsHandler,
		newMessageServiceSendSmsArgs,
		newMessageServiceSendSmsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	messageServiceServiceInfo                = NewServiceInfo()
	messageServiceServiceInfoForClient       = NewServiceInfoForClient()
	messageServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return messageServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return messageServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return messageServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "MessageService"
	handlerType := (*message.MessageService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "message",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func imgCaptchaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	_ = arg.(*message.MessageServiceImgCaptchaArgs)
	realResult := result.(*message.MessageServiceImgCaptchaResult)
	success, err := handler.(message.MessageService).ImgCaptcha(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceImgCaptchaArgs() interface{} {
	return message.NewMessageServiceImgCaptchaArgs()
}

func newMessageServiceImgCaptchaResult() interface{} {
	return message.NewMessageServiceImgCaptchaResult()
}

func smsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceSmsArgs)
	realResult := result.(*message.MessageServiceSmsResult)
	success, err := handler.(message.MessageService).Sms(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceSmsArgs() interface{} {
	return message.NewMessageServiceSmsArgs()
}

func newMessageServiceSmsResult() interface{} {
	return message.NewMessageServiceSmsResult()
}

func smsListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceSmsListArgs)
	realResult := result.(*message.MessageServiceSmsListResult)
	success, err := handler.(message.MessageService).SmsList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceSmsListArgs() interface{} {
	return message.NewMessageServiceSmsListArgs()
}

func newMessageServiceSmsListResult() interface{} {
	return message.NewMessageServiceSmsListResult()
}

func sendSmsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceSendSmsArgs)
	realResult := result.(*message.MessageServiceSendSmsResult)
	success, err := handler.(message.MessageService).SendSms(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceSendSmsArgs() interface{} {
	return message.NewMessageServiceSendSmsArgs()
}

func newMessageServiceSendSmsResult() interface{} {
	return message.NewMessageServiceSendSmsResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ImgCaptcha(ctx context.Context) (r *base.NilResponse, err error) {
	var _args message.MessageServiceImgCaptchaArgs
	var _result message.MessageServiceImgCaptchaResult
	if err = p.c.Call(ctx, "ImgCaptcha", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Sms(ctx context.Context, req *base.IdReq) (r *message.SmsResp, err error) {
	var _args message.MessageServiceSmsArgs
	_args.Req = req
	var _result message.MessageServiceSmsResult
	if err = p.c.Call(ctx, "Sms", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SmsList(ctx context.Context, req *message.SendSmsListReq) (r *message.SendSmsListResp, err error) {
	var _args message.MessageServiceSmsListArgs
	_args.Req = req
	var _result message.MessageServiceSmsListResult
	if err = p.c.Call(ctx, "SmsList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendSms(ctx context.Context, req *message.SendSmsReq) (r *base.NilResponse, err error) {
	var _args message.MessageServiceSendSmsArgs
	_args.Req = req
	var _result message.MessageServiceSendSmsResult
	if err = p.c.Call(ctx, "SendSms", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
