// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package message

import (
	"context"
	"fmt"
	"gen/kitex_gen/base"
)

type SendSmsListReq struct {
	Page     int64  `thrift:"page,1,optional" frugal:"1,optional,i64" json:"page,omitempty"`
	PageSize int64  `thrift:"pageSize,2,optional" frugal:"2,optional,i64" json:"pageSize,omitempty"`
	Mobile   string `thrift:"mobile,3,optional" frugal:"3,optional,string" json:"mobile,omitempty"`
}

func NewSendSmsListReq() *SendSmsListReq {
	return &SendSmsListReq{
		Page:     1,
		PageSize: 100,
		Mobile:   "",
	}
}

func (p *SendSmsListReq) InitDefault() {
	p.Page = 1
	p.PageSize = 100
	p.Mobile = ""
}

var SendSmsListReq_Page_DEFAULT int64 = 1

func (p *SendSmsListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return SendSmsListReq_Page_DEFAULT
	}
	return p.Page
}

var SendSmsListReq_PageSize_DEFAULT int64 = 100

func (p *SendSmsListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return SendSmsListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var SendSmsListReq_Mobile_DEFAULT string = ""

func (p *SendSmsListReq) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return SendSmsListReq_Mobile_DEFAULT
	}
	return p.Mobile
}
func (p *SendSmsListReq) SetPage(val int64) {
	p.Page = val
}
func (p *SendSmsListReq) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *SendSmsListReq) SetMobile(val string) {
	p.Mobile = val
}

func (p *SendSmsListReq) IsSetPage() bool {
	return p.Page != SendSmsListReq_Page_DEFAULT
}

func (p *SendSmsListReq) IsSetPageSize() bool {
	return p.PageSize != SendSmsListReq_PageSize_DEFAULT
}

func (p *SendSmsListReq) IsSetMobile() bool {
	return p.Mobile != SendSmsListReq_Mobile_DEFAULT
}

func (p *SendSmsListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendSmsListReq(%+v)", *p)
}

var fieldIDToName_SendSmsListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "mobile",
}

type SmsSend struct {
	CreatedAt  string `thrift:"createdAt,1,optional" frugal:"1,optional,string" json:"createdAt,omitempty"`
	Status     int64  `thrift:"status,2,optional" frugal:"2,optional,i64" json:"status,omitempty"`
	Mobile     string `thrift:"mobile,3,optional" frugal:"3,optional,string" json:"mobile,omitempty"`
	Code       string `thrift:"code,5,optional" frugal:"5,optional,string" json:"code,omitempty"`
	BizId      string `thrift:"bizId,7,optional" frugal:"7,optional,string" json:"bizId,omitempty"`
	NotifyType int64  `thrift:"notifyType,8,optional" frugal:"8,optional,i64" json:"notifyType,omitempty"`
	Content    string `thrift:"content,9,optional" frugal:"9,optional,string" json:"content,omitempty"`
	Templates  string `thrift:"templates,10,optional" frugal:"10,optional,string" json:"templates,omitempty"`
}

func NewSmsSend() *SmsSend {
	return &SmsSend{
		CreatedAt:  "",
		Status:     0,
		Mobile:     "",
		Code:       "",
		BizId:      "",
		NotifyType: 1,
		Content:    "",
		Templates:  "",
	}
}

func (p *SmsSend) InitDefault() {
	p.CreatedAt = ""
	p.Status = 0
	p.Mobile = ""
	p.Code = ""
	p.BizId = ""
	p.NotifyType = 1
	p.Content = ""
	p.Templates = ""
}

var SmsSend_CreatedAt_DEFAULT string = ""

func (p *SmsSend) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return SmsSend_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var SmsSend_Status_DEFAULT int64 = 0

func (p *SmsSend) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return SmsSend_Status_DEFAULT
	}
	return p.Status
}

var SmsSend_Mobile_DEFAULT string = ""

func (p *SmsSend) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return SmsSend_Mobile_DEFAULT
	}
	return p.Mobile
}

var SmsSend_Code_DEFAULT string = ""

func (p *SmsSend) GetCode() (v string) {
	if !p.IsSetCode() {
		return SmsSend_Code_DEFAULT
	}
	return p.Code
}

var SmsSend_BizId_DEFAULT string = ""

func (p *SmsSend) GetBizId() (v string) {
	if !p.IsSetBizId() {
		return SmsSend_BizId_DEFAULT
	}
	return p.BizId
}

var SmsSend_NotifyType_DEFAULT int64 = 1

func (p *SmsSend) GetNotifyType() (v int64) {
	if !p.IsSetNotifyType() {
		return SmsSend_NotifyType_DEFAULT
	}
	return p.NotifyType
}

var SmsSend_Content_DEFAULT string = ""

func (p *SmsSend) GetContent() (v string) {
	if !p.IsSetContent() {
		return SmsSend_Content_DEFAULT
	}
	return p.Content
}

var SmsSend_Templates_DEFAULT string = ""

func (p *SmsSend) GetTemplates() (v string) {
	if !p.IsSetTemplates() {
		return SmsSend_Templates_DEFAULT
	}
	return p.Templates
}
func (p *SmsSend) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *SmsSend) SetStatus(val int64) {
	p.Status = val
}
func (p *SmsSend) SetMobile(val string) {
	p.Mobile = val
}
func (p *SmsSend) SetCode(val string) {
	p.Code = val
}
func (p *SmsSend) SetBizId(val string) {
	p.BizId = val
}
func (p *SmsSend) SetNotifyType(val int64) {
	p.NotifyType = val
}
func (p *SmsSend) SetContent(val string) {
	p.Content = val
}
func (p *SmsSend) SetTemplates(val string) {
	p.Templates = val
}

func (p *SmsSend) IsSetCreatedAt() bool {
	return p.CreatedAt != SmsSend_CreatedAt_DEFAULT
}

func (p *SmsSend) IsSetStatus() bool {
	return p.Status != SmsSend_Status_DEFAULT
}

func (p *SmsSend) IsSetMobile() bool {
	return p.Mobile != SmsSend_Mobile_DEFAULT
}

func (p *SmsSend) IsSetCode() bool {
	return p.Code != SmsSend_Code_DEFAULT
}

func (p *SmsSend) IsSetBizId() bool {
	return p.BizId != SmsSend_BizId_DEFAULT
}

func (p *SmsSend) IsSetNotifyType() bool {
	return p.NotifyType != SmsSend_NotifyType_DEFAULT
}

func (p *SmsSend) IsSetContent() bool {
	return p.Content != SmsSend_Content_DEFAULT
}

func (p *SmsSend) IsSetTemplates() bool {
	return p.Templates != SmsSend_Templates_DEFAULT
}

func (p *SmsSend) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SmsSend(%+v)", *p)
}

var fieldIDToName_SmsSend = map[int16]string{
	1:  "createdAt",
	2:  "status",
	3:  "mobile",
	5:  "code",
	7:  "bizId",
	8:  "notifyType",
	9:  "content",
	10: "templates",
}

type Sms struct {
	NoticeCount int64  `thrift:"noticeCount,1,optional" frugal:"1,optional,i64" json:"noticeCount,omitempty"`
	UsedNotice  int64  `thrift:"usedNotice,2,optional" frugal:"2,optional,i64" json:"usedNotice,omitempty"`
	CreatedAt   string `thrift:"createdAt,16,optional" frugal:"16,optional,string" json:"createdAt,omitempty"`
	UpdatedAt   string `thrift:"updatedAt,17,optional" frugal:"17,optional,string" json:"updatedAt,omitempty"`
}

func NewSms() *Sms {
	return &Sms{
		NoticeCount: 0,
		UsedNotice:  0,
		CreatedAt:   "",
		UpdatedAt:   "",
	}
}

func (p *Sms) InitDefault() {
	p.NoticeCount = 0
	p.UsedNotice = 0
	p.CreatedAt = ""
	p.UpdatedAt = ""
}

var Sms_NoticeCount_DEFAULT int64 = 0

func (p *Sms) GetNoticeCount() (v int64) {
	if !p.IsSetNoticeCount() {
		return Sms_NoticeCount_DEFAULT
	}
	return p.NoticeCount
}

var Sms_UsedNotice_DEFAULT int64 = 0

func (p *Sms) GetUsedNotice() (v int64) {
	if !p.IsSetUsedNotice() {
		return Sms_UsedNotice_DEFAULT
	}
	return p.UsedNotice
}

var Sms_CreatedAt_DEFAULT string = ""

func (p *Sms) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return Sms_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var Sms_UpdatedAt_DEFAULT string = ""

func (p *Sms) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return Sms_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}
func (p *Sms) SetNoticeCount(val int64) {
	p.NoticeCount = val
}
func (p *Sms) SetUsedNotice(val int64) {
	p.UsedNotice = val
}
func (p *Sms) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *Sms) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}

func (p *Sms) IsSetNoticeCount() bool {
	return p.NoticeCount != Sms_NoticeCount_DEFAULT
}

func (p *Sms) IsSetUsedNotice() bool {
	return p.UsedNotice != Sms_UsedNotice_DEFAULT
}

func (p *Sms) IsSetCreatedAt() bool {
	return p.CreatedAt != Sms_CreatedAt_DEFAULT
}

func (p *Sms) IsSetUpdatedAt() bool {
	return p.UpdatedAt != Sms_UpdatedAt_DEFAULT
}

func (p *Sms) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Sms(%+v)", *p)
}

var fieldIDToName_Sms = map[int16]string{
	1:  "noticeCount",
	2:  "usedNotice",
	16: "createdAt",
	17: "updatedAt",
}

type SmsResp struct {
	Data     *Sms           `thrift:"data,1,optional" frugal:"1,optional,Sms" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewSmsResp() *SmsResp {
	return &SmsResp{
		Data:     &Sms{},
		BaseResp: &base.BaseResp{},
	}
}

func (p *SmsResp) InitDefault() {
	p.Data = &Sms{}
	p.BaseResp = &base.BaseResp{}
}

var SmsResp_Data_DEFAULT *Sms = &Sms{}

func (p *SmsResp) GetData() (v *Sms) {
	if !p.IsSetData() {
		return SmsResp_Data_DEFAULT
	}
	return p.Data
}

var SmsResp_BaseResp_DEFAULT *base.BaseResp = &base.BaseResp{}

func (p *SmsResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return SmsResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *SmsResp) SetData(val *Sms) {
	p.Data = val
}
func (p *SmsResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *SmsResp) IsSetData() bool {
	return p.Data != nil
}

func (p *SmsResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *SmsResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SmsResp(%+v)", *p)
}

var fieldIDToName_SmsResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type SendSmsListResp struct {
	Data     []*SmsSend     `thrift:"data,1,optional" frugal:"1,optional,list<SmsSend>" json:"data,omitempty"`
	BaseResp *base.BaseResp `thrift:"baseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"baseResp,omitempty"`
}

func NewSendSmsListResp() *SendSmsListResp {
	return &SendSmsListResp{
		Data:     []*SmsSend{},
		BaseResp: &base.BaseResp{},
	}
}

func (p *SendSmsListResp) InitDefault() {
	p.Data = []*SmsSend{}
	p.BaseResp = &base.BaseResp{}
}

var SendSmsListResp_Data_DEFAULT []*SmsSend = []*SmsSend{}

func (p *SendSmsListResp) GetData() (v []*SmsSend) {
	if !p.IsSetData() {
		return SendSmsListResp_Data_DEFAULT
	}
	return p.Data
}

var SendSmsListResp_BaseResp_DEFAULT *base.BaseResp = &base.BaseResp{}

func (p *SendSmsListResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return SendSmsListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *SendSmsListResp) SetData(val []*SmsSend) {
	p.Data = val
}
func (p *SendSmsListResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *SendSmsListResp) IsSetData() bool {
	return p.Data != nil
}

func (p *SendSmsListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *SendSmsListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendSmsListResp(%+v)", *p)
}

var fieldIDToName_SendSmsListResp = map[int16]string{
	1:   "data",
	255: "baseResp",
}

type SendSmsReq struct {
	Mobile string `thrift:"mobile,1,optional" frugal:"1,optional,string" json:"mobile,omitempty"`
	Msg    string `thrift:"msg,2,optional" frugal:"2,optional,string" json:"msg,omitempty"`
}

func NewSendSmsReq() *SendSmsReq {
	return &SendSmsReq{
		Mobile: "",
		Msg:    "",
	}
}

func (p *SendSmsReq) InitDefault() {
	p.Mobile = ""
	p.Msg = ""
}

var SendSmsReq_Mobile_DEFAULT string = ""

func (p *SendSmsReq) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return SendSmsReq_Mobile_DEFAULT
	}
	return p.Mobile
}

var SendSmsReq_Msg_DEFAULT string = ""

func (p *SendSmsReq) GetMsg() (v string) {
	if !p.IsSetMsg() {
		return SendSmsReq_Msg_DEFAULT
	}
	return p.Msg
}
func (p *SendSmsReq) SetMobile(val string) {
	p.Mobile = val
}
func (p *SendSmsReq) SetMsg(val string) {
	p.Msg = val
}

func (p *SendSmsReq) IsSetMobile() bool {
	return p.Mobile != SendSmsReq_Mobile_DEFAULT
}

func (p *SendSmsReq) IsSetMsg() bool {
	return p.Msg != SendSmsReq_Msg_DEFAULT
}

func (p *SendSmsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendSmsReq(%+v)", *p)
}

var fieldIDToName_SendSmsReq = map[int16]string{
	1: "mobile",
	2: "msg",
}

type MessageService interface {
	ImgCaptcha(ctx context.Context) (r *base.NilResponse, err error)

	Sms(ctx context.Context, req *base.IdReq) (r *SmsResp, err error)

	SmsList(ctx context.Context, req *SendSmsListReq) (r *SendSmsListResp, err error)

	SendSms(ctx context.Context, req *SendSmsReq) (r *base.NilResponse, err error)
}

type MessageServiceImgCaptchaArgs struct {
}

func NewMessageServiceImgCaptchaArgs() *MessageServiceImgCaptchaArgs {
	return &MessageServiceImgCaptchaArgs{}
}

func (p *MessageServiceImgCaptchaArgs) InitDefault() {
}

func (p *MessageServiceImgCaptchaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageServiceImgCaptchaArgs(%+v)", *p)
}

var fieldIDToName_MessageServiceImgCaptchaArgs = map[int16]string{}

type MessageServiceImgCaptchaResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewMessageServiceImgCaptchaResult() *MessageServiceImgCaptchaResult {
	return &MessageServiceImgCaptchaResult{}
}

func (p *MessageServiceImgCaptchaResult) InitDefault() {
}

var MessageServiceImgCaptchaResult_Success_DEFAULT *base.NilResponse

func (p *MessageServiceImgCaptchaResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MessageServiceImgCaptchaResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MessageServiceImgCaptchaResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

func (p *MessageServiceImgCaptchaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MessageServiceImgCaptchaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageServiceImgCaptchaResult(%+v)", *p)
}

var fieldIDToName_MessageServiceImgCaptchaResult = map[int16]string{
	0: "success",
}

type MessageServiceSmsArgs struct {
	Req *base.IdReq `thrift:"req,1" frugal:"1,default,base.IdReq" json:"req"`
}

func NewMessageServiceSmsArgs() *MessageServiceSmsArgs {
	return &MessageServiceSmsArgs{}
}

func (p *MessageServiceSmsArgs) InitDefault() {
}

var MessageServiceSmsArgs_Req_DEFAULT *base.IdReq

func (p *MessageServiceSmsArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return MessageServiceSmsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MessageServiceSmsArgs) SetReq(val *base.IdReq) {
	p.Req = val
}

func (p *MessageServiceSmsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MessageServiceSmsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageServiceSmsArgs(%+v)", *p)
}

var fieldIDToName_MessageServiceSmsArgs = map[int16]string{
	1: "req",
}

type MessageServiceSmsResult struct {
	Success *SmsResp `thrift:"success,0,optional" frugal:"0,optional,SmsResp" json:"success,omitempty"`
}

func NewMessageServiceSmsResult() *MessageServiceSmsResult {
	return &MessageServiceSmsResult{}
}

func (p *MessageServiceSmsResult) InitDefault() {
}

var MessageServiceSmsResult_Success_DEFAULT *SmsResp

func (p *MessageServiceSmsResult) GetSuccess() (v *SmsResp) {
	if !p.IsSetSuccess() {
		return MessageServiceSmsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MessageServiceSmsResult) SetSuccess(x interface{}) {
	p.Success = x.(*SmsResp)
}

func (p *MessageServiceSmsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MessageServiceSmsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageServiceSmsResult(%+v)", *p)
}

var fieldIDToName_MessageServiceSmsResult = map[int16]string{
	0: "success",
}

type MessageServiceSmsListArgs struct {
	Req *SendSmsListReq `thrift:"req,1" frugal:"1,default,SendSmsListReq" json:"req"`
}

func NewMessageServiceSmsListArgs() *MessageServiceSmsListArgs {
	return &MessageServiceSmsListArgs{}
}

func (p *MessageServiceSmsListArgs) InitDefault() {
}

var MessageServiceSmsListArgs_Req_DEFAULT *SendSmsListReq

func (p *MessageServiceSmsListArgs) GetReq() (v *SendSmsListReq) {
	if !p.IsSetReq() {
		return MessageServiceSmsListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MessageServiceSmsListArgs) SetReq(val *SendSmsListReq) {
	p.Req = val
}

func (p *MessageServiceSmsListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MessageServiceSmsListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageServiceSmsListArgs(%+v)", *p)
}

var fieldIDToName_MessageServiceSmsListArgs = map[int16]string{
	1: "req",
}

type MessageServiceSmsListResult struct {
	Success *SendSmsListResp `thrift:"success,0,optional" frugal:"0,optional,SendSmsListResp" json:"success,omitempty"`
}

func NewMessageServiceSmsListResult() *MessageServiceSmsListResult {
	return &MessageServiceSmsListResult{}
}

func (p *MessageServiceSmsListResult) InitDefault() {
}

var MessageServiceSmsListResult_Success_DEFAULT *SendSmsListResp

func (p *MessageServiceSmsListResult) GetSuccess() (v *SendSmsListResp) {
	if !p.IsSetSuccess() {
		return MessageServiceSmsListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MessageServiceSmsListResult) SetSuccess(x interface{}) {
	p.Success = x.(*SendSmsListResp)
}

func (p *MessageServiceSmsListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MessageServiceSmsListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageServiceSmsListResult(%+v)", *p)
}

var fieldIDToName_MessageServiceSmsListResult = map[int16]string{
	0: "success",
}

type MessageServiceSendSmsArgs struct {
	Req *SendSmsReq `thrift:"req,1" frugal:"1,default,SendSmsReq" json:"req"`
}

func NewMessageServiceSendSmsArgs() *MessageServiceSendSmsArgs {
	return &MessageServiceSendSmsArgs{}
}

func (p *MessageServiceSendSmsArgs) InitDefault() {
}

var MessageServiceSendSmsArgs_Req_DEFAULT *SendSmsReq

func (p *MessageServiceSendSmsArgs) GetReq() (v *SendSmsReq) {
	if !p.IsSetReq() {
		return MessageServiceSendSmsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MessageServiceSendSmsArgs) SetReq(val *SendSmsReq) {
	p.Req = val
}

func (p *MessageServiceSendSmsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MessageServiceSendSmsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageServiceSendSmsArgs(%+v)", *p)
}

var fieldIDToName_MessageServiceSendSmsArgs = map[int16]string{
	1: "req",
}

type MessageServiceSendSmsResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewMessageServiceSendSmsResult() *MessageServiceSendSmsResult {
	return &MessageServiceSendSmsResult{}
}

func (p *MessageServiceSendSmsResult) InitDefault() {
}

var MessageServiceSendSmsResult_Success_DEFAULT *base.NilResponse

func (p *MessageServiceSendSmsResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MessageServiceSendSmsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MessageServiceSendSmsResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

func (p *MessageServiceSendSmsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MessageServiceSendSmsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageServiceSendSmsResult(%+v)", *p)
}

var fieldIDToName_MessageServiceSendSmsResult = map[int16]string{
	0: "success",
}
