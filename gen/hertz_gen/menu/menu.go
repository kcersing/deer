// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package menu

import (
	"context"
	"fmt"
	"gen/hertz_gen/base"
	"github.com/apache/thrift/lib/go/thrift"
)

type CreateMenuReq struct {
	Name      string `thrift:"name,2,optional" form:"name" json:"name,omitempty" query:"name" vd:"len($) > 0 && len($) < 33>"`
	ParentId  int64  `thrift:"parentId,3,optional" form:"parentId" json:"parentId,omitempty" query:"parentId"`
	Level     int64  `thrift:"level,4,optional" form:"level" json:"level,omitempty" query:"level"`
	Path      string `thrift:"path,5,optional" form:"path" json:"path,omitempty" query:"path"`
	Redirect  string `thrift:"redirect,6,optional" form:"redirect" json:"redirect,omitempty" query:"redirect"`
	Component string `thrift:"component,7,optional" form:"component" json:"component,omitempty" query:"component"`
	MenuType  int64  `thrift:"menuType,8,optional" form:"menuType" json:"menuType,omitempty" query:"menuType"`
	Hidden    int64  `thrift:"hidden,9,optional" form:"hidden" json:"hidden,omitempty" query:"hidden"`
	Sort      int64  `thrift:"sort,10,optional" form:"sort" json:"sort,omitempty" query:"sort"`
	Status    int64  `thrift:"status,12,optional" form:"status" json:"status,omitempty" query:"status"`
	URL       string `thrift:"url,13,optional" form:"url" json:"url,omitempty" query:"url"`
	CreatedAt string `thrift:"createdAt,15,optional" form:"createdAt" json:"createdAt,omitempty" query:"createdAt"`
	UpdatedAt string `thrift:"updatedAt,16,optional" form:"updatedAt" json:"updatedAt,omitempty" query:"updatedAt"`
	Title     string `thrift:"title,17,optional" form:"title" json:"title,omitempty" query:"title"`
	Type      string `thrift:"type,19,optional" form:"type" json:"type,omitempty" query:"type"`
}

func NewCreateMenuReq() *CreateMenuReq {
	return &CreateMenuReq{
		Name:      "",
		ParentId:  0,
		Level:     0,
		Path:      "",
		Redirect:  "",
		Component: "",
		MenuType:  0,
		Hidden:    0,
		Sort:      0,
		Status:    1,
		URL:       "",
		CreatedAt: "",
		UpdatedAt: "",
		Title:     "",
		Type:      "",
	}
}

func (p *CreateMenuReq) InitDefault() {
	p.Name = ""
	p.ParentId = 0
	p.Level = 0
	p.Path = ""
	p.Redirect = ""
	p.Component = ""
	p.MenuType = 0
	p.Hidden = 0
	p.Sort = 0
	p.Status = 1
	p.URL = ""
	p.CreatedAt = ""
	p.UpdatedAt = ""
	p.Title = ""
	p.Type = ""
}

var CreateMenuReq_Name_DEFAULT string = ""

func (p *CreateMenuReq) GetName() (v string) {
	if !p.IsSetName() {
		return CreateMenuReq_Name_DEFAULT
	}
	return p.Name
}

var CreateMenuReq_ParentId_DEFAULT int64 = 0

func (p *CreateMenuReq) GetParentId() (v int64) {
	if !p.IsSetParentId() {
		return CreateMenuReq_ParentId_DEFAULT
	}
	return p.ParentId
}

var CreateMenuReq_Level_DEFAULT int64 = 0

func (p *CreateMenuReq) GetLevel() (v int64) {
	if !p.IsSetLevel() {
		return CreateMenuReq_Level_DEFAULT
	}
	return p.Level
}

var CreateMenuReq_Path_DEFAULT string = ""

func (p *CreateMenuReq) GetPath() (v string) {
	if !p.IsSetPath() {
		return CreateMenuReq_Path_DEFAULT
	}
	return p.Path
}

var CreateMenuReq_Redirect_DEFAULT string = ""

func (p *CreateMenuReq) GetRedirect() (v string) {
	if !p.IsSetRedirect() {
		return CreateMenuReq_Redirect_DEFAULT
	}
	return p.Redirect
}

var CreateMenuReq_Component_DEFAULT string = ""

func (p *CreateMenuReq) GetComponent() (v string) {
	if !p.IsSetComponent() {
		return CreateMenuReq_Component_DEFAULT
	}
	return p.Component
}

var CreateMenuReq_MenuType_DEFAULT int64 = 0

func (p *CreateMenuReq) GetMenuType() (v int64) {
	if !p.IsSetMenuType() {
		return CreateMenuReq_MenuType_DEFAULT
	}
	return p.MenuType
}

var CreateMenuReq_Hidden_DEFAULT int64 = 0

func (p *CreateMenuReq) GetHidden() (v int64) {
	if !p.IsSetHidden() {
		return CreateMenuReq_Hidden_DEFAULT
	}
	return p.Hidden
}

var CreateMenuReq_Sort_DEFAULT int64 = 0

func (p *CreateMenuReq) GetSort() (v int64) {
	if !p.IsSetSort() {
		return CreateMenuReq_Sort_DEFAULT
	}
	return p.Sort
}

var CreateMenuReq_Status_DEFAULT int64 = 1

func (p *CreateMenuReq) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return CreateMenuReq_Status_DEFAULT
	}
	return p.Status
}

var CreateMenuReq_URL_DEFAULT string = ""

func (p *CreateMenuReq) GetURL() (v string) {
	if !p.IsSetURL() {
		return CreateMenuReq_URL_DEFAULT
	}
	return p.URL
}

var CreateMenuReq_CreatedAt_DEFAULT string = ""

func (p *CreateMenuReq) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return CreateMenuReq_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var CreateMenuReq_UpdatedAt_DEFAULT string = ""

func (p *CreateMenuReq) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return CreateMenuReq_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var CreateMenuReq_Title_DEFAULT string = ""

func (p *CreateMenuReq) GetTitle() (v string) {
	if !p.IsSetTitle() {
		return CreateMenuReq_Title_DEFAULT
	}
	return p.Title
}

var CreateMenuReq_Type_DEFAULT string = ""

func (p *CreateMenuReq) GetType() (v string) {
	if !p.IsSetType() {
		return CreateMenuReq_Type_DEFAULT
	}
	return p.Type
}

var fieldIDToName_CreateMenuReq = map[int16]string{
	2:  "name",
	3:  "parentId",
	4:  "level",
	5:  "path",
	6:  "redirect",
	7:  "component",
	8:  "menuType",
	9:  "hidden",
	10: "sort",
	12: "status",
	13: "url",
	15: "createdAt",
	16: "updatedAt",
	17: "title",
	19: "type",
}

func (p *CreateMenuReq) IsSetName() bool {
	return p.Name != CreateMenuReq_Name_DEFAULT
}

func (p *CreateMenuReq) IsSetParentId() bool {
	return p.ParentId != CreateMenuReq_ParentId_DEFAULT
}

func (p *CreateMenuReq) IsSetLevel() bool {
	return p.Level != CreateMenuReq_Level_DEFAULT
}

func (p *CreateMenuReq) IsSetPath() bool {
	return p.Path != CreateMenuReq_Path_DEFAULT
}

func (p *CreateMenuReq) IsSetRedirect() bool {
	return p.Redirect != CreateMenuReq_Redirect_DEFAULT
}

func (p *CreateMenuReq) IsSetComponent() bool {
	return p.Component != CreateMenuReq_Component_DEFAULT
}

func (p *CreateMenuReq) IsSetMenuType() bool {
	return p.MenuType != CreateMenuReq_MenuType_DEFAULT
}

func (p *CreateMenuReq) IsSetHidden() bool {
	return p.Hidden != CreateMenuReq_Hidden_DEFAULT
}

func (p *CreateMenuReq) IsSetSort() bool {
	return p.Sort != CreateMenuReq_Sort_DEFAULT
}

func (p *CreateMenuReq) IsSetStatus() bool {
	return p.Status != CreateMenuReq_Status_DEFAULT
}

func (p *CreateMenuReq) IsSetURL() bool {
	return p.URL != CreateMenuReq_URL_DEFAULT
}

func (p *CreateMenuReq) IsSetCreatedAt() bool {
	return p.CreatedAt != CreateMenuReq_CreatedAt_DEFAULT
}

func (p *CreateMenuReq) IsSetUpdatedAt() bool {
	return p.UpdatedAt != CreateMenuReq_UpdatedAt_DEFAULT
}

func (p *CreateMenuReq) IsSetTitle() bool {
	return p.Title != CreateMenuReq_Title_DEFAULT
}

func (p *CreateMenuReq) IsSetType() bool {
	return p.Type != CreateMenuReq_Type_DEFAULT
}

func (p *CreateMenuReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateMenuReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateMenuReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CreateMenuReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ParentId = _field
	return nil
}
func (p *CreateMenuReq) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Level = _field
	return nil
}
func (p *CreateMenuReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Path = _field
	return nil
}
func (p *CreateMenuReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Redirect = _field
	return nil
}
func (p *CreateMenuReq) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Component = _field
	return nil
}
func (p *CreateMenuReq) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MenuType = _field
	return nil
}
func (p *CreateMenuReq) ReadField9(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Hidden = _field
	return nil
}
func (p *CreateMenuReq) ReadField10(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Sort = _field
	return nil
}
func (p *CreateMenuReq) ReadField12(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *CreateMenuReq) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.URL = _field
	return nil
}
func (p *CreateMenuReq) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *CreateMenuReq) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *CreateMenuReq) ReadField17(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Title = _field
	return nil
}
func (p *CreateMenuReq) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}

func (p *CreateMenuReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateMenuReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateMenuReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateMenuReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetParentId() {
		if err = oprot.WriteFieldBegin("parentId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ParentId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateMenuReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLevel() {
		if err = oprot.WriteFieldBegin("level", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Level); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateMenuReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err = oprot.WriteFieldBegin("path", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Path); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateMenuReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetRedirect() {
		if err = oprot.WriteFieldBegin("redirect", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Redirect); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateMenuReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetComponent() {
		if err = oprot.WriteFieldBegin("component", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Component); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateMenuReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMenuType() {
		if err = oprot.WriteFieldBegin("menuType", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MenuType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateMenuReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetHidden() {
		if err = oprot.WriteFieldBegin("hidden", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Hidden); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateMenuReq) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSort() {
		if err = oprot.WriteFieldBegin("sort", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Sort); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CreateMenuReq) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *CreateMenuReq) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetURL() {
		if err = oprot.WriteFieldBegin("url", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.URL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *CreateMenuReq) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *CreateMenuReq) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updatedAt", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *CreateMenuReq) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err = oprot.WriteFieldBegin("title", thrift.STRING, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Title); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *CreateMenuReq) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *CreateMenuReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateMenuReq(%+v)", *p)

}

type UpdateMenuReq struct {
	ID        int64  `thrift:"id,1,optional" form:"id" json:"id,omitempty" query:"id"`
	Name      string `thrift:"name,2,optional" form:"name" json:"name,omitempty" query:"name" vd:"len($) > 0 && len($) < 33>"`
	ParentId  int64  `thrift:"parentId,3,optional" form:"parentId" json:"parentId,omitempty" query:"parentId"`
	Level     int64  `thrift:"level,4,optional" form:"level" json:"level,omitempty" query:"level"`
	Path      string `thrift:"path,5,optional" form:"path" json:"path,omitempty" query:"path"`
	Redirect  string `thrift:"redirect,6,optional" form:"redirect" json:"redirect,omitempty" query:"redirect"`
	Component string `thrift:"component,7,optional" form:"component" json:"component,omitempty" query:"component"`
	MenuType  int64  `thrift:"menuType,8,optional" form:"menuType" json:"menuType,omitempty" query:"menuType"`
	Hidden    int64  `thrift:"hidden,9,optional" form:"hidden" json:"hidden,omitempty" query:"hidden"`
	Sort      int64  `thrift:"sort,10,optional" form:"sort" json:"sort,omitempty" query:"sort"`
	Status    int64  `thrift:"status,12,optional" form:"status" json:"status,omitempty" query:"status"`
	URL       string `thrift:"url,13,optional" form:"url" json:"url,omitempty" query:"url"`
	CreatedAt string `thrift:"createdAt,15,optional" form:"createdAt" json:"createdAt,omitempty" query:"createdAt"`
	UpdatedAt string `thrift:"updatedAt,16,optional" form:"updatedAt" json:"updatedAt,omitempty" query:"updatedAt"`
	Title     string `thrift:"title,17,optional" form:"title" json:"title,omitempty" query:"title"`
	Type      string `thrift:"type,19,optional" form:"type" json:"type,omitempty" query:"type"`
}

func NewUpdateMenuReq() *UpdateMenuReq {
	return &UpdateMenuReq{
		ID:        0,
		Name:      "",
		ParentId:  0,
		Level:     0,
		Path:      "",
		Redirect:  "",
		Component: "",
		MenuType:  0,
		Hidden:    0,
		Sort:      0,
		Status:    1,
		URL:       "",
		CreatedAt: "",
		UpdatedAt: "",
		Title:     "",
		Type:      "",
	}
}

func (p *UpdateMenuReq) InitDefault() {
	p.ID = 0
	p.Name = ""
	p.ParentId = 0
	p.Level = 0
	p.Path = ""
	p.Redirect = ""
	p.Component = ""
	p.MenuType = 0
	p.Hidden = 0
	p.Sort = 0
	p.Status = 1
	p.URL = ""
	p.CreatedAt = ""
	p.UpdatedAt = ""
	p.Title = ""
	p.Type = ""
}

var UpdateMenuReq_ID_DEFAULT int64 = 0

func (p *UpdateMenuReq) GetID() (v int64) {
	if !p.IsSetID() {
		return UpdateMenuReq_ID_DEFAULT
	}
	return p.ID
}

var UpdateMenuReq_Name_DEFAULT string = ""

func (p *UpdateMenuReq) GetName() (v string) {
	if !p.IsSetName() {
		return UpdateMenuReq_Name_DEFAULT
	}
	return p.Name
}

var UpdateMenuReq_ParentId_DEFAULT int64 = 0

func (p *UpdateMenuReq) GetParentId() (v int64) {
	if !p.IsSetParentId() {
		return UpdateMenuReq_ParentId_DEFAULT
	}
	return p.ParentId
}

var UpdateMenuReq_Level_DEFAULT int64 = 0

func (p *UpdateMenuReq) GetLevel() (v int64) {
	if !p.IsSetLevel() {
		return UpdateMenuReq_Level_DEFAULT
	}
	return p.Level
}

var UpdateMenuReq_Path_DEFAULT string = ""

func (p *UpdateMenuReq) GetPath() (v string) {
	if !p.IsSetPath() {
		return UpdateMenuReq_Path_DEFAULT
	}
	return p.Path
}

var UpdateMenuReq_Redirect_DEFAULT string = ""

func (p *UpdateMenuReq) GetRedirect() (v string) {
	if !p.IsSetRedirect() {
		return UpdateMenuReq_Redirect_DEFAULT
	}
	return p.Redirect
}

var UpdateMenuReq_Component_DEFAULT string = ""

func (p *UpdateMenuReq) GetComponent() (v string) {
	if !p.IsSetComponent() {
		return UpdateMenuReq_Component_DEFAULT
	}
	return p.Component
}

var UpdateMenuReq_MenuType_DEFAULT int64 = 0

func (p *UpdateMenuReq) GetMenuType() (v int64) {
	if !p.IsSetMenuType() {
		return UpdateMenuReq_MenuType_DEFAULT
	}
	return p.MenuType
}

var UpdateMenuReq_Hidden_DEFAULT int64 = 0

func (p *UpdateMenuReq) GetHidden() (v int64) {
	if !p.IsSetHidden() {
		return UpdateMenuReq_Hidden_DEFAULT
	}
	return p.Hidden
}

var UpdateMenuReq_Sort_DEFAULT int64 = 0

func (p *UpdateMenuReq) GetSort() (v int64) {
	if !p.IsSetSort() {
		return UpdateMenuReq_Sort_DEFAULT
	}
	return p.Sort
}

var UpdateMenuReq_Status_DEFAULT int64 = 1

func (p *UpdateMenuReq) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return UpdateMenuReq_Status_DEFAULT
	}
	return p.Status
}

var UpdateMenuReq_URL_DEFAULT string = ""

func (p *UpdateMenuReq) GetURL() (v string) {
	if !p.IsSetURL() {
		return UpdateMenuReq_URL_DEFAULT
	}
	return p.URL
}

var UpdateMenuReq_CreatedAt_DEFAULT string = ""

func (p *UpdateMenuReq) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return UpdateMenuReq_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var UpdateMenuReq_UpdatedAt_DEFAULT string = ""

func (p *UpdateMenuReq) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return UpdateMenuReq_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var UpdateMenuReq_Title_DEFAULT string = ""

func (p *UpdateMenuReq) GetTitle() (v string) {
	if !p.IsSetTitle() {
		return UpdateMenuReq_Title_DEFAULT
	}
	return p.Title
}

var UpdateMenuReq_Type_DEFAULT string = ""

func (p *UpdateMenuReq) GetType() (v string) {
	if !p.IsSetType() {
		return UpdateMenuReq_Type_DEFAULT
	}
	return p.Type
}

var fieldIDToName_UpdateMenuReq = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "parentId",
	4:  "level",
	5:  "path",
	6:  "redirect",
	7:  "component",
	8:  "menuType",
	9:  "hidden",
	10: "sort",
	12: "status",
	13: "url",
	15: "createdAt",
	16: "updatedAt",
	17: "title",
	19: "type",
}

func (p *UpdateMenuReq) IsSetID() bool {
	return p.ID != UpdateMenuReq_ID_DEFAULT
}

func (p *UpdateMenuReq) IsSetName() bool {
	return p.Name != UpdateMenuReq_Name_DEFAULT
}

func (p *UpdateMenuReq) IsSetParentId() bool {
	return p.ParentId != UpdateMenuReq_ParentId_DEFAULT
}

func (p *UpdateMenuReq) IsSetLevel() bool {
	return p.Level != UpdateMenuReq_Level_DEFAULT
}

func (p *UpdateMenuReq) IsSetPath() bool {
	return p.Path != UpdateMenuReq_Path_DEFAULT
}

func (p *UpdateMenuReq) IsSetRedirect() bool {
	return p.Redirect != UpdateMenuReq_Redirect_DEFAULT
}

func (p *UpdateMenuReq) IsSetComponent() bool {
	return p.Component != UpdateMenuReq_Component_DEFAULT
}

func (p *UpdateMenuReq) IsSetMenuType() bool {
	return p.MenuType != UpdateMenuReq_MenuType_DEFAULT
}

func (p *UpdateMenuReq) IsSetHidden() bool {
	return p.Hidden != UpdateMenuReq_Hidden_DEFAULT
}

func (p *UpdateMenuReq) IsSetSort() bool {
	return p.Sort != UpdateMenuReq_Sort_DEFAULT
}

func (p *UpdateMenuReq) IsSetStatus() bool {
	return p.Status != UpdateMenuReq_Status_DEFAULT
}

func (p *UpdateMenuReq) IsSetURL() bool {
	return p.URL != UpdateMenuReq_URL_DEFAULT
}

func (p *UpdateMenuReq) IsSetCreatedAt() bool {
	return p.CreatedAt != UpdateMenuReq_CreatedAt_DEFAULT
}

func (p *UpdateMenuReq) IsSetUpdatedAt() bool {
	return p.UpdatedAt != UpdateMenuReq_UpdatedAt_DEFAULT
}

func (p *UpdateMenuReq) IsSetTitle() bool {
	return p.Title != UpdateMenuReq_Title_DEFAULT
}

func (p *UpdateMenuReq) IsSetType() bool {
	return p.Type != UpdateMenuReq_Type_DEFAULT
}

func (p *UpdateMenuReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateMenuReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateMenuReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *UpdateMenuReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *UpdateMenuReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ParentId = _field
	return nil
}
func (p *UpdateMenuReq) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Level = _field
	return nil
}
func (p *UpdateMenuReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Path = _field
	return nil
}
func (p *UpdateMenuReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Redirect = _field
	return nil
}
func (p *UpdateMenuReq) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Component = _field
	return nil
}
func (p *UpdateMenuReq) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MenuType = _field
	return nil
}
func (p *UpdateMenuReq) ReadField9(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Hidden = _field
	return nil
}
func (p *UpdateMenuReq) ReadField10(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Sort = _field
	return nil
}
func (p *UpdateMenuReq) ReadField12(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *UpdateMenuReq) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.URL = _field
	return nil
}
func (p *UpdateMenuReq) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *UpdateMenuReq) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *UpdateMenuReq) ReadField17(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Title = _field
	return nil
}
func (p *UpdateMenuReq) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}

func (p *UpdateMenuReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMenuReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateMenuReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetParentId() {
		if err = oprot.WriteFieldBegin("parentId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ParentId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLevel() {
		if err = oprot.WriteFieldBegin("level", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Level); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err = oprot.WriteFieldBegin("path", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Path); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetRedirect() {
		if err = oprot.WriteFieldBegin("redirect", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Redirect); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetComponent() {
		if err = oprot.WriteFieldBegin("component", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Component); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMenuType() {
		if err = oprot.WriteFieldBegin("menuType", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MenuType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetHidden() {
		if err = oprot.WriteFieldBegin("hidden", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Hidden); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSort() {
		if err = oprot.WriteFieldBegin("sort", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Sort); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetURL() {
		if err = oprot.WriteFieldBegin("url", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.URL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updatedAt", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err = oprot.WriteFieldBegin("title", thrift.STRING, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Title); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *UpdateMenuReq) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *UpdateMenuReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateMenuReq(%+v)", *p)

}

type MenuListReq struct {
	Page     int64 `thrift:"page,1,optional" form:"page" json:"page,omitempty" query:"page"`
	PageSize int64 `thrift:"pageSize,2,optional" form:"pageSize" json:"pageSize,omitempty" query:"pageSize"`
}

func NewMenuListReq() *MenuListReq {
	return &MenuListReq{
		Page:     1,
		PageSize: 100,
	}
}

func (p *MenuListReq) InitDefault() {
	p.Page = 1
	p.PageSize = 100
}

var MenuListReq_Page_DEFAULT int64 = 1

func (p *MenuListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return MenuListReq_Page_DEFAULT
	}
	return p.Page
}

var MenuListReq_PageSize_DEFAULT int64 = 100

func (p *MenuListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return MenuListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var fieldIDToName_MenuListReq = map[int16]string{
	1: "page",
	2: "pageSize",
}

func (p *MenuListReq) IsSetPage() bool {
	return p.Page != MenuListReq_Page_DEFAULT
}

func (p *MenuListReq) IsSetPageSize() bool {
	return p.PageSize != MenuListReq_PageSize_DEFAULT
}

func (p *MenuListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MenuListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MenuListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *MenuListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}

func (p *MenuListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MenuListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MenuListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MenuListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MenuListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuListReq(%+v)", *p)

}

type MenuService interface {
	CreateMenu(ctx context.Context, req *CreateMenuReq) (r *base.NilResponse, err error)

	UpdateMenu(ctx context.Context, req *UpdateMenuReq) (r *base.NilResponse, err error)

	DeleteMenu(ctx context.Context, req *base.IdReq) (r *base.NilResponse, err error)

	GetMenu(ctx context.Context, req *base.IdReq) (r *base.NilResponse, err error)

	MenuList(ctx context.Context, req *MenuListReq) (r *base.NilResponse, err error)

	MenuTree(ctx context.Context, req *MenuListReq) (r *base.NilResponse, err error)
}

type MenuServiceClient struct {
	c thrift.TClient
}

func NewMenuServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MenuServiceClient {
	return &MenuServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMenuServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MenuServiceClient {
	return &MenuServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMenuServiceClient(c thrift.TClient) *MenuServiceClient {
	return &MenuServiceClient{
		c: c,
	}
}

func (p *MenuServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *MenuServiceClient) CreateMenu(ctx context.Context, req *CreateMenuReq) (r *base.NilResponse, err error) {
	var _args MenuServiceCreateMenuArgs
	_args.Req = req
	var _result MenuServiceCreateMenuResult
	if err = p.Client_().Call(ctx, "CreateMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MenuServiceClient) UpdateMenu(ctx context.Context, req *UpdateMenuReq) (r *base.NilResponse, err error) {
	var _args MenuServiceUpdateMenuArgs
	_args.Req = req
	var _result MenuServiceUpdateMenuResult
	if err = p.Client_().Call(ctx, "UpdateMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MenuServiceClient) DeleteMenu(ctx context.Context, req *base.IdReq) (r *base.NilResponse, err error) {
	var _args MenuServiceDeleteMenuArgs
	_args.Req = req
	var _result MenuServiceDeleteMenuResult
	if err = p.Client_().Call(ctx, "DeleteMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MenuServiceClient) GetMenu(ctx context.Context, req *base.IdReq) (r *base.NilResponse, err error) {
	var _args MenuServiceGetMenuArgs
	_args.Req = req
	var _result MenuServiceGetMenuResult
	if err = p.Client_().Call(ctx, "GetMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MenuServiceClient) MenuList(ctx context.Context, req *MenuListReq) (r *base.NilResponse, err error) {
	var _args MenuServiceMenuListArgs
	_args.Req = req
	var _result MenuServiceMenuListResult
	if err = p.Client_().Call(ctx, "MenuList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MenuServiceClient) MenuTree(ctx context.Context, req *MenuListReq) (r *base.NilResponse, err error) {
	var _args MenuServiceMenuTreeArgs
	_args.Req = req
	var _result MenuServiceMenuTreeResult
	if err = p.Client_().Call(ctx, "MenuTree", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type MenuServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MenuService
}

func (p *MenuServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MenuServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MenuServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMenuServiceProcessor(handler MenuService) *MenuServiceProcessor {
	self := &MenuServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateMenu", &menuServiceProcessorCreateMenu{handler: handler})
	self.AddToProcessorMap("UpdateMenu", &menuServiceProcessorUpdateMenu{handler: handler})
	self.AddToProcessorMap("DeleteMenu", &menuServiceProcessorDeleteMenu{handler: handler})
	self.AddToProcessorMap("GetMenu", &menuServiceProcessorGetMenu{handler: handler})
	self.AddToProcessorMap("MenuList", &menuServiceProcessorMenuList{handler: handler})
	self.AddToProcessorMap("MenuTree", &menuServiceProcessorMenuTree{handler: handler})
	return self
}
func (p *MenuServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type menuServiceProcessorCreateMenu struct {
	handler MenuService
}

func (p *menuServiceProcessorCreateMenu) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MenuServiceCreateMenuArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateMenu", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MenuServiceCreateMenuResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.CreateMenu(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateMenu: "+err2.Error())
		oprot.WriteMessageBegin("CreateMenu", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateMenu", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type menuServiceProcessorUpdateMenu struct {
	handler MenuService
}

func (p *menuServiceProcessorUpdateMenu) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MenuServiceUpdateMenuArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateMenu", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MenuServiceUpdateMenuResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateMenu(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateMenu: "+err2.Error())
		oprot.WriteMessageBegin("UpdateMenu", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateMenu", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type menuServiceProcessorDeleteMenu struct {
	handler MenuService
}

func (p *menuServiceProcessorDeleteMenu) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MenuServiceDeleteMenuArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteMenu", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MenuServiceDeleteMenuResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.DeleteMenu(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteMenu: "+err2.Error())
		oprot.WriteMessageBegin("DeleteMenu", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteMenu", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type menuServiceProcessorGetMenu struct {
	handler MenuService
}

func (p *menuServiceProcessorGetMenu) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MenuServiceGetMenuArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetMenu", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MenuServiceGetMenuResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.GetMenu(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetMenu: "+err2.Error())
		oprot.WriteMessageBegin("GetMenu", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetMenu", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type menuServiceProcessorMenuList struct {
	handler MenuService
}

func (p *menuServiceProcessorMenuList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MenuServiceMenuListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MenuList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MenuServiceMenuListResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MenuList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MenuList: "+err2.Error())
		oprot.WriteMessageBegin("MenuList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MenuList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type menuServiceProcessorMenuTree struct {
	handler MenuService
}

func (p *menuServiceProcessorMenuTree) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MenuServiceMenuTreeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MenuTree", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MenuServiceMenuTreeResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MenuTree(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MenuTree: "+err2.Error())
		oprot.WriteMessageBegin("MenuTree", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MenuTree", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type MenuServiceCreateMenuArgs struct {
	Req *CreateMenuReq `thrift:"req,1"`
}

func NewMenuServiceCreateMenuArgs() *MenuServiceCreateMenuArgs {
	return &MenuServiceCreateMenuArgs{}
}

func (p *MenuServiceCreateMenuArgs) InitDefault() {
}

var MenuServiceCreateMenuArgs_Req_DEFAULT *CreateMenuReq

func (p *MenuServiceCreateMenuArgs) GetReq() (v *CreateMenuReq) {
	if !p.IsSetReq() {
		return MenuServiceCreateMenuArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MenuServiceCreateMenuArgs = map[int16]string{
	1: "req",
}

func (p *MenuServiceCreateMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MenuServiceCreateMenuArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MenuServiceCreateMenuArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MenuServiceCreateMenuArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateMenuReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MenuServiceCreateMenuArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateMenu_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MenuServiceCreateMenuArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MenuServiceCreateMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuServiceCreateMenuArgs(%+v)", *p)

}

type MenuServiceCreateMenuResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMenuServiceCreateMenuResult() *MenuServiceCreateMenuResult {
	return &MenuServiceCreateMenuResult{}
}

func (p *MenuServiceCreateMenuResult) InitDefault() {
}

var MenuServiceCreateMenuResult_Success_DEFAULT *base.NilResponse

func (p *MenuServiceCreateMenuResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MenuServiceCreateMenuResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MenuServiceCreateMenuResult = map[int16]string{
	0: "success",
}

func (p *MenuServiceCreateMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MenuServiceCreateMenuResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MenuServiceCreateMenuResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MenuServiceCreateMenuResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MenuServiceCreateMenuResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateMenu_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MenuServiceCreateMenuResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MenuServiceCreateMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuServiceCreateMenuResult(%+v)", *p)

}

type MenuServiceUpdateMenuArgs struct {
	Req *UpdateMenuReq `thrift:"req,1"`
}

func NewMenuServiceUpdateMenuArgs() *MenuServiceUpdateMenuArgs {
	return &MenuServiceUpdateMenuArgs{}
}

func (p *MenuServiceUpdateMenuArgs) InitDefault() {
}

var MenuServiceUpdateMenuArgs_Req_DEFAULT *UpdateMenuReq

func (p *MenuServiceUpdateMenuArgs) GetReq() (v *UpdateMenuReq) {
	if !p.IsSetReq() {
		return MenuServiceUpdateMenuArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MenuServiceUpdateMenuArgs = map[int16]string{
	1: "req",
}

func (p *MenuServiceUpdateMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MenuServiceUpdateMenuArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MenuServiceUpdateMenuArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MenuServiceUpdateMenuArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateMenuReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MenuServiceUpdateMenuArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMenu_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MenuServiceUpdateMenuArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MenuServiceUpdateMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuServiceUpdateMenuArgs(%+v)", *p)

}

type MenuServiceUpdateMenuResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMenuServiceUpdateMenuResult() *MenuServiceUpdateMenuResult {
	return &MenuServiceUpdateMenuResult{}
}

func (p *MenuServiceUpdateMenuResult) InitDefault() {
}

var MenuServiceUpdateMenuResult_Success_DEFAULT *base.NilResponse

func (p *MenuServiceUpdateMenuResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MenuServiceUpdateMenuResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MenuServiceUpdateMenuResult = map[int16]string{
	0: "success",
}

func (p *MenuServiceUpdateMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MenuServiceUpdateMenuResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MenuServiceUpdateMenuResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MenuServiceUpdateMenuResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MenuServiceUpdateMenuResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMenu_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MenuServiceUpdateMenuResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MenuServiceUpdateMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuServiceUpdateMenuResult(%+v)", *p)

}

type MenuServiceDeleteMenuArgs struct {
	Req *base.IdReq `thrift:"req,1"`
}

func NewMenuServiceDeleteMenuArgs() *MenuServiceDeleteMenuArgs {
	return &MenuServiceDeleteMenuArgs{}
}

func (p *MenuServiceDeleteMenuArgs) InitDefault() {
}

var MenuServiceDeleteMenuArgs_Req_DEFAULT *base.IdReq

func (p *MenuServiceDeleteMenuArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return MenuServiceDeleteMenuArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MenuServiceDeleteMenuArgs = map[int16]string{
	1: "req",
}

func (p *MenuServiceDeleteMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MenuServiceDeleteMenuArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MenuServiceDeleteMenuArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MenuServiceDeleteMenuArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIdReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MenuServiceDeleteMenuArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteMenu_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MenuServiceDeleteMenuArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MenuServiceDeleteMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuServiceDeleteMenuArgs(%+v)", *p)

}

type MenuServiceDeleteMenuResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMenuServiceDeleteMenuResult() *MenuServiceDeleteMenuResult {
	return &MenuServiceDeleteMenuResult{}
}

func (p *MenuServiceDeleteMenuResult) InitDefault() {
}

var MenuServiceDeleteMenuResult_Success_DEFAULT *base.NilResponse

func (p *MenuServiceDeleteMenuResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MenuServiceDeleteMenuResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MenuServiceDeleteMenuResult = map[int16]string{
	0: "success",
}

func (p *MenuServiceDeleteMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MenuServiceDeleteMenuResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MenuServiceDeleteMenuResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MenuServiceDeleteMenuResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MenuServiceDeleteMenuResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteMenu_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MenuServiceDeleteMenuResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MenuServiceDeleteMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuServiceDeleteMenuResult(%+v)", *p)

}

type MenuServiceGetMenuArgs struct {
	Req *base.IdReq `thrift:"req,1"`
}

func NewMenuServiceGetMenuArgs() *MenuServiceGetMenuArgs {
	return &MenuServiceGetMenuArgs{}
}

func (p *MenuServiceGetMenuArgs) InitDefault() {
}

var MenuServiceGetMenuArgs_Req_DEFAULT *base.IdReq

func (p *MenuServiceGetMenuArgs) GetReq() (v *base.IdReq) {
	if !p.IsSetReq() {
		return MenuServiceGetMenuArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MenuServiceGetMenuArgs = map[int16]string{
	1: "req",
}

func (p *MenuServiceGetMenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MenuServiceGetMenuArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MenuServiceGetMenuArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MenuServiceGetMenuArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIdReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MenuServiceGetMenuArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMenu_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MenuServiceGetMenuArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MenuServiceGetMenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuServiceGetMenuArgs(%+v)", *p)

}

type MenuServiceGetMenuResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMenuServiceGetMenuResult() *MenuServiceGetMenuResult {
	return &MenuServiceGetMenuResult{}
}

func (p *MenuServiceGetMenuResult) InitDefault() {
}

var MenuServiceGetMenuResult_Success_DEFAULT *base.NilResponse

func (p *MenuServiceGetMenuResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MenuServiceGetMenuResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MenuServiceGetMenuResult = map[int16]string{
	0: "success",
}

func (p *MenuServiceGetMenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MenuServiceGetMenuResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MenuServiceGetMenuResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MenuServiceGetMenuResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MenuServiceGetMenuResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMenu_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MenuServiceGetMenuResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MenuServiceGetMenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuServiceGetMenuResult(%+v)", *p)

}

type MenuServiceMenuListArgs struct {
	Req *MenuListReq `thrift:"req,1"`
}

func NewMenuServiceMenuListArgs() *MenuServiceMenuListArgs {
	return &MenuServiceMenuListArgs{}
}

func (p *MenuServiceMenuListArgs) InitDefault() {
}

var MenuServiceMenuListArgs_Req_DEFAULT *MenuListReq

func (p *MenuServiceMenuListArgs) GetReq() (v *MenuListReq) {
	if !p.IsSetReq() {
		return MenuServiceMenuListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MenuServiceMenuListArgs = map[int16]string{
	1: "req",
}

func (p *MenuServiceMenuListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MenuServiceMenuListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MenuServiceMenuListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MenuServiceMenuListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMenuListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MenuServiceMenuListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MenuList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MenuServiceMenuListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MenuServiceMenuListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuServiceMenuListArgs(%+v)", *p)

}

type MenuServiceMenuListResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMenuServiceMenuListResult() *MenuServiceMenuListResult {
	return &MenuServiceMenuListResult{}
}

func (p *MenuServiceMenuListResult) InitDefault() {
}

var MenuServiceMenuListResult_Success_DEFAULT *base.NilResponse

func (p *MenuServiceMenuListResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MenuServiceMenuListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MenuServiceMenuListResult = map[int16]string{
	0: "success",
}

func (p *MenuServiceMenuListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MenuServiceMenuListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MenuServiceMenuListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MenuServiceMenuListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MenuServiceMenuListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MenuList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MenuServiceMenuListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MenuServiceMenuListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuServiceMenuListResult(%+v)", *p)

}

type MenuServiceMenuTreeArgs struct {
	Req *MenuListReq `thrift:"req,1"`
}

func NewMenuServiceMenuTreeArgs() *MenuServiceMenuTreeArgs {
	return &MenuServiceMenuTreeArgs{}
}

func (p *MenuServiceMenuTreeArgs) InitDefault() {
}

var MenuServiceMenuTreeArgs_Req_DEFAULT *MenuListReq

func (p *MenuServiceMenuTreeArgs) GetReq() (v *MenuListReq) {
	if !p.IsSetReq() {
		return MenuServiceMenuTreeArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MenuServiceMenuTreeArgs = map[int16]string{
	1: "req",
}

func (p *MenuServiceMenuTreeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MenuServiceMenuTreeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MenuServiceMenuTreeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MenuServiceMenuTreeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMenuListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MenuServiceMenuTreeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MenuTree_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MenuServiceMenuTreeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MenuServiceMenuTreeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuServiceMenuTreeArgs(%+v)", *p)

}

type MenuServiceMenuTreeResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMenuServiceMenuTreeResult() *MenuServiceMenuTreeResult {
	return &MenuServiceMenuTreeResult{}
}

func (p *MenuServiceMenuTreeResult) InitDefault() {
}

var MenuServiceMenuTreeResult_Success_DEFAULT *base.NilResponse

func (p *MenuServiceMenuTreeResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MenuServiceMenuTreeResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MenuServiceMenuTreeResult = map[int16]string{
	0: "success",
}

func (p *MenuServiceMenuTreeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MenuServiceMenuTreeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MenuServiceMenuTreeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MenuServiceMenuTreeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MenuServiceMenuTreeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MenuTree_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MenuServiceMenuTreeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MenuServiceMenuTreeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MenuServiceMenuTreeResult(%+v)", *p)

}
